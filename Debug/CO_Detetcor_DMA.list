
CO_Detetcor_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0a4  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d44  0800b160  0800b160  0001b160  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dea4  0800dea4  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800dea4  0800dea4  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dea4  0800dea4  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dea4  0800dea4  0001dea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dea8  0800dea8  0001dea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800deac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000055c  200001e8  0800e094  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000744  0800e094  00020744  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002f0d3  00000000  00000000  00020253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005aee  00000000  00000000  0004f326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00012f18  00000000  00000000  00054e14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000018a8  00000000  00000000  00067d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000019e1  00000000  00000000  000695d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001bf20  00000000  00000000  0006afb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003080d  00000000  00000000  00086ed9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a6290  00000000  00000000  000b76e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005f54  00000000  00000000  0015d978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  001638cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200001e8 	.word	0x200001e8
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800b144 	.word	0x0800b144

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200001ec 	.word	0x200001ec
 80000fc:	0800b144 	.word	0x0800b144

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			; (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	; 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	; 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	; 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	0010      	movs	r0, r2
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	0019      	movs	r1, r3
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f001 f8dd 	bl	80015f4 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 f82d 	bl	80014a4 <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f001 f8cf 	bl	80015f4 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 f8c5 	bl	80015f4 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 f855 	bl	8001528 <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 f84b 	bl	8001528 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_d2uiz>:
 80004a0:	b570      	push	{r4, r5, r6, lr}
 80004a2:	2200      	movs	r2, #0
 80004a4:	4b0c      	ldr	r3, [pc, #48]	; (80004d8 <__aeabi_d2uiz+0x38>)
 80004a6:	0004      	movs	r4, r0
 80004a8:	000d      	movs	r5, r1
 80004aa:	f7ff ffef 	bl	800048c <__aeabi_dcmpge>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d104      	bne.n	80004bc <__aeabi_d2uiz+0x1c>
 80004b2:	0020      	movs	r0, r4
 80004b4:	0029      	movs	r1, r5
 80004b6:	f001 ff63 	bl	8002380 <__aeabi_d2iz>
 80004ba:	bd70      	pop	{r4, r5, r6, pc}
 80004bc:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <__aeabi_d2uiz+0x38>)
 80004be:	2200      	movs	r2, #0
 80004c0:	0020      	movs	r0, r4
 80004c2:	0029      	movs	r1, r5
 80004c4:	f001 fbbc 	bl	8001c40 <__aeabi_dsub>
 80004c8:	f001 ff5a 	bl	8002380 <__aeabi_d2iz>
 80004cc:	2380      	movs	r3, #128	; 0x80
 80004ce:	061b      	lsls	r3, r3, #24
 80004d0:	469c      	mov	ip, r3
 80004d2:	4460      	add	r0, ip
 80004d4:	e7f1      	b.n	80004ba <__aeabi_d2uiz+0x1a>
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	41e00000 	.word	0x41e00000

080004dc <__aeabi_fmul>:
 80004dc:	0243      	lsls	r3, r0, #9
 80004de:	0a5b      	lsrs	r3, r3, #9
 80004e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e2:	464f      	mov	r7, r9
 80004e4:	4646      	mov	r6, r8
 80004e6:	4699      	mov	r9, r3
 80004e8:	46d6      	mov	lr, sl
 80004ea:	0fc3      	lsrs	r3, r0, #31
 80004ec:	0045      	lsls	r5, r0, #1
 80004ee:	4698      	mov	r8, r3
 80004f0:	b5c0      	push	{r6, r7, lr}
 80004f2:	464b      	mov	r3, r9
 80004f4:	1c0f      	adds	r7, r1, #0
 80004f6:	0e2d      	lsrs	r5, r5, #24
 80004f8:	d100      	bne.n	80004fc <__aeabi_fmul+0x20>
 80004fa:	e0cb      	b.n	8000694 <__aeabi_fmul+0x1b8>
 80004fc:	2dff      	cmp	r5, #255	; 0xff
 80004fe:	d100      	bne.n	8000502 <__aeabi_fmul+0x26>
 8000500:	e0cf      	b.n	80006a2 <__aeabi_fmul+0x1c6>
 8000502:	2280      	movs	r2, #128	; 0x80
 8000504:	00db      	lsls	r3, r3, #3
 8000506:	04d2      	lsls	r2, r2, #19
 8000508:	431a      	orrs	r2, r3
 800050a:	2300      	movs	r3, #0
 800050c:	4691      	mov	r9, r2
 800050e:	2600      	movs	r6, #0
 8000510:	469a      	mov	sl, r3
 8000512:	3d7f      	subs	r5, #127	; 0x7f
 8000514:	027c      	lsls	r4, r7, #9
 8000516:	007b      	lsls	r3, r7, #1
 8000518:	0a64      	lsrs	r4, r4, #9
 800051a:	0e1b      	lsrs	r3, r3, #24
 800051c:	0fff      	lsrs	r7, r7, #31
 800051e:	2b00      	cmp	r3, #0
 8000520:	d100      	bne.n	8000524 <__aeabi_fmul+0x48>
 8000522:	e0a9      	b.n	8000678 <__aeabi_fmul+0x19c>
 8000524:	2bff      	cmp	r3, #255	; 0xff
 8000526:	d011      	beq.n	800054c <__aeabi_fmul+0x70>
 8000528:	2280      	movs	r2, #128	; 0x80
 800052a:	00e4      	lsls	r4, r4, #3
 800052c:	04d2      	lsls	r2, r2, #19
 800052e:	4314      	orrs	r4, r2
 8000530:	4642      	mov	r2, r8
 8000532:	3b7f      	subs	r3, #127	; 0x7f
 8000534:	195b      	adds	r3, r3, r5
 8000536:	407a      	eors	r2, r7
 8000538:	2000      	movs	r0, #0
 800053a:	b2d2      	uxtb	r2, r2
 800053c:	1c5d      	adds	r5, r3, #1
 800053e:	2e0a      	cmp	r6, #10
 8000540:	dd13      	ble.n	800056a <__aeabi_fmul+0x8e>
 8000542:	003a      	movs	r2, r7
 8000544:	2e0b      	cmp	r6, #11
 8000546:	d047      	beq.n	80005d8 <__aeabi_fmul+0xfc>
 8000548:	4647      	mov	r7, r8
 800054a:	e03f      	b.n	80005cc <__aeabi_fmul+0xf0>
 800054c:	002b      	movs	r3, r5
 800054e:	33ff      	adds	r3, #255	; 0xff
 8000550:	2c00      	cmp	r4, #0
 8000552:	d11e      	bne.n	8000592 <__aeabi_fmul+0xb6>
 8000554:	2202      	movs	r2, #2
 8000556:	4316      	orrs	r6, r2
 8000558:	4642      	mov	r2, r8
 800055a:	3501      	adds	r5, #1
 800055c:	407a      	eors	r2, r7
 800055e:	b2d2      	uxtb	r2, r2
 8000560:	35ff      	adds	r5, #255	; 0xff
 8000562:	2e0a      	cmp	r6, #10
 8000564:	dd00      	ble.n	8000568 <__aeabi_fmul+0x8c>
 8000566:	e0e4      	b.n	8000732 <__aeabi_fmul+0x256>
 8000568:	2002      	movs	r0, #2
 800056a:	2e02      	cmp	r6, #2
 800056c:	dc1c      	bgt.n	80005a8 <__aeabi_fmul+0xcc>
 800056e:	3e01      	subs	r6, #1
 8000570:	2e01      	cmp	r6, #1
 8000572:	d842      	bhi.n	80005fa <__aeabi_fmul+0x11e>
 8000574:	2802      	cmp	r0, #2
 8000576:	d03d      	beq.n	80005f4 <__aeabi_fmul+0x118>
 8000578:	2801      	cmp	r0, #1
 800057a:	d166      	bne.n	800064a <__aeabi_fmul+0x16e>
 800057c:	2000      	movs	r0, #0
 800057e:	2100      	movs	r1, #0
 8000580:	05c0      	lsls	r0, r0, #23
 8000582:	4308      	orrs	r0, r1
 8000584:	07d2      	lsls	r2, r2, #31
 8000586:	4310      	orrs	r0, r2
 8000588:	bce0      	pop	{r5, r6, r7}
 800058a:	46ba      	mov	sl, r7
 800058c:	46b1      	mov	r9, r6
 800058e:	46a8      	mov	r8, r5
 8000590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000592:	2203      	movs	r2, #3
 8000594:	4316      	orrs	r6, r2
 8000596:	4642      	mov	r2, r8
 8000598:	3501      	adds	r5, #1
 800059a:	407a      	eors	r2, r7
 800059c:	b2d2      	uxtb	r2, r2
 800059e:	35ff      	adds	r5, #255	; 0xff
 80005a0:	2e0a      	cmp	r6, #10
 80005a2:	dd00      	ble.n	80005a6 <__aeabi_fmul+0xca>
 80005a4:	e0e4      	b.n	8000770 <__aeabi_fmul+0x294>
 80005a6:	2003      	movs	r0, #3
 80005a8:	2101      	movs	r1, #1
 80005aa:	40b1      	lsls	r1, r6
 80005ac:	26a6      	movs	r6, #166	; 0xa6
 80005ae:	00f6      	lsls	r6, r6, #3
 80005b0:	4231      	tst	r1, r6
 80005b2:	d10a      	bne.n	80005ca <__aeabi_fmul+0xee>
 80005b4:	2690      	movs	r6, #144	; 0x90
 80005b6:	00b6      	lsls	r6, r6, #2
 80005b8:	4231      	tst	r1, r6
 80005ba:	d116      	bne.n	80005ea <__aeabi_fmul+0x10e>
 80005bc:	3eb9      	subs	r6, #185	; 0xb9
 80005be:	3eff      	subs	r6, #255	; 0xff
 80005c0:	420e      	tst	r6, r1
 80005c2:	d01a      	beq.n	80005fa <__aeabi_fmul+0x11e>
 80005c4:	46a1      	mov	r9, r4
 80005c6:	4682      	mov	sl, r0
 80005c8:	e000      	b.n	80005cc <__aeabi_fmul+0xf0>
 80005ca:	0017      	movs	r7, r2
 80005cc:	4653      	mov	r3, sl
 80005ce:	003a      	movs	r2, r7
 80005d0:	2b02      	cmp	r3, #2
 80005d2:	d00f      	beq.n	80005f4 <__aeabi_fmul+0x118>
 80005d4:	464c      	mov	r4, r9
 80005d6:	4650      	mov	r0, sl
 80005d8:	2803      	cmp	r0, #3
 80005da:	d1cd      	bne.n	8000578 <__aeabi_fmul+0x9c>
 80005dc:	2180      	movs	r1, #128	; 0x80
 80005de:	03c9      	lsls	r1, r1, #15
 80005e0:	4321      	orrs	r1, r4
 80005e2:	0249      	lsls	r1, r1, #9
 80005e4:	20ff      	movs	r0, #255	; 0xff
 80005e6:	0a49      	lsrs	r1, r1, #9
 80005e8:	e7ca      	b.n	8000580 <__aeabi_fmul+0xa4>
 80005ea:	2180      	movs	r1, #128	; 0x80
 80005ec:	2200      	movs	r2, #0
 80005ee:	20ff      	movs	r0, #255	; 0xff
 80005f0:	03c9      	lsls	r1, r1, #15
 80005f2:	e7c5      	b.n	8000580 <__aeabi_fmul+0xa4>
 80005f4:	20ff      	movs	r0, #255	; 0xff
 80005f6:	2100      	movs	r1, #0
 80005f8:	e7c2      	b.n	8000580 <__aeabi_fmul+0xa4>
 80005fa:	0c20      	lsrs	r0, r4, #16
 80005fc:	4649      	mov	r1, r9
 80005fe:	0424      	lsls	r4, r4, #16
 8000600:	0c24      	lsrs	r4, r4, #16
 8000602:	0027      	movs	r7, r4
 8000604:	0c0e      	lsrs	r6, r1, #16
 8000606:	0409      	lsls	r1, r1, #16
 8000608:	0c09      	lsrs	r1, r1, #16
 800060a:	4374      	muls	r4, r6
 800060c:	434f      	muls	r7, r1
 800060e:	4346      	muls	r6, r0
 8000610:	4348      	muls	r0, r1
 8000612:	0c39      	lsrs	r1, r7, #16
 8000614:	1900      	adds	r0, r0, r4
 8000616:	1809      	adds	r1, r1, r0
 8000618:	428c      	cmp	r4, r1
 800061a:	d903      	bls.n	8000624 <__aeabi_fmul+0x148>
 800061c:	2080      	movs	r0, #128	; 0x80
 800061e:	0240      	lsls	r0, r0, #9
 8000620:	4684      	mov	ip, r0
 8000622:	4466      	add	r6, ip
 8000624:	043f      	lsls	r7, r7, #16
 8000626:	0408      	lsls	r0, r1, #16
 8000628:	0c3f      	lsrs	r7, r7, #16
 800062a:	19c0      	adds	r0, r0, r7
 800062c:	0184      	lsls	r4, r0, #6
 800062e:	1e67      	subs	r7, r4, #1
 8000630:	41bc      	sbcs	r4, r7
 8000632:	0c09      	lsrs	r1, r1, #16
 8000634:	0e80      	lsrs	r0, r0, #26
 8000636:	1989      	adds	r1, r1, r6
 8000638:	4304      	orrs	r4, r0
 800063a:	0189      	lsls	r1, r1, #6
 800063c:	430c      	orrs	r4, r1
 800063e:	0109      	lsls	r1, r1, #4
 8000640:	d571      	bpl.n	8000726 <__aeabi_fmul+0x24a>
 8000642:	2301      	movs	r3, #1
 8000644:	0861      	lsrs	r1, r4, #1
 8000646:	401c      	ands	r4, r3
 8000648:	430c      	orrs	r4, r1
 800064a:	002b      	movs	r3, r5
 800064c:	337f      	adds	r3, #127	; 0x7f
 800064e:	2b00      	cmp	r3, #0
 8000650:	dd51      	ble.n	80006f6 <__aeabi_fmul+0x21a>
 8000652:	0761      	lsls	r1, r4, #29
 8000654:	d004      	beq.n	8000660 <__aeabi_fmul+0x184>
 8000656:	210f      	movs	r1, #15
 8000658:	4021      	ands	r1, r4
 800065a:	2904      	cmp	r1, #4
 800065c:	d000      	beq.n	8000660 <__aeabi_fmul+0x184>
 800065e:	3404      	adds	r4, #4
 8000660:	0121      	lsls	r1, r4, #4
 8000662:	d503      	bpl.n	800066c <__aeabi_fmul+0x190>
 8000664:	4b43      	ldr	r3, [pc, #268]	; (8000774 <__aeabi_fmul+0x298>)
 8000666:	401c      	ands	r4, r3
 8000668:	002b      	movs	r3, r5
 800066a:	3380      	adds	r3, #128	; 0x80
 800066c:	2bfe      	cmp	r3, #254	; 0xfe
 800066e:	dcc1      	bgt.n	80005f4 <__aeabi_fmul+0x118>
 8000670:	01a1      	lsls	r1, r4, #6
 8000672:	0a49      	lsrs	r1, r1, #9
 8000674:	b2d8      	uxtb	r0, r3
 8000676:	e783      	b.n	8000580 <__aeabi_fmul+0xa4>
 8000678:	2c00      	cmp	r4, #0
 800067a:	d12c      	bne.n	80006d6 <__aeabi_fmul+0x1fa>
 800067c:	2301      	movs	r3, #1
 800067e:	4642      	mov	r2, r8
 8000680:	431e      	orrs	r6, r3
 8000682:	002b      	movs	r3, r5
 8000684:	407a      	eors	r2, r7
 8000686:	2001      	movs	r0, #1
 8000688:	b2d2      	uxtb	r2, r2
 800068a:	1c5d      	adds	r5, r3, #1
 800068c:	2e0a      	cmp	r6, #10
 800068e:	dd00      	ble.n	8000692 <__aeabi_fmul+0x1b6>
 8000690:	e757      	b.n	8000542 <__aeabi_fmul+0x66>
 8000692:	e76a      	b.n	800056a <__aeabi_fmul+0x8e>
 8000694:	2b00      	cmp	r3, #0
 8000696:	d110      	bne.n	80006ba <__aeabi_fmul+0x1de>
 8000698:	2301      	movs	r3, #1
 800069a:	2604      	movs	r6, #4
 800069c:	2500      	movs	r5, #0
 800069e:	469a      	mov	sl, r3
 80006a0:	e738      	b.n	8000514 <__aeabi_fmul+0x38>
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d104      	bne.n	80006b0 <__aeabi_fmul+0x1d4>
 80006a6:	2302      	movs	r3, #2
 80006a8:	2608      	movs	r6, #8
 80006aa:	25ff      	movs	r5, #255	; 0xff
 80006ac:	469a      	mov	sl, r3
 80006ae:	e731      	b.n	8000514 <__aeabi_fmul+0x38>
 80006b0:	2303      	movs	r3, #3
 80006b2:	260c      	movs	r6, #12
 80006b4:	25ff      	movs	r5, #255	; 0xff
 80006b6:	469a      	mov	sl, r3
 80006b8:	e72c      	b.n	8000514 <__aeabi_fmul+0x38>
 80006ba:	4648      	mov	r0, r9
 80006bc:	f001 ffba 	bl	8002634 <__clzsi2>
 80006c0:	464a      	mov	r2, r9
 80006c2:	1f43      	subs	r3, r0, #5
 80006c4:	2576      	movs	r5, #118	; 0x76
 80006c6:	409a      	lsls	r2, r3
 80006c8:	2300      	movs	r3, #0
 80006ca:	426d      	negs	r5, r5
 80006cc:	4691      	mov	r9, r2
 80006ce:	2600      	movs	r6, #0
 80006d0:	469a      	mov	sl, r3
 80006d2:	1a2d      	subs	r5, r5, r0
 80006d4:	e71e      	b.n	8000514 <__aeabi_fmul+0x38>
 80006d6:	0020      	movs	r0, r4
 80006d8:	f001 ffac 	bl	8002634 <__clzsi2>
 80006dc:	4642      	mov	r2, r8
 80006de:	1f43      	subs	r3, r0, #5
 80006e0:	409c      	lsls	r4, r3
 80006e2:	1a2b      	subs	r3, r5, r0
 80006e4:	3b76      	subs	r3, #118	; 0x76
 80006e6:	407a      	eors	r2, r7
 80006e8:	2000      	movs	r0, #0
 80006ea:	b2d2      	uxtb	r2, r2
 80006ec:	1c5d      	adds	r5, r3, #1
 80006ee:	2e0a      	cmp	r6, #10
 80006f0:	dd00      	ble.n	80006f4 <__aeabi_fmul+0x218>
 80006f2:	e726      	b.n	8000542 <__aeabi_fmul+0x66>
 80006f4:	e739      	b.n	800056a <__aeabi_fmul+0x8e>
 80006f6:	2101      	movs	r1, #1
 80006f8:	1acb      	subs	r3, r1, r3
 80006fa:	2b1b      	cmp	r3, #27
 80006fc:	dd00      	ble.n	8000700 <__aeabi_fmul+0x224>
 80006fe:	e73d      	b.n	800057c <__aeabi_fmul+0xa0>
 8000700:	359e      	adds	r5, #158	; 0x9e
 8000702:	0021      	movs	r1, r4
 8000704:	40ac      	lsls	r4, r5
 8000706:	40d9      	lsrs	r1, r3
 8000708:	1e63      	subs	r3, r4, #1
 800070a:	419c      	sbcs	r4, r3
 800070c:	4321      	orrs	r1, r4
 800070e:	074b      	lsls	r3, r1, #29
 8000710:	d004      	beq.n	800071c <__aeabi_fmul+0x240>
 8000712:	230f      	movs	r3, #15
 8000714:	400b      	ands	r3, r1
 8000716:	2b04      	cmp	r3, #4
 8000718:	d000      	beq.n	800071c <__aeabi_fmul+0x240>
 800071a:	3104      	adds	r1, #4
 800071c:	014b      	lsls	r3, r1, #5
 800071e:	d504      	bpl.n	800072a <__aeabi_fmul+0x24e>
 8000720:	2001      	movs	r0, #1
 8000722:	2100      	movs	r1, #0
 8000724:	e72c      	b.n	8000580 <__aeabi_fmul+0xa4>
 8000726:	001d      	movs	r5, r3
 8000728:	e78f      	b.n	800064a <__aeabi_fmul+0x16e>
 800072a:	0189      	lsls	r1, r1, #6
 800072c:	2000      	movs	r0, #0
 800072e:	0a49      	lsrs	r1, r1, #9
 8000730:	e726      	b.n	8000580 <__aeabi_fmul+0xa4>
 8000732:	2302      	movs	r3, #2
 8000734:	2e0f      	cmp	r6, #15
 8000736:	d10c      	bne.n	8000752 <__aeabi_fmul+0x276>
 8000738:	2180      	movs	r1, #128	; 0x80
 800073a:	464b      	mov	r3, r9
 800073c:	03c9      	lsls	r1, r1, #15
 800073e:	420b      	tst	r3, r1
 8000740:	d00d      	beq.n	800075e <__aeabi_fmul+0x282>
 8000742:	420c      	tst	r4, r1
 8000744:	d10b      	bne.n	800075e <__aeabi_fmul+0x282>
 8000746:	4321      	orrs	r1, r4
 8000748:	0249      	lsls	r1, r1, #9
 800074a:	003a      	movs	r2, r7
 800074c:	20ff      	movs	r0, #255	; 0xff
 800074e:	0a49      	lsrs	r1, r1, #9
 8000750:	e716      	b.n	8000580 <__aeabi_fmul+0xa4>
 8000752:	2e0b      	cmp	r6, #11
 8000754:	d000      	beq.n	8000758 <__aeabi_fmul+0x27c>
 8000756:	e6f7      	b.n	8000548 <__aeabi_fmul+0x6c>
 8000758:	46a1      	mov	r9, r4
 800075a:	469a      	mov	sl, r3
 800075c:	e736      	b.n	80005cc <__aeabi_fmul+0xf0>
 800075e:	2180      	movs	r1, #128	; 0x80
 8000760:	464b      	mov	r3, r9
 8000762:	03c9      	lsls	r1, r1, #15
 8000764:	4319      	orrs	r1, r3
 8000766:	0249      	lsls	r1, r1, #9
 8000768:	4642      	mov	r2, r8
 800076a:	20ff      	movs	r0, #255	; 0xff
 800076c:	0a49      	lsrs	r1, r1, #9
 800076e:	e707      	b.n	8000580 <__aeabi_fmul+0xa4>
 8000770:	2303      	movs	r3, #3
 8000772:	e7df      	b.n	8000734 <__aeabi_fmul+0x258>
 8000774:	f7ffffff 	.word	0xf7ffffff

08000778 <__aeabi_ui2f>:
 8000778:	b570      	push	{r4, r5, r6, lr}
 800077a:	1e04      	subs	r4, r0, #0
 800077c:	d00e      	beq.n	800079c <__aeabi_ui2f+0x24>
 800077e:	f001 ff59 	bl	8002634 <__clzsi2>
 8000782:	239e      	movs	r3, #158	; 0x9e
 8000784:	0001      	movs	r1, r0
 8000786:	1a1b      	subs	r3, r3, r0
 8000788:	2b96      	cmp	r3, #150	; 0x96
 800078a:	dc0c      	bgt.n	80007a6 <__aeabi_ui2f+0x2e>
 800078c:	2808      	cmp	r0, #8
 800078e:	d02c      	beq.n	80007ea <__aeabi_ui2f+0x72>
 8000790:	3908      	subs	r1, #8
 8000792:	408c      	lsls	r4, r1
 8000794:	0264      	lsls	r4, r4, #9
 8000796:	0a64      	lsrs	r4, r4, #9
 8000798:	b2d8      	uxtb	r0, r3
 800079a:	e001      	b.n	80007a0 <__aeabi_ui2f+0x28>
 800079c:	2000      	movs	r0, #0
 800079e:	2400      	movs	r4, #0
 80007a0:	05c0      	lsls	r0, r0, #23
 80007a2:	4320      	orrs	r0, r4
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	2b99      	cmp	r3, #153	; 0x99
 80007a8:	dd0a      	ble.n	80007c0 <__aeabi_ui2f+0x48>
 80007aa:	0002      	movs	r2, r0
 80007ac:	0020      	movs	r0, r4
 80007ae:	321b      	adds	r2, #27
 80007b0:	4090      	lsls	r0, r2
 80007b2:	0002      	movs	r2, r0
 80007b4:	1e50      	subs	r0, r2, #1
 80007b6:	4182      	sbcs	r2, r0
 80007b8:	2005      	movs	r0, #5
 80007ba:	1a40      	subs	r0, r0, r1
 80007bc:	40c4      	lsrs	r4, r0
 80007be:	4314      	orrs	r4, r2
 80007c0:	2905      	cmp	r1, #5
 80007c2:	dc16      	bgt.n	80007f2 <__aeabi_ui2f+0x7a>
 80007c4:	0022      	movs	r2, r4
 80007c6:	480f      	ldr	r0, [pc, #60]	; (8000804 <__aeabi_ui2f+0x8c>)
 80007c8:	4002      	ands	r2, r0
 80007ca:	0765      	lsls	r5, r4, #29
 80007cc:	d009      	beq.n	80007e2 <__aeabi_ui2f+0x6a>
 80007ce:	250f      	movs	r5, #15
 80007d0:	402c      	ands	r4, r5
 80007d2:	2c04      	cmp	r4, #4
 80007d4:	d005      	beq.n	80007e2 <__aeabi_ui2f+0x6a>
 80007d6:	3204      	adds	r2, #4
 80007d8:	0154      	lsls	r4, r2, #5
 80007da:	d502      	bpl.n	80007e2 <__aeabi_ui2f+0x6a>
 80007dc:	239f      	movs	r3, #159	; 0x9f
 80007de:	4002      	ands	r2, r0
 80007e0:	1a5b      	subs	r3, r3, r1
 80007e2:	0192      	lsls	r2, r2, #6
 80007e4:	0a54      	lsrs	r4, r2, #9
 80007e6:	b2d8      	uxtb	r0, r3
 80007e8:	e7da      	b.n	80007a0 <__aeabi_ui2f+0x28>
 80007ea:	0264      	lsls	r4, r4, #9
 80007ec:	2096      	movs	r0, #150	; 0x96
 80007ee:	0a64      	lsrs	r4, r4, #9
 80007f0:	e7d6      	b.n	80007a0 <__aeabi_ui2f+0x28>
 80007f2:	1f4a      	subs	r2, r1, #5
 80007f4:	4094      	lsls	r4, r2
 80007f6:	0022      	movs	r2, r4
 80007f8:	4802      	ldr	r0, [pc, #8]	; (8000804 <__aeabi_ui2f+0x8c>)
 80007fa:	4002      	ands	r2, r0
 80007fc:	0765      	lsls	r5, r4, #29
 80007fe:	d0f0      	beq.n	80007e2 <__aeabi_ui2f+0x6a>
 8000800:	e7e5      	b.n	80007ce <__aeabi_ui2f+0x56>
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	fbffffff 	.word	0xfbffffff

08000808 <__aeabi_dadd>:
 8000808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800080a:	464f      	mov	r7, r9
 800080c:	4646      	mov	r6, r8
 800080e:	46d6      	mov	lr, sl
 8000810:	0004      	movs	r4, r0
 8000812:	b5c0      	push	{r6, r7, lr}
 8000814:	001f      	movs	r7, r3
 8000816:	030b      	lsls	r3, r1, #12
 8000818:	0010      	movs	r0, r2
 800081a:	004e      	lsls	r6, r1, #1
 800081c:	0a5b      	lsrs	r3, r3, #9
 800081e:	0fcd      	lsrs	r5, r1, #31
 8000820:	0f61      	lsrs	r1, r4, #29
 8000822:	007a      	lsls	r2, r7, #1
 8000824:	4319      	orrs	r1, r3
 8000826:	00e3      	lsls	r3, r4, #3
 8000828:	033c      	lsls	r4, r7, #12
 800082a:	0fff      	lsrs	r7, r7, #31
 800082c:	46bc      	mov	ip, r7
 800082e:	0a64      	lsrs	r4, r4, #9
 8000830:	0f47      	lsrs	r7, r0, #29
 8000832:	4327      	orrs	r7, r4
 8000834:	0d76      	lsrs	r6, r6, #21
 8000836:	0d52      	lsrs	r2, r2, #21
 8000838:	00c0      	lsls	r0, r0, #3
 800083a:	46b9      	mov	r9, r7
 800083c:	4680      	mov	r8, r0
 800083e:	1ab7      	subs	r7, r6, r2
 8000840:	4565      	cmp	r5, ip
 8000842:	d100      	bne.n	8000846 <__aeabi_dadd+0x3e>
 8000844:	e09b      	b.n	800097e <__aeabi_dadd+0x176>
 8000846:	2f00      	cmp	r7, #0
 8000848:	dc00      	bgt.n	800084c <__aeabi_dadd+0x44>
 800084a:	e084      	b.n	8000956 <__aeabi_dadd+0x14e>
 800084c:	2a00      	cmp	r2, #0
 800084e:	d100      	bne.n	8000852 <__aeabi_dadd+0x4a>
 8000850:	e0be      	b.n	80009d0 <__aeabi_dadd+0x1c8>
 8000852:	4ac8      	ldr	r2, [pc, #800]	; (8000b74 <__aeabi_dadd+0x36c>)
 8000854:	4296      	cmp	r6, r2
 8000856:	d100      	bne.n	800085a <__aeabi_dadd+0x52>
 8000858:	e124      	b.n	8000aa4 <__aeabi_dadd+0x29c>
 800085a:	2280      	movs	r2, #128	; 0x80
 800085c:	464c      	mov	r4, r9
 800085e:	0412      	lsls	r2, r2, #16
 8000860:	4314      	orrs	r4, r2
 8000862:	46a1      	mov	r9, r4
 8000864:	2f38      	cmp	r7, #56	; 0x38
 8000866:	dd00      	ble.n	800086a <__aeabi_dadd+0x62>
 8000868:	e167      	b.n	8000b3a <__aeabi_dadd+0x332>
 800086a:	2f1f      	cmp	r7, #31
 800086c:	dd00      	ble.n	8000870 <__aeabi_dadd+0x68>
 800086e:	e1d6      	b.n	8000c1e <__aeabi_dadd+0x416>
 8000870:	2220      	movs	r2, #32
 8000872:	464c      	mov	r4, r9
 8000874:	1bd2      	subs	r2, r2, r7
 8000876:	4094      	lsls	r4, r2
 8000878:	46a2      	mov	sl, r4
 800087a:	4644      	mov	r4, r8
 800087c:	40fc      	lsrs	r4, r7
 800087e:	0020      	movs	r0, r4
 8000880:	4654      	mov	r4, sl
 8000882:	4304      	orrs	r4, r0
 8000884:	4640      	mov	r0, r8
 8000886:	4090      	lsls	r0, r2
 8000888:	1e42      	subs	r2, r0, #1
 800088a:	4190      	sbcs	r0, r2
 800088c:	464a      	mov	r2, r9
 800088e:	40fa      	lsrs	r2, r7
 8000890:	4304      	orrs	r4, r0
 8000892:	1a89      	subs	r1, r1, r2
 8000894:	1b1c      	subs	r4, r3, r4
 8000896:	42a3      	cmp	r3, r4
 8000898:	4192      	sbcs	r2, r2
 800089a:	4252      	negs	r2, r2
 800089c:	1a8b      	subs	r3, r1, r2
 800089e:	469a      	mov	sl, r3
 80008a0:	4653      	mov	r3, sl
 80008a2:	021b      	lsls	r3, r3, #8
 80008a4:	d400      	bmi.n	80008a8 <__aeabi_dadd+0xa0>
 80008a6:	e0d4      	b.n	8000a52 <__aeabi_dadd+0x24a>
 80008a8:	4653      	mov	r3, sl
 80008aa:	025a      	lsls	r2, r3, #9
 80008ac:	0a53      	lsrs	r3, r2, #9
 80008ae:	469a      	mov	sl, r3
 80008b0:	4653      	mov	r3, sl
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d100      	bne.n	80008b8 <__aeabi_dadd+0xb0>
 80008b6:	e104      	b.n	8000ac2 <__aeabi_dadd+0x2ba>
 80008b8:	4650      	mov	r0, sl
 80008ba:	f001 febb 	bl	8002634 <__clzsi2>
 80008be:	0003      	movs	r3, r0
 80008c0:	3b08      	subs	r3, #8
 80008c2:	2220      	movs	r2, #32
 80008c4:	0020      	movs	r0, r4
 80008c6:	1ad2      	subs	r2, r2, r3
 80008c8:	4651      	mov	r1, sl
 80008ca:	40d0      	lsrs	r0, r2
 80008cc:	4099      	lsls	r1, r3
 80008ce:	0002      	movs	r2, r0
 80008d0:	409c      	lsls	r4, r3
 80008d2:	430a      	orrs	r2, r1
 80008d4:	42b3      	cmp	r3, r6
 80008d6:	da00      	bge.n	80008da <__aeabi_dadd+0xd2>
 80008d8:	e102      	b.n	8000ae0 <__aeabi_dadd+0x2d8>
 80008da:	1b9b      	subs	r3, r3, r6
 80008dc:	1c59      	adds	r1, r3, #1
 80008de:	291f      	cmp	r1, #31
 80008e0:	dd00      	ble.n	80008e4 <__aeabi_dadd+0xdc>
 80008e2:	e0a7      	b.n	8000a34 <__aeabi_dadd+0x22c>
 80008e4:	2320      	movs	r3, #32
 80008e6:	0010      	movs	r0, r2
 80008e8:	0026      	movs	r6, r4
 80008ea:	1a5b      	subs	r3, r3, r1
 80008ec:	409c      	lsls	r4, r3
 80008ee:	4098      	lsls	r0, r3
 80008f0:	40ce      	lsrs	r6, r1
 80008f2:	40ca      	lsrs	r2, r1
 80008f4:	1e63      	subs	r3, r4, #1
 80008f6:	419c      	sbcs	r4, r3
 80008f8:	4330      	orrs	r0, r6
 80008fa:	4692      	mov	sl, r2
 80008fc:	2600      	movs	r6, #0
 80008fe:	4304      	orrs	r4, r0
 8000900:	0763      	lsls	r3, r4, #29
 8000902:	d009      	beq.n	8000918 <__aeabi_dadd+0x110>
 8000904:	230f      	movs	r3, #15
 8000906:	4023      	ands	r3, r4
 8000908:	2b04      	cmp	r3, #4
 800090a:	d005      	beq.n	8000918 <__aeabi_dadd+0x110>
 800090c:	1d23      	adds	r3, r4, #4
 800090e:	42a3      	cmp	r3, r4
 8000910:	41a4      	sbcs	r4, r4
 8000912:	4264      	negs	r4, r4
 8000914:	44a2      	add	sl, r4
 8000916:	001c      	movs	r4, r3
 8000918:	4653      	mov	r3, sl
 800091a:	021b      	lsls	r3, r3, #8
 800091c:	d400      	bmi.n	8000920 <__aeabi_dadd+0x118>
 800091e:	e09b      	b.n	8000a58 <__aeabi_dadd+0x250>
 8000920:	4b94      	ldr	r3, [pc, #592]	; (8000b74 <__aeabi_dadd+0x36c>)
 8000922:	3601      	adds	r6, #1
 8000924:	429e      	cmp	r6, r3
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x122>
 8000928:	e0b8      	b.n	8000a9c <__aeabi_dadd+0x294>
 800092a:	4653      	mov	r3, sl
 800092c:	4992      	ldr	r1, [pc, #584]	; (8000b78 <__aeabi_dadd+0x370>)
 800092e:	08e4      	lsrs	r4, r4, #3
 8000930:	400b      	ands	r3, r1
 8000932:	0019      	movs	r1, r3
 8000934:	075b      	lsls	r3, r3, #29
 8000936:	4323      	orrs	r3, r4
 8000938:	0572      	lsls	r2, r6, #21
 800093a:	024c      	lsls	r4, r1, #9
 800093c:	0b24      	lsrs	r4, r4, #12
 800093e:	0d52      	lsrs	r2, r2, #21
 8000940:	0512      	lsls	r2, r2, #20
 8000942:	07ed      	lsls	r5, r5, #31
 8000944:	4322      	orrs	r2, r4
 8000946:	432a      	orrs	r2, r5
 8000948:	0018      	movs	r0, r3
 800094a:	0011      	movs	r1, r2
 800094c:	bce0      	pop	{r5, r6, r7}
 800094e:	46ba      	mov	sl, r7
 8000950:	46b1      	mov	r9, r6
 8000952:	46a8      	mov	r8, r5
 8000954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000956:	2f00      	cmp	r7, #0
 8000958:	d048      	beq.n	80009ec <__aeabi_dadd+0x1e4>
 800095a:	1b97      	subs	r7, r2, r6
 800095c:	2e00      	cmp	r6, #0
 800095e:	d000      	beq.n	8000962 <__aeabi_dadd+0x15a>
 8000960:	e10e      	b.n	8000b80 <__aeabi_dadd+0x378>
 8000962:	000c      	movs	r4, r1
 8000964:	431c      	orrs	r4, r3
 8000966:	d100      	bne.n	800096a <__aeabi_dadd+0x162>
 8000968:	e1b7      	b.n	8000cda <__aeabi_dadd+0x4d2>
 800096a:	1e7c      	subs	r4, r7, #1
 800096c:	2f01      	cmp	r7, #1
 800096e:	d100      	bne.n	8000972 <__aeabi_dadd+0x16a>
 8000970:	e226      	b.n	8000dc0 <__aeabi_dadd+0x5b8>
 8000972:	4d80      	ldr	r5, [pc, #512]	; (8000b74 <__aeabi_dadd+0x36c>)
 8000974:	42af      	cmp	r7, r5
 8000976:	d100      	bne.n	800097a <__aeabi_dadd+0x172>
 8000978:	e1d5      	b.n	8000d26 <__aeabi_dadd+0x51e>
 800097a:	0027      	movs	r7, r4
 800097c:	e107      	b.n	8000b8e <__aeabi_dadd+0x386>
 800097e:	2f00      	cmp	r7, #0
 8000980:	dc00      	bgt.n	8000984 <__aeabi_dadd+0x17c>
 8000982:	e0b2      	b.n	8000aea <__aeabi_dadd+0x2e2>
 8000984:	2a00      	cmp	r2, #0
 8000986:	d047      	beq.n	8000a18 <__aeabi_dadd+0x210>
 8000988:	4a7a      	ldr	r2, [pc, #488]	; (8000b74 <__aeabi_dadd+0x36c>)
 800098a:	4296      	cmp	r6, r2
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x188>
 800098e:	e089      	b.n	8000aa4 <__aeabi_dadd+0x29c>
 8000990:	2280      	movs	r2, #128	; 0x80
 8000992:	464c      	mov	r4, r9
 8000994:	0412      	lsls	r2, r2, #16
 8000996:	4314      	orrs	r4, r2
 8000998:	46a1      	mov	r9, r4
 800099a:	2f38      	cmp	r7, #56	; 0x38
 800099c:	dc6b      	bgt.n	8000a76 <__aeabi_dadd+0x26e>
 800099e:	2f1f      	cmp	r7, #31
 80009a0:	dc00      	bgt.n	80009a4 <__aeabi_dadd+0x19c>
 80009a2:	e16e      	b.n	8000c82 <__aeabi_dadd+0x47a>
 80009a4:	003a      	movs	r2, r7
 80009a6:	4648      	mov	r0, r9
 80009a8:	3a20      	subs	r2, #32
 80009aa:	40d0      	lsrs	r0, r2
 80009ac:	4684      	mov	ip, r0
 80009ae:	2f20      	cmp	r7, #32
 80009b0:	d007      	beq.n	80009c2 <__aeabi_dadd+0x1ba>
 80009b2:	2240      	movs	r2, #64	; 0x40
 80009b4:	4648      	mov	r0, r9
 80009b6:	1bd2      	subs	r2, r2, r7
 80009b8:	4090      	lsls	r0, r2
 80009ba:	0002      	movs	r2, r0
 80009bc:	4640      	mov	r0, r8
 80009be:	4310      	orrs	r0, r2
 80009c0:	4680      	mov	r8, r0
 80009c2:	4640      	mov	r0, r8
 80009c4:	1e42      	subs	r2, r0, #1
 80009c6:	4190      	sbcs	r0, r2
 80009c8:	4662      	mov	r2, ip
 80009ca:	0004      	movs	r4, r0
 80009cc:	4314      	orrs	r4, r2
 80009ce:	e057      	b.n	8000a80 <__aeabi_dadd+0x278>
 80009d0:	464a      	mov	r2, r9
 80009d2:	4302      	orrs	r2, r0
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x1d0>
 80009d6:	e103      	b.n	8000be0 <__aeabi_dadd+0x3d8>
 80009d8:	1e7a      	subs	r2, r7, #1
 80009da:	2f01      	cmp	r7, #1
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x1d8>
 80009de:	e193      	b.n	8000d08 <__aeabi_dadd+0x500>
 80009e0:	4c64      	ldr	r4, [pc, #400]	; (8000b74 <__aeabi_dadd+0x36c>)
 80009e2:	42a7      	cmp	r7, r4
 80009e4:	d100      	bne.n	80009e8 <__aeabi_dadd+0x1e0>
 80009e6:	e18a      	b.n	8000cfe <__aeabi_dadd+0x4f6>
 80009e8:	0017      	movs	r7, r2
 80009ea:	e73b      	b.n	8000864 <__aeabi_dadd+0x5c>
 80009ec:	4c63      	ldr	r4, [pc, #396]	; (8000b7c <__aeabi_dadd+0x374>)
 80009ee:	1c72      	adds	r2, r6, #1
 80009f0:	4222      	tst	r2, r4
 80009f2:	d000      	beq.n	80009f6 <__aeabi_dadd+0x1ee>
 80009f4:	e0e0      	b.n	8000bb8 <__aeabi_dadd+0x3b0>
 80009f6:	000a      	movs	r2, r1
 80009f8:	431a      	orrs	r2, r3
 80009fa:	2e00      	cmp	r6, #0
 80009fc:	d000      	beq.n	8000a00 <__aeabi_dadd+0x1f8>
 80009fe:	e174      	b.n	8000cea <__aeabi_dadd+0x4e2>
 8000a00:	2a00      	cmp	r2, #0
 8000a02:	d100      	bne.n	8000a06 <__aeabi_dadd+0x1fe>
 8000a04:	e1d0      	b.n	8000da8 <__aeabi_dadd+0x5a0>
 8000a06:	464a      	mov	r2, r9
 8000a08:	4302      	orrs	r2, r0
 8000a0a:	d000      	beq.n	8000a0e <__aeabi_dadd+0x206>
 8000a0c:	e1e3      	b.n	8000dd6 <__aeabi_dadd+0x5ce>
 8000a0e:	074a      	lsls	r2, r1, #29
 8000a10:	08db      	lsrs	r3, r3, #3
 8000a12:	4313      	orrs	r3, r2
 8000a14:	08c9      	lsrs	r1, r1, #3
 8000a16:	e029      	b.n	8000a6c <__aeabi_dadd+0x264>
 8000a18:	464a      	mov	r2, r9
 8000a1a:	4302      	orrs	r2, r0
 8000a1c:	d100      	bne.n	8000a20 <__aeabi_dadd+0x218>
 8000a1e:	e17d      	b.n	8000d1c <__aeabi_dadd+0x514>
 8000a20:	1e7a      	subs	r2, r7, #1
 8000a22:	2f01      	cmp	r7, #1
 8000a24:	d100      	bne.n	8000a28 <__aeabi_dadd+0x220>
 8000a26:	e0e0      	b.n	8000bea <__aeabi_dadd+0x3e2>
 8000a28:	4c52      	ldr	r4, [pc, #328]	; (8000b74 <__aeabi_dadd+0x36c>)
 8000a2a:	42a7      	cmp	r7, r4
 8000a2c:	d100      	bne.n	8000a30 <__aeabi_dadd+0x228>
 8000a2e:	e166      	b.n	8000cfe <__aeabi_dadd+0x4f6>
 8000a30:	0017      	movs	r7, r2
 8000a32:	e7b2      	b.n	800099a <__aeabi_dadd+0x192>
 8000a34:	0010      	movs	r0, r2
 8000a36:	3b1f      	subs	r3, #31
 8000a38:	40d8      	lsrs	r0, r3
 8000a3a:	2920      	cmp	r1, #32
 8000a3c:	d003      	beq.n	8000a46 <__aeabi_dadd+0x23e>
 8000a3e:	2340      	movs	r3, #64	; 0x40
 8000a40:	1a5b      	subs	r3, r3, r1
 8000a42:	409a      	lsls	r2, r3
 8000a44:	4314      	orrs	r4, r2
 8000a46:	1e63      	subs	r3, r4, #1
 8000a48:	419c      	sbcs	r4, r3
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	2600      	movs	r6, #0
 8000a4e:	469a      	mov	sl, r3
 8000a50:	4304      	orrs	r4, r0
 8000a52:	0763      	lsls	r3, r4, #29
 8000a54:	d000      	beq.n	8000a58 <__aeabi_dadd+0x250>
 8000a56:	e755      	b.n	8000904 <__aeabi_dadd+0xfc>
 8000a58:	4652      	mov	r2, sl
 8000a5a:	08e3      	lsrs	r3, r4, #3
 8000a5c:	0752      	lsls	r2, r2, #29
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	4652      	mov	r2, sl
 8000a62:	0037      	movs	r7, r6
 8000a64:	08d1      	lsrs	r1, r2, #3
 8000a66:	4a43      	ldr	r2, [pc, #268]	; (8000b74 <__aeabi_dadd+0x36c>)
 8000a68:	4297      	cmp	r7, r2
 8000a6a:	d01f      	beq.n	8000aac <__aeabi_dadd+0x2a4>
 8000a6c:	0309      	lsls	r1, r1, #12
 8000a6e:	057a      	lsls	r2, r7, #21
 8000a70:	0b0c      	lsrs	r4, r1, #12
 8000a72:	0d52      	lsrs	r2, r2, #21
 8000a74:	e764      	b.n	8000940 <__aeabi_dadd+0x138>
 8000a76:	4642      	mov	r2, r8
 8000a78:	464c      	mov	r4, r9
 8000a7a:	4314      	orrs	r4, r2
 8000a7c:	1e62      	subs	r2, r4, #1
 8000a7e:	4194      	sbcs	r4, r2
 8000a80:	18e4      	adds	r4, r4, r3
 8000a82:	429c      	cmp	r4, r3
 8000a84:	4192      	sbcs	r2, r2
 8000a86:	4252      	negs	r2, r2
 8000a88:	4692      	mov	sl, r2
 8000a8a:	448a      	add	sl, r1
 8000a8c:	4653      	mov	r3, sl
 8000a8e:	021b      	lsls	r3, r3, #8
 8000a90:	d5df      	bpl.n	8000a52 <__aeabi_dadd+0x24a>
 8000a92:	4b38      	ldr	r3, [pc, #224]	; (8000b74 <__aeabi_dadd+0x36c>)
 8000a94:	3601      	adds	r6, #1
 8000a96:	429e      	cmp	r6, r3
 8000a98:	d000      	beq.n	8000a9c <__aeabi_dadd+0x294>
 8000a9a:	e0b3      	b.n	8000c04 <__aeabi_dadd+0x3fc>
 8000a9c:	0032      	movs	r2, r6
 8000a9e:	2400      	movs	r4, #0
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	e74d      	b.n	8000940 <__aeabi_dadd+0x138>
 8000aa4:	074a      	lsls	r2, r1, #29
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	08c9      	lsrs	r1, r1, #3
 8000aac:	001a      	movs	r2, r3
 8000aae:	430a      	orrs	r2, r1
 8000ab0:	d100      	bne.n	8000ab4 <__aeabi_dadd+0x2ac>
 8000ab2:	e200      	b.n	8000eb6 <__aeabi_dadd+0x6ae>
 8000ab4:	2480      	movs	r4, #128	; 0x80
 8000ab6:	0324      	lsls	r4, r4, #12
 8000ab8:	430c      	orrs	r4, r1
 8000aba:	0324      	lsls	r4, r4, #12
 8000abc:	4a2d      	ldr	r2, [pc, #180]	; (8000b74 <__aeabi_dadd+0x36c>)
 8000abe:	0b24      	lsrs	r4, r4, #12
 8000ac0:	e73e      	b.n	8000940 <__aeabi_dadd+0x138>
 8000ac2:	0020      	movs	r0, r4
 8000ac4:	f001 fdb6 	bl	8002634 <__clzsi2>
 8000ac8:	0003      	movs	r3, r0
 8000aca:	3318      	adds	r3, #24
 8000acc:	2b1f      	cmp	r3, #31
 8000ace:	dc00      	bgt.n	8000ad2 <__aeabi_dadd+0x2ca>
 8000ad0:	e6f7      	b.n	80008c2 <__aeabi_dadd+0xba>
 8000ad2:	0022      	movs	r2, r4
 8000ad4:	3808      	subs	r0, #8
 8000ad6:	4082      	lsls	r2, r0
 8000ad8:	2400      	movs	r4, #0
 8000ada:	42b3      	cmp	r3, r6
 8000adc:	db00      	blt.n	8000ae0 <__aeabi_dadd+0x2d8>
 8000ade:	e6fc      	b.n	80008da <__aeabi_dadd+0xd2>
 8000ae0:	1af6      	subs	r6, r6, r3
 8000ae2:	4b25      	ldr	r3, [pc, #148]	; (8000b78 <__aeabi_dadd+0x370>)
 8000ae4:	401a      	ands	r2, r3
 8000ae6:	4692      	mov	sl, r2
 8000ae8:	e70a      	b.n	8000900 <__aeabi_dadd+0xf8>
 8000aea:	2f00      	cmp	r7, #0
 8000aec:	d02b      	beq.n	8000b46 <__aeabi_dadd+0x33e>
 8000aee:	1b97      	subs	r7, r2, r6
 8000af0:	2e00      	cmp	r6, #0
 8000af2:	d100      	bne.n	8000af6 <__aeabi_dadd+0x2ee>
 8000af4:	e0b8      	b.n	8000c68 <__aeabi_dadd+0x460>
 8000af6:	4c1f      	ldr	r4, [pc, #124]	; (8000b74 <__aeabi_dadd+0x36c>)
 8000af8:	42a2      	cmp	r2, r4
 8000afa:	d100      	bne.n	8000afe <__aeabi_dadd+0x2f6>
 8000afc:	e11c      	b.n	8000d38 <__aeabi_dadd+0x530>
 8000afe:	2480      	movs	r4, #128	; 0x80
 8000b00:	0424      	lsls	r4, r4, #16
 8000b02:	4321      	orrs	r1, r4
 8000b04:	2f38      	cmp	r7, #56	; 0x38
 8000b06:	dd00      	ble.n	8000b0a <__aeabi_dadd+0x302>
 8000b08:	e11e      	b.n	8000d48 <__aeabi_dadd+0x540>
 8000b0a:	2f1f      	cmp	r7, #31
 8000b0c:	dd00      	ble.n	8000b10 <__aeabi_dadd+0x308>
 8000b0e:	e19e      	b.n	8000e4e <__aeabi_dadd+0x646>
 8000b10:	2620      	movs	r6, #32
 8000b12:	000c      	movs	r4, r1
 8000b14:	1bf6      	subs	r6, r6, r7
 8000b16:	0018      	movs	r0, r3
 8000b18:	40b3      	lsls	r3, r6
 8000b1a:	40b4      	lsls	r4, r6
 8000b1c:	40f8      	lsrs	r0, r7
 8000b1e:	1e5e      	subs	r6, r3, #1
 8000b20:	41b3      	sbcs	r3, r6
 8000b22:	40f9      	lsrs	r1, r7
 8000b24:	4304      	orrs	r4, r0
 8000b26:	431c      	orrs	r4, r3
 8000b28:	4489      	add	r9, r1
 8000b2a:	4444      	add	r4, r8
 8000b2c:	4544      	cmp	r4, r8
 8000b2e:	419b      	sbcs	r3, r3
 8000b30:	425b      	negs	r3, r3
 8000b32:	444b      	add	r3, r9
 8000b34:	469a      	mov	sl, r3
 8000b36:	0016      	movs	r6, r2
 8000b38:	e7a8      	b.n	8000a8c <__aeabi_dadd+0x284>
 8000b3a:	4642      	mov	r2, r8
 8000b3c:	464c      	mov	r4, r9
 8000b3e:	4314      	orrs	r4, r2
 8000b40:	1e62      	subs	r2, r4, #1
 8000b42:	4194      	sbcs	r4, r2
 8000b44:	e6a6      	b.n	8000894 <__aeabi_dadd+0x8c>
 8000b46:	4c0d      	ldr	r4, [pc, #52]	; (8000b7c <__aeabi_dadd+0x374>)
 8000b48:	1c72      	adds	r2, r6, #1
 8000b4a:	4222      	tst	r2, r4
 8000b4c:	d000      	beq.n	8000b50 <__aeabi_dadd+0x348>
 8000b4e:	e0a8      	b.n	8000ca2 <__aeabi_dadd+0x49a>
 8000b50:	000a      	movs	r2, r1
 8000b52:	431a      	orrs	r2, r3
 8000b54:	2e00      	cmp	r6, #0
 8000b56:	d000      	beq.n	8000b5a <__aeabi_dadd+0x352>
 8000b58:	e10a      	b.n	8000d70 <__aeabi_dadd+0x568>
 8000b5a:	2a00      	cmp	r2, #0
 8000b5c:	d100      	bne.n	8000b60 <__aeabi_dadd+0x358>
 8000b5e:	e15e      	b.n	8000e1e <__aeabi_dadd+0x616>
 8000b60:	464a      	mov	r2, r9
 8000b62:	4302      	orrs	r2, r0
 8000b64:	d000      	beq.n	8000b68 <__aeabi_dadd+0x360>
 8000b66:	e161      	b.n	8000e2c <__aeabi_dadd+0x624>
 8000b68:	074a      	lsls	r2, r1, #29
 8000b6a:	08db      	lsrs	r3, r3, #3
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	08c9      	lsrs	r1, r1, #3
 8000b70:	e77c      	b.n	8000a6c <__aeabi_dadd+0x264>
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	000007ff 	.word	0x000007ff
 8000b78:	ff7fffff 	.word	0xff7fffff
 8000b7c:	000007fe 	.word	0x000007fe
 8000b80:	4ccf      	ldr	r4, [pc, #828]	; (8000ec0 <__aeabi_dadd+0x6b8>)
 8000b82:	42a2      	cmp	r2, r4
 8000b84:	d100      	bne.n	8000b88 <__aeabi_dadd+0x380>
 8000b86:	e0ce      	b.n	8000d26 <__aeabi_dadd+0x51e>
 8000b88:	2480      	movs	r4, #128	; 0x80
 8000b8a:	0424      	lsls	r4, r4, #16
 8000b8c:	4321      	orrs	r1, r4
 8000b8e:	2f38      	cmp	r7, #56	; 0x38
 8000b90:	dc5b      	bgt.n	8000c4a <__aeabi_dadd+0x442>
 8000b92:	2f1f      	cmp	r7, #31
 8000b94:	dd00      	ble.n	8000b98 <__aeabi_dadd+0x390>
 8000b96:	e0dc      	b.n	8000d52 <__aeabi_dadd+0x54a>
 8000b98:	2520      	movs	r5, #32
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	1bed      	subs	r5, r5, r7
 8000b9e:	001e      	movs	r6, r3
 8000ba0:	40ab      	lsls	r3, r5
 8000ba2:	40ac      	lsls	r4, r5
 8000ba4:	40fe      	lsrs	r6, r7
 8000ba6:	1e5d      	subs	r5, r3, #1
 8000ba8:	41ab      	sbcs	r3, r5
 8000baa:	4334      	orrs	r4, r6
 8000bac:	40f9      	lsrs	r1, r7
 8000bae:	431c      	orrs	r4, r3
 8000bb0:	464b      	mov	r3, r9
 8000bb2:	1a5b      	subs	r3, r3, r1
 8000bb4:	4699      	mov	r9, r3
 8000bb6:	e04c      	b.n	8000c52 <__aeabi_dadd+0x44a>
 8000bb8:	464a      	mov	r2, r9
 8000bba:	1a1c      	subs	r4, r3, r0
 8000bbc:	1a88      	subs	r0, r1, r2
 8000bbe:	42a3      	cmp	r3, r4
 8000bc0:	4192      	sbcs	r2, r2
 8000bc2:	4252      	negs	r2, r2
 8000bc4:	4692      	mov	sl, r2
 8000bc6:	0002      	movs	r2, r0
 8000bc8:	4650      	mov	r0, sl
 8000bca:	1a12      	subs	r2, r2, r0
 8000bcc:	4692      	mov	sl, r2
 8000bce:	0212      	lsls	r2, r2, #8
 8000bd0:	d478      	bmi.n	8000cc4 <__aeabi_dadd+0x4bc>
 8000bd2:	4653      	mov	r3, sl
 8000bd4:	4323      	orrs	r3, r4
 8000bd6:	d000      	beq.n	8000bda <__aeabi_dadd+0x3d2>
 8000bd8:	e66a      	b.n	80008b0 <__aeabi_dadd+0xa8>
 8000bda:	2100      	movs	r1, #0
 8000bdc:	2500      	movs	r5, #0
 8000bde:	e745      	b.n	8000a6c <__aeabi_dadd+0x264>
 8000be0:	074a      	lsls	r2, r1, #29
 8000be2:	08db      	lsrs	r3, r3, #3
 8000be4:	4313      	orrs	r3, r2
 8000be6:	08c9      	lsrs	r1, r1, #3
 8000be8:	e73d      	b.n	8000a66 <__aeabi_dadd+0x25e>
 8000bea:	181c      	adds	r4, r3, r0
 8000bec:	429c      	cmp	r4, r3
 8000bee:	419b      	sbcs	r3, r3
 8000bf0:	4449      	add	r1, r9
 8000bf2:	468a      	mov	sl, r1
 8000bf4:	425b      	negs	r3, r3
 8000bf6:	449a      	add	sl, r3
 8000bf8:	4653      	mov	r3, sl
 8000bfa:	2601      	movs	r6, #1
 8000bfc:	021b      	lsls	r3, r3, #8
 8000bfe:	d400      	bmi.n	8000c02 <__aeabi_dadd+0x3fa>
 8000c00:	e727      	b.n	8000a52 <__aeabi_dadd+0x24a>
 8000c02:	2602      	movs	r6, #2
 8000c04:	4652      	mov	r2, sl
 8000c06:	4baf      	ldr	r3, [pc, #700]	; (8000ec4 <__aeabi_dadd+0x6bc>)
 8000c08:	2101      	movs	r1, #1
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	0013      	movs	r3, r2
 8000c0e:	4021      	ands	r1, r4
 8000c10:	0862      	lsrs	r2, r4, #1
 8000c12:	430a      	orrs	r2, r1
 8000c14:	07dc      	lsls	r4, r3, #31
 8000c16:	085b      	lsrs	r3, r3, #1
 8000c18:	469a      	mov	sl, r3
 8000c1a:	4314      	orrs	r4, r2
 8000c1c:	e670      	b.n	8000900 <__aeabi_dadd+0xf8>
 8000c1e:	003a      	movs	r2, r7
 8000c20:	464c      	mov	r4, r9
 8000c22:	3a20      	subs	r2, #32
 8000c24:	40d4      	lsrs	r4, r2
 8000c26:	46a4      	mov	ip, r4
 8000c28:	2f20      	cmp	r7, #32
 8000c2a:	d007      	beq.n	8000c3c <__aeabi_dadd+0x434>
 8000c2c:	2240      	movs	r2, #64	; 0x40
 8000c2e:	4648      	mov	r0, r9
 8000c30:	1bd2      	subs	r2, r2, r7
 8000c32:	4090      	lsls	r0, r2
 8000c34:	0002      	movs	r2, r0
 8000c36:	4640      	mov	r0, r8
 8000c38:	4310      	orrs	r0, r2
 8000c3a:	4680      	mov	r8, r0
 8000c3c:	4640      	mov	r0, r8
 8000c3e:	1e42      	subs	r2, r0, #1
 8000c40:	4190      	sbcs	r0, r2
 8000c42:	4662      	mov	r2, ip
 8000c44:	0004      	movs	r4, r0
 8000c46:	4314      	orrs	r4, r2
 8000c48:	e624      	b.n	8000894 <__aeabi_dadd+0x8c>
 8000c4a:	4319      	orrs	r1, r3
 8000c4c:	000c      	movs	r4, r1
 8000c4e:	1e63      	subs	r3, r4, #1
 8000c50:	419c      	sbcs	r4, r3
 8000c52:	4643      	mov	r3, r8
 8000c54:	1b1c      	subs	r4, r3, r4
 8000c56:	45a0      	cmp	r8, r4
 8000c58:	419b      	sbcs	r3, r3
 8000c5a:	4649      	mov	r1, r9
 8000c5c:	425b      	negs	r3, r3
 8000c5e:	1acb      	subs	r3, r1, r3
 8000c60:	469a      	mov	sl, r3
 8000c62:	4665      	mov	r5, ip
 8000c64:	0016      	movs	r6, r2
 8000c66:	e61b      	b.n	80008a0 <__aeabi_dadd+0x98>
 8000c68:	000c      	movs	r4, r1
 8000c6a:	431c      	orrs	r4, r3
 8000c6c:	d100      	bne.n	8000c70 <__aeabi_dadd+0x468>
 8000c6e:	e0c7      	b.n	8000e00 <__aeabi_dadd+0x5f8>
 8000c70:	1e7c      	subs	r4, r7, #1
 8000c72:	2f01      	cmp	r7, #1
 8000c74:	d100      	bne.n	8000c78 <__aeabi_dadd+0x470>
 8000c76:	e0f9      	b.n	8000e6c <__aeabi_dadd+0x664>
 8000c78:	4e91      	ldr	r6, [pc, #580]	; (8000ec0 <__aeabi_dadd+0x6b8>)
 8000c7a:	42b7      	cmp	r7, r6
 8000c7c:	d05c      	beq.n	8000d38 <__aeabi_dadd+0x530>
 8000c7e:	0027      	movs	r7, r4
 8000c80:	e740      	b.n	8000b04 <__aeabi_dadd+0x2fc>
 8000c82:	2220      	movs	r2, #32
 8000c84:	464c      	mov	r4, r9
 8000c86:	4640      	mov	r0, r8
 8000c88:	1bd2      	subs	r2, r2, r7
 8000c8a:	4094      	lsls	r4, r2
 8000c8c:	40f8      	lsrs	r0, r7
 8000c8e:	4304      	orrs	r4, r0
 8000c90:	4640      	mov	r0, r8
 8000c92:	4090      	lsls	r0, r2
 8000c94:	1e42      	subs	r2, r0, #1
 8000c96:	4190      	sbcs	r0, r2
 8000c98:	464a      	mov	r2, r9
 8000c9a:	40fa      	lsrs	r2, r7
 8000c9c:	4304      	orrs	r4, r0
 8000c9e:	1889      	adds	r1, r1, r2
 8000ca0:	e6ee      	b.n	8000a80 <__aeabi_dadd+0x278>
 8000ca2:	4c87      	ldr	r4, [pc, #540]	; (8000ec0 <__aeabi_dadd+0x6b8>)
 8000ca4:	42a2      	cmp	r2, r4
 8000ca6:	d100      	bne.n	8000caa <__aeabi_dadd+0x4a2>
 8000ca8:	e6f9      	b.n	8000a9e <__aeabi_dadd+0x296>
 8000caa:	1818      	adds	r0, r3, r0
 8000cac:	4298      	cmp	r0, r3
 8000cae:	419b      	sbcs	r3, r3
 8000cb0:	4449      	add	r1, r9
 8000cb2:	425b      	negs	r3, r3
 8000cb4:	18cb      	adds	r3, r1, r3
 8000cb6:	07dc      	lsls	r4, r3, #31
 8000cb8:	0840      	lsrs	r0, r0, #1
 8000cba:	085b      	lsrs	r3, r3, #1
 8000cbc:	469a      	mov	sl, r3
 8000cbe:	0016      	movs	r6, r2
 8000cc0:	4304      	orrs	r4, r0
 8000cc2:	e6c6      	b.n	8000a52 <__aeabi_dadd+0x24a>
 8000cc4:	4642      	mov	r2, r8
 8000cc6:	1ad4      	subs	r4, r2, r3
 8000cc8:	45a0      	cmp	r8, r4
 8000cca:	4180      	sbcs	r0, r0
 8000ccc:	464b      	mov	r3, r9
 8000cce:	4240      	negs	r0, r0
 8000cd0:	1a59      	subs	r1, r3, r1
 8000cd2:	1a0b      	subs	r3, r1, r0
 8000cd4:	469a      	mov	sl, r3
 8000cd6:	4665      	mov	r5, ip
 8000cd8:	e5ea      	b.n	80008b0 <__aeabi_dadd+0xa8>
 8000cda:	464b      	mov	r3, r9
 8000cdc:	464a      	mov	r2, r9
 8000cde:	08c0      	lsrs	r0, r0, #3
 8000ce0:	075b      	lsls	r3, r3, #29
 8000ce2:	4665      	mov	r5, ip
 8000ce4:	4303      	orrs	r3, r0
 8000ce6:	08d1      	lsrs	r1, r2, #3
 8000ce8:	e6bd      	b.n	8000a66 <__aeabi_dadd+0x25e>
 8000cea:	2a00      	cmp	r2, #0
 8000cec:	d000      	beq.n	8000cf0 <__aeabi_dadd+0x4e8>
 8000cee:	e08e      	b.n	8000e0e <__aeabi_dadd+0x606>
 8000cf0:	464b      	mov	r3, r9
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	d117      	bne.n	8000d26 <__aeabi_dadd+0x51e>
 8000cf6:	2180      	movs	r1, #128	; 0x80
 8000cf8:	2500      	movs	r5, #0
 8000cfa:	0309      	lsls	r1, r1, #12
 8000cfc:	e6da      	b.n	8000ab4 <__aeabi_dadd+0x2ac>
 8000cfe:	074a      	lsls	r2, r1, #29
 8000d00:	08db      	lsrs	r3, r3, #3
 8000d02:	4313      	orrs	r3, r2
 8000d04:	08c9      	lsrs	r1, r1, #3
 8000d06:	e6d1      	b.n	8000aac <__aeabi_dadd+0x2a4>
 8000d08:	1a1c      	subs	r4, r3, r0
 8000d0a:	464a      	mov	r2, r9
 8000d0c:	42a3      	cmp	r3, r4
 8000d0e:	419b      	sbcs	r3, r3
 8000d10:	1a89      	subs	r1, r1, r2
 8000d12:	425b      	negs	r3, r3
 8000d14:	1acb      	subs	r3, r1, r3
 8000d16:	469a      	mov	sl, r3
 8000d18:	2601      	movs	r6, #1
 8000d1a:	e5c1      	b.n	80008a0 <__aeabi_dadd+0x98>
 8000d1c:	074a      	lsls	r2, r1, #29
 8000d1e:	08db      	lsrs	r3, r3, #3
 8000d20:	4313      	orrs	r3, r2
 8000d22:	08c9      	lsrs	r1, r1, #3
 8000d24:	e69f      	b.n	8000a66 <__aeabi_dadd+0x25e>
 8000d26:	4643      	mov	r3, r8
 8000d28:	08d8      	lsrs	r0, r3, #3
 8000d2a:	464b      	mov	r3, r9
 8000d2c:	464a      	mov	r2, r9
 8000d2e:	075b      	lsls	r3, r3, #29
 8000d30:	4665      	mov	r5, ip
 8000d32:	4303      	orrs	r3, r0
 8000d34:	08d1      	lsrs	r1, r2, #3
 8000d36:	e6b9      	b.n	8000aac <__aeabi_dadd+0x2a4>
 8000d38:	4643      	mov	r3, r8
 8000d3a:	08d8      	lsrs	r0, r3, #3
 8000d3c:	464b      	mov	r3, r9
 8000d3e:	464a      	mov	r2, r9
 8000d40:	075b      	lsls	r3, r3, #29
 8000d42:	4303      	orrs	r3, r0
 8000d44:	08d1      	lsrs	r1, r2, #3
 8000d46:	e6b1      	b.n	8000aac <__aeabi_dadd+0x2a4>
 8000d48:	4319      	orrs	r1, r3
 8000d4a:	000c      	movs	r4, r1
 8000d4c:	1e63      	subs	r3, r4, #1
 8000d4e:	419c      	sbcs	r4, r3
 8000d50:	e6eb      	b.n	8000b2a <__aeabi_dadd+0x322>
 8000d52:	003c      	movs	r4, r7
 8000d54:	000d      	movs	r5, r1
 8000d56:	3c20      	subs	r4, #32
 8000d58:	40e5      	lsrs	r5, r4
 8000d5a:	2f20      	cmp	r7, #32
 8000d5c:	d003      	beq.n	8000d66 <__aeabi_dadd+0x55e>
 8000d5e:	2440      	movs	r4, #64	; 0x40
 8000d60:	1be4      	subs	r4, r4, r7
 8000d62:	40a1      	lsls	r1, r4
 8000d64:	430b      	orrs	r3, r1
 8000d66:	001c      	movs	r4, r3
 8000d68:	1e63      	subs	r3, r4, #1
 8000d6a:	419c      	sbcs	r4, r3
 8000d6c:	432c      	orrs	r4, r5
 8000d6e:	e770      	b.n	8000c52 <__aeabi_dadd+0x44a>
 8000d70:	2a00      	cmp	r2, #0
 8000d72:	d0e1      	beq.n	8000d38 <__aeabi_dadd+0x530>
 8000d74:	464a      	mov	r2, r9
 8000d76:	4302      	orrs	r2, r0
 8000d78:	d0c1      	beq.n	8000cfe <__aeabi_dadd+0x4f6>
 8000d7a:	074a      	lsls	r2, r1, #29
 8000d7c:	08db      	lsrs	r3, r3, #3
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	2280      	movs	r2, #128	; 0x80
 8000d82:	08c9      	lsrs	r1, r1, #3
 8000d84:	0312      	lsls	r2, r2, #12
 8000d86:	4211      	tst	r1, r2
 8000d88:	d008      	beq.n	8000d9c <__aeabi_dadd+0x594>
 8000d8a:	4648      	mov	r0, r9
 8000d8c:	08c4      	lsrs	r4, r0, #3
 8000d8e:	4214      	tst	r4, r2
 8000d90:	d104      	bne.n	8000d9c <__aeabi_dadd+0x594>
 8000d92:	4643      	mov	r3, r8
 8000d94:	0021      	movs	r1, r4
 8000d96:	08db      	lsrs	r3, r3, #3
 8000d98:	0742      	lsls	r2, r0, #29
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	0f5a      	lsrs	r2, r3, #29
 8000d9e:	00db      	lsls	r3, r3, #3
 8000da0:	0752      	lsls	r2, r2, #29
 8000da2:	08db      	lsrs	r3, r3, #3
 8000da4:	4313      	orrs	r3, r2
 8000da6:	e681      	b.n	8000aac <__aeabi_dadd+0x2a4>
 8000da8:	464b      	mov	r3, r9
 8000daa:	4303      	orrs	r3, r0
 8000dac:	d100      	bne.n	8000db0 <__aeabi_dadd+0x5a8>
 8000dae:	e714      	b.n	8000bda <__aeabi_dadd+0x3d2>
 8000db0:	464b      	mov	r3, r9
 8000db2:	464a      	mov	r2, r9
 8000db4:	08c0      	lsrs	r0, r0, #3
 8000db6:	075b      	lsls	r3, r3, #29
 8000db8:	4665      	mov	r5, ip
 8000dba:	4303      	orrs	r3, r0
 8000dbc:	08d1      	lsrs	r1, r2, #3
 8000dbe:	e655      	b.n	8000a6c <__aeabi_dadd+0x264>
 8000dc0:	1ac4      	subs	r4, r0, r3
 8000dc2:	45a0      	cmp	r8, r4
 8000dc4:	4180      	sbcs	r0, r0
 8000dc6:	464b      	mov	r3, r9
 8000dc8:	4240      	negs	r0, r0
 8000dca:	1a59      	subs	r1, r3, r1
 8000dcc:	1a0b      	subs	r3, r1, r0
 8000dce:	469a      	mov	sl, r3
 8000dd0:	4665      	mov	r5, ip
 8000dd2:	2601      	movs	r6, #1
 8000dd4:	e564      	b.n	80008a0 <__aeabi_dadd+0x98>
 8000dd6:	1a1c      	subs	r4, r3, r0
 8000dd8:	464a      	mov	r2, r9
 8000dda:	42a3      	cmp	r3, r4
 8000ddc:	4180      	sbcs	r0, r0
 8000dde:	1a8a      	subs	r2, r1, r2
 8000de0:	4240      	negs	r0, r0
 8000de2:	1a12      	subs	r2, r2, r0
 8000de4:	4692      	mov	sl, r2
 8000de6:	0212      	lsls	r2, r2, #8
 8000de8:	d549      	bpl.n	8000e7e <__aeabi_dadd+0x676>
 8000dea:	4642      	mov	r2, r8
 8000dec:	1ad4      	subs	r4, r2, r3
 8000dee:	45a0      	cmp	r8, r4
 8000df0:	4180      	sbcs	r0, r0
 8000df2:	464b      	mov	r3, r9
 8000df4:	4240      	negs	r0, r0
 8000df6:	1a59      	subs	r1, r3, r1
 8000df8:	1a0b      	subs	r3, r1, r0
 8000dfa:	469a      	mov	sl, r3
 8000dfc:	4665      	mov	r5, ip
 8000dfe:	e57f      	b.n	8000900 <__aeabi_dadd+0xf8>
 8000e00:	464b      	mov	r3, r9
 8000e02:	464a      	mov	r2, r9
 8000e04:	08c0      	lsrs	r0, r0, #3
 8000e06:	075b      	lsls	r3, r3, #29
 8000e08:	4303      	orrs	r3, r0
 8000e0a:	08d1      	lsrs	r1, r2, #3
 8000e0c:	e62b      	b.n	8000a66 <__aeabi_dadd+0x25e>
 8000e0e:	464a      	mov	r2, r9
 8000e10:	08db      	lsrs	r3, r3, #3
 8000e12:	4302      	orrs	r2, r0
 8000e14:	d138      	bne.n	8000e88 <__aeabi_dadd+0x680>
 8000e16:	074a      	lsls	r2, r1, #29
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	08c9      	lsrs	r1, r1, #3
 8000e1c:	e646      	b.n	8000aac <__aeabi_dadd+0x2a4>
 8000e1e:	464b      	mov	r3, r9
 8000e20:	464a      	mov	r2, r9
 8000e22:	08c0      	lsrs	r0, r0, #3
 8000e24:	075b      	lsls	r3, r3, #29
 8000e26:	4303      	orrs	r3, r0
 8000e28:	08d1      	lsrs	r1, r2, #3
 8000e2a:	e61f      	b.n	8000a6c <__aeabi_dadd+0x264>
 8000e2c:	181c      	adds	r4, r3, r0
 8000e2e:	429c      	cmp	r4, r3
 8000e30:	419b      	sbcs	r3, r3
 8000e32:	4449      	add	r1, r9
 8000e34:	468a      	mov	sl, r1
 8000e36:	425b      	negs	r3, r3
 8000e38:	449a      	add	sl, r3
 8000e3a:	4653      	mov	r3, sl
 8000e3c:	021b      	lsls	r3, r3, #8
 8000e3e:	d400      	bmi.n	8000e42 <__aeabi_dadd+0x63a>
 8000e40:	e607      	b.n	8000a52 <__aeabi_dadd+0x24a>
 8000e42:	4652      	mov	r2, sl
 8000e44:	4b1f      	ldr	r3, [pc, #124]	; (8000ec4 <__aeabi_dadd+0x6bc>)
 8000e46:	2601      	movs	r6, #1
 8000e48:	401a      	ands	r2, r3
 8000e4a:	4692      	mov	sl, r2
 8000e4c:	e601      	b.n	8000a52 <__aeabi_dadd+0x24a>
 8000e4e:	003c      	movs	r4, r7
 8000e50:	000e      	movs	r6, r1
 8000e52:	3c20      	subs	r4, #32
 8000e54:	40e6      	lsrs	r6, r4
 8000e56:	2f20      	cmp	r7, #32
 8000e58:	d003      	beq.n	8000e62 <__aeabi_dadd+0x65a>
 8000e5a:	2440      	movs	r4, #64	; 0x40
 8000e5c:	1be4      	subs	r4, r4, r7
 8000e5e:	40a1      	lsls	r1, r4
 8000e60:	430b      	orrs	r3, r1
 8000e62:	001c      	movs	r4, r3
 8000e64:	1e63      	subs	r3, r4, #1
 8000e66:	419c      	sbcs	r4, r3
 8000e68:	4334      	orrs	r4, r6
 8000e6a:	e65e      	b.n	8000b2a <__aeabi_dadd+0x322>
 8000e6c:	4443      	add	r3, r8
 8000e6e:	4283      	cmp	r3, r0
 8000e70:	4180      	sbcs	r0, r0
 8000e72:	4449      	add	r1, r9
 8000e74:	468a      	mov	sl, r1
 8000e76:	4240      	negs	r0, r0
 8000e78:	001c      	movs	r4, r3
 8000e7a:	4482      	add	sl, r0
 8000e7c:	e6bc      	b.n	8000bf8 <__aeabi_dadd+0x3f0>
 8000e7e:	4653      	mov	r3, sl
 8000e80:	4323      	orrs	r3, r4
 8000e82:	d100      	bne.n	8000e86 <__aeabi_dadd+0x67e>
 8000e84:	e6a9      	b.n	8000bda <__aeabi_dadd+0x3d2>
 8000e86:	e5e4      	b.n	8000a52 <__aeabi_dadd+0x24a>
 8000e88:	074a      	lsls	r2, r1, #29
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	2280      	movs	r2, #128	; 0x80
 8000e8e:	08c9      	lsrs	r1, r1, #3
 8000e90:	0312      	lsls	r2, r2, #12
 8000e92:	4211      	tst	r1, r2
 8000e94:	d009      	beq.n	8000eaa <__aeabi_dadd+0x6a2>
 8000e96:	4648      	mov	r0, r9
 8000e98:	08c4      	lsrs	r4, r0, #3
 8000e9a:	4214      	tst	r4, r2
 8000e9c:	d105      	bne.n	8000eaa <__aeabi_dadd+0x6a2>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	4665      	mov	r5, ip
 8000ea2:	0021      	movs	r1, r4
 8000ea4:	08db      	lsrs	r3, r3, #3
 8000ea6:	0742      	lsls	r2, r0, #29
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	0f5a      	lsrs	r2, r3, #29
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	08db      	lsrs	r3, r3, #3
 8000eb0:	0752      	lsls	r2, r2, #29
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	e5fa      	b.n	8000aac <__aeabi_dadd+0x2a4>
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	4a01      	ldr	r2, [pc, #4]	; (8000ec0 <__aeabi_dadd+0x6b8>)
 8000eba:	001c      	movs	r4, r3
 8000ebc:	e540      	b.n	8000940 <__aeabi_dadd+0x138>
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	000007ff 	.word	0x000007ff
 8000ec4:	ff7fffff 	.word	0xff7fffff

08000ec8 <__aeabi_ddiv>:
 8000ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eca:	4657      	mov	r7, sl
 8000ecc:	464e      	mov	r6, r9
 8000ece:	4645      	mov	r5, r8
 8000ed0:	46de      	mov	lr, fp
 8000ed2:	b5e0      	push	{r5, r6, r7, lr}
 8000ed4:	030c      	lsls	r4, r1, #12
 8000ed6:	001f      	movs	r7, r3
 8000ed8:	004b      	lsls	r3, r1, #1
 8000eda:	4681      	mov	r9, r0
 8000edc:	4692      	mov	sl, r2
 8000ede:	0005      	movs	r5, r0
 8000ee0:	b085      	sub	sp, #20
 8000ee2:	0b24      	lsrs	r4, r4, #12
 8000ee4:	0d5b      	lsrs	r3, r3, #21
 8000ee6:	0fce      	lsrs	r6, r1, #31
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d100      	bne.n	8000eee <__aeabi_ddiv+0x26>
 8000eec:	e152      	b.n	8001194 <__aeabi_ddiv+0x2cc>
 8000eee:	4ad2      	ldr	r2, [pc, #840]	; (8001238 <__aeabi_ddiv+0x370>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d100      	bne.n	8000ef6 <__aeabi_ddiv+0x2e>
 8000ef4:	e16e      	b.n	80011d4 <__aeabi_ddiv+0x30c>
 8000ef6:	0f42      	lsrs	r2, r0, #29
 8000ef8:	00e4      	lsls	r4, r4, #3
 8000efa:	4314      	orrs	r4, r2
 8000efc:	2280      	movs	r2, #128	; 0x80
 8000efe:	0412      	lsls	r2, r2, #16
 8000f00:	4322      	orrs	r2, r4
 8000f02:	4690      	mov	r8, r2
 8000f04:	4acd      	ldr	r2, [pc, #820]	; (800123c <__aeabi_ddiv+0x374>)
 8000f06:	00c5      	lsls	r5, r0, #3
 8000f08:	4693      	mov	fp, r2
 8000f0a:	449b      	add	fp, r3
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	4699      	mov	r9, r3
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	033c      	lsls	r4, r7, #12
 8000f14:	007b      	lsls	r3, r7, #1
 8000f16:	4650      	mov	r0, sl
 8000f18:	0b24      	lsrs	r4, r4, #12
 8000f1a:	0d5b      	lsrs	r3, r3, #21
 8000f1c:	0fff      	lsrs	r7, r7, #31
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d100      	bne.n	8000f24 <__aeabi_ddiv+0x5c>
 8000f22:	e11a      	b.n	800115a <__aeabi_ddiv+0x292>
 8000f24:	4ac4      	ldr	r2, [pc, #784]	; (8001238 <__aeabi_ddiv+0x370>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d100      	bne.n	8000f2c <__aeabi_ddiv+0x64>
 8000f2a:	e15e      	b.n	80011ea <__aeabi_ddiv+0x322>
 8000f2c:	0f42      	lsrs	r2, r0, #29
 8000f2e:	00e4      	lsls	r4, r4, #3
 8000f30:	4322      	orrs	r2, r4
 8000f32:	2480      	movs	r4, #128	; 0x80
 8000f34:	0424      	lsls	r4, r4, #16
 8000f36:	4314      	orrs	r4, r2
 8000f38:	4ac0      	ldr	r2, [pc, #768]	; (800123c <__aeabi_ddiv+0x374>)
 8000f3a:	00c1      	lsls	r1, r0, #3
 8000f3c:	4694      	mov	ip, r2
 8000f3e:	465a      	mov	r2, fp
 8000f40:	4463      	add	r3, ip
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	469b      	mov	fp, r3
 8000f46:	2000      	movs	r0, #0
 8000f48:	0033      	movs	r3, r6
 8000f4a:	407b      	eors	r3, r7
 8000f4c:	469a      	mov	sl, r3
 8000f4e:	464b      	mov	r3, r9
 8000f50:	2b0f      	cmp	r3, #15
 8000f52:	d827      	bhi.n	8000fa4 <__aeabi_ddiv+0xdc>
 8000f54:	4aba      	ldr	r2, [pc, #744]	; (8001240 <__aeabi_ddiv+0x378>)
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	58d3      	ldr	r3, [r2, r3]
 8000f5a:	469f      	mov	pc, r3
 8000f5c:	46b2      	mov	sl, r6
 8000f5e:	9b00      	ldr	r3, [sp, #0]
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d016      	beq.n	8000f92 <__aeabi_ddiv+0xca>
 8000f64:	2b03      	cmp	r3, #3
 8000f66:	d100      	bne.n	8000f6a <__aeabi_ddiv+0xa2>
 8000f68:	e287      	b.n	800147a <__aeabi_ddiv+0x5b2>
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d000      	beq.n	8000f70 <__aeabi_ddiv+0xa8>
 8000f6e:	e0d5      	b.n	800111c <__aeabi_ddiv+0x254>
 8000f70:	2300      	movs	r3, #0
 8000f72:	2200      	movs	r2, #0
 8000f74:	2500      	movs	r5, #0
 8000f76:	051b      	lsls	r3, r3, #20
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	4652      	mov	r2, sl
 8000f7c:	07d2      	lsls	r2, r2, #31
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	0028      	movs	r0, r5
 8000f82:	0019      	movs	r1, r3
 8000f84:	b005      	add	sp, #20
 8000f86:	bcf0      	pop	{r4, r5, r6, r7}
 8000f88:	46bb      	mov	fp, r7
 8000f8a:	46b2      	mov	sl, r6
 8000f8c:	46a9      	mov	r9, r5
 8000f8e:	46a0      	mov	r8, r4
 8000f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f92:	2200      	movs	r2, #0
 8000f94:	2500      	movs	r5, #0
 8000f96:	4ba8      	ldr	r3, [pc, #672]	; (8001238 <__aeabi_ddiv+0x370>)
 8000f98:	e7ed      	b.n	8000f76 <__aeabi_ddiv+0xae>
 8000f9a:	46ba      	mov	sl, r7
 8000f9c:	46a0      	mov	r8, r4
 8000f9e:	000d      	movs	r5, r1
 8000fa0:	9000      	str	r0, [sp, #0]
 8000fa2:	e7dc      	b.n	8000f5e <__aeabi_ddiv+0x96>
 8000fa4:	4544      	cmp	r4, r8
 8000fa6:	d200      	bcs.n	8000faa <__aeabi_ddiv+0xe2>
 8000fa8:	e1c4      	b.n	8001334 <__aeabi_ddiv+0x46c>
 8000faa:	d100      	bne.n	8000fae <__aeabi_ddiv+0xe6>
 8000fac:	e1bf      	b.n	800132e <__aeabi_ddiv+0x466>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	425b      	negs	r3, r3
 8000fb2:	469c      	mov	ip, r3
 8000fb4:	002e      	movs	r6, r5
 8000fb6:	4640      	mov	r0, r8
 8000fb8:	2500      	movs	r5, #0
 8000fba:	44e3      	add	fp, ip
 8000fbc:	0223      	lsls	r3, r4, #8
 8000fbe:	0e0c      	lsrs	r4, r1, #24
 8000fc0:	431c      	orrs	r4, r3
 8000fc2:	0c1b      	lsrs	r3, r3, #16
 8000fc4:	4699      	mov	r9, r3
 8000fc6:	0423      	lsls	r3, r4, #16
 8000fc8:	020a      	lsls	r2, r1, #8
 8000fca:	0c1f      	lsrs	r7, r3, #16
 8000fcc:	4649      	mov	r1, r9
 8000fce:	9200      	str	r2, [sp, #0]
 8000fd0:	9701      	str	r7, [sp, #4]
 8000fd2:	f7ff f937 	bl	8000244 <__aeabi_uidivmod>
 8000fd6:	0002      	movs	r2, r0
 8000fd8:	437a      	muls	r2, r7
 8000fda:	040b      	lsls	r3, r1, #16
 8000fdc:	0c31      	lsrs	r1, r6, #16
 8000fde:	4680      	mov	r8, r0
 8000fe0:	4319      	orrs	r1, r3
 8000fe2:	428a      	cmp	r2, r1
 8000fe4:	d907      	bls.n	8000ff6 <__aeabi_ddiv+0x12e>
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	425b      	negs	r3, r3
 8000fea:	469c      	mov	ip, r3
 8000fec:	1909      	adds	r1, r1, r4
 8000fee:	44e0      	add	r8, ip
 8000ff0:	428c      	cmp	r4, r1
 8000ff2:	d800      	bhi.n	8000ff6 <__aeabi_ddiv+0x12e>
 8000ff4:	e201      	b.n	80013fa <__aeabi_ddiv+0x532>
 8000ff6:	1a88      	subs	r0, r1, r2
 8000ff8:	4649      	mov	r1, r9
 8000ffa:	f7ff f923 	bl	8000244 <__aeabi_uidivmod>
 8000ffe:	9a01      	ldr	r2, [sp, #4]
 8001000:	0436      	lsls	r6, r6, #16
 8001002:	4342      	muls	r2, r0
 8001004:	0409      	lsls	r1, r1, #16
 8001006:	0c36      	lsrs	r6, r6, #16
 8001008:	0003      	movs	r3, r0
 800100a:	430e      	orrs	r6, r1
 800100c:	42b2      	cmp	r2, r6
 800100e:	d904      	bls.n	800101a <__aeabi_ddiv+0x152>
 8001010:	1936      	adds	r6, r6, r4
 8001012:	3b01      	subs	r3, #1
 8001014:	42b4      	cmp	r4, r6
 8001016:	d800      	bhi.n	800101a <__aeabi_ddiv+0x152>
 8001018:	e1e9      	b.n	80013ee <__aeabi_ddiv+0x526>
 800101a:	1ab0      	subs	r0, r6, r2
 800101c:	4642      	mov	r2, r8
 800101e:	9e00      	ldr	r6, [sp, #0]
 8001020:	0412      	lsls	r2, r2, #16
 8001022:	431a      	orrs	r2, r3
 8001024:	0c33      	lsrs	r3, r6, #16
 8001026:	001f      	movs	r7, r3
 8001028:	0c11      	lsrs	r1, r2, #16
 800102a:	4690      	mov	r8, r2
 800102c:	9302      	str	r3, [sp, #8]
 800102e:	0413      	lsls	r3, r2, #16
 8001030:	0432      	lsls	r2, r6, #16
 8001032:	0c16      	lsrs	r6, r2, #16
 8001034:	0032      	movs	r2, r6
 8001036:	0c1b      	lsrs	r3, r3, #16
 8001038:	435a      	muls	r2, r3
 800103a:	9603      	str	r6, [sp, #12]
 800103c:	437b      	muls	r3, r7
 800103e:	434e      	muls	r6, r1
 8001040:	4379      	muls	r1, r7
 8001042:	0c17      	lsrs	r7, r2, #16
 8001044:	46bc      	mov	ip, r7
 8001046:	199b      	adds	r3, r3, r6
 8001048:	4463      	add	r3, ip
 800104a:	429e      	cmp	r6, r3
 800104c:	d903      	bls.n	8001056 <__aeabi_ddiv+0x18e>
 800104e:	2680      	movs	r6, #128	; 0x80
 8001050:	0276      	lsls	r6, r6, #9
 8001052:	46b4      	mov	ip, r6
 8001054:	4461      	add	r1, ip
 8001056:	0c1e      	lsrs	r6, r3, #16
 8001058:	1871      	adds	r1, r6, r1
 800105a:	0416      	lsls	r6, r2, #16
 800105c:	041b      	lsls	r3, r3, #16
 800105e:	0c36      	lsrs	r6, r6, #16
 8001060:	199e      	adds	r6, r3, r6
 8001062:	4288      	cmp	r0, r1
 8001064:	d302      	bcc.n	800106c <__aeabi_ddiv+0x1a4>
 8001066:	d112      	bne.n	800108e <__aeabi_ddiv+0x1c6>
 8001068:	42b5      	cmp	r5, r6
 800106a:	d210      	bcs.n	800108e <__aeabi_ddiv+0x1c6>
 800106c:	4643      	mov	r3, r8
 800106e:	1e5a      	subs	r2, r3, #1
 8001070:	9b00      	ldr	r3, [sp, #0]
 8001072:	469c      	mov	ip, r3
 8001074:	4465      	add	r5, ip
 8001076:	001f      	movs	r7, r3
 8001078:	429d      	cmp	r5, r3
 800107a:	419b      	sbcs	r3, r3
 800107c:	425b      	negs	r3, r3
 800107e:	191b      	adds	r3, r3, r4
 8001080:	18c0      	adds	r0, r0, r3
 8001082:	4284      	cmp	r4, r0
 8001084:	d200      	bcs.n	8001088 <__aeabi_ddiv+0x1c0>
 8001086:	e19e      	b.n	80013c6 <__aeabi_ddiv+0x4fe>
 8001088:	d100      	bne.n	800108c <__aeabi_ddiv+0x1c4>
 800108a:	e199      	b.n	80013c0 <__aeabi_ddiv+0x4f8>
 800108c:	4690      	mov	r8, r2
 800108e:	1bae      	subs	r6, r5, r6
 8001090:	42b5      	cmp	r5, r6
 8001092:	41ad      	sbcs	r5, r5
 8001094:	1a40      	subs	r0, r0, r1
 8001096:	426d      	negs	r5, r5
 8001098:	1b40      	subs	r0, r0, r5
 800109a:	4284      	cmp	r4, r0
 800109c:	d100      	bne.n	80010a0 <__aeabi_ddiv+0x1d8>
 800109e:	e1d2      	b.n	8001446 <__aeabi_ddiv+0x57e>
 80010a0:	4649      	mov	r1, r9
 80010a2:	f7ff f8cf 	bl	8000244 <__aeabi_uidivmod>
 80010a6:	9a01      	ldr	r2, [sp, #4]
 80010a8:	040b      	lsls	r3, r1, #16
 80010aa:	4342      	muls	r2, r0
 80010ac:	0c31      	lsrs	r1, r6, #16
 80010ae:	0005      	movs	r5, r0
 80010b0:	4319      	orrs	r1, r3
 80010b2:	428a      	cmp	r2, r1
 80010b4:	d900      	bls.n	80010b8 <__aeabi_ddiv+0x1f0>
 80010b6:	e16c      	b.n	8001392 <__aeabi_ddiv+0x4ca>
 80010b8:	1a88      	subs	r0, r1, r2
 80010ba:	4649      	mov	r1, r9
 80010bc:	f7ff f8c2 	bl	8000244 <__aeabi_uidivmod>
 80010c0:	9a01      	ldr	r2, [sp, #4]
 80010c2:	0436      	lsls	r6, r6, #16
 80010c4:	4342      	muls	r2, r0
 80010c6:	0409      	lsls	r1, r1, #16
 80010c8:	0c36      	lsrs	r6, r6, #16
 80010ca:	0003      	movs	r3, r0
 80010cc:	430e      	orrs	r6, r1
 80010ce:	42b2      	cmp	r2, r6
 80010d0:	d900      	bls.n	80010d4 <__aeabi_ddiv+0x20c>
 80010d2:	e153      	b.n	800137c <__aeabi_ddiv+0x4b4>
 80010d4:	9803      	ldr	r0, [sp, #12]
 80010d6:	1ab6      	subs	r6, r6, r2
 80010d8:	0002      	movs	r2, r0
 80010da:	042d      	lsls	r5, r5, #16
 80010dc:	431d      	orrs	r5, r3
 80010de:	9f02      	ldr	r7, [sp, #8]
 80010e0:	042b      	lsls	r3, r5, #16
 80010e2:	0c1b      	lsrs	r3, r3, #16
 80010e4:	435a      	muls	r2, r3
 80010e6:	437b      	muls	r3, r7
 80010e8:	469c      	mov	ip, r3
 80010ea:	0c29      	lsrs	r1, r5, #16
 80010ec:	4348      	muls	r0, r1
 80010ee:	0c13      	lsrs	r3, r2, #16
 80010f0:	4484      	add	ip, r0
 80010f2:	4463      	add	r3, ip
 80010f4:	4379      	muls	r1, r7
 80010f6:	4298      	cmp	r0, r3
 80010f8:	d903      	bls.n	8001102 <__aeabi_ddiv+0x23a>
 80010fa:	2080      	movs	r0, #128	; 0x80
 80010fc:	0240      	lsls	r0, r0, #9
 80010fe:	4684      	mov	ip, r0
 8001100:	4461      	add	r1, ip
 8001102:	0c18      	lsrs	r0, r3, #16
 8001104:	0412      	lsls	r2, r2, #16
 8001106:	041b      	lsls	r3, r3, #16
 8001108:	0c12      	lsrs	r2, r2, #16
 800110a:	1840      	adds	r0, r0, r1
 800110c:	189b      	adds	r3, r3, r2
 800110e:	4286      	cmp	r6, r0
 8001110:	d200      	bcs.n	8001114 <__aeabi_ddiv+0x24c>
 8001112:	e100      	b.n	8001316 <__aeabi_ddiv+0x44e>
 8001114:	d100      	bne.n	8001118 <__aeabi_ddiv+0x250>
 8001116:	e0fb      	b.n	8001310 <__aeabi_ddiv+0x448>
 8001118:	2301      	movs	r3, #1
 800111a:	431d      	orrs	r5, r3
 800111c:	4b49      	ldr	r3, [pc, #292]	; (8001244 <__aeabi_ddiv+0x37c>)
 800111e:	445b      	add	r3, fp
 8001120:	2b00      	cmp	r3, #0
 8001122:	dc00      	bgt.n	8001126 <__aeabi_ddiv+0x25e>
 8001124:	e0aa      	b.n	800127c <__aeabi_ddiv+0x3b4>
 8001126:	076a      	lsls	r2, r5, #29
 8001128:	d000      	beq.n	800112c <__aeabi_ddiv+0x264>
 800112a:	e13d      	b.n	80013a8 <__aeabi_ddiv+0x4e0>
 800112c:	08e9      	lsrs	r1, r5, #3
 800112e:	4642      	mov	r2, r8
 8001130:	01d2      	lsls	r2, r2, #7
 8001132:	d506      	bpl.n	8001142 <__aeabi_ddiv+0x27a>
 8001134:	4642      	mov	r2, r8
 8001136:	4b44      	ldr	r3, [pc, #272]	; (8001248 <__aeabi_ddiv+0x380>)
 8001138:	401a      	ands	r2, r3
 800113a:	2380      	movs	r3, #128	; 0x80
 800113c:	4690      	mov	r8, r2
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	445b      	add	r3, fp
 8001142:	4a42      	ldr	r2, [pc, #264]	; (800124c <__aeabi_ddiv+0x384>)
 8001144:	4293      	cmp	r3, r2
 8001146:	dd00      	ble.n	800114a <__aeabi_ddiv+0x282>
 8001148:	e723      	b.n	8000f92 <__aeabi_ddiv+0xca>
 800114a:	4642      	mov	r2, r8
 800114c:	055b      	lsls	r3, r3, #21
 800114e:	0755      	lsls	r5, r2, #29
 8001150:	0252      	lsls	r2, r2, #9
 8001152:	430d      	orrs	r5, r1
 8001154:	0b12      	lsrs	r2, r2, #12
 8001156:	0d5b      	lsrs	r3, r3, #21
 8001158:	e70d      	b.n	8000f76 <__aeabi_ddiv+0xae>
 800115a:	4651      	mov	r1, sl
 800115c:	4321      	orrs	r1, r4
 800115e:	d100      	bne.n	8001162 <__aeabi_ddiv+0x29a>
 8001160:	e07c      	b.n	800125c <__aeabi_ddiv+0x394>
 8001162:	2c00      	cmp	r4, #0
 8001164:	d100      	bne.n	8001168 <__aeabi_ddiv+0x2a0>
 8001166:	e0fb      	b.n	8001360 <__aeabi_ddiv+0x498>
 8001168:	0020      	movs	r0, r4
 800116a:	f001 fa63 	bl	8002634 <__clzsi2>
 800116e:	0002      	movs	r2, r0
 8001170:	3a0b      	subs	r2, #11
 8001172:	231d      	movs	r3, #29
 8001174:	1a9b      	subs	r3, r3, r2
 8001176:	4652      	mov	r2, sl
 8001178:	0001      	movs	r1, r0
 800117a:	40da      	lsrs	r2, r3
 800117c:	4653      	mov	r3, sl
 800117e:	3908      	subs	r1, #8
 8001180:	408b      	lsls	r3, r1
 8001182:	408c      	lsls	r4, r1
 8001184:	0019      	movs	r1, r3
 8001186:	4314      	orrs	r4, r2
 8001188:	4b31      	ldr	r3, [pc, #196]	; (8001250 <__aeabi_ddiv+0x388>)
 800118a:	4458      	add	r0, fp
 800118c:	469b      	mov	fp, r3
 800118e:	4483      	add	fp, r0
 8001190:	2000      	movs	r0, #0
 8001192:	e6d9      	b.n	8000f48 <__aeabi_ddiv+0x80>
 8001194:	0003      	movs	r3, r0
 8001196:	4323      	orrs	r3, r4
 8001198:	4698      	mov	r8, r3
 800119a:	d044      	beq.n	8001226 <__aeabi_ddiv+0x35e>
 800119c:	2c00      	cmp	r4, #0
 800119e:	d100      	bne.n	80011a2 <__aeabi_ddiv+0x2da>
 80011a0:	e0cf      	b.n	8001342 <__aeabi_ddiv+0x47a>
 80011a2:	0020      	movs	r0, r4
 80011a4:	f001 fa46 	bl	8002634 <__clzsi2>
 80011a8:	0001      	movs	r1, r0
 80011aa:	0002      	movs	r2, r0
 80011ac:	390b      	subs	r1, #11
 80011ae:	231d      	movs	r3, #29
 80011b0:	1a5b      	subs	r3, r3, r1
 80011b2:	4649      	mov	r1, r9
 80011b4:	0010      	movs	r0, r2
 80011b6:	40d9      	lsrs	r1, r3
 80011b8:	3808      	subs	r0, #8
 80011ba:	4084      	lsls	r4, r0
 80011bc:	000b      	movs	r3, r1
 80011be:	464d      	mov	r5, r9
 80011c0:	4323      	orrs	r3, r4
 80011c2:	4698      	mov	r8, r3
 80011c4:	4085      	lsls	r5, r0
 80011c6:	4b23      	ldr	r3, [pc, #140]	; (8001254 <__aeabi_ddiv+0x38c>)
 80011c8:	1a9b      	subs	r3, r3, r2
 80011ca:	469b      	mov	fp, r3
 80011cc:	2300      	movs	r3, #0
 80011ce:	4699      	mov	r9, r3
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	e69e      	b.n	8000f12 <__aeabi_ddiv+0x4a>
 80011d4:	0002      	movs	r2, r0
 80011d6:	4322      	orrs	r2, r4
 80011d8:	4690      	mov	r8, r2
 80011da:	d11d      	bne.n	8001218 <__aeabi_ddiv+0x350>
 80011dc:	2208      	movs	r2, #8
 80011de:	469b      	mov	fp, r3
 80011e0:	2302      	movs	r3, #2
 80011e2:	2500      	movs	r5, #0
 80011e4:	4691      	mov	r9, r2
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	e693      	b.n	8000f12 <__aeabi_ddiv+0x4a>
 80011ea:	4651      	mov	r1, sl
 80011ec:	4321      	orrs	r1, r4
 80011ee:	d109      	bne.n	8001204 <__aeabi_ddiv+0x33c>
 80011f0:	2302      	movs	r3, #2
 80011f2:	464a      	mov	r2, r9
 80011f4:	431a      	orrs	r2, r3
 80011f6:	4b18      	ldr	r3, [pc, #96]	; (8001258 <__aeabi_ddiv+0x390>)
 80011f8:	4691      	mov	r9, r2
 80011fa:	469c      	mov	ip, r3
 80011fc:	2400      	movs	r4, #0
 80011fe:	2002      	movs	r0, #2
 8001200:	44e3      	add	fp, ip
 8001202:	e6a1      	b.n	8000f48 <__aeabi_ddiv+0x80>
 8001204:	2303      	movs	r3, #3
 8001206:	464a      	mov	r2, r9
 8001208:	431a      	orrs	r2, r3
 800120a:	4b13      	ldr	r3, [pc, #76]	; (8001258 <__aeabi_ddiv+0x390>)
 800120c:	4691      	mov	r9, r2
 800120e:	469c      	mov	ip, r3
 8001210:	4651      	mov	r1, sl
 8001212:	2003      	movs	r0, #3
 8001214:	44e3      	add	fp, ip
 8001216:	e697      	b.n	8000f48 <__aeabi_ddiv+0x80>
 8001218:	220c      	movs	r2, #12
 800121a:	469b      	mov	fp, r3
 800121c:	2303      	movs	r3, #3
 800121e:	46a0      	mov	r8, r4
 8001220:	4691      	mov	r9, r2
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	e675      	b.n	8000f12 <__aeabi_ddiv+0x4a>
 8001226:	2304      	movs	r3, #4
 8001228:	4699      	mov	r9, r3
 800122a:	2300      	movs	r3, #0
 800122c:	469b      	mov	fp, r3
 800122e:	3301      	adds	r3, #1
 8001230:	2500      	movs	r5, #0
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	e66d      	b.n	8000f12 <__aeabi_ddiv+0x4a>
 8001236:	46c0      	nop			; (mov r8, r8)
 8001238:	000007ff 	.word	0x000007ff
 800123c:	fffffc01 	.word	0xfffffc01
 8001240:	0800b168 	.word	0x0800b168
 8001244:	000003ff 	.word	0x000003ff
 8001248:	feffffff 	.word	0xfeffffff
 800124c:	000007fe 	.word	0x000007fe
 8001250:	000003f3 	.word	0x000003f3
 8001254:	fffffc0d 	.word	0xfffffc0d
 8001258:	fffff801 	.word	0xfffff801
 800125c:	464a      	mov	r2, r9
 800125e:	2301      	movs	r3, #1
 8001260:	431a      	orrs	r2, r3
 8001262:	4691      	mov	r9, r2
 8001264:	2400      	movs	r4, #0
 8001266:	2001      	movs	r0, #1
 8001268:	e66e      	b.n	8000f48 <__aeabi_ddiv+0x80>
 800126a:	2300      	movs	r3, #0
 800126c:	2280      	movs	r2, #128	; 0x80
 800126e:	469a      	mov	sl, r3
 8001270:	2500      	movs	r5, #0
 8001272:	4b88      	ldr	r3, [pc, #544]	; (8001494 <__aeabi_ddiv+0x5cc>)
 8001274:	0312      	lsls	r2, r2, #12
 8001276:	e67e      	b.n	8000f76 <__aeabi_ddiv+0xae>
 8001278:	2501      	movs	r5, #1
 800127a:	426d      	negs	r5, r5
 800127c:	2201      	movs	r2, #1
 800127e:	1ad2      	subs	r2, r2, r3
 8001280:	2a38      	cmp	r2, #56	; 0x38
 8001282:	dd00      	ble.n	8001286 <__aeabi_ddiv+0x3be>
 8001284:	e674      	b.n	8000f70 <__aeabi_ddiv+0xa8>
 8001286:	2a1f      	cmp	r2, #31
 8001288:	dc00      	bgt.n	800128c <__aeabi_ddiv+0x3c4>
 800128a:	e0bd      	b.n	8001408 <__aeabi_ddiv+0x540>
 800128c:	211f      	movs	r1, #31
 800128e:	4249      	negs	r1, r1
 8001290:	1acb      	subs	r3, r1, r3
 8001292:	4641      	mov	r1, r8
 8001294:	40d9      	lsrs	r1, r3
 8001296:	000b      	movs	r3, r1
 8001298:	2a20      	cmp	r2, #32
 800129a:	d004      	beq.n	80012a6 <__aeabi_ddiv+0x3de>
 800129c:	4641      	mov	r1, r8
 800129e:	4a7e      	ldr	r2, [pc, #504]	; (8001498 <__aeabi_ddiv+0x5d0>)
 80012a0:	445a      	add	r2, fp
 80012a2:	4091      	lsls	r1, r2
 80012a4:	430d      	orrs	r5, r1
 80012a6:	0029      	movs	r1, r5
 80012a8:	1e4a      	subs	r2, r1, #1
 80012aa:	4191      	sbcs	r1, r2
 80012ac:	4319      	orrs	r1, r3
 80012ae:	2307      	movs	r3, #7
 80012b0:	001d      	movs	r5, r3
 80012b2:	2200      	movs	r2, #0
 80012b4:	400d      	ands	r5, r1
 80012b6:	420b      	tst	r3, r1
 80012b8:	d100      	bne.n	80012bc <__aeabi_ddiv+0x3f4>
 80012ba:	e0d0      	b.n	800145e <__aeabi_ddiv+0x596>
 80012bc:	220f      	movs	r2, #15
 80012be:	2300      	movs	r3, #0
 80012c0:	400a      	ands	r2, r1
 80012c2:	2a04      	cmp	r2, #4
 80012c4:	d100      	bne.n	80012c8 <__aeabi_ddiv+0x400>
 80012c6:	e0c7      	b.n	8001458 <__aeabi_ddiv+0x590>
 80012c8:	1d0a      	adds	r2, r1, #4
 80012ca:	428a      	cmp	r2, r1
 80012cc:	4189      	sbcs	r1, r1
 80012ce:	4249      	negs	r1, r1
 80012d0:	185b      	adds	r3, r3, r1
 80012d2:	0011      	movs	r1, r2
 80012d4:	021a      	lsls	r2, r3, #8
 80012d6:	d400      	bmi.n	80012da <__aeabi_ddiv+0x412>
 80012d8:	e0be      	b.n	8001458 <__aeabi_ddiv+0x590>
 80012da:	2301      	movs	r3, #1
 80012dc:	2200      	movs	r2, #0
 80012de:	2500      	movs	r5, #0
 80012e0:	e649      	b.n	8000f76 <__aeabi_ddiv+0xae>
 80012e2:	2280      	movs	r2, #128	; 0x80
 80012e4:	4643      	mov	r3, r8
 80012e6:	0312      	lsls	r2, r2, #12
 80012e8:	4213      	tst	r3, r2
 80012ea:	d008      	beq.n	80012fe <__aeabi_ddiv+0x436>
 80012ec:	4214      	tst	r4, r2
 80012ee:	d106      	bne.n	80012fe <__aeabi_ddiv+0x436>
 80012f0:	4322      	orrs	r2, r4
 80012f2:	0312      	lsls	r2, r2, #12
 80012f4:	46ba      	mov	sl, r7
 80012f6:	000d      	movs	r5, r1
 80012f8:	4b66      	ldr	r3, [pc, #408]	; (8001494 <__aeabi_ddiv+0x5cc>)
 80012fa:	0b12      	lsrs	r2, r2, #12
 80012fc:	e63b      	b.n	8000f76 <__aeabi_ddiv+0xae>
 80012fe:	2280      	movs	r2, #128	; 0x80
 8001300:	4643      	mov	r3, r8
 8001302:	0312      	lsls	r2, r2, #12
 8001304:	431a      	orrs	r2, r3
 8001306:	0312      	lsls	r2, r2, #12
 8001308:	46b2      	mov	sl, r6
 800130a:	4b62      	ldr	r3, [pc, #392]	; (8001494 <__aeabi_ddiv+0x5cc>)
 800130c:	0b12      	lsrs	r2, r2, #12
 800130e:	e632      	b.n	8000f76 <__aeabi_ddiv+0xae>
 8001310:	2b00      	cmp	r3, #0
 8001312:	d100      	bne.n	8001316 <__aeabi_ddiv+0x44e>
 8001314:	e702      	b.n	800111c <__aeabi_ddiv+0x254>
 8001316:	19a6      	adds	r6, r4, r6
 8001318:	1e6a      	subs	r2, r5, #1
 800131a:	42a6      	cmp	r6, r4
 800131c:	d200      	bcs.n	8001320 <__aeabi_ddiv+0x458>
 800131e:	e089      	b.n	8001434 <__aeabi_ddiv+0x56c>
 8001320:	4286      	cmp	r6, r0
 8001322:	d200      	bcs.n	8001326 <__aeabi_ddiv+0x45e>
 8001324:	e09f      	b.n	8001466 <__aeabi_ddiv+0x59e>
 8001326:	d100      	bne.n	800132a <__aeabi_ddiv+0x462>
 8001328:	e0af      	b.n	800148a <__aeabi_ddiv+0x5c2>
 800132a:	0015      	movs	r5, r2
 800132c:	e6f4      	b.n	8001118 <__aeabi_ddiv+0x250>
 800132e:	42a9      	cmp	r1, r5
 8001330:	d900      	bls.n	8001334 <__aeabi_ddiv+0x46c>
 8001332:	e63c      	b.n	8000fae <__aeabi_ddiv+0xe6>
 8001334:	4643      	mov	r3, r8
 8001336:	07de      	lsls	r6, r3, #31
 8001338:	0858      	lsrs	r0, r3, #1
 800133a:	086b      	lsrs	r3, r5, #1
 800133c:	431e      	orrs	r6, r3
 800133e:	07ed      	lsls	r5, r5, #31
 8001340:	e63c      	b.n	8000fbc <__aeabi_ddiv+0xf4>
 8001342:	f001 f977 	bl	8002634 <__clzsi2>
 8001346:	0001      	movs	r1, r0
 8001348:	0002      	movs	r2, r0
 800134a:	3115      	adds	r1, #21
 800134c:	3220      	adds	r2, #32
 800134e:	291c      	cmp	r1, #28
 8001350:	dc00      	bgt.n	8001354 <__aeabi_ddiv+0x48c>
 8001352:	e72c      	b.n	80011ae <__aeabi_ddiv+0x2e6>
 8001354:	464b      	mov	r3, r9
 8001356:	3808      	subs	r0, #8
 8001358:	4083      	lsls	r3, r0
 800135a:	2500      	movs	r5, #0
 800135c:	4698      	mov	r8, r3
 800135e:	e732      	b.n	80011c6 <__aeabi_ddiv+0x2fe>
 8001360:	f001 f968 	bl	8002634 <__clzsi2>
 8001364:	0003      	movs	r3, r0
 8001366:	001a      	movs	r2, r3
 8001368:	3215      	adds	r2, #21
 800136a:	3020      	adds	r0, #32
 800136c:	2a1c      	cmp	r2, #28
 800136e:	dc00      	bgt.n	8001372 <__aeabi_ddiv+0x4aa>
 8001370:	e6ff      	b.n	8001172 <__aeabi_ddiv+0x2aa>
 8001372:	4654      	mov	r4, sl
 8001374:	3b08      	subs	r3, #8
 8001376:	2100      	movs	r1, #0
 8001378:	409c      	lsls	r4, r3
 800137a:	e705      	b.n	8001188 <__aeabi_ddiv+0x2c0>
 800137c:	1936      	adds	r6, r6, r4
 800137e:	3b01      	subs	r3, #1
 8001380:	42b4      	cmp	r4, r6
 8001382:	d900      	bls.n	8001386 <__aeabi_ddiv+0x4be>
 8001384:	e6a6      	b.n	80010d4 <__aeabi_ddiv+0x20c>
 8001386:	42b2      	cmp	r2, r6
 8001388:	d800      	bhi.n	800138c <__aeabi_ddiv+0x4c4>
 800138a:	e6a3      	b.n	80010d4 <__aeabi_ddiv+0x20c>
 800138c:	1e83      	subs	r3, r0, #2
 800138e:	1936      	adds	r6, r6, r4
 8001390:	e6a0      	b.n	80010d4 <__aeabi_ddiv+0x20c>
 8001392:	1909      	adds	r1, r1, r4
 8001394:	3d01      	subs	r5, #1
 8001396:	428c      	cmp	r4, r1
 8001398:	d900      	bls.n	800139c <__aeabi_ddiv+0x4d4>
 800139a:	e68d      	b.n	80010b8 <__aeabi_ddiv+0x1f0>
 800139c:	428a      	cmp	r2, r1
 800139e:	d800      	bhi.n	80013a2 <__aeabi_ddiv+0x4da>
 80013a0:	e68a      	b.n	80010b8 <__aeabi_ddiv+0x1f0>
 80013a2:	1e85      	subs	r5, r0, #2
 80013a4:	1909      	adds	r1, r1, r4
 80013a6:	e687      	b.n	80010b8 <__aeabi_ddiv+0x1f0>
 80013a8:	220f      	movs	r2, #15
 80013aa:	402a      	ands	r2, r5
 80013ac:	2a04      	cmp	r2, #4
 80013ae:	d100      	bne.n	80013b2 <__aeabi_ddiv+0x4ea>
 80013b0:	e6bc      	b.n	800112c <__aeabi_ddiv+0x264>
 80013b2:	1d29      	adds	r1, r5, #4
 80013b4:	42a9      	cmp	r1, r5
 80013b6:	41ad      	sbcs	r5, r5
 80013b8:	426d      	negs	r5, r5
 80013ba:	08c9      	lsrs	r1, r1, #3
 80013bc:	44a8      	add	r8, r5
 80013be:	e6b6      	b.n	800112e <__aeabi_ddiv+0x266>
 80013c0:	42af      	cmp	r7, r5
 80013c2:	d900      	bls.n	80013c6 <__aeabi_ddiv+0x4fe>
 80013c4:	e662      	b.n	800108c <__aeabi_ddiv+0x1c4>
 80013c6:	4281      	cmp	r1, r0
 80013c8:	d804      	bhi.n	80013d4 <__aeabi_ddiv+0x50c>
 80013ca:	d000      	beq.n	80013ce <__aeabi_ddiv+0x506>
 80013cc:	e65e      	b.n	800108c <__aeabi_ddiv+0x1c4>
 80013ce:	42ae      	cmp	r6, r5
 80013d0:	d800      	bhi.n	80013d4 <__aeabi_ddiv+0x50c>
 80013d2:	e65b      	b.n	800108c <__aeabi_ddiv+0x1c4>
 80013d4:	2302      	movs	r3, #2
 80013d6:	425b      	negs	r3, r3
 80013d8:	469c      	mov	ip, r3
 80013da:	9b00      	ldr	r3, [sp, #0]
 80013dc:	44e0      	add	r8, ip
 80013de:	469c      	mov	ip, r3
 80013e0:	4465      	add	r5, ip
 80013e2:	429d      	cmp	r5, r3
 80013e4:	419b      	sbcs	r3, r3
 80013e6:	425b      	negs	r3, r3
 80013e8:	191b      	adds	r3, r3, r4
 80013ea:	18c0      	adds	r0, r0, r3
 80013ec:	e64f      	b.n	800108e <__aeabi_ddiv+0x1c6>
 80013ee:	42b2      	cmp	r2, r6
 80013f0:	d800      	bhi.n	80013f4 <__aeabi_ddiv+0x52c>
 80013f2:	e612      	b.n	800101a <__aeabi_ddiv+0x152>
 80013f4:	1e83      	subs	r3, r0, #2
 80013f6:	1936      	adds	r6, r6, r4
 80013f8:	e60f      	b.n	800101a <__aeabi_ddiv+0x152>
 80013fa:	428a      	cmp	r2, r1
 80013fc:	d800      	bhi.n	8001400 <__aeabi_ddiv+0x538>
 80013fe:	e5fa      	b.n	8000ff6 <__aeabi_ddiv+0x12e>
 8001400:	1e83      	subs	r3, r0, #2
 8001402:	4698      	mov	r8, r3
 8001404:	1909      	adds	r1, r1, r4
 8001406:	e5f6      	b.n	8000ff6 <__aeabi_ddiv+0x12e>
 8001408:	4b24      	ldr	r3, [pc, #144]	; (800149c <__aeabi_ddiv+0x5d4>)
 800140a:	0028      	movs	r0, r5
 800140c:	445b      	add	r3, fp
 800140e:	4641      	mov	r1, r8
 8001410:	409d      	lsls	r5, r3
 8001412:	4099      	lsls	r1, r3
 8001414:	40d0      	lsrs	r0, r2
 8001416:	1e6b      	subs	r3, r5, #1
 8001418:	419d      	sbcs	r5, r3
 800141a:	4643      	mov	r3, r8
 800141c:	4301      	orrs	r1, r0
 800141e:	4329      	orrs	r1, r5
 8001420:	40d3      	lsrs	r3, r2
 8001422:	074a      	lsls	r2, r1, #29
 8001424:	d100      	bne.n	8001428 <__aeabi_ddiv+0x560>
 8001426:	e755      	b.n	80012d4 <__aeabi_ddiv+0x40c>
 8001428:	220f      	movs	r2, #15
 800142a:	400a      	ands	r2, r1
 800142c:	2a04      	cmp	r2, #4
 800142e:	d000      	beq.n	8001432 <__aeabi_ddiv+0x56a>
 8001430:	e74a      	b.n	80012c8 <__aeabi_ddiv+0x400>
 8001432:	e74f      	b.n	80012d4 <__aeabi_ddiv+0x40c>
 8001434:	0015      	movs	r5, r2
 8001436:	4286      	cmp	r6, r0
 8001438:	d000      	beq.n	800143c <__aeabi_ddiv+0x574>
 800143a:	e66d      	b.n	8001118 <__aeabi_ddiv+0x250>
 800143c:	9a00      	ldr	r2, [sp, #0]
 800143e:	429a      	cmp	r2, r3
 8001440:	d000      	beq.n	8001444 <__aeabi_ddiv+0x57c>
 8001442:	e669      	b.n	8001118 <__aeabi_ddiv+0x250>
 8001444:	e66a      	b.n	800111c <__aeabi_ddiv+0x254>
 8001446:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <__aeabi_ddiv+0x5d8>)
 8001448:	445b      	add	r3, fp
 800144a:	2b00      	cmp	r3, #0
 800144c:	dc00      	bgt.n	8001450 <__aeabi_ddiv+0x588>
 800144e:	e713      	b.n	8001278 <__aeabi_ddiv+0x3b0>
 8001450:	2501      	movs	r5, #1
 8001452:	2100      	movs	r1, #0
 8001454:	44a8      	add	r8, r5
 8001456:	e66a      	b.n	800112e <__aeabi_ddiv+0x266>
 8001458:	075d      	lsls	r5, r3, #29
 800145a:	025b      	lsls	r3, r3, #9
 800145c:	0b1a      	lsrs	r2, r3, #12
 800145e:	08c9      	lsrs	r1, r1, #3
 8001460:	2300      	movs	r3, #0
 8001462:	430d      	orrs	r5, r1
 8001464:	e587      	b.n	8000f76 <__aeabi_ddiv+0xae>
 8001466:	9900      	ldr	r1, [sp, #0]
 8001468:	3d02      	subs	r5, #2
 800146a:	004a      	lsls	r2, r1, #1
 800146c:	428a      	cmp	r2, r1
 800146e:	41bf      	sbcs	r7, r7
 8001470:	427f      	negs	r7, r7
 8001472:	193f      	adds	r7, r7, r4
 8001474:	19f6      	adds	r6, r6, r7
 8001476:	9200      	str	r2, [sp, #0]
 8001478:	e7dd      	b.n	8001436 <__aeabi_ddiv+0x56e>
 800147a:	2280      	movs	r2, #128	; 0x80
 800147c:	4643      	mov	r3, r8
 800147e:	0312      	lsls	r2, r2, #12
 8001480:	431a      	orrs	r2, r3
 8001482:	0312      	lsls	r2, r2, #12
 8001484:	4b03      	ldr	r3, [pc, #12]	; (8001494 <__aeabi_ddiv+0x5cc>)
 8001486:	0b12      	lsrs	r2, r2, #12
 8001488:	e575      	b.n	8000f76 <__aeabi_ddiv+0xae>
 800148a:	9900      	ldr	r1, [sp, #0]
 800148c:	4299      	cmp	r1, r3
 800148e:	d3ea      	bcc.n	8001466 <__aeabi_ddiv+0x59e>
 8001490:	0015      	movs	r5, r2
 8001492:	e7d3      	b.n	800143c <__aeabi_ddiv+0x574>
 8001494:	000007ff 	.word	0x000007ff
 8001498:	0000043e 	.word	0x0000043e
 800149c:	0000041e 	.word	0x0000041e
 80014a0:	000003ff 	.word	0x000003ff

080014a4 <__eqdf2>:
 80014a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014a6:	464e      	mov	r6, r9
 80014a8:	4645      	mov	r5, r8
 80014aa:	46de      	mov	lr, fp
 80014ac:	4657      	mov	r7, sl
 80014ae:	4690      	mov	r8, r2
 80014b0:	b5e0      	push	{r5, r6, r7, lr}
 80014b2:	0017      	movs	r7, r2
 80014b4:	031a      	lsls	r2, r3, #12
 80014b6:	0b12      	lsrs	r2, r2, #12
 80014b8:	0005      	movs	r5, r0
 80014ba:	4684      	mov	ip, r0
 80014bc:	4819      	ldr	r0, [pc, #100]	; (8001524 <__eqdf2+0x80>)
 80014be:	030e      	lsls	r6, r1, #12
 80014c0:	004c      	lsls	r4, r1, #1
 80014c2:	4691      	mov	r9, r2
 80014c4:	005a      	lsls	r2, r3, #1
 80014c6:	0fdb      	lsrs	r3, r3, #31
 80014c8:	469b      	mov	fp, r3
 80014ca:	0b36      	lsrs	r6, r6, #12
 80014cc:	0d64      	lsrs	r4, r4, #21
 80014ce:	0fc9      	lsrs	r1, r1, #31
 80014d0:	0d52      	lsrs	r2, r2, #21
 80014d2:	4284      	cmp	r4, r0
 80014d4:	d019      	beq.n	800150a <__eqdf2+0x66>
 80014d6:	4282      	cmp	r2, r0
 80014d8:	d010      	beq.n	80014fc <__eqdf2+0x58>
 80014da:	2001      	movs	r0, #1
 80014dc:	4294      	cmp	r4, r2
 80014de:	d10e      	bne.n	80014fe <__eqdf2+0x5a>
 80014e0:	454e      	cmp	r6, r9
 80014e2:	d10c      	bne.n	80014fe <__eqdf2+0x5a>
 80014e4:	2001      	movs	r0, #1
 80014e6:	45c4      	cmp	ip, r8
 80014e8:	d109      	bne.n	80014fe <__eqdf2+0x5a>
 80014ea:	4559      	cmp	r1, fp
 80014ec:	d017      	beq.n	800151e <__eqdf2+0x7a>
 80014ee:	2c00      	cmp	r4, #0
 80014f0:	d105      	bne.n	80014fe <__eqdf2+0x5a>
 80014f2:	0030      	movs	r0, r6
 80014f4:	4328      	orrs	r0, r5
 80014f6:	1e43      	subs	r3, r0, #1
 80014f8:	4198      	sbcs	r0, r3
 80014fa:	e000      	b.n	80014fe <__eqdf2+0x5a>
 80014fc:	2001      	movs	r0, #1
 80014fe:	bcf0      	pop	{r4, r5, r6, r7}
 8001500:	46bb      	mov	fp, r7
 8001502:	46b2      	mov	sl, r6
 8001504:	46a9      	mov	r9, r5
 8001506:	46a0      	mov	r8, r4
 8001508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800150a:	0033      	movs	r3, r6
 800150c:	2001      	movs	r0, #1
 800150e:	432b      	orrs	r3, r5
 8001510:	d1f5      	bne.n	80014fe <__eqdf2+0x5a>
 8001512:	42a2      	cmp	r2, r4
 8001514:	d1f3      	bne.n	80014fe <__eqdf2+0x5a>
 8001516:	464b      	mov	r3, r9
 8001518:	433b      	orrs	r3, r7
 800151a:	d1f0      	bne.n	80014fe <__eqdf2+0x5a>
 800151c:	e7e2      	b.n	80014e4 <__eqdf2+0x40>
 800151e:	2000      	movs	r0, #0
 8001520:	e7ed      	b.n	80014fe <__eqdf2+0x5a>
 8001522:	46c0      	nop			; (mov r8, r8)
 8001524:	000007ff 	.word	0x000007ff

08001528 <__gedf2>:
 8001528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800152a:	4647      	mov	r7, r8
 800152c:	46ce      	mov	lr, r9
 800152e:	0004      	movs	r4, r0
 8001530:	0018      	movs	r0, r3
 8001532:	0016      	movs	r6, r2
 8001534:	031b      	lsls	r3, r3, #12
 8001536:	0b1b      	lsrs	r3, r3, #12
 8001538:	4d2d      	ldr	r5, [pc, #180]	; (80015f0 <__gedf2+0xc8>)
 800153a:	004a      	lsls	r2, r1, #1
 800153c:	4699      	mov	r9, r3
 800153e:	b580      	push	{r7, lr}
 8001540:	0043      	lsls	r3, r0, #1
 8001542:	030f      	lsls	r7, r1, #12
 8001544:	46a4      	mov	ip, r4
 8001546:	46b0      	mov	r8, r6
 8001548:	0b3f      	lsrs	r7, r7, #12
 800154a:	0d52      	lsrs	r2, r2, #21
 800154c:	0fc9      	lsrs	r1, r1, #31
 800154e:	0d5b      	lsrs	r3, r3, #21
 8001550:	0fc0      	lsrs	r0, r0, #31
 8001552:	42aa      	cmp	r2, r5
 8001554:	d021      	beq.n	800159a <__gedf2+0x72>
 8001556:	42ab      	cmp	r3, r5
 8001558:	d013      	beq.n	8001582 <__gedf2+0x5a>
 800155a:	2a00      	cmp	r2, #0
 800155c:	d122      	bne.n	80015a4 <__gedf2+0x7c>
 800155e:	433c      	orrs	r4, r7
 8001560:	2b00      	cmp	r3, #0
 8001562:	d102      	bne.n	800156a <__gedf2+0x42>
 8001564:	464d      	mov	r5, r9
 8001566:	432e      	orrs	r6, r5
 8001568:	d022      	beq.n	80015b0 <__gedf2+0x88>
 800156a:	2c00      	cmp	r4, #0
 800156c:	d010      	beq.n	8001590 <__gedf2+0x68>
 800156e:	4281      	cmp	r1, r0
 8001570:	d022      	beq.n	80015b8 <__gedf2+0x90>
 8001572:	2002      	movs	r0, #2
 8001574:	3901      	subs	r1, #1
 8001576:	4008      	ands	r0, r1
 8001578:	3801      	subs	r0, #1
 800157a:	bcc0      	pop	{r6, r7}
 800157c:	46b9      	mov	r9, r7
 800157e:	46b0      	mov	r8, r6
 8001580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001582:	464d      	mov	r5, r9
 8001584:	432e      	orrs	r6, r5
 8001586:	d129      	bne.n	80015dc <__gedf2+0xb4>
 8001588:	2a00      	cmp	r2, #0
 800158a:	d1f0      	bne.n	800156e <__gedf2+0x46>
 800158c:	433c      	orrs	r4, r7
 800158e:	d1ee      	bne.n	800156e <__gedf2+0x46>
 8001590:	2800      	cmp	r0, #0
 8001592:	d1f2      	bne.n	800157a <__gedf2+0x52>
 8001594:	2001      	movs	r0, #1
 8001596:	4240      	negs	r0, r0
 8001598:	e7ef      	b.n	800157a <__gedf2+0x52>
 800159a:	003d      	movs	r5, r7
 800159c:	4325      	orrs	r5, r4
 800159e:	d11d      	bne.n	80015dc <__gedf2+0xb4>
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d0ee      	beq.n	8001582 <__gedf2+0x5a>
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1e2      	bne.n	800156e <__gedf2+0x46>
 80015a8:	464c      	mov	r4, r9
 80015aa:	4326      	orrs	r6, r4
 80015ac:	d1df      	bne.n	800156e <__gedf2+0x46>
 80015ae:	e7e0      	b.n	8001572 <__gedf2+0x4a>
 80015b0:	2000      	movs	r0, #0
 80015b2:	2c00      	cmp	r4, #0
 80015b4:	d0e1      	beq.n	800157a <__gedf2+0x52>
 80015b6:	e7dc      	b.n	8001572 <__gedf2+0x4a>
 80015b8:	429a      	cmp	r2, r3
 80015ba:	dc0a      	bgt.n	80015d2 <__gedf2+0xaa>
 80015bc:	dbe8      	blt.n	8001590 <__gedf2+0x68>
 80015be:	454f      	cmp	r7, r9
 80015c0:	d8d7      	bhi.n	8001572 <__gedf2+0x4a>
 80015c2:	d00e      	beq.n	80015e2 <__gedf2+0xba>
 80015c4:	2000      	movs	r0, #0
 80015c6:	454f      	cmp	r7, r9
 80015c8:	d2d7      	bcs.n	800157a <__gedf2+0x52>
 80015ca:	2900      	cmp	r1, #0
 80015cc:	d0e2      	beq.n	8001594 <__gedf2+0x6c>
 80015ce:	0008      	movs	r0, r1
 80015d0:	e7d3      	b.n	800157a <__gedf2+0x52>
 80015d2:	4243      	negs	r3, r0
 80015d4:	4158      	adcs	r0, r3
 80015d6:	0040      	lsls	r0, r0, #1
 80015d8:	3801      	subs	r0, #1
 80015da:	e7ce      	b.n	800157a <__gedf2+0x52>
 80015dc:	2002      	movs	r0, #2
 80015de:	4240      	negs	r0, r0
 80015e0:	e7cb      	b.n	800157a <__gedf2+0x52>
 80015e2:	45c4      	cmp	ip, r8
 80015e4:	d8c5      	bhi.n	8001572 <__gedf2+0x4a>
 80015e6:	2000      	movs	r0, #0
 80015e8:	45c4      	cmp	ip, r8
 80015ea:	d2c6      	bcs.n	800157a <__gedf2+0x52>
 80015ec:	e7ed      	b.n	80015ca <__gedf2+0xa2>
 80015ee:	46c0      	nop			; (mov r8, r8)
 80015f0:	000007ff 	.word	0x000007ff

080015f4 <__ledf2>:
 80015f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015f6:	4647      	mov	r7, r8
 80015f8:	46ce      	mov	lr, r9
 80015fa:	0004      	movs	r4, r0
 80015fc:	0018      	movs	r0, r3
 80015fe:	0016      	movs	r6, r2
 8001600:	031b      	lsls	r3, r3, #12
 8001602:	0b1b      	lsrs	r3, r3, #12
 8001604:	4d2c      	ldr	r5, [pc, #176]	; (80016b8 <__ledf2+0xc4>)
 8001606:	004a      	lsls	r2, r1, #1
 8001608:	4699      	mov	r9, r3
 800160a:	b580      	push	{r7, lr}
 800160c:	0043      	lsls	r3, r0, #1
 800160e:	030f      	lsls	r7, r1, #12
 8001610:	46a4      	mov	ip, r4
 8001612:	46b0      	mov	r8, r6
 8001614:	0b3f      	lsrs	r7, r7, #12
 8001616:	0d52      	lsrs	r2, r2, #21
 8001618:	0fc9      	lsrs	r1, r1, #31
 800161a:	0d5b      	lsrs	r3, r3, #21
 800161c:	0fc0      	lsrs	r0, r0, #31
 800161e:	42aa      	cmp	r2, r5
 8001620:	d00d      	beq.n	800163e <__ledf2+0x4a>
 8001622:	42ab      	cmp	r3, r5
 8001624:	d010      	beq.n	8001648 <__ledf2+0x54>
 8001626:	2a00      	cmp	r2, #0
 8001628:	d127      	bne.n	800167a <__ledf2+0x86>
 800162a:	433c      	orrs	r4, r7
 800162c:	2b00      	cmp	r3, #0
 800162e:	d111      	bne.n	8001654 <__ledf2+0x60>
 8001630:	464d      	mov	r5, r9
 8001632:	432e      	orrs	r6, r5
 8001634:	d10e      	bne.n	8001654 <__ledf2+0x60>
 8001636:	2000      	movs	r0, #0
 8001638:	2c00      	cmp	r4, #0
 800163a:	d015      	beq.n	8001668 <__ledf2+0x74>
 800163c:	e00e      	b.n	800165c <__ledf2+0x68>
 800163e:	003d      	movs	r5, r7
 8001640:	4325      	orrs	r5, r4
 8001642:	d110      	bne.n	8001666 <__ledf2+0x72>
 8001644:	4293      	cmp	r3, r2
 8001646:	d118      	bne.n	800167a <__ledf2+0x86>
 8001648:	464d      	mov	r5, r9
 800164a:	432e      	orrs	r6, r5
 800164c:	d10b      	bne.n	8001666 <__ledf2+0x72>
 800164e:	2a00      	cmp	r2, #0
 8001650:	d102      	bne.n	8001658 <__ledf2+0x64>
 8001652:	433c      	orrs	r4, r7
 8001654:	2c00      	cmp	r4, #0
 8001656:	d00b      	beq.n	8001670 <__ledf2+0x7c>
 8001658:	4281      	cmp	r1, r0
 800165a:	d014      	beq.n	8001686 <__ledf2+0x92>
 800165c:	2002      	movs	r0, #2
 800165e:	3901      	subs	r1, #1
 8001660:	4008      	ands	r0, r1
 8001662:	3801      	subs	r0, #1
 8001664:	e000      	b.n	8001668 <__ledf2+0x74>
 8001666:	2002      	movs	r0, #2
 8001668:	bcc0      	pop	{r6, r7}
 800166a:	46b9      	mov	r9, r7
 800166c:	46b0      	mov	r8, r6
 800166e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001670:	2800      	cmp	r0, #0
 8001672:	d1f9      	bne.n	8001668 <__ledf2+0x74>
 8001674:	2001      	movs	r0, #1
 8001676:	4240      	negs	r0, r0
 8001678:	e7f6      	b.n	8001668 <__ledf2+0x74>
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1ec      	bne.n	8001658 <__ledf2+0x64>
 800167e:	464c      	mov	r4, r9
 8001680:	4326      	orrs	r6, r4
 8001682:	d1e9      	bne.n	8001658 <__ledf2+0x64>
 8001684:	e7ea      	b.n	800165c <__ledf2+0x68>
 8001686:	429a      	cmp	r2, r3
 8001688:	dd04      	ble.n	8001694 <__ledf2+0xa0>
 800168a:	4243      	negs	r3, r0
 800168c:	4158      	adcs	r0, r3
 800168e:	0040      	lsls	r0, r0, #1
 8001690:	3801      	subs	r0, #1
 8001692:	e7e9      	b.n	8001668 <__ledf2+0x74>
 8001694:	429a      	cmp	r2, r3
 8001696:	dbeb      	blt.n	8001670 <__ledf2+0x7c>
 8001698:	454f      	cmp	r7, r9
 800169a:	d8df      	bhi.n	800165c <__ledf2+0x68>
 800169c:	d006      	beq.n	80016ac <__ledf2+0xb8>
 800169e:	2000      	movs	r0, #0
 80016a0:	454f      	cmp	r7, r9
 80016a2:	d2e1      	bcs.n	8001668 <__ledf2+0x74>
 80016a4:	2900      	cmp	r1, #0
 80016a6:	d0e5      	beq.n	8001674 <__ledf2+0x80>
 80016a8:	0008      	movs	r0, r1
 80016aa:	e7dd      	b.n	8001668 <__ledf2+0x74>
 80016ac:	45c4      	cmp	ip, r8
 80016ae:	d8d5      	bhi.n	800165c <__ledf2+0x68>
 80016b0:	2000      	movs	r0, #0
 80016b2:	45c4      	cmp	ip, r8
 80016b4:	d2d8      	bcs.n	8001668 <__ledf2+0x74>
 80016b6:	e7f5      	b.n	80016a4 <__ledf2+0xb0>
 80016b8:	000007ff 	.word	0x000007ff

080016bc <__aeabi_dmul>:
 80016bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016be:	4645      	mov	r5, r8
 80016c0:	46de      	mov	lr, fp
 80016c2:	4657      	mov	r7, sl
 80016c4:	464e      	mov	r6, r9
 80016c6:	b5e0      	push	{r5, r6, r7, lr}
 80016c8:	001f      	movs	r7, r3
 80016ca:	030b      	lsls	r3, r1, #12
 80016cc:	0b1b      	lsrs	r3, r3, #12
 80016ce:	469b      	mov	fp, r3
 80016d0:	004d      	lsls	r5, r1, #1
 80016d2:	0fcb      	lsrs	r3, r1, #31
 80016d4:	0004      	movs	r4, r0
 80016d6:	4691      	mov	r9, r2
 80016d8:	4698      	mov	r8, r3
 80016da:	b087      	sub	sp, #28
 80016dc:	0d6d      	lsrs	r5, r5, #21
 80016de:	d100      	bne.n	80016e2 <__aeabi_dmul+0x26>
 80016e0:	e1cd      	b.n	8001a7e <__aeabi_dmul+0x3c2>
 80016e2:	4bce      	ldr	r3, [pc, #824]	; (8001a1c <__aeabi_dmul+0x360>)
 80016e4:	429d      	cmp	r5, r3
 80016e6:	d100      	bne.n	80016ea <__aeabi_dmul+0x2e>
 80016e8:	e1e9      	b.n	8001abe <__aeabi_dmul+0x402>
 80016ea:	465a      	mov	r2, fp
 80016ec:	0f43      	lsrs	r3, r0, #29
 80016ee:	00d2      	lsls	r2, r2, #3
 80016f0:	4313      	orrs	r3, r2
 80016f2:	2280      	movs	r2, #128	; 0x80
 80016f4:	0412      	lsls	r2, r2, #16
 80016f6:	431a      	orrs	r2, r3
 80016f8:	00c3      	lsls	r3, r0, #3
 80016fa:	469a      	mov	sl, r3
 80016fc:	4bc8      	ldr	r3, [pc, #800]	; (8001a20 <__aeabi_dmul+0x364>)
 80016fe:	4693      	mov	fp, r2
 8001700:	469c      	mov	ip, r3
 8001702:	2300      	movs	r3, #0
 8001704:	2600      	movs	r6, #0
 8001706:	4465      	add	r5, ip
 8001708:	9300      	str	r3, [sp, #0]
 800170a:	033c      	lsls	r4, r7, #12
 800170c:	007b      	lsls	r3, r7, #1
 800170e:	4648      	mov	r0, r9
 8001710:	0b24      	lsrs	r4, r4, #12
 8001712:	0d5b      	lsrs	r3, r3, #21
 8001714:	0fff      	lsrs	r7, r7, #31
 8001716:	2b00      	cmp	r3, #0
 8001718:	d100      	bne.n	800171c <__aeabi_dmul+0x60>
 800171a:	e189      	b.n	8001a30 <__aeabi_dmul+0x374>
 800171c:	4abf      	ldr	r2, [pc, #764]	; (8001a1c <__aeabi_dmul+0x360>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d019      	beq.n	8001756 <__aeabi_dmul+0x9a>
 8001722:	0f42      	lsrs	r2, r0, #29
 8001724:	00e4      	lsls	r4, r4, #3
 8001726:	4322      	orrs	r2, r4
 8001728:	2480      	movs	r4, #128	; 0x80
 800172a:	0424      	lsls	r4, r4, #16
 800172c:	4314      	orrs	r4, r2
 800172e:	4abc      	ldr	r2, [pc, #752]	; (8001a20 <__aeabi_dmul+0x364>)
 8001730:	2100      	movs	r1, #0
 8001732:	4694      	mov	ip, r2
 8001734:	4642      	mov	r2, r8
 8001736:	4463      	add	r3, ip
 8001738:	195b      	adds	r3, r3, r5
 800173a:	9301      	str	r3, [sp, #4]
 800173c:	9b01      	ldr	r3, [sp, #4]
 800173e:	407a      	eors	r2, r7
 8001740:	3301      	adds	r3, #1
 8001742:	00c0      	lsls	r0, r0, #3
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	9302      	str	r3, [sp, #8]
 8001748:	2e0a      	cmp	r6, #10
 800174a:	dd1c      	ble.n	8001786 <__aeabi_dmul+0xca>
 800174c:	003a      	movs	r2, r7
 800174e:	2e0b      	cmp	r6, #11
 8001750:	d05e      	beq.n	8001810 <__aeabi_dmul+0x154>
 8001752:	4647      	mov	r7, r8
 8001754:	e056      	b.n	8001804 <__aeabi_dmul+0x148>
 8001756:	4649      	mov	r1, r9
 8001758:	4bb0      	ldr	r3, [pc, #704]	; (8001a1c <__aeabi_dmul+0x360>)
 800175a:	4321      	orrs	r1, r4
 800175c:	18eb      	adds	r3, r5, r3
 800175e:	9301      	str	r3, [sp, #4]
 8001760:	2900      	cmp	r1, #0
 8001762:	d12a      	bne.n	80017ba <__aeabi_dmul+0xfe>
 8001764:	2080      	movs	r0, #128	; 0x80
 8001766:	2202      	movs	r2, #2
 8001768:	0100      	lsls	r0, r0, #4
 800176a:	002b      	movs	r3, r5
 800176c:	4684      	mov	ip, r0
 800176e:	4316      	orrs	r6, r2
 8001770:	4642      	mov	r2, r8
 8001772:	4463      	add	r3, ip
 8001774:	407a      	eors	r2, r7
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	9302      	str	r3, [sp, #8]
 800177a:	2e0a      	cmp	r6, #10
 800177c:	dd00      	ble.n	8001780 <__aeabi_dmul+0xc4>
 800177e:	e231      	b.n	8001be4 <__aeabi_dmul+0x528>
 8001780:	2000      	movs	r0, #0
 8001782:	2400      	movs	r4, #0
 8001784:	2102      	movs	r1, #2
 8001786:	2e02      	cmp	r6, #2
 8001788:	dc26      	bgt.n	80017d8 <__aeabi_dmul+0x11c>
 800178a:	3e01      	subs	r6, #1
 800178c:	2e01      	cmp	r6, #1
 800178e:	d852      	bhi.n	8001836 <__aeabi_dmul+0x17a>
 8001790:	2902      	cmp	r1, #2
 8001792:	d04c      	beq.n	800182e <__aeabi_dmul+0x172>
 8001794:	2901      	cmp	r1, #1
 8001796:	d000      	beq.n	800179a <__aeabi_dmul+0xde>
 8001798:	e118      	b.n	80019cc <__aeabi_dmul+0x310>
 800179a:	2300      	movs	r3, #0
 800179c:	2400      	movs	r4, #0
 800179e:	2500      	movs	r5, #0
 80017a0:	051b      	lsls	r3, r3, #20
 80017a2:	4323      	orrs	r3, r4
 80017a4:	07d2      	lsls	r2, r2, #31
 80017a6:	4313      	orrs	r3, r2
 80017a8:	0028      	movs	r0, r5
 80017aa:	0019      	movs	r1, r3
 80017ac:	b007      	add	sp, #28
 80017ae:	bcf0      	pop	{r4, r5, r6, r7}
 80017b0:	46bb      	mov	fp, r7
 80017b2:	46b2      	mov	sl, r6
 80017b4:	46a9      	mov	r9, r5
 80017b6:	46a0      	mov	r8, r4
 80017b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ba:	2180      	movs	r1, #128	; 0x80
 80017bc:	2203      	movs	r2, #3
 80017be:	0109      	lsls	r1, r1, #4
 80017c0:	002b      	movs	r3, r5
 80017c2:	468c      	mov	ip, r1
 80017c4:	4316      	orrs	r6, r2
 80017c6:	4642      	mov	r2, r8
 80017c8:	4463      	add	r3, ip
 80017ca:	407a      	eors	r2, r7
 80017cc:	b2d2      	uxtb	r2, r2
 80017ce:	9302      	str	r3, [sp, #8]
 80017d0:	2e0a      	cmp	r6, #10
 80017d2:	dd00      	ble.n	80017d6 <__aeabi_dmul+0x11a>
 80017d4:	e228      	b.n	8001c28 <__aeabi_dmul+0x56c>
 80017d6:	2103      	movs	r1, #3
 80017d8:	2501      	movs	r5, #1
 80017da:	40b5      	lsls	r5, r6
 80017dc:	46ac      	mov	ip, r5
 80017de:	26a6      	movs	r6, #166	; 0xa6
 80017e0:	4663      	mov	r3, ip
 80017e2:	00f6      	lsls	r6, r6, #3
 80017e4:	4035      	ands	r5, r6
 80017e6:	4233      	tst	r3, r6
 80017e8:	d10b      	bne.n	8001802 <__aeabi_dmul+0x146>
 80017ea:	2690      	movs	r6, #144	; 0x90
 80017ec:	00b6      	lsls	r6, r6, #2
 80017ee:	4233      	tst	r3, r6
 80017f0:	d118      	bne.n	8001824 <__aeabi_dmul+0x168>
 80017f2:	3eb9      	subs	r6, #185	; 0xb9
 80017f4:	3eff      	subs	r6, #255	; 0xff
 80017f6:	421e      	tst	r6, r3
 80017f8:	d01d      	beq.n	8001836 <__aeabi_dmul+0x17a>
 80017fa:	46a3      	mov	fp, r4
 80017fc:	4682      	mov	sl, r0
 80017fe:	9100      	str	r1, [sp, #0]
 8001800:	e000      	b.n	8001804 <__aeabi_dmul+0x148>
 8001802:	0017      	movs	r7, r2
 8001804:	9900      	ldr	r1, [sp, #0]
 8001806:	003a      	movs	r2, r7
 8001808:	2902      	cmp	r1, #2
 800180a:	d010      	beq.n	800182e <__aeabi_dmul+0x172>
 800180c:	465c      	mov	r4, fp
 800180e:	4650      	mov	r0, sl
 8001810:	2903      	cmp	r1, #3
 8001812:	d1bf      	bne.n	8001794 <__aeabi_dmul+0xd8>
 8001814:	2380      	movs	r3, #128	; 0x80
 8001816:	031b      	lsls	r3, r3, #12
 8001818:	431c      	orrs	r4, r3
 800181a:	0324      	lsls	r4, r4, #12
 800181c:	0005      	movs	r5, r0
 800181e:	4b7f      	ldr	r3, [pc, #508]	; (8001a1c <__aeabi_dmul+0x360>)
 8001820:	0b24      	lsrs	r4, r4, #12
 8001822:	e7bd      	b.n	80017a0 <__aeabi_dmul+0xe4>
 8001824:	2480      	movs	r4, #128	; 0x80
 8001826:	2200      	movs	r2, #0
 8001828:	4b7c      	ldr	r3, [pc, #496]	; (8001a1c <__aeabi_dmul+0x360>)
 800182a:	0324      	lsls	r4, r4, #12
 800182c:	e7b8      	b.n	80017a0 <__aeabi_dmul+0xe4>
 800182e:	2400      	movs	r4, #0
 8001830:	2500      	movs	r5, #0
 8001832:	4b7a      	ldr	r3, [pc, #488]	; (8001a1c <__aeabi_dmul+0x360>)
 8001834:	e7b4      	b.n	80017a0 <__aeabi_dmul+0xe4>
 8001836:	4653      	mov	r3, sl
 8001838:	041e      	lsls	r6, r3, #16
 800183a:	0c36      	lsrs	r6, r6, #16
 800183c:	0c1f      	lsrs	r7, r3, #16
 800183e:	0033      	movs	r3, r6
 8001840:	0c01      	lsrs	r1, r0, #16
 8001842:	0400      	lsls	r0, r0, #16
 8001844:	0c00      	lsrs	r0, r0, #16
 8001846:	4343      	muls	r3, r0
 8001848:	4698      	mov	r8, r3
 800184a:	0003      	movs	r3, r0
 800184c:	437b      	muls	r3, r7
 800184e:	4699      	mov	r9, r3
 8001850:	0033      	movs	r3, r6
 8001852:	434b      	muls	r3, r1
 8001854:	469c      	mov	ip, r3
 8001856:	4643      	mov	r3, r8
 8001858:	000d      	movs	r5, r1
 800185a:	0c1b      	lsrs	r3, r3, #16
 800185c:	469a      	mov	sl, r3
 800185e:	437d      	muls	r5, r7
 8001860:	44cc      	add	ip, r9
 8001862:	44d4      	add	ip, sl
 8001864:	9500      	str	r5, [sp, #0]
 8001866:	45e1      	cmp	r9, ip
 8001868:	d904      	bls.n	8001874 <__aeabi_dmul+0x1b8>
 800186a:	2380      	movs	r3, #128	; 0x80
 800186c:	025b      	lsls	r3, r3, #9
 800186e:	4699      	mov	r9, r3
 8001870:	444d      	add	r5, r9
 8001872:	9500      	str	r5, [sp, #0]
 8001874:	4663      	mov	r3, ip
 8001876:	0c1b      	lsrs	r3, r3, #16
 8001878:	001d      	movs	r5, r3
 800187a:	4663      	mov	r3, ip
 800187c:	041b      	lsls	r3, r3, #16
 800187e:	469c      	mov	ip, r3
 8001880:	4643      	mov	r3, r8
 8001882:	041b      	lsls	r3, r3, #16
 8001884:	0c1b      	lsrs	r3, r3, #16
 8001886:	4698      	mov	r8, r3
 8001888:	4663      	mov	r3, ip
 800188a:	4443      	add	r3, r8
 800188c:	9303      	str	r3, [sp, #12]
 800188e:	0c23      	lsrs	r3, r4, #16
 8001890:	4698      	mov	r8, r3
 8001892:	0033      	movs	r3, r6
 8001894:	0424      	lsls	r4, r4, #16
 8001896:	0c24      	lsrs	r4, r4, #16
 8001898:	4363      	muls	r3, r4
 800189a:	469c      	mov	ip, r3
 800189c:	0023      	movs	r3, r4
 800189e:	437b      	muls	r3, r7
 80018a0:	4699      	mov	r9, r3
 80018a2:	4643      	mov	r3, r8
 80018a4:	435e      	muls	r6, r3
 80018a6:	435f      	muls	r7, r3
 80018a8:	444e      	add	r6, r9
 80018aa:	4663      	mov	r3, ip
 80018ac:	46b2      	mov	sl, r6
 80018ae:	0c1e      	lsrs	r6, r3, #16
 80018b0:	4456      	add	r6, sl
 80018b2:	45b1      	cmp	r9, r6
 80018b4:	d903      	bls.n	80018be <__aeabi_dmul+0x202>
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	025b      	lsls	r3, r3, #9
 80018ba:	4699      	mov	r9, r3
 80018bc:	444f      	add	r7, r9
 80018be:	0c33      	lsrs	r3, r6, #16
 80018c0:	4699      	mov	r9, r3
 80018c2:	003b      	movs	r3, r7
 80018c4:	444b      	add	r3, r9
 80018c6:	9305      	str	r3, [sp, #20]
 80018c8:	4663      	mov	r3, ip
 80018ca:	46ac      	mov	ip, r5
 80018cc:	041f      	lsls	r7, r3, #16
 80018ce:	0c3f      	lsrs	r7, r7, #16
 80018d0:	0436      	lsls	r6, r6, #16
 80018d2:	19f6      	adds	r6, r6, r7
 80018d4:	44b4      	add	ip, r6
 80018d6:	4663      	mov	r3, ip
 80018d8:	9304      	str	r3, [sp, #16]
 80018da:	465b      	mov	r3, fp
 80018dc:	0c1b      	lsrs	r3, r3, #16
 80018de:	469c      	mov	ip, r3
 80018e0:	465b      	mov	r3, fp
 80018e2:	041f      	lsls	r7, r3, #16
 80018e4:	0c3f      	lsrs	r7, r7, #16
 80018e6:	003b      	movs	r3, r7
 80018e8:	4343      	muls	r3, r0
 80018ea:	4699      	mov	r9, r3
 80018ec:	4663      	mov	r3, ip
 80018ee:	4343      	muls	r3, r0
 80018f0:	469a      	mov	sl, r3
 80018f2:	464b      	mov	r3, r9
 80018f4:	4660      	mov	r0, ip
 80018f6:	0c1b      	lsrs	r3, r3, #16
 80018f8:	469b      	mov	fp, r3
 80018fa:	4348      	muls	r0, r1
 80018fc:	4379      	muls	r1, r7
 80018fe:	4451      	add	r1, sl
 8001900:	4459      	add	r1, fp
 8001902:	458a      	cmp	sl, r1
 8001904:	d903      	bls.n	800190e <__aeabi_dmul+0x252>
 8001906:	2380      	movs	r3, #128	; 0x80
 8001908:	025b      	lsls	r3, r3, #9
 800190a:	469a      	mov	sl, r3
 800190c:	4450      	add	r0, sl
 800190e:	0c0b      	lsrs	r3, r1, #16
 8001910:	469a      	mov	sl, r3
 8001912:	464b      	mov	r3, r9
 8001914:	041b      	lsls	r3, r3, #16
 8001916:	0c1b      	lsrs	r3, r3, #16
 8001918:	4699      	mov	r9, r3
 800191a:	003b      	movs	r3, r7
 800191c:	4363      	muls	r3, r4
 800191e:	0409      	lsls	r1, r1, #16
 8001920:	4645      	mov	r5, r8
 8001922:	4449      	add	r1, r9
 8001924:	4699      	mov	r9, r3
 8001926:	4663      	mov	r3, ip
 8001928:	435c      	muls	r4, r3
 800192a:	436b      	muls	r3, r5
 800192c:	469c      	mov	ip, r3
 800192e:	464b      	mov	r3, r9
 8001930:	0c1b      	lsrs	r3, r3, #16
 8001932:	4698      	mov	r8, r3
 8001934:	436f      	muls	r7, r5
 8001936:	193f      	adds	r7, r7, r4
 8001938:	4447      	add	r7, r8
 800193a:	4450      	add	r0, sl
 800193c:	42bc      	cmp	r4, r7
 800193e:	d903      	bls.n	8001948 <__aeabi_dmul+0x28c>
 8001940:	2380      	movs	r3, #128	; 0x80
 8001942:	025b      	lsls	r3, r3, #9
 8001944:	4698      	mov	r8, r3
 8001946:	44c4      	add	ip, r8
 8001948:	9b04      	ldr	r3, [sp, #16]
 800194a:	9d00      	ldr	r5, [sp, #0]
 800194c:	4698      	mov	r8, r3
 800194e:	4445      	add	r5, r8
 8001950:	42b5      	cmp	r5, r6
 8001952:	41b6      	sbcs	r6, r6
 8001954:	4273      	negs	r3, r6
 8001956:	4698      	mov	r8, r3
 8001958:	464b      	mov	r3, r9
 800195a:	041e      	lsls	r6, r3, #16
 800195c:	9b05      	ldr	r3, [sp, #20]
 800195e:	043c      	lsls	r4, r7, #16
 8001960:	4699      	mov	r9, r3
 8001962:	0c36      	lsrs	r6, r6, #16
 8001964:	19a4      	adds	r4, r4, r6
 8001966:	444c      	add	r4, r9
 8001968:	46a1      	mov	r9, r4
 800196a:	4683      	mov	fp, r0
 800196c:	186e      	adds	r6, r5, r1
 800196e:	44c1      	add	r9, r8
 8001970:	428e      	cmp	r6, r1
 8001972:	4189      	sbcs	r1, r1
 8001974:	44cb      	add	fp, r9
 8001976:	465d      	mov	r5, fp
 8001978:	4249      	negs	r1, r1
 800197a:	186d      	adds	r5, r5, r1
 800197c:	429c      	cmp	r4, r3
 800197e:	41a4      	sbcs	r4, r4
 8001980:	45c1      	cmp	r9, r8
 8001982:	419b      	sbcs	r3, r3
 8001984:	4583      	cmp	fp, r0
 8001986:	4180      	sbcs	r0, r0
 8001988:	428d      	cmp	r5, r1
 800198a:	4189      	sbcs	r1, r1
 800198c:	425b      	negs	r3, r3
 800198e:	4264      	negs	r4, r4
 8001990:	431c      	orrs	r4, r3
 8001992:	4240      	negs	r0, r0
 8001994:	9b03      	ldr	r3, [sp, #12]
 8001996:	4249      	negs	r1, r1
 8001998:	4301      	orrs	r1, r0
 800199a:	0270      	lsls	r0, r6, #9
 800199c:	0c3f      	lsrs	r7, r7, #16
 800199e:	4318      	orrs	r0, r3
 80019a0:	19e4      	adds	r4, r4, r7
 80019a2:	1e47      	subs	r7, r0, #1
 80019a4:	41b8      	sbcs	r0, r7
 80019a6:	1864      	adds	r4, r4, r1
 80019a8:	4464      	add	r4, ip
 80019aa:	0df6      	lsrs	r6, r6, #23
 80019ac:	0261      	lsls	r1, r4, #9
 80019ae:	4330      	orrs	r0, r6
 80019b0:	0dec      	lsrs	r4, r5, #23
 80019b2:	026e      	lsls	r6, r5, #9
 80019b4:	430c      	orrs	r4, r1
 80019b6:	4330      	orrs	r0, r6
 80019b8:	01c9      	lsls	r1, r1, #7
 80019ba:	d400      	bmi.n	80019be <__aeabi_dmul+0x302>
 80019bc:	e0f1      	b.n	8001ba2 <__aeabi_dmul+0x4e6>
 80019be:	2101      	movs	r1, #1
 80019c0:	0843      	lsrs	r3, r0, #1
 80019c2:	4001      	ands	r1, r0
 80019c4:	430b      	orrs	r3, r1
 80019c6:	07e0      	lsls	r0, r4, #31
 80019c8:	4318      	orrs	r0, r3
 80019ca:	0864      	lsrs	r4, r4, #1
 80019cc:	4915      	ldr	r1, [pc, #84]	; (8001a24 <__aeabi_dmul+0x368>)
 80019ce:	9b02      	ldr	r3, [sp, #8]
 80019d0:	468c      	mov	ip, r1
 80019d2:	4463      	add	r3, ip
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	dc00      	bgt.n	80019da <__aeabi_dmul+0x31e>
 80019d8:	e097      	b.n	8001b0a <__aeabi_dmul+0x44e>
 80019da:	0741      	lsls	r1, r0, #29
 80019dc:	d009      	beq.n	80019f2 <__aeabi_dmul+0x336>
 80019de:	210f      	movs	r1, #15
 80019e0:	4001      	ands	r1, r0
 80019e2:	2904      	cmp	r1, #4
 80019e4:	d005      	beq.n	80019f2 <__aeabi_dmul+0x336>
 80019e6:	1d01      	adds	r1, r0, #4
 80019e8:	4281      	cmp	r1, r0
 80019ea:	4180      	sbcs	r0, r0
 80019ec:	4240      	negs	r0, r0
 80019ee:	1824      	adds	r4, r4, r0
 80019f0:	0008      	movs	r0, r1
 80019f2:	01e1      	lsls	r1, r4, #7
 80019f4:	d506      	bpl.n	8001a04 <__aeabi_dmul+0x348>
 80019f6:	2180      	movs	r1, #128	; 0x80
 80019f8:	00c9      	lsls	r1, r1, #3
 80019fa:	468c      	mov	ip, r1
 80019fc:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <__aeabi_dmul+0x36c>)
 80019fe:	401c      	ands	r4, r3
 8001a00:	9b02      	ldr	r3, [sp, #8]
 8001a02:	4463      	add	r3, ip
 8001a04:	4909      	ldr	r1, [pc, #36]	; (8001a2c <__aeabi_dmul+0x370>)
 8001a06:	428b      	cmp	r3, r1
 8001a08:	dd00      	ble.n	8001a0c <__aeabi_dmul+0x350>
 8001a0a:	e710      	b.n	800182e <__aeabi_dmul+0x172>
 8001a0c:	0761      	lsls	r1, r4, #29
 8001a0e:	08c5      	lsrs	r5, r0, #3
 8001a10:	0264      	lsls	r4, r4, #9
 8001a12:	055b      	lsls	r3, r3, #21
 8001a14:	430d      	orrs	r5, r1
 8001a16:	0b24      	lsrs	r4, r4, #12
 8001a18:	0d5b      	lsrs	r3, r3, #21
 8001a1a:	e6c1      	b.n	80017a0 <__aeabi_dmul+0xe4>
 8001a1c:	000007ff 	.word	0x000007ff
 8001a20:	fffffc01 	.word	0xfffffc01
 8001a24:	000003ff 	.word	0x000003ff
 8001a28:	feffffff 	.word	0xfeffffff
 8001a2c:	000007fe 	.word	0x000007fe
 8001a30:	464b      	mov	r3, r9
 8001a32:	4323      	orrs	r3, r4
 8001a34:	d059      	beq.n	8001aea <__aeabi_dmul+0x42e>
 8001a36:	2c00      	cmp	r4, #0
 8001a38:	d100      	bne.n	8001a3c <__aeabi_dmul+0x380>
 8001a3a:	e0a3      	b.n	8001b84 <__aeabi_dmul+0x4c8>
 8001a3c:	0020      	movs	r0, r4
 8001a3e:	f000 fdf9 	bl	8002634 <__clzsi2>
 8001a42:	0001      	movs	r1, r0
 8001a44:	0003      	movs	r3, r0
 8001a46:	390b      	subs	r1, #11
 8001a48:	221d      	movs	r2, #29
 8001a4a:	1a52      	subs	r2, r2, r1
 8001a4c:	4649      	mov	r1, r9
 8001a4e:	0018      	movs	r0, r3
 8001a50:	40d1      	lsrs	r1, r2
 8001a52:	464a      	mov	r2, r9
 8001a54:	3808      	subs	r0, #8
 8001a56:	4082      	lsls	r2, r0
 8001a58:	4084      	lsls	r4, r0
 8001a5a:	0010      	movs	r0, r2
 8001a5c:	430c      	orrs	r4, r1
 8001a5e:	4a74      	ldr	r2, [pc, #464]	; (8001c30 <__aeabi_dmul+0x574>)
 8001a60:	1aeb      	subs	r3, r5, r3
 8001a62:	4694      	mov	ip, r2
 8001a64:	4642      	mov	r2, r8
 8001a66:	4463      	add	r3, ip
 8001a68:	9301      	str	r3, [sp, #4]
 8001a6a:	9b01      	ldr	r3, [sp, #4]
 8001a6c:	407a      	eors	r2, r7
 8001a6e:	3301      	adds	r3, #1
 8001a70:	2100      	movs	r1, #0
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	9302      	str	r3, [sp, #8]
 8001a76:	2e0a      	cmp	r6, #10
 8001a78:	dd00      	ble.n	8001a7c <__aeabi_dmul+0x3c0>
 8001a7a:	e667      	b.n	800174c <__aeabi_dmul+0x90>
 8001a7c:	e683      	b.n	8001786 <__aeabi_dmul+0xca>
 8001a7e:	465b      	mov	r3, fp
 8001a80:	4303      	orrs	r3, r0
 8001a82:	469a      	mov	sl, r3
 8001a84:	d02a      	beq.n	8001adc <__aeabi_dmul+0x420>
 8001a86:	465b      	mov	r3, fp
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d06d      	beq.n	8001b68 <__aeabi_dmul+0x4ac>
 8001a8c:	4658      	mov	r0, fp
 8001a8e:	f000 fdd1 	bl	8002634 <__clzsi2>
 8001a92:	0001      	movs	r1, r0
 8001a94:	0003      	movs	r3, r0
 8001a96:	390b      	subs	r1, #11
 8001a98:	221d      	movs	r2, #29
 8001a9a:	1a52      	subs	r2, r2, r1
 8001a9c:	0021      	movs	r1, r4
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	465d      	mov	r5, fp
 8001aa2:	40d1      	lsrs	r1, r2
 8001aa4:	3808      	subs	r0, #8
 8001aa6:	4085      	lsls	r5, r0
 8001aa8:	000a      	movs	r2, r1
 8001aaa:	4084      	lsls	r4, r0
 8001aac:	432a      	orrs	r2, r5
 8001aae:	4693      	mov	fp, r2
 8001ab0:	46a2      	mov	sl, r4
 8001ab2:	4d5f      	ldr	r5, [pc, #380]	; (8001c30 <__aeabi_dmul+0x574>)
 8001ab4:	2600      	movs	r6, #0
 8001ab6:	1aed      	subs	r5, r5, r3
 8001ab8:	2300      	movs	r3, #0
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	e625      	b.n	800170a <__aeabi_dmul+0x4e>
 8001abe:	465b      	mov	r3, fp
 8001ac0:	4303      	orrs	r3, r0
 8001ac2:	469a      	mov	sl, r3
 8001ac4:	d105      	bne.n	8001ad2 <__aeabi_dmul+0x416>
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	469b      	mov	fp, r3
 8001aca:	3302      	adds	r3, #2
 8001acc:	2608      	movs	r6, #8
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	e61b      	b.n	800170a <__aeabi_dmul+0x4e>
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	4682      	mov	sl, r0
 8001ad6:	260c      	movs	r6, #12
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	e616      	b.n	800170a <__aeabi_dmul+0x4e>
 8001adc:	2300      	movs	r3, #0
 8001ade:	469b      	mov	fp, r3
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	2604      	movs	r6, #4
 8001ae4:	2500      	movs	r5, #0
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	e60f      	b.n	800170a <__aeabi_dmul+0x4e>
 8001aea:	4642      	mov	r2, r8
 8001aec:	3301      	adds	r3, #1
 8001aee:	9501      	str	r5, [sp, #4]
 8001af0:	431e      	orrs	r6, r3
 8001af2:	9b01      	ldr	r3, [sp, #4]
 8001af4:	407a      	eors	r2, r7
 8001af6:	3301      	adds	r3, #1
 8001af8:	2400      	movs	r4, #0
 8001afa:	2000      	movs	r0, #0
 8001afc:	2101      	movs	r1, #1
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	9302      	str	r3, [sp, #8]
 8001b02:	2e0a      	cmp	r6, #10
 8001b04:	dd00      	ble.n	8001b08 <__aeabi_dmul+0x44c>
 8001b06:	e621      	b.n	800174c <__aeabi_dmul+0x90>
 8001b08:	e63d      	b.n	8001786 <__aeabi_dmul+0xca>
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	1ac9      	subs	r1, r1, r3
 8001b0e:	2938      	cmp	r1, #56	; 0x38
 8001b10:	dd00      	ble.n	8001b14 <__aeabi_dmul+0x458>
 8001b12:	e642      	b.n	800179a <__aeabi_dmul+0xde>
 8001b14:	291f      	cmp	r1, #31
 8001b16:	dd47      	ble.n	8001ba8 <__aeabi_dmul+0x4ec>
 8001b18:	261f      	movs	r6, #31
 8001b1a:	0025      	movs	r5, r4
 8001b1c:	4276      	negs	r6, r6
 8001b1e:	1af3      	subs	r3, r6, r3
 8001b20:	40dd      	lsrs	r5, r3
 8001b22:	002b      	movs	r3, r5
 8001b24:	2920      	cmp	r1, #32
 8001b26:	d005      	beq.n	8001b34 <__aeabi_dmul+0x478>
 8001b28:	4942      	ldr	r1, [pc, #264]	; (8001c34 <__aeabi_dmul+0x578>)
 8001b2a:	9d02      	ldr	r5, [sp, #8]
 8001b2c:	468c      	mov	ip, r1
 8001b2e:	4465      	add	r5, ip
 8001b30:	40ac      	lsls	r4, r5
 8001b32:	4320      	orrs	r0, r4
 8001b34:	1e41      	subs	r1, r0, #1
 8001b36:	4188      	sbcs	r0, r1
 8001b38:	4318      	orrs	r0, r3
 8001b3a:	2307      	movs	r3, #7
 8001b3c:	001d      	movs	r5, r3
 8001b3e:	2400      	movs	r4, #0
 8001b40:	4005      	ands	r5, r0
 8001b42:	4203      	tst	r3, r0
 8001b44:	d04a      	beq.n	8001bdc <__aeabi_dmul+0x520>
 8001b46:	230f      	movs	r3, #15
 8001b48:	2400      	movs	r4, #0
 8001b4a:	4003      	ands	r3, r0
 8001b4c:	2b04      	cmp	r3, #4
 8001b4e:	d042      	beq.n	8001bd6 <__aeabi_dmul+0x51a>
 8001b50:	1d03      	adds	r3, r0, #4
 8001b52:	4283      	cmp	r3, r0
 8001b54:	4180      	sbcs	r0, r0
 8001b56:	4240      	negs	r0, r0
 8001b58:	1824      	adds	r4, r4, r0
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	0223      	lsls	r3, r4, #8
 8001b5e:	d53a      	bpl.n	8001bd6 <__aeabi_dmul+0x51a>
 8001b60:	2301      	movs	r3, #1
 8001b62:	2400      	movs	r4, #0
 8001b64:	2500      	movs	r5, #0
 8001b66:	e61b      	b.n	80017a0 <__aeabi_dmul+0xe4>
 8001b68:	f000 fd64 	bl	8002634 <__clzsi2>
 8001b6c:	0001      	movs	r1, r0
 8001b6e:	0003      	movs	r3, r0
 8001b70:	3115      	adds	r1, #21
 8001b72:	3320      	adds	r3, #32
 8001b74:	291c      	cmp	r1, #28
 8001b76:	dd8f      	ble.n	8001a98 <__aeabi_dmul+0x3dc>
 8001b78:	3808      	subs	r0, #8
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	4084      	lsls	r4, r0
 8001b7e:	4692      	mov	sl, r2
 8001b80:	46a3      	mov	fp, r4
 8001b82:	e796      	b.n	8001ab2 <__aeabi_dmul+0x3f6>
 8001b84:	f000 fd56 	bl	8002634 <__clzsi2>
 8001b88:	0001      	movs	r1, r0
 8001b8a:	0003      	movs	r3, r0
 8001b8c:	3115      	adds	r1, #21
 8001b8e:	3320      	adds	r3, #32
 8001b90:	291c      	cmp	r1, #28
 8001b92:	dc00      	bgt.n	8001b96 <__aeabi_dmul+0x4da>
 8001b94:	e758      	b.n	8001a48 <__aeabi_dmul+0x38c>
 8001b96:	0002      	movs	r2, r0
 8001b98:	464c      	mov	r4, r9
 8001b9a:	3a08      	subs	r2, #8
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	4094      	lsls	r4, r2
 8001ba0:	e75d      	b.n	8001a5e <__aeabi_dmul+0x3a2>
 8001ba2:	9b01      	ldr	r3, [sp, #4]
 8001ba4:	9302      	str	r3, [sp, #8]
 8001ba6:	e711      	b.n	80019cc <__aeabi_dmul+0x310>
 8001ba8:	4b23      	ldr	r3, [pc, #140]	; (8001c38 <__aeabi_dmul+0x57c>)
 8001baa:	0026      	movs	r6, r4
 8001bac:	469c      	mov	ip, r3
 8001bae:	0003      	movs	r3, r0
 8001bb0:	9d02      	ldr	r5, [sp, #8]
 8001bb2:	40cb      	lsrs	r3, r1
 8001bb4:	4465      	add	r5, ip
 8001bb6:	40ae      	lsls	r6, r5
 8001bb8:	431e      	orrs	r6, r3
 8001bba:	0003      	movs	r3, r0
 8001bbc:	40ab      	lsls	r3, r5
 8001bbe:	1e58      	subs	r0, r3, #1
 8001bc0:	4183      	sbcs	r3, r0
 8001bc2:	0030      	movs	r0, r6
 8001bc4:	4318      	orrs	r0, r3
 8001bc6:	40cc      	lsrs	r4, r1
 8001bc8:	0743      	lsls	r3, r0, #29
 8001bca:	d0c7      	beq.n	8001b5c <__aeabi_dmul+0x4a0>
 8001bcc:	230f      	movs	r3, #15
 8001bce:	4003      	ands	r3, r0
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d1bd      	bne.n	8001b50 <__aeabi_dmul+0x494>
 8001bd4:	e7c2      	b.n	8001b5c <__aeabi_dmul+0x4a0>
 8001bd6:	0765      	lsls	r5, r4, #29
 8001bd8:	0264      	lsls	r4, r4, #9
 8001bda:	0b24      	lsrs	r4, r4, #12
 8001bdc:	08c0      	lsrs	r0, r0, #3
 8001bde:	2300      	movs	r3, #0
 8001be0:	4305      	orrs	r5, r0
 8001be2:	e5dd      	b.n	80017a0 <__aeabi_dmul+0xe4>
 8001be4:	2500      	movs	r5, #0
 8001be6:	2302      	movs	r3, #2
 8001be8:	2e0f      	cmp	r6, #15
 8001bea:	d10c      	bne.n	8001c06 <__aeabi_dmul+0x54a>
 8001bec:	2480      	movs	r4, #128	; 0x80
 8001bee:	465b      	mov	r3, fp
 8001bf0:	0324      	lsls	r4, r4, #12
 8001bf2:	4223      	tst	r3, r4
 8001bf4:	d00e      	beq.n	8001c14 <__aeabi_dmul+0x558>
 8001bf6:	4221      	tst	r1, r4
 8001bf8:	d10c      	bne.n	8001c14 <__aeabi_dmul+0x558>
 8001bfa:	430c      	orrs	r4, r1
 8001bfc:	0324      	lsls	r4, r4, #12
 8001bfe:	003a      	movs	r2, r7
 8001c00:	4b0e      	ldr	r3, [pc, #56]	; (8001c3c <__aeabi_dmul+0x580>)
 8001c02:	0b24      	lsrs	r4, r4, #12
 8001c04:	e5cc      	b.n	80017a0 <__aeabi_dmul+0xe4>
 8001c06:	2e0b      	cmp	r6, #11
 8001c08:	d000      	beq.n	8001c0c <__aeabi_dmul+0x550>
 8001c0a:	e5a2      	b.n	8001752 <__aeabi_dmul+0x96>
 8001c0c:	468b      	mov	fp, r1
 8001c0e:	46aa      	mov	sl, r5
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	e5f7      	b.n	8001804 <__aeabi_dmul+0x148>
 8001c14:	2480      	movs	r4, #128	; 0x80
 8001c16:	465b      	mov	r3, fp
 8001c18:	0324      	lsls	r4, r4, #12
 8001c1a:	431c      	orrs	r4, r3
 8001c1c:	0324      	lsls	r4, r4, #12
 8001c1e:	4642      	mov	r2, r8
 8001c20:	4655      	mov	r5, sl
 8001c22:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <__aeabi_dmul+0x580>)
 8001c24:	0b24      	lsrs	r4, r4, #12
 8001c26:	e5bb      	b.n	80017a0 <__aeabi_dmul+0xe4>
 8001c28:	464d      	mov	r5, r9
 8001c2a:	0021      	movs	r1, r4
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e7db      	b.n	8001be8 <__aeabi_dmul+0x52c>
 8001c30:	fffffc0d 	.word	0xfffffc0d
 8001c34:	0000043e 	.word	0x0000043e
 8001c38:	0000041e 	.word	0x0000041e
 8001c3c:	000007ff 	.word	0x000007ff

08001c40 <__aeabi_dsub>:
 8001c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c42:	4657      	mov	r7, sl
 8001c44:	464e      	mov	r6, r9
 8001c46:	4645      	mov	r5, r8
 8001c48:	46de      	mov	lr, fp
 8001c4a:	b5e0      	push	{r5, r6, r7, lr}
 8001c4c:	000d      	movs	r5, r1
 8001c4e:	0004      	movs	r4, r0
 8001c50:	0019      	movs	r1, r3
 8001c52:	0010      	movs	r0, r2
 8001c54:	032b      	lsls	r3, r5, #12
 8001c56:	0a5b      	lsrs	r3, r3, #9
 8001c58:	0f62      	lsrs	r2, r4, #29
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	00e3      	lsls	r3, r4, #3
 8001c5e:	030c      	lsls	r4, r1, #12
 8001c60:	0a64      	lsrs	r4, r4, #9
 8001c62:	0f47      	lsrs	r7, r0, #29
 8001c64:	4327      	orrs	r7, r4
 8001c66:	4cd0      	ldr	r4, [pc, #832]	; (8001fa8 <__aeabi_dsub+0x368>)
 8001c68:	006e      	lsls	r6, r5, #1
 8001c6a:	4691      	mov	r9, r2
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	004a      	lsls	r2, r1, #1
 8001c70:	00c0      	lsls	r0, r0, #3
 8001c72:	4698      	mov	r8, r3
 8001c74:	46a2      	mov	sl, r4
 8001c76:	0d76      	lsrs	r6, r6, #21
 8001c78:	0fed      	lsrs	r5, r5, #31
 8001c7a:	0d52      	lsrs	r2, r2, #21
 8001c7c:	0fc9      	lsrs	r1, r1, #31
 8001c7e:	9001      	str	r0, [sp, #4]
 8001c80:	42a2      	cmp	r2, r4
 8001c82:	d100      	bne.n	8001c86 <__aeabi_dsub+0x46>
 8001c84:	e0b9      	b.n	8001dfa <__aeabi_dsub+0x1ba>
 8001c86:	2401      	movs	r4, #1
 8001c88:	4061      	eors	r1, r4
 8001c8a:	468b      	mov	fp, r1
 8001c8c:	428d      	cmp	r5, r1
 8001c8e:	d100      	bne.n	8001c92 <__aeabi_dsub+0x52>
 8001c90:	e08d      	b.n	8001dae <__aeabi_dsub+0x16e>
 8001c92:	1ab4      	subs	r4, r6, r2
 8001c94:	46a4      	mov	ip, r4
 8001c96:	2c00      	cmp	r4, #0
 8001c98:	dc00      	bgt.n	8001c9c <__aeabi_dsub+0x5c>
 8001c9a:	e0b7      	b.n	8001e0c <__aeabi_dsub+0x1cc>
 8001c9c:	2a00      	cmp	r2, #0
 8001c9e:	d100      	bne.n	8001ca2 <__aeabi_dsub+0x62>
 8001ca0:	e0cb      	b.n	8001e3a <__aeabi_dsub+0x1fa>
 8001ca2:	4ac1      	ldr	r2, [pc, #772]	; (8001fa8 <__aeabi_dsub+0x368>)
 8001ca4:	4296      	cmp	r6, r2
 8001ca6:	d100      	bne.n	8001caa <__aeabi_dsub+0x6a>
 8001ca8:	e186      	b.n	8001fb8 <__aeabi_dsub+0x378>
 8001caa:	2280      	movs	r2, #128	; 0x80
 8001cac:	0412      	lsls	r2, r2, #16
 8001cae:	4317      	orrs	r7, r2
 8001cb0:	4662      	mov	r2, ip
 8001cb2:	2a38      	cmp	r2, #56	; 0x38
 8001cb4:	dd00      	ble.n	8001cb8 <__aeabi_dsub+0x78>
 8001cb6:	e1a4      	b.n	8002002 <__aeabi_dsub+0x3c2>
 8001cb8:	2a1f      	cmp	r2, #31
 8001cba:	dd00      	ble.n	8001cbe <__aeabi_dsub+0x7e>
 8001cbc:	e21d      	b.n	80020fa <__aeabi_dsub+0x4ba>
 8001cbe:	4661      	mov	r1, ip
 8001cc0:	2220      	movs	r2, #32
 8001cc2:	003c      	movs	r4, r7
 8001cc4:	1a52      	subs	r2, r2, r1
 8001cc6:	0001      	movs	r1, r0
 8001cc8:	4090      	lsls	r0, r2
 8001cca:	4094      	lsls	r4, r2
 8001ccc:	1e42      	subs	r2, r0, #1
 8001cce:	4190      	sbcs	r0, r2
 8001cd0:	4662      	mov	r2, ip
 8001cd2:	46a0      	mov	r8, r4
 8001cd4:	4664      	mov	r4, ip
 8001cd6:	40d7      	lsrs	r7, r2
 8001cd8:	464a      	mov	r2, r9
 8001cda:	40e1      	lsrs	r1, r4
 8001cdc:	4644      	mov	r4, r8
 8001cde:	1bd2      	subs	r2, r2, r7
 8001ce0:	4691      	mov	r9, r2
 8001ce2:	430c      	orrs	r4, r1
 8001ce4:	4304      	orrs	r4, r0
 8001ce6:	1b1c      	subs	r4, r3, r4
 8001ce8:	42a3      	cmp	r3, r4
 8001cea:	4192      	sbcs	r2, r2
 8001cec:	464b      	mov	r3, r9
 8001cee:	4252      	negs	r2, r2
 8001cf0:	1a9b      	subs	r3, r3, r2
 8001cf2:	469a      	mov	sl, r3
 8001cf4:	4653      	mov	r3, sl
 8001cf6:	021b      	lsls	r3, r3, #8
 8001cf8:	d400      	bmi.n	8001cfc <__aeabi_dsub+0xbc>
 8001cfa:	e12b      	b.n	8001f54 <__aeabi_dsub+0x314>
 8001cfc:	4653      	mov	r3, sl
 8001cfe:	025a      	lsls	r2, r3, #9
 8001d00:	0a53      	lsrs	r3, r2, #9
 8001d02:	469a      	mov	sl, r3
 8001d04:	4653      	mov	r3, sl
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d100      	bne.n	8001d0c <__aeabi_dsub+0xcc>
 8001d0a:	e166      	b.n	8001fda <__aeabi_dsub+0x39a>
 8001d0c:	4650      	mov	r0, sl
 8001d0e:	f000 fc91 	bl	8002634 <__clzsi2>
 8001d12:	0003      	movs	r3, r0
 8001d14:	3b08      	subs	r3, #8
 8001d16:	2220      	movs	r2, #32
 8001d18:	0020      	movs	r0, r4
 8001d1a:	1ad2      	subs	r2, r2, r3
 8001d1c:	4651      	mov	r1, sl
 8001d1e:	40d0      	lsrs	r0, r2
 8001d20:	4099      	lsls	r1, r3
 8001d22:	0002      	movs	r2, r0
 8001d24:	409c      	lsls	r4, r3
 8001d26:	430a      	orrs	r2, r1
 8001d28:	429e      	cmp	r6, r3
 8001d2a:	dd00      	ble.n	8001d2e <__aeabi_dsub+0xee>
 8001d2c:	e164      	b.n	8001ff8 <__aeabi_dsub+0x3b8>
 8001d2e:	1b9b      	subs	r3, r3, r6
 8001d30:	1c59      	adds	r1, r3, #1
 8001d32:	291f      	cmp	r1, #31
 8001d34:	dd00      	ble.n	8001d38 <__aeabi_dsub+0xf8>
 8001d36:	e0fe      	b.n	8001f36 <__aeabi_dsub+0x2f6>
 8001d38:	2320      	movs	r3, #32
 8001d3a:	0010      	movs	r0, r2
 8001d3c:	0026      	movs	r6, r4
 8001d3e:	1a5b      	subs	r3, r3, r1
 8001d40:	409c      	lsls	r4, r3
 8001d42:	4098      	lsls	r0, r3
 8001d44:	40ce      	lsrs	r6, r1
 8001d46:	40ca      	lsrs	r2, r1
 8001d48:	1e63      	subs	r3, r4, #1
 8001d4a:	419c      	sbcs	r4, r3
 8001d4c:	4330      	orrs	r0, r6
 8001d4e:	4692      	mov	sl, r2
 8001d50:	2600      	movs	r6, #0
 8001d52:	4304      	orrs	r4, r0
 8001d54:	0763      	lsls	r3, r4, #29
 8001d56:	d009      	beq.n	8001d6c <__aeabi_dsub+0x12c>
 8001d58:	230f      	movs	r3, #15
 8001d5a:	4023      	ands	r3, r4
 8001d5c:	2b04      	cmp	r3, #4
 8001d5e:	d005      	beq.n	8001d6c <__aeabi_dsub+0x12c>
 8001d60:	1d23      	adds	r3, r4, #4
 8001d62:	42a3      	cmp	r3, r4
 8001d64:	41a4      	sbcs	r4, r4
 8001d66:	4264      	negs	r4, r4
 8001d68:	44a2      	add	sl, r4
 8001d6a:	001c      	movs	r4, r3
 8001d6c:	4653      	mov	r3, sl
 8001d6e:	021b      	lsls	r3, r3, #8
 8001d70:	d400      	bmi.n	8001d74 <__aeabi_dsub+0x134>
 8001d72:	e0f2      	b.n	8001f5a <__aeabi_dsub+0x31a>
 8001d74:	4b8c      	ldr	r3, [pc, #560]	; (8001fa8 <__aeabi_dsub+0x368>)
 8001d76:	3601      	adds	r6, #1
 8001d78:	429e      	cmp	r6, r3
 8001d7a:	d100      	bne.n	8001d7e <__aeabi_dsub+0x13e>
 8001d7c:	e10f      	b.n	8001f9e <__aeabi_dsub+0x35e>
 8001d7e:	4653      	mov	r3, sl
 8001d80:	498a      	ldr	r1, [pc, #552]	; (8001fac <__aeabi_dsub+0x36c>)
 8001d82:	08e4      	lsrs	r4, r4, #3
 8001d84:	400b      	ands	r3, r1
 8001d86:	0019      	movs	r1, r3
 8001d88:	075b      	lsls	r3, r3, #29
 8001d8a:	4323      	orrs	r3, r4
 8001d8c:	0572      	lsls	r2, r6, #21
 8001d8e:	024c      	lsls	r4, r1, #9
 8001d90:	0b24      	lsrs	r4, r4, #12
 8001d92:	0d52      	lsrs	r2, r2, #21
 8001d94:	0512      	lsls	r2, r2, #20
 8001d96:	4322      	orrs	r2, r4
 8001d98:	07ed      	lsls	r5, r5, #31
 8001d9a:	432a      	orrs	r2, r5
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	0011      	movs	r1, r2
 8001da0:	b003      	add	sp, #12
 8001da2:	bcf0      	pop	{r4, r5, r6, r7}
 8001da4:	46bb      	mov	fp, r7
 8001da6:	46b2      	mov	sl, r6
 8001da8:	46a9      	mov	r9, r5
 8001daa:	46a0      	mov	r8, r4
 8001dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dae:	1ab4      	subs	r4, r6, r2
 8001db0:	46a4      	mov	ip, r4
 8001db2:	2c00      	cmp	r4, #0
 8001db4:	dd59      	ble.n	8001e6a <__aeabi_dsub+0x22a>
 8001db6:	2a00      	cmp	r2, #0
 8001db8:	d100      	bne.n	8001dbc <__aeabi_dsub+0x17c>
 8001dba:	e0b0      	b.n	8001f1e <__aeabi_dsub+0x2de>
 8001dbc:	4556      	cmp	r6, sl
 8001dbe:	d100      	bne.n	8001dc2 <__aeabi_dsub+0x182>
 8001dc0:	e0fa      	b.n	8001fb8 <__aeabi_dsub+0x378>
 8001dc2:	2280      	movs	r2, #128	; 0x80
 8001dc4:	0412      	lsls	r2, r2, #16
 8001dc6:	4317      	orrs	r7, r2
 8001dc8:	4662      	mov	r2, ip
 8001dca:	2a38      	cmp	r2, #56	; 0x38
 8001dcc:	dd00      	ble.n	8001dd0 <__aeabi_dsub+0x190>
 8001dce:	e0d4      	b.n	8001f7a <__aeabi_dsub+0x33a>
 8001dd0:	2a1f      	cmp	r2, #31
 8001dd2:	dc00      	bgt.n	8001dd6 <__aeabi_dsub+0x196>
 8001dd4:	e1c0      	b.n	8002158 <__aeabi_dsub+0x518>
 8001dd6:	0039      	movs	r1, r7
 8001dd8:	3a20      	subs	r2, #32
 8001dda:	40d1      	lsrs	r1, r2
 8001ddc:	4662      	mov	r2, ip
 8001dde:	2a20      	cmp	r2, #32
 8001de0:	d006      	beq.n	8001df0 <__aeabi_dsub+0x1b0>
 8001de2:	4664      	mov	r4, ip
 8001de4:	2240      	movs	r2, #64	; 0x40
 8001de6:	1b12      	subs	r2, r2, r4
 8001de8:	003c      	movs	r4, r7
 8001dea:	4094      	lsls	r4, r2
 8001dec:	4304      	orrs	r4, r0
 8001dee:	9401      	str	r4, [sp, #4]
 8001df0:	9c01      	ldr	r4, [sp, #4]
 8001df2:	1e62      	subs	r2, r4, #1
 8001df4:	4194      	sbcs	r4, r2
 8001df6:	430c      	orrs	r4, r1
 8001df8:	e0c3      	b.n	8001f82 <__aeabi_dsub+0x342>
 8001dfa:	003c      	movs	r4, r7
 8001dfc:	4304      	orrs	r4, r0
 8001dfe:	d02b      	beq.n	8001e58 <__aeabi_dsub+0x218>
 8001e00:	468b      	mov	fp, r1
 8001e02:	428d      	cmp	r5, r1
 8001e04:	d02e      	beq.n	8001e64 <__aeabi_dsub+0x224>
 8001e06:	4c6a      	ldr	r4, [pc, #424]	; (8001fb0 <__aeabi_dsub+0x370>)
 8001e08:	46a4      	mov	ip, r4
 8001e0a:	44b4      	add	ip, r6
 8001e0c:	4664      	mov	r4, ip
 8001e0e:	2c00      	cmp	r4, #0
 8001e10:	d05f      	beq.n	8001ed2 <__aeabi_dsub+0x292>
 8001e12:	1b94      	subs	r4, r2, r6
 8001e14:	46a4      	mov	ip, r4
 8001e16:	2e00      	cmp	r6, #0
 8001e18:	d000      	beq.n	8001e1c <__aeabi_dsub+0x1dc>
 8001e1a:	e120      	b.n	800205e <__aeabi_dsub+0x41e>
 8001e1c:	464c      	mov	r4, r9
 8001e1e:	431c      	orrs	r4, r3
 8001e20:	d100      	bne.n	8001e24 <__aeabi_dsub+0x1e4>
 8001e22:	e1c7      	b.n	80021b4 <__aeabi_dsub+0x574>
 8001e24:	4661      	mov	r1, ip
 8001e26:	1e4c      	subs	r4, r1, #1
 8001e28:	2901      	cmp	r1, #1
 8001e2a:	d100      	bne.n	8001e2e <__aeabi_dsub+0x1ee>
 8001e2c:	e223      	b.n	8002276 <__aeabi_dsub+0x636>
 8001e2e:	4d5e      	ldr	r5, [pc, #376]	; (8001fa8 <__aeabi_dsub+0x368>)
 8001e30:	45ac      	cmp	ip, r5
 8001e32:	d100      	bne.n	8001e36 <__aeabi_dsub+0x1f6>
 8001e34:	e1d8      	b.n	80021e8 <__aeabi_dsub+0x5a8>
 8001e36:	46a4      	mov	ip, r4
 8001e38:	e11a      	b.n	8002070 <__aeabi_dsub+0x430>
 8001e3a:	003a      	movs	r2, r7
 8001e3c:	4302      	orrs	r2, r0
 8001e3e:	d100      	bne.n	8001e42 <__aeabi_dsub+0x202>
 8001e40:	e0e4      	b.n	800200c <__aeabi_dsub+0x3cc>
 8001e42:	0022      	movs	r2, r4
 8001e44:	3a01      	subs	r2, #1
 8001e46:	2c01      	cmp	r4, #1
 8001e48:	d100      	bne.n	8001e4c <__aeabi_dsub+0x20c>
 8001e4a:	e1c3      	b.n	80021d4 <__aeabi_dsub+0x594>
 8001e4c:	4956      	ldr	r1, [pc, #344]	; (8001fa8 <__aeabi_dsub+0x368>)
 8001e4e:	428c      	cmp	r4, r1
 8001e50:	d100      	bne.n	8001e54 <__aeabi_dsub+0x214>
 8001e52:	e0b1      	b.n	8001fb8 <__aeabi_dsub+0x378>
 8001e54:	4694      	mov	ip, r2
 8001e56:	e72b      	b.n	8001cb0 <__aeabi_dsub+0x70>
 8001e58:	2401      	movs	r4, #1
 8001e5a:	4061      	eors	r1, r4
 8001e5c:	468b      	mov	fp, r1
 8001e5e:	428d      	cmp	r5, r1
 8001e60:	d000      	beq.n	8001e64 <__aeabi_dsub+0x224>
 8001e62:	e716      	b.n	8001c92 <__aeabi_dsub+0x52>
 8001e64:	4952      	ldr	r1, [pc, #328]	; (8001fb0 <__aeabi_dsub+0x370>)
 8001e66:	468c      	mov	ip, r1
 8001e68:	44b4      	add	ip, r6
 8001e6a:	4664      	mov	r4, ip
 8001e6c:	2c00      	cmp	r4, #0
 8001e6e:	d100      	bne.n	8001e72 <__aeabi_dsub+0x232>
 8001e70:	e0d3      	b.n	800201a <__aeabi_dsub+0x3da>
 8001e72:	1b91      	subs	r1, r2, r6
 8001e74:	468c      	mov	ip, r1
 8001e76:	2e00      	cmp	r6, #0
 8001e78:	d100      	bne.n	8001e7c <__aeabi_dsub+0x23c>
 8001e7a:	e15e      	b.n	800213a <__aeabi_dsub+0x4fa>
 8001e7c:	494a      	ldr	r1, [pc, #296]	; (8001fa8 <__aeabi_dsub+0x368>)
 8001e7e:	428a      	cmp	r2, r1
 8001e80:	d100      	bne.n	8001e84 <__aeabi_dsub+0x244>
 8001e82:	e1be      	b.n	8002202 <__aeabi_dsub+0x5c2>
 8001e84:	2180      	movs	r1, #128	; 0x80
 8001e86:	464c      	mov	r4, r9
 8001e88:	0409      	lsls	r1, r1, #16
 8001e8a:	430c      	orrs	r4, r1
 8001e8c:	46a1      	mov	r9, r4
 8001e8e:	4661      	mov	r1, ip
 8001e90:	2938      	cmp	r1, #56	; 0x38
 8001e92:	dd00      	ble.n	8001e96 <__aeabi_dsub+0x256>
 8001e94:	e1ba      	b.n	800220c <__aeabi_dsub+0x5cc>
 8001e96:	291f      	cmp	r1, #31
 8001e98:	dd00      	ble.n	8001e9c <__aeabi_dsub+0x25c>
 8001e9a:	e227      	b.n	80022ec <__aeabi_dsub+0x6ac>
 8001e9c:	2420      	movs	r4, #32
 8001e9e:	1a64      	subs	r4, r4, r1
 8001ea0:	4649      	mov	r1, r9
 8001ea2:	40a1      	lsls	r1, r4
 8001ea4:	001e      	movs	r6, r3
 8001ea6:	4688      	mov	r8, r1
 8001ea8:	4661      	mov	r1, ip
 8001eaa:	40a3      	lsls	r3, r4
 8001eac:	40ce      	lsrs	r6, r1
 8001eae:	4641      	mov	r1, r8
 8001eb0:	1e5c      	subs	r4, r3, #1
 8001eb2:	41a3      	sbcs	r3, r4
 8001eb4:	4331      	orrs	r1, r6
 8001eb6:	4319      	orrs	r1, r3
 8001eb8:	000c      	movs	r4, r1
 8001eba:	4663      	mov	r3, ip
 8001ebc:	4649      	mov	r1, r9
 8001ebe:	40d9      	lsrs	r1, r3
 8001ec0:	187f      	adds	r7, r7, r1
 8001ec2:	1824      	adds	r4, r4, r0
 8001ec4:	4284      	cmp	r4, r0
 8001ec6:	419b      	sbcs	r3, r3
 8001ec8:	425b      	negs	r3, r3
 8001eca:	469a      	mov	sl, r3
 8001ecc:	0016      	movs	r6, r2
 8001ece:	44ba      	add	sl, r7
 8001ed0:	e05d      	b.n	8001f8e <__aeabi_dsub+0x34e>
 8001ed2:	4c38      	ldr	r4, [pc, #224]	; (8001fb4 <__aeabi_dsub+0x374>)
 8001ed4:	1c72      	adds	r2, r6, #1
 8001ed6:	4222      	tst	r2, r4
 8001ed8:	d000      	beq.n	8001edc <__aeabi_dsub+0x29c>
 8001eda:	e0df      	b.n	800209c <__aeabi_dsub+0x45c>
 8001edc:	464a      	mov	r2, r9
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	2e00      	cmp	r6, #0
 8001ee2:	d000      	beq.n	8001ee6 <__aeabi_dsub+0x2a6>
 8001ee4:	e15c      	b.n	80021a0 <__aeabi_dsub+0x560>
 8001ee6:	2a00      	cmp	r2, #0
 8001ee8:	d100      	bne.n	8001eec <__aeabi_dsub+0x2ac>
 8001eea:	e1cf      	b.n	800228c <__aeabi_dsub+0x64c>
 8001eec:	003a      	movs	r2, r7
 8001eee:	4302      	orrs	r2, r0
 8001ef0:	d100      	bne.n	8001ef4 <__aeabi_dsub+0x2b4>
 8001ef2:	e17f      	b.n	80021f4 <__aeabi_dsub+0x5b4>
 8001ef4:	1a1c      	subs	r4, r3, r0
 8001ef6:	464a      	mov	r2, r9
 8001ef8:	42a3      	cmp	r3, r4
 8001efa:	4189      	sbcs	r1, r1
 8001efc:	1bd2      	subs	r2, r2, r7
 8001efe:	4249      	negs	r1, r1
 8001f00:	1a52      	subs	r2, r2, r1
 8001f02:	4692      	mov	sl, r2
 8001f04:	0212      	lsls	r2, r2, #8
 8001f06:	d400      	bmi.n	8001f0a <__aeabi_dsub+0x2ca>
 8001f08:	e20a      	b.n	8002320 <__aeabi_dsub+0x6e0>
 8001f0a:	1ac4      	subs	r4, r0, r3
 8001f0c:	42a0      	cmp	r0, r4
 8001f0e:	4180      	sbcs	r0, r0
 8001f10:	464b      	mov	r3, r9
 8001f12:	4240      	negs	r0, r0
 8001f14:	1aff      	subs	r7, r7, r3
 8001f16:	1a3b      	subs	r3, r7, r0
 8001f18:	469a      	mov	sl, r3
 8001f1a:	465d      	mov	r5, fp
 8001f1c:	e71a      	b.n	8001d54 <__aeabi_dsub+0x114>
 8001f1e:	003a      	movs	r2, r7
 8001f20:	4302      	orrs	r2, r0
 8001f22:	d073      	beq.n	800200c <__aeabi_dsub+0x3cc>
 8001f24:	0022      	movs	r2, r4
 8001f26:	3a01      	subs	r2, #1
 8001f28:	2c01      	cmp	r4, #1
 8001f2a:	d100      	bne.n	8001f2e <__aeabi_dsub+0x2ee>
 8001f2c:	e0cb      	b.n	80020c6 <__aeabi_dsub+0x486>
 8001f2e:	4554      	cmp	r4, sl
 8001f30:	d042      	beq.n	8001fb8 <__aeabi_dsub+0x378>
 8001f32:	4694      	mov	ip, r2
 8001f34:	e748      	b.n	8001dc8 <__aeabi_dsub+0x188>
 8001f36:	0010      	movs	r0, r2
 8001f38:	3b1f      	subs	r3, #31
 8001f3a:	40d8      	lsrs	r0, r3
 8001f3c:	2920      	cmp	r1, #32
 8001f3e:	d003      	beq.n	8001f48 <__aeabi_dsub+0x308>
 8001f40:	2340      	movs	r3, #64	; 0x40
 8001f42:	1a5b      	subs	r3, r3, r1
 8001f44:	409a      	lsls	r2, r3
 8001f46:	4314      	orrs	r4, r2
 8001f48:	1e63      	subs	r3, r4, #1
 8001f4a:	419c      	sbcs	r4, r3
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	2600      	movs	r6, #0
 8001f50:	469a      	mov	sl, r3
 8001f52:	4304      	orrs	r4, r0
 8001f54:	0763      	lsls	r3, r4, #29
 8001f56:	d000      	beq.n	8001f5a <__aeabi_dsub+0x31a>
 8001f58:	e6fe      	b.n	8001d58 <__aeabi_dsub+0x118>
 8001f5a:	4652      	mov	r2, sl
 8001f5c:	08e3      	lsrs	r3, r4, #3
 8001f5e:	0752      	lsls	r2, r2, #29
 8001f60:	4313      	orrs	r3, r2
 8001f62:	4652      	mov	r2, sl
 8001f64:	46b4      	mov	ip, r6
 8001f66:	08d2      	lsrs	r2, r2, #3
 8001f68:	490f      	ldr	r1, [pc, #60]	; (8001fa8 <__aeabi_dsub+0x368>)
 8001f6a:	458c      	cmp	ip, r1
 8001f6c:	d02a      	beq.n	8001fc4 <__aeabi_dsub+0x384>
 8001f6e:	0312      	lsls	r2, r2, #12
 8001f70:	0b14      	lsrs	r4, r2, #12
 8001f72:	4662      	mov	r2, ip
 8001f74:	0552      	lsls	r2, r2, #21
 8001f76:	0d52      	lsrs	r2, r2, #21
 8001f78:	e70c      	b.n	8001d94 <__aeabi_dsub+0x154>
 8001f7a:	003c      	movs	r4, r7
 8001f7c:	4304      	orrs	r4, r0
 8001f7e:	1e62      	subs	r2, r4, #1
 8001f80:	4194      	sbcs	r4, r2
 8001f82:	18e4      	adds	r4, r4, r3
 8001f84:	429c      	cmp	r4, r3
 8001f86:	4192      	sbcs	r2, r2
 8001f88:	4252      	negs	r2, r2
 8001f8a:	444a      	add	r2, r9
 8001f8c:	4692      	mov	sl, r2
 8001f8e:	4653      	mov	r3, sl
 8001f90:	021b      	lsls	r3, r3, #8
 8001f92:	d5df      	bpl.n	8001f54 <__aeabi_dsub+0x314>
 8001f94:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <__aeabi_dsub+0x368>)
 8001f96:	3601      	adds	r6, #1
 8001f98:	429e      	cmp	r6, r3
 8001f9a:	d000      	beq.n	8001f9e <__aeabi_dsub+0x35e>
 8001f9c:	e0a0      	b.n	80020e0 <__aeabi_dsub+0x4a0>
 8001f9e:	0032      	movs	r2, r6
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	e6f6      	b.n	8001d94 <__aeabi_dsub+0x154>
 8001fa6:	46c0      	nop			; (mov r8, r8)
 8001fa8:	000007ff 	.word	0x000007ff
 8001fac:	ff7fffff 	.word	0xff7fffff
 8001fb0:	fffff801 	.word	0xfffff801
 8001fb4:	000007fe 	.word	0x000007fe
 8001fb8:	08db      	lsrs	r3, r3, #3
 8001fba:	464a      	mov	r2, r9
 8001fbc:	0752      	lsls	r2, r2, #29
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	464a      	mov	r2, r9
 8001fc2:	08d2      	lsrs	r2, r2, #3
 8001fc4:	0019      	movs	r1, r3
 8001fc6:	4311      	orrs	r1, r2
 8001fc8:	d100      	bne.n	8001fcc <__aeabi_dsub+0x38c>
 8001fca:	e1b5      	b.n	8002338 <__aeabi_dsub+0x6f8>
 8001fcc:	2480      	movs	r4, #128	; 0x80
 8001fce:	0324      	lsls	r4, r4, #12
 8001fd0:	4314      	orrs	r4, r2
 8001fd2:	0324      	lsls	r4, r4, #12
 8001fd4:	4ad5      	ldr	r2, [pc, #852]	; (800232c <__aeabi_dsub+0x6ec>)
 8001fd6:	0b24      	lsrs	r4, r4, #12
 8001fd8:	e6dc      	b.n	8001d94 <__aeabi_dsub+0x154>
 8001fda:	0020      	movs	r0, r4
 8001fdc:	f000 fb2a 	bl	8002634 <__clzsi2>
 8001fe0:	0003      	movs	r3, r0
 8001fe2:	3318      	adds	r3, #24
 8001fe4:	2b1f      	cmp	r3, #31
 8001fe6:	dc00      	bgt.n	8001fea <__aeabi_dsub+0x3aa>
 8001fe8:	e695      	b.n	8001d16 <__aeabi_dsub+0xd6>
 8001fea:	0022      	movs	r2, r4
 8001fec:	3808      	subs	r0, #8
 8001fee:	4082      	lsls	r2, r0
 8001ff0:	2400      	movs	r4, #0
 8001ff2:	429e      	cmp	r6, r3
 8001ff4:	dc00      	bgt.n	8001ff8 <__aeabi_dsub+0x3b8>
 8001ff6:	e69a      	b.n	8001d2e <__aeabi_dsub+0xee>
 8001ff8:	1af6      	subs	r6, r6, r3
 8001ffa:	4bcd      	ldr	r3, [pc, #820]	; (8002330 <__aeabi_dsub+0x6f0>)
 8001ffc:	401a      	ands	r2, r3
 8001ffe:	4692      	mov	sl, r2
 8002000:	e6a8      	b.n	8001d54 <__aeabi_dsub+0x114>
 8002002:	003c      	movs	r4, r7
 8002004:	4304      	orrs	r4, r0
 8002006:	1e62      	subs	r2, r4, #1
 8002008:	4194      	sbcs	r4, r2
 800200a:	e66c      	b.n	8001ce6 <__aeabi_dsub+0xa6>
 800200c:	464a      	mov	r2, r9
 800200e:	08db      	lsrs	r3, r3, #3
 8002010:	0752      	lsls	r2, r2, #29
 8002012:	4313      	orrs	r3, r2
 8002014:	464a      	mov	r2, r9
 8002016:	08d2      	lsrs	r2, r2, #3
 8002018:	e7a6      	b.n	8001f68 <__aeabi_dsub+0x328>
 800201a:	4cc6      	ldr	r4, [pc, #792]	; (8002334 <__aeabi_dsub+0x6f4>)
 800201c:	1c72      	adds	r2, r6, #1
 800201e:	4222      	tst	r2, r4
 8002020:	d000      	beq.n	8002024 <__aeabi_dsub+0x3e4>
 8002022:	e0ac      	b.n	800217e <__aeabi_dsub+0x53e>
 8002024:	464a      	mov	r2, r9
 8002026:	431a      	orrs	r2, r3
 8002028:	2e00      	cmp	r6, #0
 800202a:	d000      	beq.n	800202e <__aeabi_dsub+0x3ee>
 800202c:	e105      	b.n	800223a <__aeabi_dsub+0x5fa>
 800202e:	2a00      	cmp	r2, #0
 8002030:	d100      	bne.n	8002034 <__aeabi_dsub+0x3f4>
 8002032:	e156      	b.n	80022e2 <__aeabi_dsub+0x6a2>
 8002034:	003a      	movs	r2, r7
 8002036:	4302      	orrs	r2, r0
 8002038:	d100      	bne.n	800203c <__aeabi_dsub+0x3fc>
 800203a:	e0db      	b.n	80021f4 <__aeabi_dsub+0x5b4>
 800203c:	181c      	adds	r4, r3, r0
 800203e:	429c      	cmp	r4, r3
 8002040:	419b      	sbcs	r3, r3
 8002042:	444f      	add	r7, r9
 8002044:	46ba      	mov	sl, r7
 8002046:	425b      	negs	r3, r3
 8002048:	449a      	add	sl, r3
 800204a:	4653      	mov	r3, sl
 800204c:	021b      	lsls	r3, r3, #8
 800204e:	d400      	bmi.n	8002052 <__aeabi_dsub+0x412>
 8002050:	e780      	b.n	8001f54 <__aeabi_dsub+0x314>
 8002052:	4652      	mov	r2, sl
 8002054:	4bb6      	ldr	r3, [pc, #728]	; (8002330 <__aeabi_dsub+0x6f0>)
 8002056:	2601      	movs	r6, #1
 8002058:	401a      	ands	r2, r3
 800205a:	4692      	mov	sl, r2
 800205c:	e77a      	b.n	8001f54 <__aeabi_dsub+0x314>
 800205e:	4cb3      	ldr	r4, [pc, #716]	; (800232c <__aeabi_dsub+0x6ec>)
 8002060:	42a2      	cmp	r2, r4
 8002062:	d100      	bne.n	8002066 <__aeabi_dsub+0x426>
 8002064:	e0c0      	b.n	80021e8 <__aeabi_dsub+0x5a8>
 8002066:	2480      	movs	r4, #128	; 0x80
 8002068:	464d      	mov	r5, r9
 800206a:	0424      	lsls	r4, r4, #16
 800206c:	4325      	orrs	r5, r4
 800206e:	46a9      	mov	r9, r5
 8002070:	4664      	mov	r4, ip
 8002072:	2c38      	cmp	r4, #56	; 0x38
 8002074:	dc53      	bgt.n	800211e <__aeabi_dsub+0x4de>
 8002076:	4661      	mov	r1, ip
 8002078:	2c1f      	cmp	r4, #31
 800207a:	dd00      	ble.n	800207e <__aeabi_dsub+0x43e>
 800207c:	e0cd      	b.n	800221a <__aeabi_dsub+0x5da>
 800207e:	2520      	movs	r5, #32
 8002080:	001e      	movs	r6, r3
 8002082:	1b2d      	subs	r5, r5, r4
 8002084:	464c      	mov	r4, r9
 8002086:	40ab      	lsls	r3, r5
 8002088:	40ac      	lsls	r4, r5
 800208a:	40ce      	lsrs	r6, r1
 800208c:	1e5d      	subs	r5, r3, #1
 800208e:	41ab      	sbcs	r3, r5
 8002090:	4334      	orrs	r4, r6
 8002092:	4323      	orrs	r3, r4
 8002094:	464c      	mov	r4, r9
 8002096:	40cc      	lsrs	r4, r1
 8002098:	1b3f      	subs	r7, r7, r4
 800209a:	e045      	b.n	8002128 <__aeabi_dsub+0x4e8>
 800209c:	464a      	mov	r2, r9
 800209e:	1a1c      	subs	r4, r3, r0
 80020a0:	1bd1      	subs	r1, r2, r7
 80020a2:	42a3      	cmp	r3, r4
 80020a4:	4192      	sbcs	r2, r2
 80020a6:	4252      	negs	r2, r2
 80020a8:	4692      	mov	sl, r2
 80020aa:	000a      	movs	r2, r1
 80020ac:	4651      	mov	r1, sl
 80020ae:	1a52      	subs	r2, r2, r1
 80020b0:	4692      	mov	sl, r2
 80020b2:	0212      	lsls	r2, r2, #8
 80020b4:	d500      	bpl.n	80020b8 <__aeabi_dsub+0x478>
 80020b6:	e083      	b.n	80021c0 <__aeabi_dsub+0x580>
 80020b8:	4653      	mov	r3, sl
 80020ba:	4323      	orrs	r3, r4
 80020bc:	d000      	beq.n	80020c0 <__aeabi_dsub+0x480>
 80020be:	e621      	b.n	8001d04 <__aeabi_dsub+0xc4>
 80020c0:	2200      	movs	r2, #0
 80020c2:	2500      	movs	r5, #0
 80020c4:	e753      	b.n	8001f6e <__aeabi_dsub+0x32e>
 80020c6:	181c      	adds	r4, r3, r0
 80020c8:	429c      	cmp	r4, r3
 80020ca:	419b      	sbcs	r3, r3
 80020cc:	444f      	add	r7, r9
 80020ce:	46ba      	mov	sl, r7
 80020d0:	425b      	negs	r3, r3
 80020d2:	449a      	add	sl, r3
 80020d4:	4653      	mov	r3, sl
 80020d6:	2601      	movs	r6, #1
 80020d8:	021b      	lsls	r3, r3, #8
 80020da:	d400      	bmi.n	80020de <__aeabi_dsub+0x49e>
 80020dc:	e73a      	b.n	8001f54 <__aeabi_dsub+0x314>
 80020de:	2602      	movs	r6, #2
 80020e0:	4652      	mov	r2, sl
 80020e2:	4b93      	ldr	r3, [pc, #588]	; (8002330 <__aeabi_dsub+0x6f0>)
 80020e4:	2101      	movs	r1, #1
 80020e6:	401a      	ands	r2, r3
 80020e8:	0013      	movs	r3, r2
 80020ea:	4021      	ands	r1, r4
 80020ec:	0862      	lsrs	r2, r4, #1
 80020ee:	430a      	orrs	r2, r1
 80020f0:	07dc      	lsls	r4, r3, #31
 80020f2:	085b      	lsrs	r3, r3, #1
 80020f4:	469a      	mov	sl, r3
 80020f6:	4314      	orrs	r4, r2
 80020f8:	e62c      	b.n	8001d54 <__aeabi_dsub+0x114>
 80020fa:	0039      	movs	r1, r7
 80020fc:	3a20      	subs	r2, #32
 80020fe:	40d1      	lsrs	r1, r2
 8002100:	4662      	mov	r2, ip
 8002102:	2a20      	cmp	r2, #32
 8002104:	d006      	beq.n	8002114 <__aeabi_dsub+0x4d4>
 8002106:	4664      	mov	r4, ip
 8002108:	2240      	movs	r2, #64	; 0x40
 800210a:	1b12      	subs	r2, r2, r4
 800210c:	003c      	movs	r4, r7
 800210e:	4094      	lsls	r4, r2
 8002110:	4304      	orrs	r4, r0
 8002112:	9401      	str	r4, [sp, #4]
 8002114:	9c01      	ldr	r4, [sp, #4]
 8002116:	1e62      	subs	r2, r4, #1
 8002118:	4194      	sbcs	r4, r2
 800211a:	430c      	orrs	r4, r1
 800211c:	e5e3      	b.n	8001ce6 <__aeabi_dsub+0xa6>
 800211e:	4649      	mov	r1, r9
 8002120:	4319      	orrs	r1, r3
 8002122:	000b      	movs	r3, r1
 8002124:	1e5c      	subs	r4, r3, #1
 8002126:	41a3      	sbcs	r3, r4
 8002128:	1ac4      	subs	r4, r0, r3
 800212a:	42a0      	cmp	r0, r4
 800212c:	419b      	sbcs	r3, r3
 800212e:	425b      	negs	r3, r3
 8002130:	1afb      	subs	r3, r7, r3
 8002132:	469a      	mov	sl, r3
 8002134:	465d      	mov	r5, fp
 8002136:	0016      	movs	r6, r2
 8002138:	e5dc      	b.n	8001cf4 <__aeabi_dsub+0xb4>
 800213a:	4649      	mov	r1, r9
 800213c:	4319      	orrs	r1, r3
 800213e:	d100      	bne.n	8002142 <__aeabi_dsub+0x502>
 8002140:	e0ae      	b.n	80022a0 <__aeabi_dsub+0x660>
 8002142:	4661      	mov	r1, ip
 8002144:	4664      	mov	r4, ip
 8002146:	3901      	subs	r1, #1
 8002148:	2c01      	cmp	r4, #1
 800214a:	d100      	bne.n	800214e <__aeabi_dsub+0x50e>
 800214c:	e0e0      	b.n	8002310 <__aeabi_dsub+0x6d0>
 800214e:	4c77      	ldr	r4, [pc, #476]	; (800232c <__aeabi_dsub+0x6ec>)
 8002150:	45a4      	cmp	ip, r4
 8002152:	d056      	beq.n	8002202 <__aeabi_dsub+0x5c2>
 8002154:	468c      	mov	ip, r1
 8002156:	e69a      	b.n	8001e8e <__aeabi_dsub+0x24e>
 8002158:	4661      	mov	r1, ip
 800215a:	2220      	movs	r2, #32
 800215c:	003c      	movs	r4, r7
 800215e:	1a52      	subs	r2, r2, r1
 8002160:	4094      	lsls	r4, r2
 8002162:	0001      	movs	r1, r0
 8002164:	4090      	lsls	r0, r2
 8002166:	46a0      	mov	r8, r4
 8002168:	4664      	mov	r4, ip
 800216a:	1e42      	subs	r2, r0, #1
 800216c:	4190      	sbcs	r0, r2
 800216e:	4662      	mov	r2, ip
 8002170:	40e1      	lsrs	r1, r4
 8002172:	4644      	mov	r4, r8
 8002174:	40d7      	lsrs	r7, r2
 8002176:	430c      	orrs	r4, r1
 8002178:	4304      	orrs	r4, r0
 800217a:	44b9      	add	r9, r7
 800217c:	e701      	b.n	8001f82 <__aeabi_dsub+0x342>
 800217e:	496b      	ldr	r1, [pc, #428]	; (800232c <__aeabi_dsub+0x6ec>)
 8002180:	428a      	cmp	r2, r1
 8002182:	d100      	bne.n	8002186 <__aeabi_dsub+0x546>
 8002184:	e70c      	b.n	8001fa0 <__aeabi_dsub+0x360>
 8002186:	1818      	adds	r0, r3, r0
 8002188:	4298      	cmp	r0, r3
 800218a:	419b      	sbcs	r3, r3
 800218c:	444f      	add	r7, r9
 800218e:	425b      	negs	r3, r3
 8002190:	18fb      	adds	r3, r7, r3
 8002192:	07dc      	lsls	r4, r3, #31
 8002194:	0840      	lsrs	r0, r0, #1
 8002196:	085b      	lsrs	r3, r3, #1
 8002198:	469a      	mov	sl, r3
 800219a:	0016      	movs	r6, r2
 800219c:	4304      	orrs	r4, r0
 800219e:	e6d9      	b.n	8001f54 <__aeabi_dsub+0x314>
 80021a0:	2a00      	cmp	r2, #0
 80021a2:	d000      	beq.n	80021a6 <__aeabi_dsub+0x566>
 80021a4:	e081      	b.n	80022aa <__aeabi_dsub+0x66a>
 80021a6:	003b      	movs	r3, r7
 80021a8:	4303      	orrs	r3, r0
 80021aa:	d11d      	bne.n	80021e8 <__aeabi_dsub+0x5a8>
 80021ac:	2280      	movs	r2, #128	; 0x80
 80021ae:	2500      	movs	r5, #0
 80021b0:	0312      	lsls	r2, r2, #12
 80021b2:	e70b      	b.n	8001fcc <__aeabi_dsub+0x38c>
 80021b4:	08c0      	lsrs	r0, r0, #3
 80021b6:	077b      	lsls	r3, r7, #29
 80021b8:	465d      	mov	r5, fp
 80021ba:	4303      	orrs	r3, r0
 80021bc:	08fa      	lsrs	r2, r7, #3
 80021be:	e6d3      	b.n	8001f68 <__aeabi_dsub+0x328>
 80021c0:	1ac4      	subs	r4, r0, r3
 80021c2:	42a0      	cmp	r0, r4
 80021c4:	4180      	sbcs	r0, r0
 80021c6:	464b      	mov	r3, r9
 80021c8:	4240      	negs	r0, r0
 80021ca:	1aff      	subs	r7, r7, r3
 80021cc:	1a3b      	subs	r3, r7, r0
 80021ce:	469a      	mov	sl, r3
 80021d0:	465d      	mov	r5, fp
 80021d2:	e597      	b.n	8001d04 <__aeabi_dsub+0xc4>
 80021d4:	1a1c      	subs	r4, r3, r0
 80021d6:	464a      	mov	r2, r9
 80021d8:	42a3      	cmp	r3, r4
 80021da:	419b      	sbcs	r3, r3
 80021dc:	1bd7      	subs	r7, r2, r7
 80021de:	425b      	negs	r3, r3
 80021e0:	1afb      	subs	r3, r7, r3
 80021e2:	469a      	mov	sl, r3
 80021e4:	2601      	movs	r6, #1
 80021e6:	e585      	b.n	8001cf4 <__aeabi_dsub+0xb4>
 80021e8:	08c0      	lsrs	r0, r0, #3
 80021ea:	077b      	lsls	r3, r7, #29
 80021ec:	465d      	mov	r5, fp
 80021ee:	4303      	orrs	r3, r0
 80021f0:	08fa      	lsrs	r2, r7, #3
 80021f2:	e6e7      	b.n	8001fc4 <__aeabi_dsub+0x384>
 80021f4:	464a      	mov	r2, r9
 80021f6:	08db      	lsrs	r3, r3, #3
 80021f8:	0752      	lsls	r2, r2, #29
 80021fa:	4313      	orrs	r3, r2
 80021fc:	464a      	mov	r2, r9
 80021fe:	08d2      	lsrs	r2, r2, #3
 8002200:	e6b5      	b.n	8001f6e <__aeabi_dsub+0x32e>
 8002202:	08c0      	lsrs	r0, r0, #3
 8002204:	077b      	lsls	r3, r7, #29
 8002206:	4303      	orrs	r3, r0
 8002208:	08fa      	lsrs	r2, r7, #3
 800220a:	e6db      	b.n	8001fc4 <__aeabi_dsub+0x384>
 800220c:	4649      	mov	r1, r9
 800220e:	4319      	orrs	r1, r3
 8002210:	000b      	movs	r3, r1
 8002212:	1e59      	subs	r1, r3, #1
 8002214:	418b      	sbcs	r3, r1
 8002216:	001c      	movs	r4, r3
 8002218:	e653      	b.n	8001ec2 <__aeabi_dsub+0x282>
 800221a:	464d      	mov	r5, r9
 800221c:	3c20      	subs	r4, #32
 800221e:	40e5      	lsrs	r5, r4
 8002220:	2920      	cmp	r1, #32
 8002222:	d005      	beq.n	8002230 <__aeabi_dsub+0x5f0>
 8002224:	2440      	movs	r4, #64	; 0x40
 8002226:	1a64      	subs	r4, r4, r1
 8002228:	4649      	mov	r1, r9
 800222a:	40a1      	lsls	r1, r4
 800222c:	430b      	orrs	r3, r1
 800222e:	4698      	mov	r8, r3
 8002230:	4643      	mov	r3, r8
 8002232:	1e5c      	subs	r4, r3, #1
 8002234:	41a3      	sbcs	r3, r4
 8002236:	432b      	orrs	r3, r5
 8002238:	e776      	b.n	8002128 <__aeabi_dsub+0x4e8>
 800223a:	2a00      	cmp	r2, #0
 800223c:	d0e1      	beq.n	8002202 <__aeabi_dsub+0x5c2>
 800223e:	003a      	movs	r2, r7
 8002240:	08db      	lsrs	r3, r3, #3
 8002242:	4302      	orrs	r2, r0
 8002244:	d100      	bne.n	8002248 <__aeabi_dsub+0x608>
 8002246:	e6b8      	b.n	8001fba <__aeabi_dsub+0x37a>
 8002248:	464a      	mov	r2, r9
 800224a:	0752      	lsls	r2, r2, #29
 800224c:	2480      	movs	r4, #128	; 0x80
 800224e:	4313      	orrs	r3, r2
 8002250:	464a      	mov	r2, r9
 8002252:	0324      	lsls	r4, r4, #12
 8002254:	08d2      	lsrs	r2, r2, #3
 8002256:	4222      	tst	r2, r4
 8002258:	d007      	beq.n	800226a <__aeabi_dsub+0x62a>
 800225a:	08fe      	lsrs	r6, r7, #3
 800225c:	4226      	tst	r6, r4
 800225e:	d104      	bne.n	800226a <__aeabi_dsub+0x62a>
 8002260:	465d      	mov	r5, fp
 8002262:	0032      	movs	r2, r6
 8002264:	08c3      	lsrs	r3, r0, #3
 8002266:	077f      	lsls	r7, r7, #29
 8002268:	433b      	orrs	r3, r7
 800226a:	0f59      	lsrs	r1, r3, #29
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	0749      	lsls	r1, r1, #29
 8002270:	08db      	lsrs	r3, r3, #3
 8002272:	430b      	orrs	r3, r1
 8002274:	e6a6      	b.n	8001fc4 <__aeabi_dsub+0x384>
 8002276:	1ac4      	subs	r4, r0, r3
 8002278:	42a0      	cmp	r0, r4
 800227a:	4180      	sbcs	r0, r0
 800227c:	464b      	mov	r3, r9
 800227e:	4240      	negs	r0, r0
 8002280:	1aff      	subs	r7, r7, r3
 8002282:	1a3b      	subs	r3, r7, r0
 8002284:	469a      	mov	sl, r3
 8002286:	465d      	mov	r5, fp
 8002288:	2601      	movs	r6, #1
 800228a:	e533      	b.n	8001cf4 <__aeabi_dsub+0xb4>
 800228c:	003b      	movs	r3, r7
 800228e:	4303      	orrs	r3, r0
 8002290:	d100      	bne.n	8002294 <__aeabi_dsub+0x654>
 8002292:	e715      	b.n	80020c0 <__aeabi_dsub+0x480>
 8002294:	08c0      	lsrs	r0, r0, #3
 8002296:	077b      	lsls	r3, r7, #29
 8002298:	465d      	mov	r5, fp
 800229a:	4303      	orrs	r3, r0
 800229c:	08fa      	lsrs	r2, r7, #3
 800229e:	e666      	b.n	8001f6e <__aeabi_dsub+0x32e>
 80022a0:	08c0      	lsrs	r0, r0, #3
 80022a2:	077b      	lsls	r3, r7, #29
 80022a4:	4303      	orrs	r3, r0
 80022a6:	08fa      	lsrs	r2, r7, #3
 80022a8:	e65e      	b.n	8001f68 <__aeabi_dsub+0x328>
 80022aa:	003a      	movs	r2, r7
 80022ac:	08db      	lsrs	r3, r3, #3
 80022ae:	4302      	orrs	r2, r0
 80022b0:	d100      	bne.n	80022b4 <__aeabi_dsub+0x674>
 80022b2:	e682      	b.n	8001fba <__aeabi_dsub+0x37a>
 80022b4:	464a      	mov	r2, r9
 80022b6:	0752      	lsls	r2, r2, #29
 80022b8:	2480      	movs	r4, #128	; 0x80
 80022ba:	4313      	orrs	r3, r2
 80022bc:	464a      	mov	r2, r9
 80022be:	0324      	lsls	r4, r4, #12
 80022c0:	08d2      	lsrs	r2, r2, #3
 80022c2:	4222      	tst	r2, r4
 80022c4:	d007      	beq.n	80022d6 <__aeabi_dsub+0x696>
 80022c6:	08fe      	lsrs	r6, r7, #3
 80022c8:	4226      	tst	r6, r4
 80022ca:	d104      	bne.n	80022d6 <__aeabi_dsub+0x696>
 80022cc:	465d      	mov	r5, fp
 80022ce:	0032      	movs	r2, r6
 80022d0:	08c3      	lsrs	r3, r0, #3
 80022d2:	077f      	lsls	r7, r7, #29
 80022d4:	433b      	orrs	r3, r7
 80022d6:	0f59      	lsrs	r1, r3, #29
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	08db      	lsrs	r3, r3, #3
 80022dc:	0749      	lsls	r1, r1, #29
 80022de:	430b      	orrs	r3, r1
 80022e0:	e670      	b.n	8001fc4 <__aeabi_dsub+0x384>
 80022e2:	08c0      	lsrs	r0, r0, #3
 80022e4:	077b      	lsls	r3, r7, #29
 80022e6:	4303      	orrs	r3, r0
 80022e8:	08fa      	lsrs	r2, r7, #3
 80022ea:	e640      	b.n	8001f6e <__aeabi_dsub+0x32e>
 80022ec:	464c      	mov	r4, r9
 80022ee:	3920      	subs	r1, #32
 80022f0:	40cc      	lsrs	r4, r1
 80022f2:	4661      	mov	r1, ip
 80022f4:	2920      	cmp	r1, #32
 80022f6:	d006      	beq.n	8002306 <__aeabi_dsub+0x6c6>
 80022f8:	4666      	mov	r6, ip
 80022fa:	2140      	movs	r1, #64	; 0x40
 80022fc:	1b89      	subs	r1, r1, r6
 80022fe:	464e      	mov	r6, r9
 8002300:	408e      	lsls	r6, r1
 8002302:	4333      	orrs	r3, r6
 8002304:	4698      	mov	r8, r3
 8002306:	4643      	mov	r3, r8
 8002308:	1e59      	subs	r1, r3, #1
 800230a:	418b      	sbcs	r3, r1
 800230c:	431c      	orrs	r4, r3
 800230e:	e5d8      	b.n	8001ec2 <__aeabi_dsub+0x282>
 8002310:	181c      	adds	r4, r3, r0
 8002312:	4284      	cmp	r4, r0
 8002314:	4180      	sbcs	r0, r0
 8002316:	444f      	add	r7, r9
 8002318:	46ba      	mov	sl, r7
 800231a:	4240      	negs	r0, r0
 800231c:	4482      	add	sl, r0
 800231e:	e6d9      	b.n	80020d4 <__aeabi_dsub+0x494>
 8002320:	4653      	mov	r3, sl
 8002322:	4323      	orrs	r3, r4
 8002324:	d100      	bne.n	8002328 <__aeabi_dsub+0x6e8>
 8002326:	e6cb      	b.n	80020c0 <__aeabi_dsub+0x480>
 8002328:	e614      	b.n	8001f54 <__aeabi_dsub+0x314>
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	000007ff 	.word	0x000007ff
 8002330:	ff7fffff 	.word	0xff7fffff
 8002334:	000007fe 	.word	0x000007fe
 8002338:	2300      	movs	r3, #0
 800233a:	4a01      	ldr	r2, [pc, #4]	; (8002340 <__aeabi_dsub+0x700>)
 800233c:	001c      	movs	r4, r3
 800233e:	e529      	b.n	8001d94 <__aeabi_dsub+0x154>
 8002340:	000007ff 	.word	0x000007ff

08002344 <__aeabi_dcmpun>:
 8002344:	b570      	push	{r4, r5, r6, lr}
 8002346:	0005      	movs	r5, r0
 8002348:	480c      	ldr	r0, [pc, #48]	; (800237c <__aeabi_dcmpun+0x38>)
 800234a:	031c      	lsls	r4, r3, #12
 800234c:	0016      	movs	r6, r2
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	030a      	lsls	r2, r1, #12
 8002352:	0049      	lsls	r1, r1, #1
 8002354:	0b12      	lsrs	r2, r2, #12
 8002356:	0d49      	lsrs	r1, r1, #21
 8002358:	0b24      	lsrs	r4, r4, #12
 800235a:	0d5b      	lsrs	r3, r3, #21
 800235c:	4281      	cmp	r1, r0
 800235e:	d008      	beq.n	8002372 <__aeabi_dcmpun+0x2e>
 8002360:	4a06      	ldr	r2, [pc, #24]	; (800237c <__aeabi_dcmpun+0x38>)
 8002362:	2000      	movs	r0, #0
 8002364:	4293      	cmp	r3, r2
 8002366:	d103      	bne.n	8002370 <__aeabi_dcmpun+0x2c>
 8002368:	0020      	movs	r0, r4
 800236a:	4330      	orrs	r0, r6
 800236c:	1e43      	subs	r3, r0, #1
 800236e:	4198      	sbcs	r0, r3
 8002370:	bd70      	pop	{r4, r5, r6, pc}
 8002372:	2001      	movs	r0, #1
 8002374:	432a      	orrs	r2, r5
 8002376:	d1fb      	bne.n	8002370 <__aeabi_dcmpun+0x2c>
 8002378:	e7f2      	b.n	8002360 <__aeabi_dcmpun+0x1c>
 800237a:	46c0      	nop			; (mov r8, r8)
 800237c:	000007ff 	.word	0x000007ff

08002380 <__aeabi_d2iz>:
 8002380:	000a      	movs	r2, r1
 8002382:	b530      	push	{r4, r5, lr}
 8002384:	4c13      	ldr	r4, [pc, #76]	; (80023d4 <__aeabi_d2iz+0x54>)
 8002386:	0053      	lsls	r3, r2, #1
 8002388:	0309      	lsls	r1, r1, #12
 800238a:	0005      	movs	r5, r0
 800238c:	0b09      	lsrs	r1, r1, #12
 800238e:	2000      	movs	r0, #0
 8002390:	0d5b      	lsrs	r3, r3, #21
 8002392:	0fd2      	lsrs	r2, r2, #31
 8002394:	42a3      	cmp	r3, r4
 8002396:	dd04      	ble.n	80023a2 <__aeabi_d2iz+0x22>
 8002398:	480f      	ldr	r0, [pc, #60]	; (80023d8 <__aeabi_d2iz+0x58>)
 800239a:	4283      	cmp	r3, r0
 800239c:	dd02      	ble.n	80023a4 <__aeabi_d2iz+0x24>
 800239e:	4b0f      	ldr	r3, [pc, #60]	; (80023dc <__aeabi_d2iz+0x5c>)
 80023a0:	18d0      	adds	r0, r2, r3
 80023a2:	bd30      	pop	{r4, r5, pc}
 80023a4:	2080      	movs	r0, #128	; 0x80
 80023a6:	0340      	lsls	r0, r0, #13
 80023a8:	4301      	orrs	r1, r0
 80023aa:	480d      	ldr	r0, [pc, #52]	; (80023e0 <__aeabi_d2iz+0x60>)
 80023ac:	1ac0      	subs	r0, r0, r3
 80023ae:	281f      	cmp	r0, #31
 80023b0:	dd08      	ble.n	80023c4 <__aeabi_d2iz+0x44>
 80023b2:	480c      	ldr	r0, [pc, #48]	; (80023e4 <__aeabi_d2iz+0x64>)
 80023b4:	1ac3      	subs	r3, r0, r3
 80023b6:	40d9      	lsrs	r1, r3
 80023b8:	000b      	movs	r3, r1
 80023ba:	4258      	negs	r0, r3
 80023bc:	2a00      	cmp	r2, #0
 80023be:	d1f0      	bne.n	80023a2 <__aeabi_d2iz+0x22>
 80023c0:	0018      	movs	r0, r3
 80023c2:	e7ee      	b.n	80023a2 <__aeabi_d2iz+0x22>
 80023c4:	4c08      	ldr	r4, [pc, #32]	; (80023e8 <__aeabi_d2iz+0x68>)
 80023c6:	40c5      	lsrs	r5, r0
 80023c8:	46a4      	mov	ip, r4
 80023ca:	4463      	add	r3, ip
 80023cc:	4099      	lsls	r1, r3
 80023ce:	000b      	movs	r3, r1
 80023d0:	432b      	orrs	r3, r5
 80023d2:	e7f2      	b.n	80023ba <__aeabi_d2iz+0x3a>
 80023d4:	000003fe 	.word	0x000003fe
 80023d8:	0000041d 	.word	0x0000041d
 80023dc:	7fffffff 	.word	0x7fffffff
 80023e0:	00000433 	.word	0x00000433
 80023e4:	00000413 	.word	0x00000413
 80023e8:	fffffbed 	.word	0xfffffbed

080023ec <__aeabi_i2d>:
 80023ec:	b570      	push	{r4, r5, r6, lr}
 80023ee:	2800      	cmp	r0, #0
 80023f0:	d016      	beq.n	8002420 <__aeabi_i2d+0x34>
 80023f2:	17c3      	asrs	r3, r0, #31
 80023f4:	18c5      	adds	r5, r0, r3
 80023f6:	405d      	eors	r5, r3
 80023f8:	0fc4      	lsrs	r4, r0, #31
 80023fa:	0028      	movs	r0, r5
 80023fc:	f000 f91a 	bl	8002634 <__clzsi2>
 8002400:	4b11      	ldr	r3, [pc, #68]	; (8002448 <__aeabi_i2d+0x5c>)
 8002402:	1a1b      	subs	r3, r3, r0
 8002404:	280a      	cmp	r0, #10
 8002406:	dc16      	bgt.n	8002436 <__aeabi_i2d+0x4a>
 8002408:	0002      	movs	r2, r0
 800240a:	002e      	movs	r6, r5
 800240c:	3215      	adds	r2, #21
 800240e:	4096      	lsls	r6, r2
 8002410:	220b      	movs	r2, #11
 8002412:	1a12      	subs	r2, r2, r0
 8002414:	40d5      	lsrs	r5, r2
 8002416:	055b      	lsls	r3, r3, #21
 8002418:	032d      	lsls	r5, r5, #12
 800241a:	0b2d      	lsrs	r5, r5, #12
 800241c:	0d5b      	lsrs	r3, r3, #21
 800241e:	e003      	b.n	8002428 <__aeabi_i2d+0x3c>
 8002420:	2400      	movs	r4, #0
 8002422:	2300      	movs	r3, #0
 8002424:	2500      	movs	r5, #0
 8002426:	2600      	movs	r6, #0
 8002428:	051b      	lsls	r3, r3, #20
 800242a:	432b      	orrs	r3, r5
 800242c:	07e4      	lsls	r4, r4, #31
 800242e:	4323      	orrs	r3, r4
 8002430:	0030      	movs	r0, r6
 8002432:	0019      	movs	r1, r3
 8002434:	bd70      	pop	{r4, r5, r6, pc}
 8002436:	380b      	subs	r0, #11
 8002438:	4085      	lsls	r5, r0
 800243a:	055b      	lsls	r3, r3, #21
 800243c:	032d      	lsls	r5, r5, #12
 800243e:	2600      	movs	r6, #0
 8002440:	0b2d      	lsrs	r5, r5, #12
 8002442:	0d5b      	lsrs	r3, r3, #21
 8002444:	e7f0      	b.n	8002428 <__aeabi_i2d+0x3c>
 8002446:	46c0      	nop			; (mov r8, r8)
 8002448:	0000041e 	.word	0x0000041e

0800244c <__aeabi_ui2d>:
 800244c:	b510      	push	{r4, lr}
 800244e:	1e04      	subs	r4, r0, #0
 8002450:	d010      	beq.n	8002474 <__aeabi_ui2d+0x28>
 8002452:	f000 f8ef 	bl	8002634 <__clzsi2>
 8002456:	4b0f      	ldr	r3, [pc, #60]	; (8002494 <__aeabi_ui2d+0x48>)
 8002458:	1a1b      	subs	r3, r3, r0
 800245a:	280a      	cmp	r0, #10
 800245c:	dc11      	bgt.n	8002482 <__aeabi_ui2d+0x36>
 800245e:	220b      	movs	r2, #11
 8002460:	0021      	movs	r1, r4
 8002462:	1a12      	subs	r2, r2, r0
 8002464:	40d1      	lsrs	r1, r2
 8002466:	3015      	adds	r0, #21
 8002468:	030a      	lsls	r2, r1, #12
 800246a:	055b      	lsls	r3, r3, #21
 800246c:	4084      	lsls	r4, r0
 800246e:	0b12      	lsrs	r2, r2, #12
 8002470:	0d5b      	lsrs	r3, r3, #21
 8002472:	e001      	b.n	8002478 <__aeabi_ui2d+0x2c>
 8002474:	2300      	movs	r3, #0
 8002476:	2200      	movs	r2, #0
 8002478:	051b      	lsls	r3, r3, #20
 800247a:	4313      	orrs	r3, r2
 800247c:	0020      	movs	r0, r4
 800247e:	0019      	movs	r1, r3
 8002480:	bd10      	pop	{r4, pc}
 8002482:	0022      	movs	r2, r4
 8002484:	380b      	subs	r0, #11
 8002486:	4082      	lsls	r2, r0
 8002488:	055b      	lsls	r3, r3, #21
 800248a:	0312      	lsls	r2, r2, #12
 800248c:	2400      	movs	r4, #0
 800248e:	0b12      	lsrs	r2, r2, #12
 8002490:	0d5b      	lsrs	r3, r3, #21
 8002492:	e7f1      	b.n	8002478 <__aeabi_ui2d+0x2c>
 8002494:	0000041e 	.word	0x0000041e

08002498 <__aeabi_f2d>:
 8002498:	b570      	push	{r4, r5, r6, lr}
 800249a:	0242      	lsls	r2, r0, #9
 800249c:	0043      	lsls	r3, r0, #1
 800249e:	0fc4      	lsrs	r4, r0, #31
 80024a0:	20fe      	movs	r0, #254	; 0xfe
 80024a2:	0e1b      	lsrs	r3, r3, #24
 80024a4:	1c59      	adds	r1, r3, #1
 80024a6:	0a55      	lsrs	r5, r2, #9
 80024a8:	4208      	tst	r0, r1
 80024aa:	d00c      	beq.n	80024c6 <__aeabi_f2d+0x2e>
 80024ac:	21e0      	movs	r1, #224	; 0xe0
 80024ae:	0089      	lsls	r1, r1, #2
 80024b0:	468c      	mov	ip, r1
 80024b2:	076d      	lsls	r5, r5, #29
 80024b4:	0b12      	lsrs	r2, r2, #12
 80024b6:	4463      	add	r3, ip
 80024b8:	051b      	lsls	r3, r3, #20
 80024ba:	4313      	orrs	r3, r2
 80024bc:	07e4      	lsls	r4, r4, #31
 80024be:	4323      	orrs	r3, r4
 80024c0:	0028      	movs	r0, r5
 80024c2:	0019      	movs	r1, r3
 80024c4:	bd70      	pop	{r4, r5, r6, pc}
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d114      	bne.n	80024f4 <__aeabi_f2d+0x5c>
 80024ca:	2d00      	cmp	r5, #0
 80024cc:	d01b      	beq.n	8002506 <__aeabi_f2d+0x6e>
 80024ce:	0028      	movs	r0, r5
 80024d0:	f000 f8b0 	bl	8002634 <__clzsi2>
 80024d4:	280a      	cmp	r0, #10
 80024d6:	dc1c      	bgt.n	8002512 <__aeabi_f2d+0x7a>
 80024d8:	230b      	movs	r3, #11
 80024da:	002a      	movs	r2, r5
 80024dc:	1a1b      	subs	r3, r3, r0
 80024de:	40da      	lsrs	r2, r3
 80024e0:	0003      	movs	r3, r0
 80024e2:	3315      	adds	r3, #21
 80024e4:	409d      	lsls	r5, r3
 80024e6:	4b0e      	ldr	r3, [pc, #56]	; (8002520 <__aeabi_f2d+0x88>)
 80024e8:	0312      	lsls	r2, r2, #12
 80024ea:	1a1b      	subs	r3, r3, r0
 80024ec:	055b      	lsls	r3, r3, #21
 80024ee:	0b12      	lsrs	r2, r2, #12
 80024f0:	0d5b      	lsrs	r3, r3, #21
 80024f2:	e7e1      	b.n	80024b8 <__aeabi_f2d+0x20>
 80024f4:	2d00      	cmp	r5, #0
 80024f6:	d009      	beq.n	800250c <__aeabi_f2d+0x74>
 80024f8:	0b13      	lsrs	r3, r2, #12
 80024fa:	2280      	movs	r2, #128	; 0x80
 80024fc:	0312      	lsls	r2, r2, #12
 80024fe:	431a      	orrs	r2, r3
 8002500:	076d      	lsls	r5, r5, #29
 8002502:	4b08      	ldr	r3, [pc, #32]	; (8002524 <__aeabi_f2d+0x8c>)
 8002504:	e7d8      	b.n	80024b8 <__aeabi_f2d+0x20>
 8002506:	2300      	movs	r3, #0
 8002508:	2200      	movs	r2, #0
 800250a:	e7d5      	b.n	80024b8 <__aeabi_f2d+0x20>
 800250c:	2200      	movs	r2, #0
 800250e:	4b05      	ldr	r3, [pc, #20]	; (8002524 <__aeabi_f2d+0x8c>)
 8002510:	e7d2      	b.n	80024b8 <__aeabi_f2d+0x20>
 8002512:	0003      	movs	r3, r0
 8002514:	002a      	movs	r2, r5
 8002516:	3b0b      	subs	r3, #11
 8002518:	409a      	lsls	r2, r3
 800251a:	2500      	movs	r5, #0
 800251c:	e7e3      	b.n	80024e6 <__aeabi_f2d+0x4e>
 800251e:	46c0      	nop			; (mov r8, r8)
 8002520:	00000389 	.word	0x00000389
 8002524:	000007ff 	.word	0x000007ff

08002528 <__aeabi_d2f>:
 8002528:	0002      	movs	r2, r0
 800252a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800252c:	004b      	lsls	r3, r1, #1
 800252e:	030d      	lsls	r5, r1, #12
 8002530:	0f40      	lsrs	r0, r0, #29
 8002532:	0d5b      	lsrs	r3, r3, #21
 8002534:	0fcc      	lsrs	r4, r1, #31
 8002536:	0a6d      	lsrs	r5, r5, #9
 8002538:	493a      	ldr	r1, [pc, #232]	; (8002624 <__aeabi_d2f+0xfc>)
 800253a:	4305      	orrs	r5, r0
 800253c:	1c58      	adds	r0, r3, #1
 800253e:	00d7      	lsls	r7, r2, #3
 8002540:	4208      	tst	r0, r1
 8002542:	d00a      	beq.n	800255a <__aeabi_d2f+0x32>
 8002544:	4938      	ldr	r1, [pc, #224]	; (8002628 <__aeabi_d2f+0x100>)
 8002546:	1859      	adds	r1, r3, r1
 8002548:	29fe      	cmp	r1, #254	; 0xfe
 800254a:	dd16      	ble.n	800257a <__aeabi_d2f+0x52>
 800254c:	20ff      	movs	r0, #255	; 0xff
 800254e:	2200      	movs	r2, #0
 8002550:	05c0      	lsls	r0, r0, #23
 8002552:	4310      	orrs	r0, r2
 8002554:	07e4      	lsls	r4, r4, #31
 8002556:	4320      	orrs	r0, r4
 8002558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800255a:	2b00      	cmp	r3, #0
 800255c:	d106      	bne.n	800256c <__aeabi_d2f+0x44>
 800255e:	433d      	orrs	r5, r7
 8002560:	d026      	beq.n	80025b0 <__aeabi_d2f+0x88>
 8002562:	2205      	movs	r2, #5
 8002564:	0192      	lsls	r2, r2, #6
 8002566:	0a52      	lsrs	r2, r2, #9
 8002568:	b2d8      	uxtb	r0, r3
 800256a:	e7f1      	b.n	8002550 <__aeabi_d2f+0x28>
 800256c:	432f      	orrs	r7, r5
 800256e:	d0ed      	beq.n	800254c <__aeabi_d2f+0x24>
 8002570:	2280      	movs	r2, #128	; 0x80
 8002572:	03d2      	lsls	r2, r2, #15
 8002574:	20ff      	movs	r0, #255	; 0xff
 8002576:	432a      	orrs	r2, r5
 8002578:	e7ea      	b.n	8002550 <__aeabi_d2f+0x28>
 800257a:	2900      	cmp	r1, #0
 800257c:	dd1b      	ble.n	80025b6 <__aeabi_d2f+0x8e>
 800257e:	0192      	lsls	r2, r2, #6
 8002580:	1e50      	subs	r0, r2, #1
 8002582:	4182      	sbcs	r2, r0
 8002584:	00ed      	lsls	r5, r5, #3
 8002586:	0f7f      	lsrs	r7, r7, #29
 8002588:	432a      	orrs	r2, r5
 800258a:	433a      	orrs	r2, r7
 800258c:	0753      	lsls	r3, r2, #29
 800258e:	d047      	beq.n	8002620 <__aeabi_d2f+0xf8>
 8002590:	230f      	movs	r3, #15
 8002592:	4013      	ands	r3, r2
 8002594:	2b04      	cmp	r3, #4
 8002596:	d000      	beq.n	800259a <__aeabi_d2f+0x72>
 8002598:	3204      	adds	r2, #4
 800259a:	2380      	movs	r3, #128	; 0x80
 800259c:	04db      	lsls	r3, r3, #19
 800259e:	4013      	ands	r3, r2
 80025a0:	d03e      	beq.n	8002620 <__aeabi_d2f+0xf8>
 80025a2:	1c48      	adds	r0, r1, #1
 80025a4:	29fe      	cmp	r1, #254	; 0xfe
 80025a6:	d0d1      	beq.n	800254c <__aeabi_d2f+0x24>
 80025a8:	0192      	lsls	r2, r2, #6
 80025aa:	0a52      	lsrs	r2, r2, #9
 80025ac:	b2c0      	uxtb	r0, r0
 80025ae:	e7cf      	b.n	8002550 <__aeabi_d2f+0x28>
 80025b0:	2000      	movs	r0, #0
 80025b2:	2200      	movs	r2, #0
 80025b4:	e7cc      	b.n	8002550 <__aeabi_d2f+0x28>
 80025b6:	000a      	movs	r2, r1
 80025b8:	3217      	adds	r2, #23
 80025ba:	db2f      	blt.n	800261c <__aeabi_d2f+0xf4>
 80025bc:	2680      	movs	r6, #128	; 0x80
 80025be:	0436      	lsls	r6, r6, #16
 80025c0:	432e      	orrs	r6, r5
 80025c2:	251e      	movs	r5, #30
 80025c4:	1a6d      	subs	r5, r5, r1
 80025c6:	2d1f      	cmp	r5, #31
 80025c8:	dd11      	ble.n	80025ee <__aeabi_d2f+0xc6>
 80025ca:	2202      	movs	r2, #2
 80025cc:	4252      	negs	r2, r2
 80025ce:	1a52      	subs	r2, r2, r1
 80025d0:	0031      	movs	r1, r6
 80025d2:	40d1      	lsrs	r1, r2
 80025d4:	2d20      	cmp	r5, #32
 80025d6:	d004      	beq.n	80025e2 <__aeabi_d2f+0xba>
 80025d8:	4a14      	ldr	r2, [pc, #80]	; (800262c <__aeabi_d2f+0x104>)
 80025da:	4694      	mov	ip, r2
 80025dc:	4463      	add	r3, ip
 80025de:	409e      	lsls	r6, r3
 80025e0:	4337      	orrs	r7, r6
 80025e2:	003a      	movs	r2, r7
 80025e4:	1e53      	subs	r3, r2, #1
 80025e6:	419a      	sbcs	r2, r3
 80025e8:	430a      	orrs	r2, r1
 80025ea:	2100      	movs	r1, #0
 80025ec:	e7ce      	b.n	800258c <__aeabi_d2f+0x64>
 80025ee:	4a10      	ldr	r2, [pc, #64]	; (8002630 <__aeabi_d2f+0x108>)
 80025f0:	0038      	movs	r0, r7
 80025f2:	4694      	mov	ip, r2
 80025f4:	4463      	add	r3, ip
 80025f6:	4098      	lsls	r0, r3
 80025f8:	003a      	movs	r2, r7
 80025fa:	1e41      	subs	r1, r0, #1
 80025fc:	4188      	sbcs	r0, r1
 80025fe:	409e      	lsls	r6, r3
 8002600:	40ea      	lsrs	r2, r5
 8002602:	4330      	orrs	r0, r6
 8002604:	4302      	orrs	r2, r0
 8002606:	2100      	movs	r1, #0
 8002608:	0753      	lsls	r3, r2, #29
 800260a:	d1c1      	bne.n	8002590 <__aeabi_d2f+0x68>
 800260c:	2180      	movs	r1, #128	; 0x80
 800260e:	0013      	movs	r3, r2
 8002610:	04c9      	lsls	r1, r1, #19
 8002612:	2001      	movs	r0, #1
 8002614:	400b      	ands	r3, r1
 8002616:	420a      	tst	r2, r1
 8002618:	d1c6      	bne.n	80025a8 <__aeabi_d2f+0x80>
 800261a:	e7a3      	b.n	8002564 <__aeabi_d2f+0x3c>
 800261c:	2300      	movs	r3, #0
 800261e:	e7a0      	b.n	8002562 <__aeabi_d2f+0x3a>
 8002620:	000b      	movs	r3, r1
 8002622:	e79f      	b.n	8002564 <__aeabi_d2f+0x3c>
 8002624:	000007fe 	.word	0x000007fe
 8002628:	fffffc80 	.word	0xfffffc80
 800262c:	fffffca2 	.word	0xfffffca2
 8002630:	fffffc82 	.word	0xfffffc82

08002634 <__clzsi2>:
 8002634:	211c      	movs	r1, #28
 8002636:	2301      	movs	r3, #1
 8002638:	041b      	lsls	r3, r3, #16
 800263a:	4298      	cmp	r0, r3
 800263c:	d301      	bcc.n	8002642 <__clzsi2+0xe>
 800263e:	0c00      	lsrs	r0, r0, #16
 8002640:	3910      	subs	r1, #16
 8002642:	0a1b      	lsrs	r3, r3, #8
 8002644:	4298      	cmp	r0, r3
 8002646:	d301      	bcc.n	800264c <__clzsi2+0x18>
 8002648:	0a00      	lsrs	r0, r0, #8
 800264a:	3908      	subs	r1, #8
 800264c:	091b      	lsrs	r3, r3, #4
 800264e:	4298      	cmp	r0, r3
 8002650:	d301      	bcc.n	8002656 <__clzsi2+0x22>
 8002652:	0900      	lsrs	r0, r0, #4
 8002654:	3904      	subs	r1, #4
 8002656:	a202      	add	r2, pc, #8	; (adr r2, 8002660 <__clzsi2+0x2c>)
 8002658:	5c10      	ldrb	r0, [r2, r0]
 800265a:	1840      	adds	r0, r0, r1
 800265c:	4770      	bx	lr
 800265e:	46c0      	nop			; (mov r8, r8)
 8002660:	02020304 	.word	0x02020304
 8002664:	01010101 	.word	0x01010101
	...

08002670 <app_main>:

/**
 * main application
 */
void app_main()
{
 8002670:	b5f0      	push	{r4, r5, r6, r7, lr}
	set_alarmA_Time = 0;
 8002672:	2400      	movs	r4, #0
 8002674:	4b49      	ldr	r3, [pc, #292]	; (800279c <app_main+0x12c>)
{
 8002676:	b0a5      	sub	sp, #148	; 0x94
	set_alarmA_Time = 0;
 8002678:	701c      	strb	r4, [r3, #0]
	uint32_t Temperature, Humidity;
	float battery_voltage;
	 uint16_t percentage;
	char buffer[100];
	 BUZZER_Init();
 800267a:	f004 fb63 	bl	8006d44 <BUZZER_Init>
	 AHT20_Init(&hi2c2);
 800267e:	4848      	ldr	r0, [pc, #288]	; (80027a0 <app_main+0x130>)
 8002680:	f004 fa2a 	bl	8006ad8 <AHT20_Init>
	 HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002684:	2108      	movs	r1, #8
 8002686:	4847      	ldr	r0, [pc, #284]	; (80027a4 <app_main+0x134>)
 8002688:	f003 fbfe 	bl	8005e88 <HAL_TIM_PWM_Start>
	  TIM3->CCR3 = Brightness_100;
 800268c:	4b46      	ldr	r3, [pc, #280]	; (80027a8 <app_main+0x138>)
 800268e:	4a47      	ldr	r2, [pc, #284]	; (80027ac <app_main+0x13c>)
	 HAL_UART_Receive_DMA(&huart1, (uint8_t *)CO_buf, 9);
 8002690:	4947      	ldr	r1, [pc, #284]	; (80027b0 <app_main+0x140>)
	  TIM3->CCR3 = Brightness_100;
 8002692:	63da      	str	r2, [r3, #60]	; 0x3c
	 HAL_UART_Receive_DMA(&huart1, (uint8_t *)CO_buf, 9);
 8002694:	4847      	ldr	r0, [pc, #284]	; (80027b4 <app_main+0x144>)
 8002696:	2209      	movs	r2, #9
 8002698:	f004 f964 	bl	8006964 <HAL_UART_Receive_DMA>

	  LCD_init();
 800269c:	f004 fe22 	bl	80072e4 <LCD_init>

	  uint8_t val[8] ={0};
       usb_deviceID(val);
 80026a0:	a804      	add	r0, sp, #16
	  uint8_t val[8] ={0};
 80026a2:	9404      	str	r4, [sp, #16]
 80026a4:	9405      	str	r4, [sp, #20]
       usb_deviceID(val);
 80026a6:	f004 fab1 	bl	8006c0c <usb_deviceID>
       usb_currentselector();
 80026aa:	f004 fa9b 	bl	8006be4 <usb_currentselector>
	UG_SetBackcolor(C_BLACK);
			UG_SetForecolor(C_WHITE);
			UG_FontSelect(FONT_12X20);

			sprintf(buffer,"Temp: %ldC   ",temp );
			UG_PutString(20, 20, buffer);
 80026ae:	3414      	adds	r4, #20
		  detection = usb_cabledetect_statedetect();
 80026b0:	f004 fa52 	bl	8006b58 <usb_cabledetect_statedetect>
			IWDG->KR = 0x0000AAAA;
 80026b4:	4b40      	ldr	r3, [pc, #256]	; (80027b8 <app_main+0x148>)
			HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 80026b6:	4d41      	ldr	r5, [pc, #260]	; (80027bc <app_main+0x14c>)
		  detection = usb_cabledetect_statedetect();
 80026b8:	4e41      	ldr	r6, [pc, #260]	; (80027c0 <app_main+0x150>)
			IWDG->KR = 0x0000AAAA;
 80026ba:	4a42      	ldr	r2, [pc, #264]	; (80027c4 <app_main+0x154>)
		  detection = usb_cabledetect_statedetect();
 80026bc:	7030      	strb	r0, [r6, #0]
			HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 80026be:	a906      	add	r1, sp, #24
			IWDG->KR = 0x0000AAAA;
 80026c0:	601a      	str	r2, [r3, #0]
			HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 80026c2:	0028      	movs	r0, r5
 80026c4:	2200      	movs	r2, #0
 80026c6:	f002 fcd5 	bl	8005074 <HAL_RTC_GetTime>
		    HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 80026ca:	2200      	movs	r2, #0
 80026cc:	a903      	add	r1, sp, #12
 80026ce:	0028      	movs	r0, r5
 80026d0:	f002 fcf8 	bl	80050c4 <HAL_RTC_GetDate>
		  Temperature = AHT20_Temp();
 80026d4:	f004 fa06 	bl	8006ae4 <AHT20_Temp>
 80026d8:	0007      	movs	r7, r0
		  Humidity = AHT20_Humid();
 80026da:	f004 fa23 	bl	8006b24 <AHT20_Humid>
 80026de:	9001      	str	r0, [sp, #4]
		  adc_Measure(&battery_voltage);
 80026e0:	a802      	add	r0, sp, #8
 80026e2:	f004 fb67 	bl	8006db4 <adc_Measure>
		  percentage= (battery_voltage/3.9)*100;
 80026e6:	9802      	ldr	r0, [sp, #8]
 80026e8:	f7ff fed6 	bl	8002498 <__aeabi_f2d>
 80026ec:	4a36      	ldr	r2, [pc, #216]	; (80027c8 <app_main+0x158>)
 80026ee:	4b37      	ldr	r3, [pc, #220]	; (80027cc <app_main+0x15c>)
 80026f0:	f7fe fbea 	bl	8000ec8 <__aeabi_ddiv>
 80026f4:	4b36      	ldr	r3, [pc, #216]	; (80027d0 <app_main+0x160>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	f7fe ffe0 	bl	80016bc <__aeabi_dmul>
 80026fc:	f7fd fed0 	bl	80004a0 <__aeabi_d2uiz>
 8002700:	1c03      	adds	r3, r0, #0
 8002702:	b280      	uxth	r0, r0
 8002704:	2864      	cmp	r0, #100	; 0x64
 8002706:	d900      	bls.n	800270a <app_main+0x9a>
 8002708:	2364      	movs	r3, #100	; 0x64
 800270a:	b29b      	uxth	r3, r3
 800270c:	9300      	str	r3, [sp, #0]
		 display_routine(buffer,Temperature,Humidity,ppm,percentage);
 800270e:	4b31      	ldr	r3, [pc, #196]	; (80027d4 <app_main+0x164>)
	UG_SetBackcolor(C_BLACK);
 8002710:	2000      	movs	r0, #0
		 display_routine(buffer,Temperature,Humidity,ppm,percentage);
 8002712:	881d      	ldrh	r5, [r3, #0]
	UG_SetBackcolor(C_BLACK);
 8002714:	f005 fa92 	bl	8007c3c <UG_SetBackcolor>
			UG_SetForecolor(C_WHITE);
 8002718:	4824      	ldr	r0, [pc, #144]	; (80027ac <app_main+0x13c>)
 800271a:	f005 fa87 	bl	8007c2c <UG_SetForecolor>
			UG_FontSelect(FONT_12X20);
 800271e:	482e      	ldr	r0, [pc, #184]	; (80027d8 <app_main+0x168>)
 8002720:	f005 f944 	bl	80079ac <UG_FontSelect>
			sprintf(buffer,"Temp: %ldC   ",temp );
 8002724:	003a      	movs	r2, r7
 8002726:	492d      	ldr	r1, [pc, #180]	; (80027dc <app_main+0x16c>)
 8002728:	a80b      	add	r0, sp, #44	; 0x2c
 800272a:	f006 fbc5 	bl	8008eb8 <siprintf>
			UG_PutString(20, 20, buffer);
 800272e:	0021      	movs	r1, r4
 8002730:	0020      	movs	r0, r4
 8002732:	aa0b      	add	r2, sp, #44	; 0x2c
 8002734:	f005 fa18 	bl	8007b68 <UG_PutString>

			sprintf(buffer,"Humid: %ld%%    ",humid );
 8002738:	4929      	ldr	r1, [pc, #164]	; (80027e0 <app_main+0x170>)
 800273a:	9a01      	ldr	r2, [sp, #4]
 800273c:	a80b      	add	r0, sp, #44	; 0x2c
 800273e:	f006 fbbb 	bl	8008eb8 <siprintf>
		 display_routine(buffer,Temperature,Humidity,ppm,percentage);
 8002742:	b2ad      	uxth	r5, r5
					UG_PutString(20, 60, buffer);
 8002744:	213c      	movs	r1, #60	; 0x3c
 8002746:	0020      	movs	r0, r4
 8002748:	aa0b      	add	r2, sp, #44	; 0x2c
 800274a:	f005 fa0d 	bl	8007b68 <UG_PutString>

					sprintf(buffer,"PPM: %d   ",ppm );
 800274e:	002a      	movs	r2, r5
 8002750:	4924      	ldr	r1, [pc, #144]	; (80027e4 <app_main+0x174>)
 8002752:	a80b      	add	r0, sp, #44	; 0x2c
 8002754:	f006 fbb0 	bl	8008eb8 <siprintf>
									UG_PutString(20, 100, buffer);
 8002758:	2164      	movs	r1, #100	; 0x64
 800275a:	0020      	movs	r0, r4
 800275c:	aa0b      	add	r2, sp, #44	; 0x2c
 800275e:	f005 fa03 	bl	8007b68 <UG_PutString>


									sprintf(buffer,"Battery: %d%%   ",percentage );
 8002762:	4921      	ldr	r1, [pc, #132]	; (80027e8 <app_main+0x178>)
 8002764:	9a00      	ldr	r2, [sp, #0]
 8002766:	a80b      	add	r0, sp, #44	; 0x2c
 8002768:	f006 fba6 	bl	8008eb8 <siprintf>
																UG_PutString(20, 140, buffer);
 800276c:	218c      	movs	r1, #140	; 0x8c
 800276e:	0020      	movs	r0, r4
 8002770:	aa0b      	add	r2, sp, #44	; 0x2c
 8002772:	f005 f9f9 	bl	8007b68 <UG_PutString>





			if(detection == 1)
 8002776:	7833      	ldrb	r3, [r6, #0]
			{
				sprintf(buffer,"%s",  "Charging ext-dev      " );
 8002778:	491c      	ldr	r1, [pc, #112]	; (80027ec <app_main+0x17c>)
			if(detection == 1)
 800277a:	2b01      	cmp	r3, #1
 800277c:	d003      	beq.n	8002786 <app_main+0x116>
			}
			else if(detection == 2)
			{
				sprintf(buffer,"%s",  "NONE                  " );
 800277e:	491c      	ldr	r1, [pc, #112]	; (80027f0 <app_main+0x180>)
			else if(detection == 2)
 8002780:	2b02      	cmp	r3, #2
 8002782:	d000      	beq.n	8002786 <app_main+0x116>
			}
			else
			{
				sprintf(buffer,"%s", "Charging Battery         " );
 8002784:	491b      	ldr	r1, [pc, #108]	; (80027f4 <app_main+0x184>)
 8002786:	a80b      	add	r0, sp, #44	; 0x2c
 8002788:	f006 fc9b 	bl	80090c2 <strcpy>
			}


			UG_PutString(20, 200, buffer);
 800278c:	21c8      	movs	r1, #200	; 0xc8
 800278e:	0020      	movs	r0, r4
 8002790:	aa0b      	add	r2, sp, #44	; 0x2c
 8002792:	f005 f9e9 	bl	8007b68 <UG_PutString>
//	{
//		UG_PutString(20, 100, "                               ");
//	}


	  UG_Update();
 8002796:	f005 fc33 	bl	8008000 <UG_Update>
	  {
 800279a:	e789      	b.n	80026b0 <app_main+0x40>
 800279c:	20000212 	.word	0x20000212
 80027a0:	20000330 	.word	0x20000330
 80027a4:	20000460 	.word	0x20000460
 80027a8:	40000400 	.word	0x40000400
 80027ac:	0000ffff 	.word	0x0000ffff
 80027b0:	20000204 	.word	0x20000204
 80027b4:	200004ac 	.word	0x200004ac
 80027b8:	40003000 	.word	0x40003000
 80027bc:	20000384 	.word	0x20000384
 80027c0:	2000020e 	.word	0x2000020e
 80027c4:	0000aaaa 	.word	0x0000aaaa
 80027c8:	33333333 	.word	0x33333333
 80027cc:	400f3333 	.word	0x400f3333
 80027d0:	40590000 	.word	0x40590000
 80027d4:	20000210 	.word	0x20000210
 80027d8:	0800b30a 	.word	0x0800b30a
 80027dc:	0800b1a8 	.word	0x0800b1a8
 80027e0:	0800b1b6 	.word	0x0800b1b6
 80027e4:	0800b1c7 	.word	0x0800b1c7
 80027e8:	0800b1d2 	.word	0x0800b1d2
 80027ec:	0800b1e3 	.word	0x0800b1e3
 80027f0:	0800b1fa 	.word	0x0800b1fa
 80027f4:	0800b211 	.word	0x0800b211

080027f8 <HAL_UART_RxCpltCallback>:

}

/*Interrupts*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027f8:	b510      	push	{r4, lr}
	ppm = CO_buf[4]<<8 | CO_buf[5];
 80027fa:	4906      	ldr	r1, [pc, #24]	; (8002814 <HAL_UART_RxCpltCallback+0x1c>)
	 HAL_UART_Receive_DMA(&huart1, (uint8_t *)CO_buf, 9);
 80027fc:	4806      	ldr	r0, [pc, #24]	; (8002818 <HAL_UART_RxCpltCallback+0x20>)
	ppm = CO_buf[4]<<8 | CO_buf[5];
 80027fe:	790b      	ldrb	r3, [r1, #4]
 8002800:	794a      	ldrb	r2, [r1, #5]
 8002802:	021b      	lsls	r3, r3, #8
 8002804:	4313      	orrs	r3, r2
 8002806:	4a05      	ldr	r2, [pc, #20]	; (800281c <HAL_UART_RxCpltCallback+0x24>)
 8002808:	8013      	strh	r3, [r2, #0]
	 HAL_UART_Receive_DMA(&huart1, (uint8_t *)CO_buf, 9);
 800280a:	2209      	movs	r2, #9
 800280c:	f004 f8aa 	bl	8006964 <HAL_UART_Receive_DMA>
}
 8002810:	bd10      	pop	{r4, pc}
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	20000204 	.word	0x20000204
 8002818:	200004ac 	.word	0x200004ac
 800281c:	20000210 	.word	0x20000210

08002820 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
	set_alarmA_Time = 1;
 8002820:	2201      	movs	r2, #1
 8002822:	4b05      	ldr	r3, [pc, #20]	; (8002838 <HAL_RTC_AlarmAEventCallback+0x18>)
{
 8002824:	b510      	push	{r4, lr}
	set_alarmA_Time = 1;
 8002826:	701a      	strb	r2, [r3, #0]
	set_alarm = 0;
 8002828:	2200      	movs	r2, #0
 800282a:	4b04      	ldr	r3, [pc, #16]	; (800283c <HAL_RTC_AlarmAEventCallback+0x1c>)
	  BUZZER_Go(TBUZ_100, TICK_2);
 800282c:	2103      	movs	r1, #3
 800282e:	2064      	movs	r0, #100	; 0x64
	set_alarm = 0;
 8002830:	701a      	strb	r2, [r3, #0]
	  BUZZER_Go(TBUZ_100, TICK_2);
 8002832:	f004 fab1 	bl	8006d98 <BUZZER_Go>
}
 8002836:	bd10      	pop	{r4, pc}
 8002838:	20000212 	.word	0x20000212
 800283c:	20000000 	.word	0x20000000

08002840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002840:	b510      	push	{r4, lr}
 8002842:	b092      	sub	sp, #72	; 0x48
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002844:	2234      	movs	r2, #52	; 0x34
 8002846:	2100      	movs	r1, #0
 8002848:	a805      	add	r0, sp, #20
 800284a:	f006 fba1 	bl	8008f90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800284e:	2210      	movs	r2, #16
 8002850:	2100      	movs	r1, #0
 8002852:	a801      	add	r0, sp, #4
 8002854:	f006 fb9c 	bl	8008f90 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002858:	2080      	movs	r0, #128	; 0x80
 800285a:	0080      	lsls	r0, r0, #2
 800285c:	f001 ff30 	bl	80046c0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002860:	230a      	movs	r3, #10
 8002862:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002864:	33f6      	adds	r3, #246	; 0xf6
 8002866:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002868:	2300      	movs	r3, #0
 800286a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800286c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 8;
 800286e:	3308      	adds	r3, #8
 8002870:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002872:	2380      	movs	r3, #128	; 0x80
 8002874:	029b      	lsls	r3, r3, #10
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002876:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002878:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800287a:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800287c:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800287e:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002880:	059b      	lsls	r3, r3, #22
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002882:	3a3f      	subs	r2, #63	; 0x3f
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002884:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002886:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002888:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800288a:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800288c:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800288e:	f001 ff43 	bl	8004718 <HAL_RCC_OscConfig>
 8002892:	2800      	cmp	r0, #0
 8002894:	d001      	beq.n	800289a <SystemClock_Config+0x5a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002896:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002898:	e7fe      	b.n	8002898 <SystemClock_Config+0x58>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800289a:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800289c:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800289e:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028a0:	0021      	movs	r1, r4
 80028a2:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028a4:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028a6:	9402      	str	r4, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028a8:	f002 f994 	bl	8004bd4 <HAL_RCC_ClockConfig>
 80028ac:	2800      	cmp	r0, #0
 80028ae:	d001      	beq.n	80028b4 <SystemClock_Config+0x74>
 80028b0:	b672      	cpsid	i
  while (1)
 80028b2:	e7fe      	b.n	80028b2 <SystemClock_Config+0x72>
}
 80028b4:	b012      	add	sp, #72	; 0x48
 80028b6:	bd10      	pop	{r4, pc}

080028b8 <main>:
{
 80028b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ba:	2704      	movs	r7, #4
{
 80028bc:	b09f      	sub	sp, #124	; 0x7c
  HAL_Init();
 80028be:	f000 fcbd 	bl	800323c <HAL_Init>
  SystemClock_Config();
 80028c2:	f7ff ffbd 	bl	8002840 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c6:	2214      	movs	r2, #20
 80028c8:	2100      	movs	r1, #0
 80028ca:	a811      	add	r0, sp, #68	; 0x44
 80028cc:	f006 fb60 	bl	8008f90 <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80028d0:	2220      	movs	r2, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d2:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028d4:	4dc6      	ldr	r5, [pc, #792]	; (8002bf0 <main+0x338>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028d6:	2108      	movs	r1, #8
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028d8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, RS_MCU_Pin|SPI1_NSS_Pin|LCD_RESET_Pin|PWR_CTRL_Pin, GPIO_PIN_RESET);
 80028da:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028dc:	433b      	orrs	r3, r7
 80028de:	636b      	str	r3, [r5, #52]	; 0x34
 80028e0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, RS_MCU_Pin|SPI1_NSS_Pin|LCD_RESET_Pin|PWR_CTRL_Pin, GPIO_PIN_RESET);
 80028e2:	4cc4      	ldr	r4, [pc, #784]	; (8002bf4 <main+0x33c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028e4:	403b      	ands	r3, r7
 80028e6:	9302      	str	r3, [sp, #8]
 80028e8:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80028ea:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, RS_MCU_Pin|SPI1_NSS_Pin|LCD_RESET_Pin|PWR_CTRL_Pin, GPIO_PIN_RESET);
 80028ec:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80028ee:	4313      	orrs	r3, r2
 80028f0:	636b      	str	r3, [r5, #52]	; 0x34
 80028f2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80028f4:	4013      	ands	r3, r2
 80028f6:	9303      	str	r3, [sp, #12]
 80028f8:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028fc:	3a1e      	subs	r2, #30
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fe:	4333      	orrs	r3, r6
 8002900:	636b      	str	r3, [r5, #52]	; 0x34
 8002902:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002904:	4033      	ands	r3, r6
 8002906:	9304      	str	r3, [sp, #16]
 8002908:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800290a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800290c:	4313      	orrs	r3, r2
 800290e:	636b      	str	r3, [r5, #52]	; 0x34
 8002910:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002912:	4013      	ands	r3, r2
 8002914:	9305      	str	r3, [sp, #20]
 8002916:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002918:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, RS_MCU_Pin|SPI1_NSS_Pin|LCD_RESET_Pin|PWR_CTRL_Pin, GPIO_PIN_RESET);
 800291a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800291c:	430b      	orrs	r3, r1
 800291e:	636b      	str	r3, [r5, #52]	; 0x34
 8002920:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002922:	400b      	ands	r3, r1
 8002924:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, RS_MCU_Pin|SPI1_NSS_Pin|LCD_RESET_Pin|PWR_CTRL_Pin, GPIO_PIN_RESET);
 8002926:	0021      	movs	r1, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002928:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, RS_MCU_Pin|SPI1_NSS_Pin|LCD_RESET_Pin|PWR_CTRL_Pin, GPIO_PIN_RESET);
 800292a:	f001 fb1f 	bl	8003f6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VBUS_OUT_EN_GPIO_Port, VBUS_OUT_EN_Pin, GPIO_PIN_SET);
 800292e:	0032      	movs	r2, r6
 8002930:	2108      	movs	r1, #8
 8002932:	48b1      	ldr	r0, [pc, #708]	; (8002bf8 <main+0x340>)
 8002934:	f001 fb1a 	bl	8003f6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CHG_EN_GPIO_Port, CHG_EN_Pin, GPIO_PIN_RESET);
 8002938:	2200      	movs	r2, #0
 800293a:	2110      	movs	r1, #16
 800293c:	48af      	ldr	r0, [pc, #700]	; (8002bfc <main+0x344>)
 800293e:	f001 fb15 	bl	8003f6c <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002942:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = RS_MCU_Pin|SPI1_NSS_Pin|LCD_RESET_Pin|PWR_CTRL_Pin;
 8002944:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002946:	2400      	movs	r4, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002948:	ab11      	add	r3, sp, #68	; 0x44
 800294a:	0019      	movs	r1, r3
 800294c:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800294e:	9612      	str	r6, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002950:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002952:	9414      	str	r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002954:	f001 fa52 	bl	8003dfc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BRTNS_CTRL_Pin|CHG_FLT_Pin|USB_DTCT_Pin|USB_INT_N_Pin;
 8002958:	236a      	movs	r3, #106	; 0x6a
 800295a:	9311      	str	r3, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800295c:	ab11      	add	r3, sp, #68	; 0x44
 800295e:	0019      	movs	r1, r3
 8002960:	48a6      	ldr	r0, [pc, #664]	; (8002bfc <main+0x344>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002962:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002964:	9413      	str	r4, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002966:	f001 fa49 	bl	8003dfc <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800296a:	2202      	movs	r2, #2
  HAL_GPIO_Init(PWN_BTN_MCU_GPIO_Port, &GPIO_InitStruct);
 800296c:	ab11      	add	r3, sp, #68	; 0x44
 800296e:	0019      	movs	r1, r3
 8002970:	48a2      	ldr	r0, [pc, #648]	; (8002bfc <main+0x344>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002972:	9213      	str	r2, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pin = PWN_BTN_MCU_Pin;
 8002974:	9711      	str	r7, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002976:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(PWN_BTN_MCU_GPIO_Port, &GPIO_InitStruct);
 8002978:	f001 fa40 	bl	8003dfc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VBATT_MES_Pin|VBUS_DTCT_Pin|GPIO_PIN_2;
 800297c:	2307      	movs	r3, #7
 800297e:	9311      	str	r3, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002980:	ab11      	add	r3, sp, #68	; 0x44
 8002982:	0019      	movs	r1, r3
 8002984:	489c      	ldr	r0, [pc, #624]	; (8002bf8 <main+0x340>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002986:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	9413      	str	r4, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800298a:	f001 fa37 	bl	8003dfc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VBUS_OUT_EN_Pin;
 800298e:	2108      	movs	r1, #8
  HAL_GPIO_Init(VBUS_OUT_EN_GPIO_Port, &GPIO_InitStruct);
 8002990:	4899      	ldr	r0, [pc, #612]	; (8002bf8 <main+0x340>)
  GPIO_InitStruct.Pin = VBUS_OUT_EN_Pin;
 8002992:	9111      	str	r1, [sp, #68]	; 0x44
  HAL_GPIO_Init(VBUS_OUT_EN_GPIO_Port, &GPIO_InitStruct);
 8002994:	a911      	add	r1, sp, #68	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002996:	9612      	str	r6, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002998:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299a:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Pin = CHG_EN_Pin;
 800299c:	370c      	adds	r7, #12
  HAL_GPIO_Init(VBUS_OUT_EN_GPIO_Port, &GPIO_InitStruct);
 800299e:	f001 fa2d 	bl	8003dfc <HAL_GPIO_Init>
  HAL_GPIO_Init(CHG_EN_GPIO_Port, &GPIO_InitStruct);
 80029a2:	4896      	ldr	r0, [pc, #600]	; (8002bfc <main+0x344>)
 80029a4:	a911      	add	r1, sp, #68	; 0x44
  GPIO_InitStruct.Pin = CHG_EN_Pin;
 80029a6:	9711      	str	r7, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029a8:	9612      	str	r6, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029aa:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ac:	9414      	str	r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(CHG_EN_GPIO_Port, &GPIO_InitStruct);
 80029ae:	f001 fa25 	bl	8003dfc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(PWR_CTRL_GPIO_Port, PWR_CTRL_Pin, 1);
 80029b2:	2180      	movs	r1, #128	; 0x80
 80029b4:	20a0      	movs	r0, #160	; 0xa0
 80029b6:	0032      	movs	r2, r6
 80029b8:	0209      	lsls	r1, r1, #8
 80029ba:	05c0      	lsls	r0, r0, #23
 80029bc:	f001 fad6 	bl	8003f6c <HAL_GPIO_WritePin>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80029c0:	6bab      	ldr	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80029c2:	0022      	movs	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80029c4:	4333      	orrs	r3, r6
 80029c6:	63ab      	str	r3, [r5, #56]	; 0x38
 80029c8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80029ca:	0021      	movs	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80029cc:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80029ce:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 80029d0:	9301      	str	r3, [sp, #4]
 80029d2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80029d4:	f001 f814 	bl	8003a00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80029d8:	2009      	movs	r0, #9
 80029da:	f001 f83b 	bl	8003a54 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80029de:	0021      	movs	r1, r4
 80029e0:	0022      	movs	r2, r4
 80029e2:	200a      	movs	r0, #10
 80029e4:	f001 f80c 	bl	8003a00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80029e8:	200a      	movs	r0, #10
 80029ea:	f001 f833 	bl	8003a54 <HAL_NVIC_EnableIRQ>
  hi2c2.Instance = I2C2;
 80029ee:	4d84      	ldr	r5, [pc, #528]	; (8002c00 <main+0x348>)
 80029f0:	4b84      	ldr	r3, [pc, #528]	; (8002c04 <main+0x34c>)
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80029f2:	0028      	movs	r0, r5
  hi2c2.Instance = I2C2;
 80029f4:	602b      	str	r3, [r5, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 80029f6:	4b84      	ldr	r3, [pc, #528]	; (8002c08 <main+0x350>)
  hi2c2.Init.OwnAddress1 = 0;
 80029f8:	60ac      	str	r4, [r5, #8]
  hi2c2.Init.Timing = 0x10707DBC;
 80029fa:	606b      	str	r3, [r5, #4]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029fc:	60ee      	str	r6, [r5, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029fe:	612c      	str	r4, [r5, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002a00:	616c      	str	r4, [r5, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a02:	61ac      	str	r4, [r5, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a04:	61ec      	str	r4, [r5, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a06:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002a08:	f001 fbea 	bl	80041e0 <HAL_I2C_Init>
 8002a0c:	0001      	movs	r1, r0
 8002a0e:	42a0      	cmp	r0, r4
 8002a10:	d001      	beq.n	8002a16 <main+0x15e>
 8002a12:	b672      	cpsid	i
  while (1)
 8002a14:	e7fe      	b.n	8002a14 <main+0x15c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a16:	0028      	movs	r0, r5
 8002a18:	f001 fe08 	bl	800462c <HAL_I2CEx_ConfigAnalogFilter>
 8002a1c:	1e01      	subs	r1, r0, #0
 8002a1e:	d001      	beq.n	8002a24 <main+0x16c>
 8002a20:	b672      	cpsid	i
  while (1)
 8002a22:	e7fe      	b.n	8002a22 <main+0x16a>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002a24:	0028      	movs	r0, r5
 8002a26:	f001 fe27 	bl	8004678 <HAL_I2CEx_ConfigDigitalFilter>
 8002a2a:	1e03      	subs	r3, r0, #0
 8002a2c:	d001      	beq.n	8002a32 <main+0x17a>
 8002a2e:	b672      	cpsid	i
  while (1)
 8002a30:	e7fe      	b.n	8002a30 <main+0x178>
  hspi1.Instance = SPI1;
 8002a32:	4876      	ldr	r0, [pc, #472]	; (8002c0c <main+0x354>)
 8002a34:	4a76      	ldr	r2, [pc, #472]	; (8002c10 <main+0x358>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a36:	6083      	str	r3, [r0, #8]
  hspi1.Instance = SPI1;
 8002a38:	6002      	str	r2, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a3a:	2282      	movs	r2, #130	; 0x82
 8002a3c:	0052      	lsls	r2, r2, #1
 8002a3e:	6042      	str	r2, [r0, #4]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a40:	22e0      	movs	r2, #224	; 0xe0
 8002a42:	00d2      	lsls	r2, r2, #3
 8002a44:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002a46:	2202      	movs	r2, #2
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a48:	6143      	str	r3, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a4a:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a4c:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a4e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a50:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a52:	2308      	movs	r3, #8
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002a54:	6102      	str	r2, [r0, #16]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a56:	32ff      	adds	r2, #255	; 0xff
 8002a58:	32ff      	adds	r2, #255	; 0xff
 8002a5a:	6182      	str	r2, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 8002a5c:	3afa      	subs	r2, #250	; 0xfa
 8002a5e:	3aff      	subs	r2, #255	; 0xff
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002a60:	61c7      	str	r7, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 8002a62:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a64:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a66:	f002 fc3d 	bl	80052e4 <HAL_SPI_Init>
 8002a6a:	2800      	cmp	r0, #0
 8002a6c:	d001      	beq.n	8002a72 <main+0x1ba>
 8002a6e:	b672      	cpsid	i
  while (1)
 8002a70:	e7fe      	b.n	8002a70 <main+0x1b8>
  huart1.Instance = USART1;
 8002a72:	4c68      	ldr	r4, [pc, #416]	; (8002c14 <main+0x35c>)
 8002a74:	4b68      	ldr	r3, [pc, #416]	; (8002c18 <main+0x360>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a76:	60a0      	str	r0, [r4, #8]
  huart1.Instance = USART1;
 8002a78:	6023      	str	r3, [r4, #0]
  huart1.Init.BaudRate = 9600;
 8002a7a:	2396      	movs	r3, #150	; 0x96
 8002a7c:	019b      	lsls	r3, r3, #6
 8002a7e:	6063      	str	r3, [r4, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a80:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a82:	60e0      	str	r0, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a84:	6120      	str	r0, [r4, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a86:	61a0      	str	r0, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a88:	61e0      	str	r0, [r4, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a8a:	6220      	str	r0, [r4, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a8c:	6260      	str	r0, [r4, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a8e:	62a0      	str	r0, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a90:	0020      	movs	r0, r4
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a92:	6163      	str	r3, [r4, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a94:	f003 fedc 	bl	8006850 <HAL_UART_Init>
 8002a98:	1e01      	subs	r1, r0, #0
 8002a9a:	d001      	beq.n	8002aa0 <main+0x1e8>
 8002a9c:	b672      	cpsid	i
  while (1)
 8002a9e:	e7fe      	b.n	8002a9e <main+0x1e6>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002aa0:	0020      	movs	r0, r4
 8002aa2:	f003 ffd7 	bl	8006a54 <HAL_UARTEx_SetTxFifoThreshold>
 8002aa6:	1e01      	subs	r1, r0, #0
 8002aa8:	d001      	beq.n	8002aae <main+0x1f6>
 8002aaa:	b672      	cpsid	i
  while (1)
 8002aac:	e7fe      	b.n	8002aac <main+0x1f4>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002aae:	0020      	movs	r0, r4
 8002ab0:	f003 fff0 	bl	8006a94 <HAL_UARTEx_SetRxFifoThreshold>
 8002ab4:	2800      	cmp	r0, #0
 8002ab6:	d001      	beq.n	8002abc <main+0x204>
 8002ab8:	b672      	cpsid	i
  while (1)
 8002aba:	e7fe      	b.n	8002aba <main+0x202>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002abc:	0020      	movs	r0, r4
 8002abe:	f003 ffab 	bl	8006a18 <HAL_UARTEx_DisableFifoMode>
 8002ac2:	1e05      	subs	r5, r0, #0
 8002ac4:	d001      	beq.n	8002aca <main+0x212>
 8002ac6:	b672      	cpsid	i
  while (1)
 8002ac8:	e7fe      	b.n	8002ac8 <main+0x210>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002aca:	0001      	movs	r1, r0
 8002acc:	221c      	movs	r2, #28
 8002ace:	a80a      	add	r0, sp, #40	; 0x28
 8002ad0:	f006 fa5e 	bl	8008f90 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ad4:	2234      	movs	r2, #52	; 0x34
 8002ad6:	0029      	movs	r1, r5
 8002ad8:	a811      	add	r0, sp, #68	; 0x44
 8002ada:	f006 fa59 	bl	8008f90 <memset>
  htim17.Instance = TIM17;
 8002ade:	4c4f      	ldr	r4, [pc, #316]	; (8002c1c <main+0x364>)
 8002ae0:	4b4f      	ldr	r3, [pc, #316]	; (8002c20 <main+0x368>)
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002ae2:	0020      	movs	r0, r4
  htim17.Instance = TIM17;
 8002ae4:	6023      	str	r3, [r4, #0]
  htim17.Init.Prescaler = 32-1;
 8002ae6:	231f      	movs	r3, #31
 8002ae8:	6063      	str	r3, [r4, #4]
  htim17.Init.Period = 1000;
 8002aea:	23fa      	movs	r3, #250	; 0xfa
 8002aec:	009b      	lsls	r3, r3, #2
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aee:	60a5      	str	r5, [r4, #8]
  htim17.Init.Period = 1000;
 8002af0:	60e3      	str	r3, [r4, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002af2:	6125      	str	r5, [r4, #16]
  htim17.Init.RepetitionCounter = 0;
 8002af4:	6165      	str	r5, [r4, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002af6:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002af8:	f002 ff6c 	bl	80059d4 <HAL_TIM_Base_Init>
 8002afc:	2800      	cmp	r0, #0
 8002afe:	d001      	beq.n	8002b04 <main+0x24c>
 8002b00:	b672      	cpsid	i
  while (1)
 8002b02:	e7fe      	b.n	8002b02 <main+0x24a>
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002b04:	0020      	movs	r0, r4
 8002b06:	f002 ff8f 	bl	8005a28 <HAL_TIM_PWM_Init>
 8002b0a:	2800      	cmp	r0, #0
 8002b0c:	d001      	beq.n	8002b12 <main+0x25a>
 8002b0e:	b672      	cpsid	i
  while (1)
 8002b10:	e7fe      	b.n	8002b10 <main+0x258>
  sConfigOC.Pulse = 0;
 8002b12:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b14:	2560      	movs	r5, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b16:	0020      	movs	r0, r4
 8002b18:	a90a      	add	r1, sp, #40	; 0x28
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b1a:	950a      	str	r5, [sp, #40]	; 0x28
  sConfigOC.Pulse = 0;
 8002b1c:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b1e:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b20:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b22:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b24:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b26:	9210      	str	r2, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b28:	f002 ffe4 	bl	8005af4 <HAL_TIM_PWM_ConfigChannel>
 8002b2c:	2800      	cmp	r0, #0
 8002b2e:	d001      	beq.n	8002b34 <main+0x27c>
 8002b30:	b672      	cpsid	i
  while (1)
 8002b32:	e7fe      	b.n	8002b32 <main+0x27a>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b34:	2380      	movs	r3, #128	; 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b36:	9011      	str	r0, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b38:	9012      	str	r0, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b3a:	9013      	str	r0, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b3c:	9014      	str	r0, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b3e:	9015      	str	r0, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b40:	019b      	lsls	r3, r3, #6
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002b42:	9017      	str	r0, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b44:	901d      	str	r0, [sp, #116]	; 0x74
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002b46:	a911      	add	r1, sp, #68	; 0x44
 8002b48:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b4a:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002b4c:	f003 f9d0 	bl	8005ef0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002b50:	1e06      	subs	r6, r0, #0
 8002b52:	d001      	beq.n	8002b58 <main+0x2a0>
 8002b54:	b672      	cpsid	i
  while (1)
 8002b56:	e7fe      	b.n	8002b56 <main+0x29e>
  HAL_TIM_MspPostInit(&htim17);
 8002b58:	0020      	movs	r0, r4
 8002b5a:	f000 f9fd 	bl	8002f58 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b5e:	2210      	movs	r2, #16
 8002b60:	0031      	movs	r1, r6
 8002b62:	a80a      	add	r0, sp, #40	; 0x28
 8002b64:	f006 fa14 	bl	8008f90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b68:	220c      	movs	r2, #12
 8002b6a:	0031      	movs	r1, r6
 8002b6c:	a807      	add	r0, sp, #28
 8002b6e:	f006 fa0f 	bl	8008f90 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b72:	221c      	movs	r2, #28
 8002b74:	0031      	movs	r1, r6
 8002b76:	a811      	add	r0, sp, #68	; 0x44
 8002b78:	f006 fa0a 	bl	8008f90 <memset>
  htim3.Instance = TIM3;
 8002b7c:	4c29      	ldr	r4, [pc, #164]	; (8002c24 <main+0x36c>)
 8002b7e:	4b2a      	ldr	r3, [pc, #168]	; (8002c28 <main+0x370>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b80:	0020      	movs	r0, r4
  htim3.Instance = TIM3;
 8002b82:	6023      	str	r3, [r4, #0]
  htim3.Init.Period = 65535;
 8002b84:	4b29      	ldr	r3, [pc, #164]	; (8002c2c <main+0x374>)
  htim3.Init.Prescaler = 0;
 8002b86:	6066      	str	r6, [r4, #4]
  htim3.Init.Period = 65535;
 8002b88:	60e3      	str	r3, [r4, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b8a:	2380      	movs	r3, #128	; 0x80
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b8c:	60a6      	str	r6, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b8e:	6126      	str	r6, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b90:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b92:	f002 ff1f 	bl	80059d4 <HAL_TIM_Base_Init>
 8002b96:	2800      	cmp	r0, #0
 8002b98:	d001      	beq.n	8002b9e <main+0x2e6>
 8002b9a:	b672      	cpsid	i
  while (1)
 8002b9c:	e7fe      	b.n	8002b9c <main+0x2e4>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b9e:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002ba0:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ba2:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002ba4:	a90a      	add	r1, sp, #40	; 0x28
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ba6:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002ba8:	f003 f838 	bl	8005c1c <HAL_TIM_ConfigClockSource>
 8002bac:	2800      	cmp	r0, #0
 8002bae:	d001      	beq.n	8002bb4 <main+0x2fc>
 8002bb0:	b672      	cpsid	i
  while (1)
 8002bb2:	e7fe      	b.n	8002bb2 <main+0x2fa>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002bb4:	0020      	movs	r0, r4
 8002bb6:	f002 ff37 	bl	8005a28 <HAL_TIM_PWM_Init>
 8002bba:	2800      	cmp	r0, #0
 8002bbc:	d001      	beq.n	8002bc2 <main+0x30a>
 8002bbe:	b672      	cpsid	i
  while (1)
 8002bc0:	e7fe      	b.n	8002bc0 <main+0x308>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bc2:	9007      	str	r0, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bc4:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bc6:	a907      	add	r1, sp, #28
 8002bc8:	0020      	movs	r0, r4
 8002bca:	f003 f961 	bl	8005e90 <HAL_TIMEx_MasterConfigSynchronization>
 8002bce:	2800      	cmp	r0, #0
 8002bd0:	d001      	beq.n	8002bd6 <main+0x31e>
 8002bd2:	b672      	cpsid	i
  while (1)
 8002bd4:	e7fe      	b.n	8002bd4 <main+0x31c>
  sConfigOC.Pulse = 0;
 8002bd6:	9012      	str	r0, [sp, #72]	; 0x48
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bd8:	9013      	str	r0, [sp, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bda:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002bdc:	2208      	movs	r2, #8
 8002bde:	0020      	movs	r0, r4
 8002be0:	a911      	add	r1, sp, #68	; 0x44
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002be2:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002be4:	f002 ff86 	bl	8005af4 <HAL_TIM_PWM_ConfigChannel>
 8002be8:	1e05      	subs	r5, r0, #0
 8002bea:	d021      	beq.n	8002c30 <main+0x378>
 8002bec:	b672      	cpsid	i
  while (1)
 8002bee:	e7fe      	b.n	8002bee <main+0x336>
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	00008054 	.word	0x00008054
 8002bf8:	50000c00 	.word	0x50000c00
 8002bfc:	50000400 	.word	0x50000400
 8002c00:	20000330 	.word	0x20000330
 8002c04:	40005800 	.word	0x40005800
 8002c08:	10707dbc 	.word	0x10707dbc
 8002c0c:	200003b0 	.word	0x200003b0
 8002c10:	40013000 	.word	0x40013000
 8002c14:	200004ac 	.word	0x200004ac
 8002c18:	40013800 	.word	0x40013800
 8002c1c:	20000414 	.word	0x20000414
 8002c20:	40014800 	.word	0x40014800
 8002c24:	20000460 	.word	0x20000460
 8002c28:	40000400 	.word	0x40000400
 8002c2c:	0000ffff 	.word	0x0000ffff
  HAL_TIM_MspPostInit(&htim3);
 8002c30:	0020      	movs	r0, r4
 8002c32:	f000 f991 	bl	8002f58 <HAL_TIM_MspPostInit>
  ADC_ChannelConfTypeDef sConfig = {0};
 8002c36:	220c      	movs	r2, #12
 8002c38:	0029      	movs	r1, r5
 8002c3a:	a811      	add	r0, sp, #68	; 0x44
 8002c3c:	f006 f9a8 	bl	8008f90 <memset>
  hadc1.Instance = ADC1;
 8002c40:	4c2f      	ldr	r4, [pc, #188]	; (8002d00 <main+0x448>)
 8002c42:	4b30      	ldr	r3, [pc, #192]	; (8002d04 <main+0x44c>)
  hadc1.Init.NbrOfConversion = 1;
 8002c44:	2601      	movs	r6, #1
  hadc1.Instance = ADC1;
 8002c46:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002c48:	2380      	movs	r3, #128	; 0x80
 8002c4a:	061b      	lsls	r3, r3, #24
 8002c4c:	6063      	str	r3, [r4, #4]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002c4e:	2304      	movs	r3, #4
 8002c50:	6163      	str	r3, [r4, #20]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002c52:	19a3      	adds	r3, r4, r6
 8002c54:	77dd      	strb	r5, [r3, #31]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002c56:	0023      	movs	r3, r4
 8002c58:	332c      	adds	r3, #44	; 0x2c
 8002c5a:	701d      	strb	r5, [r3, #0]
  hadc1.Init.OversamplingMode = DISABLE;
 8002c5c:	0023      	movs	r3, r4
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c5e:	0020      	movs	r0, r4
  hadc1.Init.OversamplingMode = DISABLE;
 8002c60:	333c      	adds	r3, #60	; 0x3c
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002c62:	8325      	strh	r5, [r4, #24]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002c64:	60a5      	str	r5, [r4, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c66:	60e5      	str	r5, [r4, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002c68:	6125      	str	r5, [r4, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002c6a:	76a5      	strb	r5, [r4, #26]
  hadc1.Init.NbrOfConversion = 1;
 8002c6c:	61e6      	str	r6, [r4, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c6e:	6265      	str	r5, [r4, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002c70:	62a5      	str	r5, [r4, #40]	; 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002c72:	6325      	str	r5, [r4, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8002c74:	6365      	str	r5, [r4, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8002c76:	63a5      	str	r5, [r4, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002c78:	701d      	strb	r5, [r3, #0]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002c7a:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c7c:	f000 fb1a 	bl	80032b4 <HAL_ADC_Init>
 8002c80:	2800      	cmp	r0, #0
 8002c82:	d001      	beq.n	8002c88 <main+0x3d0>
 8002c84:	b672      	cpsid	i
  while (1)
 8002c86:	e7fe      	b.n	8002c86 <main+0x3ce>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002c88:	9012      	str	r0, [sp, #72]	; 0x48
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002c8a:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c8c:	a911      	add	r1, sp, #68	; 0x44
 8002c8e:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_0;
 8002c90:	9611      	str	r6, [sp, #68]	; 0x44
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c92:	f000 fc89 	bl	80035a8 <HAL_ADC_ConfigChannel>
 8002c96:	1e03      	subs	r3, r0, #0
 8002c98:	d001      	beq.n	8002c9e <main+0x3e6>
 8002c9a:	b672      	cpsid	i
  while (1)
 8002c9c:	e7fe      	b.n	8002c9c <main+0x3e4>
  hrtc.Instance = RTC;
 8002c9e:	481a      	ldr	r0, [pc, #104]	; (8002d08 <main+0x450>)
 8002ca0:	4a1a      	ldr	r2, [pc, #104]	; (8002d0c <main+0x454>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002ca2:	6143      	str	r3, [r0, #20]
  hrtc.Instance = RTC;
 8002ca4:	6002      	str	r2, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8002ca6:	2240      	movs	r2, #64	; 0x40
 8002ca8:	6082      	str	r2, [r0, #8]
  hrtc.Init.AsynchPrediv = 127;
 8002caa:	323f      	adds	r2, #63	; 0x3f
 8002cac:	60c2      	str	r2, [r0, #12]
  hrtc.Init.SynchPrediv = 255;
 8002cae:	3280      	adds	r2, #128	; 0x80
 8002cb0:	6102      	str	r2, [r0, #16]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002cb2:	2280      	movs	r2, #128	; 0x80
 8002cb4:	05d2      	lsls	r2, r2, #23
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002cb6:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002cb8:	61c3      	str	r3, [r0, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002cba:	6202      	str	r2, [r0, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002cbc:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002cbe:	f002 f979 	bl	8004fb4 <HAL_RTC_Init>
 8002cc2:	2800      	cmp	r0, #0
 8002cc4:	d001      	beq.n	8002cca <main+0x412>
 8002cc6:	b672      	cpsid	i
  while (1)
 8002cc8:	e7fe      	b.n	8002cc8 <main+0x410>
	IWDG->KR = 0x0000CCCC;
 8002cca:	4c11      	ldr	r4, [pc, #68]	; (8002d10 <main+0x458>)
 8002ccc:	4b11      	ldr	r3, [pc, #68]	; (8002d14 <main+0x45c>)
	while (IWDG->SR != 0x00000000 && (timeout < 100)) {
 8002cce:	2565      	movs	r5, #101	; 0x65
	IWDG->KR = 0x0000CCCC;
 8002cd0:	6023      	str	r3, [r4, #0]
	IWDG->KR = 0x00005555;
 8002cd2:	4b11      	ldr	r3, [pc, #68]	; (8002d18 <main+0x460>)
 8002cd4:	6023      	str	r3, [r4, #0]
	IWDG->PR = IWDG_PRESCALER_256;
 8002cd6:	2306      	movs	r3, #6
 8002cd8:	6063      	str	r3, [r4, #4]
	IWDG->RLR = 500;
 8002cda:	33ef      	adds	r3, #239	; 0xef
 8002cdc:	33ff      	adds	r3, #255	; 0xff
 8002cde:	60a3      	str	r3, [r4, #8]
	while (IWDG->SR != 0x00000000 && (timeout < 100)) {
 8002ce0:	68e3      	ldr	r3, [r4, #12]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d002      	beq.n	8002cec <main+0x434>
 8002ce6:	3d01      	subs	r5, #1
 8002ce8:	2d00      	cmp	r5, #0
 8002cea:	d104      	bne.n	8002cf6 <main+0x43e>
	IWDG->KR = 0x0000AAAA;
 8002cec:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <main+0x464>)
 8002cee:	6023      	str	r3, [r4, #0]
  app_main();
 8002cf0:	f7ff fcbe 	bl	8002670 <app_main>
  while (1)
 8002cf4:	e7fe      	b.n	8002cf4 <main+0x43c>
		HAL_Delay(40);
 8002cf6:	2028      	movs	r0, #40	; 0x28
 8002cf8:	f000 fac6 	bl	8003288 <HAL_Delay>
 8002cfc:	e7f0      	b.n	8002ce0 <main+0x428>
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	20000214 	.word	0x20000214
 8002d04:	40012400 	.word	0x40012400
 8002d08:	20000384 	.word	0x20000384
 8002d0c:	40002800 	.word	0x40002800
 8002d10:	40003000 	.word	0x40003000
 8002d14:	0000cccc 	.word	0x0000cccc
 8002d18:	00005555 	.word	0x00005555
 8002d1c:	0000aaaa 	.word	0x0000aaaa

08002d20 <Error_Handler>:
 8002d20:	b672      	cpsid	i
  while (1)
 8002d22:	e7fe      	b.n	8002d22 <Error_Handler+0x2>

08002d24 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d24:	2101      	movs	r1, #1
 8002d26:	4b0a      	ldr	r3, [pc, #40]	; (8002d50 <HAL_MspInit+0x2c>)
{
 8002d28:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	641a      	str	r2, [r3, #64]	; 0x40
 8002d30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d32:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d34:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d36:	9200      	str	r2, [sp, #0]
 8002d38:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d3c:	0549      	lsls	r1, r1, #21
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d44:	400b      	ands	r3, r1
 8002d46:	9301      	str	r3, [sp, #4]
 8002d48:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d4a:	b002      	add	sp, #8
 8002d4c:	4770      	bx	lr
 8002d4e:	46c0      	nop			; (mov r8, r8)
 8002d50:	40021000 	.word	0x40021000

08002d54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d54:	b510      	push	{r4, lr}
 8002d56:	0004      	movs	r4, r0
 8002d58:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d5a:	2214      	movs	r2, #20
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	a803      	add	r0, sp, #12
 8002d60:	f006 f916 	bl	8008f90 <memset>
  if(hadc->Instance==ADC1)
 8002d64:	4b0f      	ldr	r3, [pc, #60]	; (8002da4 <HAL_ADC_MspInit+0x50>)
 8002d66:	6822      	ldr	r2, [r4, #0]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d119      	bne.n	8002da0 <HAL_ADC_MspInit+0x4c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002d6c:	2180      	movs	r1, #128	; 0x80
 8002d6e:	4b0e      	ldr	r3, [pc, #56]	; (8002da8 <HAL_ADC_MspInit+0x54>)
 8002d70:	0349      	lsls	r1, r1, #13
 8002d72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d74:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_ADC_CLK_ENABLE();
 8002d76:	430a      	orrs	r2, r1
 8002d78:	641a      	str	r2, [r3, #64]	; 0x40
 8002d7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d7c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_ADC_CLK_ENABLE();
 8002d7e:	400a      	ands	r2, r1
 8002d80:	9201      	str	r2, [sp, #4]
 8002d82:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d84:	2201      	movs	r2, #1
 8002d86:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d88:	4311      	orrs	r1, r2
 8002d8a:	6359      	str	r1, [r3, #52]	; 0x34
 8002d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d8e:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d90:	4013      	ands	r3, r2
 8002d92:	9302      	str	r3, [sp, #8]
 8002d94:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d96:	2303      	movs	r3, #3
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d98:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d9a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d9c:	f001 f82e 	bl	8003dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002da0:	b008      	add	sp, #32
 8002da2:	bd10      	pop	{r4, pc}
 8002da4:	40012400 	.word	0x40012400
 8002da8:	40021000 	.word	0x40021000

08002dac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002dac:	b510      	push	{r4, lr}
 8002dae:	0004      	movs	r4, r0
 8002db0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db2:	2214      	movs	r2, #20
 8002db4:	2100      	movs	r1, #0
 8002db6:	a803      	add	r0, sp, #12
 8002db8:	f006 f8ea 	bl	8008f90 <memset>
  if(hi2c->Instance==I2C2)
 8002dbc:	4b11      	ldr	r3, [pc, #68]	; (8002e04 <HAL_I2C_MspInit+0x58>)
 8002dbe:	6822      	ldr	r2, [r4, #0]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d11c      	bne.n	8002dfe <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	4c10      	ldr	r4, [pc, #64]	; (8002e08 <HAL_I2C_MspInit+0x5c>)
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dc8:	4810      	ldr	r0, [pc, #64]	; (8002e0c <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dca:	6b63      	ldr	r3, [r4, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dcc:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	6363      	str	r3, [r4, #52]	; 0x34
 8002dd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	9301      	str	r3, [sp, #4]
 8002dd8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8002dda:	23c0      	movs	r3, #192	; 0xc0
 8002ddc:	01db      	lsls	r3, r3, #7
 8002dde:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002de0:	2312      	movs	r3, #18
 8002de2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8002de4:	3b0c      	subs	r3, #12
 8002de6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002de8:	f001 f808 	bl	8003dfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002dec:	2280      	movs	r2, #128	; 0x80
 8002dee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002df0:	03d2      	lsls	r2, r2, #15
 8002df2:	4313      	orrs	r3, r2
 8002df4:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002df6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002df8:	4013      	ands	r3, r2
 8002dfa:	9302      	str	r3, [sp, #8]
 8002dfc:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002dfe:	b008      	add	sp, #32
 8002e00:	bd10      	pop	{r4, pc}
 8002e02:	46c0      	nop			; (mov r8, r8)
 8002e04:	40005800 	.word	0x40005800
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	50000400 	.word	0x50000400

08002e10 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002e10:	b510      	push	{r4, lr}
 8002e12:	0004      	movs	r4, r0
 8002e14:	b088      	sub	sp, #32
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e16:	2218      	movs	r2, #24
 8002e18:	2100      	movs	r1, #0
 8002e1a:	a802      	add	r0, sp, #8
 8002e1c:	f006 f8b8 	bl	8008f90 <memset>
  if(hrtc->Instance==RTC)
 8002e20:	4b14      	ldr	r3, [pc, #80]	; (8002e74 <HAL_RTC_MspInit+0x64>)
 8002e22:	6822      	ldr	r2, [r4, #0]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d123      	bne.n	8002e70 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002e28:	2380      	movs	r3, #128	; 0x80
 8002e2a:	029b      	lsls	r3, r3, #10
 8002e2c:	9302      	str	r3, [sp, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002e2e:	2380      	movs	r3, #128	; 0x80

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e30:	a802      	add	r0, sp, #8
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e36:	f001 ff8f 	bl	8004d58 <HAL_RCCEx_PeriphCLKConfig>
 8002e3a:	2800      	cmp	r0, #0
 8002e3c:	d001      	beq.n	8002e42 <HAL_RTC_MspInit+0x32>
    {
      Error_Handler();
 8002e3e:	f7ff ff6f 	bl	8002d20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002e42:	2280      	movs	r2, #128	; 0x80
 8002e44:	4b0c      	ldr	r3, [pc, #48]	; (8002e78 <HAL_RTC_MspInit+0x68>)
 8002e46:	0212      	lsls	r2, r2, #8
 8002e48:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8002e4a:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 8002e4c:	430a      	orrs	r2, r1
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002e4e:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_RTC_ENABLE();
 8002e50:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002e52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e54:	00c9      	lsls	r1, r1, #3
 8002e56:	430a      	orrs	r2, r1
 8002e58:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8002e5a:	2200      	movs	r2, #0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5e:	400b      	ands	r3, r1
 8002e60:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8002e62:	0011      	movs	r1, r2
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002e64:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8002e66:	f000 fdcb 	bl	8003a00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8002e6a:	2002      	movs	r0, #2
 8002e6c:	f000 fdf2 	bl	8003a54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002e70:	b008      	add	sp, #32
 8002e72:	bd10      	pop	{r4, pc}
 8002e74:	40002800 	.word	0x40002800
 8002e78:	40021000 	.word	0x40021000

08002e7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e7c:	b530      	push	{r4, r5, lr}
 8002e7e:	0005      	movs	r5, r0
 8002e80:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e82:	2214      	movs	r2, #20
 8002e84:	2100      	movs	r1, #0
 8002e86:	a803      	add	r0, sp, #12
 8002e88:	f006 f882 	bl	8008f90 <memset>
  if(hspi->Instance==SPI1)
 8002e8c:	4b1c      	ldr	r3, [pc, #112]	; (8002f00 <HAL_SPI_MspInit+0x84>)
 8002e8e:	682a      	ldr	r2, [r5, #0]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d132      	bne.n	8002efa <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e94:	2180      	movs	r1, #128	; 0x80
 8002e96:	4b1b      	ldr	r3, [pc, #108]	; (8002f04 <HAL_SPI_MspInit+0x88>)
 8002e98:	0149      	lsls	r1, r1, #5
 8002e9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e9c:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	641a      	str	r2, [r3, #64]	; 0x40
 8002ea2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea4:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ea6:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ea8:	2101      	movs	r1, #1
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002eaa:	9201      	str	r2, [sp, #4]
 8002eac:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	635a      	str	r2, [r3, #52]	; 0x34
 8002eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb6:	400b      	ands	r3, r1
 8002eb8:	9302      	str	r3, [sp, #8]
 8002eba:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MOSI_Pin;
 8002ebc:	23a0      	movs	r3, #160	; 0xa0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ebe:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MOSI_Pin;
 8002ec0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec2:	3b9e      	subs	r3, #158	; 0x9e
 8002ec4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec6:	f000 ff99 	bl	8003dfc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel2;
 8002eca:	4c0f      	ldr	r4, [pc, #60]	; (8002f08 <HAL_SPI_MspInit+0x8c>)
 8002ecc:	4b0f      	ldr	r3, [pc, #60]	; (8002f0c <HAL_SPI_MspInit+0x90>)
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ece:	2280      	movs	r2, #128	; 0x80
    hdma_spi1_tx.Instance = DMA1_Channel2;
 8002ed0:	6023      	str	r3, [r4, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002ed2:	2311      	movs	r3, #17
 8002ed4:	6063      	str	r3, [r4, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	60a3      	str	r3, [r4, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eda:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002edc:	0020      	movs	r0, r4
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ede:	60e3      	str	r3, [r4, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ee0:	6122      	str	r2, [r4, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ee2:	6163      	str	r3, [r4, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ee4:	61a3      	str	r3, [r4, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002ee6:	61e3      	str	r3, [r4, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ee8:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002eea:	f000 fe13 	bl	8003b14 <HAL_DMA_Init>
 8002eee:	2800      	cmp	r0, #0
 8002ef0:	d001      	beq.n	8002ef6 <HAL_SPI_MspInit+0x7a>
    {
      Error_Handler();
 8002ef2:	f7ff ff15 	bl	8002d20 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002ef6:	656c      	str	r4, [r5, #84]	; 0x54
 8002ef8:	62a5      	str	r5, [r4, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002efa:	b009      	add	sp, #36	; 0x24
 8002efc:	bd30      	pop	{r4, r5, pc}
 8002efe:	46c0      	nop			; (mov r8, r8)
 8002f00:	40013000 	.word	0x40013000
 8002f04:	40021000 	.word	0x40021000
 8002f08:	20000278 	.word	0x20000278
 8002f0c:	4002001c 	.word	0x4002001c

08002f10 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 8002f10:	6803      	ldr	r3, [r0, #0]
 8002f12:	4a0e      	ldr	r2, [pc, #56]	; (8002f4c <HAL_TIM_Base_MspInit+0x3c>)
{
 8002f14:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM3)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d10a      	bne.n	8002f30 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f1a:	2102      	movs	r1, #2
 8002f1c:	4b0c      	ldr	r3, [pc, #48]	; (8002f50 <HAL_TIM_Base_MspInit+0x40>)
 8002f1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f20:	430a      	orrs	r2, r1
 8002f22:	63da      	str	r2, [r3, #60]	; 0x3c
 8002f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f26:	400b      	ands	r3, r1
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002f2c:	b002      	add	sp, #8
 8002f2e:	4770      	bx	lr
  else if(htim_base->Instance==TIM17)
 8002f30:	4a08      	ldr	r2, [pc, #32]	; (8002f54 <HAL_TIM_Base_MspInit+0x44>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d1fa      	bne.n	8002f2c <HAL_TIM_Base_MspInit+0x1c>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002f36:	2180      	movs	r1, #128	; 0x80
 8002f38:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <HAL_TIM_Base_MspInit+0x40>)
 8002f3a:	02c9      	lsls	r1, r1, #11
 8002f3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	641a      	str	r2, [r3, #64]	; 0x40
 8002f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f44:	400b      	ands	r3, r1
 8002f46:	9301      	str	r3, [sp, #4]
 8002f48:	9b01      	ldr	r3, [sp, #4]
}
 8002f4a:	e7ef      	b.n	8002f2c <HAL_TIM_Base_MspInit+0x1c>
 8002f4c:	40000400 	.word	0x40000400
 8002f50:	40021000 	.word	0x40021000
 8002f54:	40014800 	.word	0x40014800

08002f58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f58:	b510      	push	{r4, lr}
 8002f5a:	0004      	movs	r4, r0
 8002f5c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f5e:	2214      	movs	r2, #20
 8002f60:	2100      	movs	r1, #0
 8002f62:	a803      	add	r0, sp, #12
 8002f64:	f006 f814 	bl	8008f90 <memset>
  if(htim->Instance==TIM3)
 8002f68:	6823      	ldr	r3, [r4, #0]
 8002f6a:	4a14      	ldr	r2, [pc, #80]	; (8002fbc <HAL_TIM_MspPostInit+0x64>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d112      	bne.n	8002f96 <HAL_TIM_MspPostInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f70:	2302      	movs	r3, #2
 8002f72:	4a13      	ldr	r2, [pc, #76]	; (8002fc0 <HAL_TIM_MspPostInit+0x68>)
 8002f74:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8002f76:	4319      	orrs	r1, r3
 8002f78:	6351      	str	r1, [r2, #52]	; 0x34
 8002f7a:	6b52      	ldr	r2, [r2, #52]	; 0x34
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7c:	9304      	str	r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f7e:	401a      	ands	r2, r3
 8002f80:	9201      	str	r2, [sp, #4]
 8002f82:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002f84:	2201      	movs	r2, #1
 8002f86:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002f88:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f8a:	480e      	ldr	r0, [pc, #56]	; (8002fc4 <HAL_TIM_MspPostInit+0x6c>)
 8002f8c:	a903      	add	r1, sp, #12
 8002f8e:	f000 ff35 	bl	8003dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002f92:	b008      	add	sp, #32
 8002f94:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM17)
 8002f96:	4a0c      	ldr	r2, [pc, #48]	; (8002fc8 <HAL_TIM_MspPostInit+0x70>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d1fa      	bne.n	8002f92 <HAL_TIM_MspPostInit+0x3a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	4a08      	ldr	r2, [pc, #32]	; (8002fc0 <HAL_TIM_MspPostInit+0x68>)
 8002fa0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8002fa2:	4319      	orrs	r1, r3
 8002fa4:	6351      	str	r1, [r2, #52]	; 0x34
 8002fa6:	6b52      	ldr	r2, [r2, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa8:	9304      	str	r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002faa:	401a      	ands	r2, r3
 8002fac:	9202      	str	r2, [sp, #8]
 8002fae:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002fb0:	2280      	movs	r2, #128	; 0x80
 8002fb2:	0092      	lsls	r2, r2, #2
 8002fb4:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 8002fb6:	9307      	str	r3, [sp, #28]
 8002fb8:	e7e7      	b.n	8002f8a <HAL_TIM_MspPostInit+0x32>
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	40000400 	.word	0x40000400
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	50000400 	.word	0x50000400
 8002fc8:	40014800 	.word	0x40014800

08002fcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fcc:	b570      	push	{r4, r5, r6, lr}
 8002fce:	0006      	movs	r6, r0
 8002fd0:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd2:	2214      	movs	r2, #20
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	a803      	add	r0, sp, #12
 8002fd8:	f005 ffda 	bl	8008f90 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fdc:	2218      	movs	r2, #24
 8002fde:	2100      	movs	r1, #0
 8002fe0:	a808      	add	r0, sp, #32
 8002fe2:	f005 ffd5 	bl	8008f90 <memset>
  if(huart->Instance==USART1)
 8002fe6:	4b27      	ldr	r3, [pc, #156]	; (8003084 <HAL_UART_MspInit+0xb8>)
 8002fe8:	6832      	ldr	r2, [r6, #0]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d148      	bne.n	8003080 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002fee:	2301      	movs	r3, #1
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ff0:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002ff2:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ff4:	f001 feb0 	bl	8004d58 <HAL_RCCEx_PeriphCLKConfig>
 8002ff8:	2800      	cmp	r0, #0
 8002ffa:	d001      	beq.n	8003000 <HAL_UART_MspInit+0x34>
    {
      Error_Handler();
 8002ffc:	f7ff fe90 	bl	8002d20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003000:	2180      	movs	r1, #128	; 0x80
 8003002:	4b21      	ldr	r3, [pc, #132]	; (8003088 <HAL_UART_MspInit+0xbc>)
 8003004:	01c9      	lsls	r1, r1, #7
 8003006:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003008:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART1_CLK_ENABLE();
 800300a:	430a      	orrs	r2, r1
 800300c:	641a      	str	r2, [r3, #64]	; 0x40
 800300e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003010:	2500      	movs	r5, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8003012:	400a      	ands	r2, r1
 8003014:	9201      	str	r2, [sp, #4]
 8003016:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003018:	2201      	movs	r2, #1
 800301a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800301c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800301e:	4311      	orrs	r1, r2
 8003020:	6359      	str	r1, [r3, #52]	; 0x34
 8003022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003024:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003026:	4013      	ands	r3, r2
 8003028:	9302      	str	r3, [sp, #8]
 800302a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 800302c:	23c0      	movs	r3, #192	; 0xc0
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003032:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003034:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003036:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003038:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800303a:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800303c:	f000 fede 	bl	8003dfc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8003040:	4c12      	ldr	r4, [pc, #72]	; (800308c <HAL_UART_MspInit+0xc0>)
 8003042:	4b13      	ldr	r3, [pc, #76]	; (8003090 <HAL_UART_MspInit+0xc4>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003044:	0020      	movs	r0, r4
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8003046:	6023      	str	r3, [r4, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003048:	2332      	movs	r3, #50	; 0x32
 800304a:	6063      	str	r3, [r4, #4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800304c:	334e      	adds	r3, #78	; 0x4e
 800304e:	6123      	str	r3, [r4, #16]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003050:	3b60      	subs	r3, #96	; 0x60
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003052:	60a5      	str	r5, [r4, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003054:	60e5      	str	r5, [r4, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003056:	6165      	str	r5, [r4, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003058:	61a5      	str	r5, [r4, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800305a:	61e3      	str	r3, [r4, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800305c:	6225      	str	r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800305e:	f000 fd59 	bl	8003b14 <HAL_DMA_Init>
 8003062:	42a8      	cmp	r0, r5
 8003064:	d001      	beq.n	800306a <HAL_UART_MspInit+0x9e>
    {
      Error_Handler();
 8003066:	f7ff fe5b 	bl	8002d20 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800306a:	2200      	movs	r2, #0
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800306c:	1d33      	adds	r3, r6, #4
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800306e:	201b      	movs	r0, #27
 8003070:	0011      	movs	r1, r2
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003072:	67dc      	str	r4, [r3, #124]	; 0x7c
 8003074:	62a6      	str	r6, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003076:	f000 fcc3 	bl	8003a00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800307a:	201b      	movs	r0, #27
 800307c:	f000 fcea 	bl	8003a54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003080:	b00e      	add	sp, #56	; 0x38
 8003082:	bd70      	pop	{r4, r5, r6, pc}
 8003084:	40013800 	.word	0x40013800
 8003088:	40021000 	.word	0x40021000
 800308c:	200002d4 	.word	0x200002d4
 8003090:	40020008 	.word	0x40020008

08003094 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003094:	e7fe      	b.n	8003094 <NMI_Handler>

08003096 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003096:	e7fe      	b.n	8003096 <HardFault_Handler>

08003098 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003098:	4770      	bx	lr

0800309a <PendSV_Handler>:
 800309a:	4770      	bx	lr

0800309c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800309c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800309e:	f000 f8e1 	bl	8003264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  button_interrupt();
 80030a2:	f003 fe3f 	bl	8006d24 <button_interrupt>
  /* USER CODE END SysTick_IRQn 1 */
}
 80030a6:	bd10      	pop	{r4, pc}

080030a8 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80030a8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80030aa:	4802      	ldr	r0, [pc, #8]	; (80030b4 <RTC_TAMP_IRQHandler+0xc>)
 80030ac:	f001 fefe 	bl	8004eac <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80030b0:	bd10      	pop	{r4, pc}
 80030b2:	46c0      	nop			; (mov r8, r8)
 80030b4:	20000384 	.word	0x20000384

080030b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80030b8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80030ba:	4802      	ldr	r0, [pc, #8]	; (80030c4 <DMA1_Channel1_IRQHandler+0xc>)
 80030bc:	f000 fe46 	bl	8003d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80030c0:	bd10      	pop	{r4, pc}
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	200002d4 	.word	0x200002d4

080030c8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80030c8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80030ca:	4802      	ldr	r0, [pc, #8]	; (80030d4 <DMA1_Channel2_3_IRQHandler+0xc>)
 80030cc:	f000 fe3e 	bl	8003d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80030d0:	bd10      	pop	{r4, pc}
 80030d2:	46c0      	nop			; (mov r8, r8)
 80030d4:	20000278 	.word	0x20000278

080030d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80030d8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80030da:	4802      	ldr	r0, [pc, #8]	; (80030e4 <USART1_IRQHandler+0xc>)
 80030dc:	f002 fff0 	bl	80060c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80030e0:	bd10      	pop	{r4, pc}
 80030e2:	46c0      	nop			; (mov r8, r8)
 80030e4:	200004ac 	.word	0x200004ac

080030e8 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80030e8:	2001      	movs	r0, #1
 80030ea:	4770      	bx	lr

080030ec <_kill>:

int _kill(int pid, int sig)
{
 80030ec:	b510      	push	{r4, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80030ee:	f005 ffbb 	bl	8009068 <__errno>
 80030f2:	2316      	movs	r3, #22
 80030f4:	6003      	str	r3, [r0, #0]
  return -1;
 80030f6:	2001      	movs	r0, #1
}
 80030f8:	4240      	negs	r0, r0
 80030fa:	bd10      	pop	{r4, pc}

080030fc <_exit>:

void _exit (int status)
{
 80030fc:	b510      	push	{r4, lr}
  errno = EINVAL;
 80030fe:	f005 ffb3 	bl	8009068 <__errno>
 8003102:	2316      	movs	r3, #22
 8003104:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8003106:	e7fe      	b.n	8003106 <_exit+0xa>

08003108 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003108:	b570      	push	{r4, r5, r6, lr}
 800310a:	000e      	movs	r6, r1
 800310c:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800310e:	2500      	movs	r5, #0
 8003110:	42a5      	cmp	r5, r4
 8003112:	db01      	blt.n	8003118 <_read+0x10>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8003114:	0020      	movs	r0, r4
 8003116:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8003118:	e000      	b.n	800311c <_read+0x14>
 800311a:	bf00      	nop
 800311c:	5570      	strb	r0, [r6, r5]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800311e:	3501      	adds	r5, #1
 8003120:	e7f6      	b.n	8003110 <_read+0x8>

08003122 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003122:	b570      	push	{r4, r5, r6, lr}
 8003124:	000e      	movs	r6, r1
 8003126:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003128:	2500      	movs	r5, #0
 800312a:	42a5      	cmp	r5, r4
 800312c:	db01      	blt.n	8003132 <_write+0x10>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 800312e:	0020      	movs	r0, r4
 8003130:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8003132:	5d70      	ldrb	r0, [r6, r5]
 8003134:	e000      	b.n	8003138 <_write+0x16>
 8003136:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003138:	3501      	adds	r5, #1
 800313a:	e7f6      	b.n	800312a <_write+0x8>

0800313c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 800313c:	2001      	movs	r0, #1
}
 800313e:	4240      	negs	r0, r0
 8003140:	4770      	bx	lr

08003142 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8003142:	2380      	movs	r3, #128	; 0x80
 8003144:	019b      	lsls	r3, r3, #6
  return 0;
}
 8003146:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8003148:	604b      	str	r3, [r1, #4]
}
 800314a:	4770      	bx	lr

0800314c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 800314c:	2001      	movs	r0, #1
 800314e:	4770      	bx	lr

08003150 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8003150:	2000      	movs	r0, #0
 8003152:	4770      	bx	lr

08003154 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003154:	490b      	ldr	r1, [pc, #44]	; (8003184 <_sbrk+0x30>)
 8003156:	4a0c      	ldr	r2, [pc, #48]	; (8003188 <_sbrk+0x34>)
{
 8003158:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800315a:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800315c:	490b      	ldr	r1, [pc, #44]	; (800318c <_sbrk+0x38>)
{
 800315e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8003160:	6808      	ldr	r0, [r1, #0]
 8003162:	2800      	cmp	r0, #0
 8003164:	d101      	bne.n	800316a <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8003166:	480a      	ldr	r0, [pc, #40]	; (8003190 <_sbrk+0x3c>)
 8003168:	6008      	str	r0, [r1, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800316a:	6808      	ldr	r0, [r1, #0]
 800316c:	18c3      	adds	r3, r0, r3
 800316e:	4293      	cmp	r3, r2
 8003170:	d906      	bls.n	8003180 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8003172:	f005 ff79 	bl	8009068 <__errno>
 8003176:	230c      	movs	r3, #12
 8003178:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800317a:	2001      	movs	r0, #1
 800317c:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800317e:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8003180:	600b      	str	r3, [r1, #0]
  return (void *)prev_heap_end;
 8003182:	e7fc      	b.n	800317e <_sbrk+0x2a>
 8003184:	00000400 	.word	0x00000400
 8003188:	20002000 	.word	0x20002000
 800318c:	20000540 	.word	0x20000540
 8003190:	20000748 	.word	0x20000748

08003194 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003194:	4770      	bx	lr
	...

08003198 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
   ldr   r0, =_estack
 8003198:	480d      	ldr	r0, [pc, #52]	; (80031d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800319a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800319c:	f7ff fffa 	bl	8003194 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031a0:	480c      	ldr	r0, [pc, #48]	; (80031d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80031a2:	490d      	ldr	r1, [pc, #52]	; (80031d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80031a4:	4a0d      	ldr	r2, [pc, #52]	; (80031dc <LoopForever+0xe>)
  movs r3, #0
 80031a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031a8:	e002      	b.n	80031b0 <LoopCopyDataInit>

080031aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031ae:	3304      	adds	r3, #4

080031b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031b4:	d3f9      	bcc.n	80031aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031b6:	4a0a      	ldr	r2, [pc, #40]	; (80031e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80031b8:	4c0a      	ldr	r4, [pc, #40]	; (80031e4 <LoopForever+0x16>)
  movs r3, #0
 80031ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031bc:	e001      	b.n	80031c2 <LoopFillZerobss>

080031be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031c0:	3204      	adds	r2, #4

080031c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031c4:	d3fb      	bcc.n	80031be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80031c6:	f005 ff55 	bl	8009074 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80031ca:	f7ff fb75 	bl	80028b8 <main>

080031ce <LoopForever>:

LoopForever:
  b LoopForever
 80031ce:	e7fe      	b.n	80031ce <LoopForever>
   ldr   r0, =_estack
 80031d0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80031d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031d8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80031dc:	0800deac 	.word	0x0800deac
  ldr r2, =_sbss
 80031e0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80031e4:	20000744 	.word	0x20000744

080031e8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031e8:	e7fe      	b.n	80031e8 <ADC1_IRQHandler>
	...

080031ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031ec:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80031ee:	4b10      	ldr	r3, [pc, #64]	; (8003230 <HAL_InitTick+0x44>)
{
 80031f0:	0005      	movs	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 80031f2:	7819      	ldrb	r1, [r3, #0]
 80031f4:	2900      	cmp	r1, #0
 80031f6:	d101      	bne.n	80031fc <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80031f8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80031fa:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80031fc:	20fa      	movs	r0, #250	; 0xfa
 80031fe:	0080      	lsls	r0, r0, #2
 8003200:	f7fc ff9a 	bl	8000138 <__udivsi3>
 8003204:	4c0b      	ldr	r4, [pc, #44]	; (8003234 <HAL_InitTick+0x48>)
 8003206:	0001      	movs	r1, r0
 8003208:	6820      	ldr	r0, [r4, #0]
 800320a:	f7fc ff95 	bl	8000138 <__udivsi3>
 800320e:	f000 fc2d 	bl	8003a6c <HAL_SYSTICK_Config>
 8003212:	1e04      	subs	r4, r0, #0
 8003214:	d1f0      	bne.n	80031f8 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003216:	2d03      	cmp	r5, #3
 8003218:	d8ee      	bhi.n	80031f8 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800321a:	0002      	movs	r2, r0
 800321c:	2001      	movs	r0, #1
 800321e:	0029      	movs	r1, r5
 8003220:	4240      	negs	r0, r0
 8003222:	f000 fbed 	bl	8003a00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003226:	4b04      	ldr	r3, [pc, #16]	; (8003238 <HAL_InitTick+0x4c>)
 8003228:	0020      	movs	r0, r4
 800322a:	601d      	str	r5, [r3, #0]
  return status;
 800322c:	e7e5      	b.n	80031fa <HAL_InitTick+0xe>
 800322e:	46c0      	nop			; (mov r8, r8)
 8003230:	20000008 	.word	0x20000008
 8003234:	20000004 	.word	0x20000004
 8003238:	2000000c 	.word	0x2000000c

0800323c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800323c:	2380      	movs	r3, #128	; 0x80
 800323e:	4a08      	ldr	r2, [pc, #32]	; (8003260 <HAL_Init+0x24>)
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	6811      	ldr	r1, [r2, #0]
{
 8003244:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003246:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003248:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800324a:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800324c:	f7ff ffce 	bl	80031ec <HAL_InitTick>
 8003250:	1e04      	subs	r4, r0, #0
 8003252:	d103      	bne.n	800325c <HAL_Init+0x20>
  HAL_MspInit();
 8003254:	f7ff fd66 	bl	8002d24 <HAL_MspInit>
}
 8003258:	0020      	movs	r0, r4
 800325a:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800325c:	2401      	movs	r4, #1
 800325e:	e7fb      	b.n	8003258 <HAL_Init+0x1c>
 8003260:	40022000 	.word	0x40022000

08003264 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8003264:	4a03      	ldr	r2, [pc, #12]	; (8003274 <HAL_IncTick+0x10>)
 8003266:	4b04      	ldr	r3, [pc, #16]	; (8003278 <HAL_IncTick+0x14>)
 8003268:	6811      	ldr	r1, [r2, #0]
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	185b      	adds	r3, r3, r1
 800326e:	6013      	str	r3, [r2, #0]
}
 8003270:	4770      	bx	lr
 8003272:	46c0      	nop			; (mov r8, r8)
 8003274:	20000544 	.word	0x20000544
 8003278:	20000008 	.word	0x20000008

0800327c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800327c:	4b01      	ldr	r3, [pc, #4]	; (8003284 <HAL_GetTick+0x8>)
 800327e:	6818      	ldr	r0, [r3, #0]
}
 8003280:	4770      	bx	lr
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	20000544 	.word	0x20000544

08003288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003288:	b570      	push	{r4, r5, r6, lr}
 800328a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800328c:	f7ff fff6 	bl	800327c <HAL_GetTick>
 8003290:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003292:	1c63      	adds	r3, r4, #1
 8003294:	d002      	beq.n	800329c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003296:	4b04      	ldr	r3, [pc, #16]	; (80032a8 <HAL_Delay+0x20>)
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800329c:	f7ff ffee 	bl	800327c <HAL_GetTick>
 80032a0:	1b40      	subs	r0, r0, r5
 80032a2:	42a0      	cmp	r0, r4
 80032a4:	d3fa      	bcc.n	800329c <HAL_Delay+0x14>
  {
  }
}
 80032a6:	bd70      	pop	{r4, r5, r6, pc}
 80032a8:	20000008 	.word	0x20000008

080032ac <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032ac:	6880      	ldr	r0, [r0, #8]
 80032ae:	0740      	lsls	r0, r0, #29
 80032b0:	0fc0      	lsrs	r0, r0, #31
}
 80032b2:	4770      	bx	lr

080032b4 <HAL_ADC_Init>:
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr1 = 0UL;
  uint32_t tmp_cfgr2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80032b4:	2300      	movs	r3, #0
{
 80032b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032b8:	b085      	sub	sp, #20
 80032ba:	0004      	movs	r4, r0

  /* Check ADC handle */
  if (hadc == NULL)
  {
    return HAL_ERROR;
 80032bc:	2601      	movs	r6, #1
  __IO uint32_t wait_loop_index = 0UL;
 80032be:	9303      	str	r3, [sp, #12]
  if (hadc == NULL)
 80032c0:	4298      	cmp	r0, r3
 80032c2:	d100      	bne.n	80032c6 <HAL_ADC_Init+0x12>
 80032c4:	e0b4      	b.n	8003430 <HAL_ADC_Init+0x17c>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80032c6:	6d85      	ldr	r5, [r0, #88]	; 0x58
 80032c8:	429d      	cmp	r5, r3
 80032ca:	d105      	bne.n	80032d8 <HAL_ADC_Init+0x24>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032cc:	f7ff fd42 	bl	8002d54 <HAL_ADC_MspInit>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80032d0:	0023      	movs	r3, r4
 80032d2:	3354      	adds	r3, #84	; 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 80032d4:	65e5      	str	r5, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 80032d6:	701d      	strb	r5, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80032d8:	2380      	movs	r3, #128	; 0x80
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032da:	6825      	ldr	r5, [r4, #0]
 80032dc:	055b      	lsls	r3, r3, #21
 80032de:	68aa      	ldr	r2, [r5, #8]
 80032e0:	421a      	tst	r2, r3
 80032e2:	d100      	bne.n	80032e6 <HAL_ADC_Init+0x32>
 80032e4:	e0a7      	b.n	8003436 <HAL_ADC_Init+0x182>
 80032e6:	68ab      	ldr	r3, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032e8:	2600      	movs	r6, #0
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	d407      	bmi.n	80032fe <HAL_ADC_Init+0x4a>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ee:	2310      	movs	r3, #16

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032f0:	2601      	movs	r6, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032f2:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80032f4:	4313      	orrs	r3, r2
 80032f6:	65a3      	str	r3, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032f8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80032fa:	4333      	orrs	r3, r6
 80032fc:	65e3      	str	r3, [r4, #92]	; 0x5c

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032fe:	0028      	movs	r0, r5
 8003300:	f7ff ffd4 	bl	80032ac <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003304:	2210      	movs	r2, #16
 8003306:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003308:	4013      	ands	r3, r2
 800330a:	4303      	orrs	r3, r0
 800330c:	d000      	beq.n	8003310 <HAL_ADC_Init+0x5c>
 800330e:	e0cd      	b.n	80034ac <HAL_ADC_Init+0x1f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003310:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003312:	4b69      	ldr	r3, [pc, #420]	; (80034b8 <HAL_ADC_Init+0x204>)
 8003314:	401a      	ands	r2, r3
 8003316:	3306      	adds	r3, #6
 8003318:	33ff      	adds	r3, #255	; 0xff
 800331a:	4313      	orrs	r3, r2
 800331c:	65a3      	str	r3, [r4, #88]	; 0x58
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
                    hadc->Init.DataAlign                                           |
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800331e:	6922      	ldr	r2, [r4, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003320:	68ab      	ldr	r3, [r5, #8]
 8003322:	9201      	str	r2, [sp, #4]
 8003324:	07db      	lsls	r3, r3, #31
 8003326:	d462      	bmi.n	80033ee <HAL_ADC_Init+0x13a>
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003328:	6b27      	ldr	r7, [r4, #48]	; 0x30
 800332a:	68e1      	ldr	r1, [r4, #12]
 800332c:	1e7b      	subs	r3, r7, #1
 800332e:	419f      	sbcs	r7, r3
 8003330:	68a3      	ldr	r3, [r4, #8]
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003332:	7ea2      	ldrb	r2, [r4, #26]
 8003334:	430b      	orrs	r3, r1
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003336:	7e21      	ldrb	r1, [r4, #24]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003338:	033f      	lsls	r7, r7, #12
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800333a:	0389      	lsls	r1, r1, #14
 800333c:	430b      	orrs	r3, r1
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800333e:	7e61      	ldrb	r1, [r4, #25]
 8003340:	03c9      	lsls	r1, r1, #15
 8003342:	430b      	orrs	r3, r1
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003344:	0351      	lsls	r1, r2, #13
 8003346:	430b      	orrs	r3, r1
 8003348:	469c      	mov	ip, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800334a:	9b01      	ldr	r3, [sp, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	db00      	blt.n	8003352 <HAL_ADC_Init+0x9e>
 8003350:	e086      	b.n	8003460 <HAL_ADC_Init+0x1ac>
 8003352:	0059      	lsls	r1, r3, #1
 8003354:	0849      	lsrs	r1, r1, #1
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003356:	0023      	movs	r3, r4
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003358:	4660      	mov	r0, ip
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800335a:	332c      	adds	r3, #44	; 0x2c
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003360:	4303      	orrs	r3, r0
 8003362:	433b      	orrs	r3, r7
 8003364:	430b      	orrs	r3, r1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003366:	1c61      	adds	r1, r4, #1
 8003368:	7fc9      	ldrb	r1, [r1, #31]
 800336a:	2901      	cmp	r1, #1
 800336c:	d105      	bne.n	800337a <HAL_ADC_Init+0xc6>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800336e:	2a00      	cmp	r2, #0
 8003370:	d000      	beq.n	8003374 <HAL_ADC_Init+0xc0>
 8003372:	e078      	b.n	8003466 <HAL_ADC_Init+0x1b2>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8003374:	2280      	movs	r2, #128	; 0x80
 8003376:	0252      	lsls	r2, r2, #9
 8003378:	4313      	orrs	r3, r2
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800337a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800337c:	2a00      	cmp	r2, #0
 800337e:	d005      	beq.n	800338c <HAL_ADC_Init+0xd8>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003380:	21e0      	movs	r1, #224	; 0xe0
 8003382:	0049      	lsls	r1, r1, #1
 8003384:	400a      	ands	r2, r1
 8003386:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003388:	430a      	orrs	r2, r1
 800338a:	4313      	orrs	r3, r2
                      hadc->Init.ExternalTrigConvEdge);
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800338c:	68ea      	ldr	r2, [r5, #12]
 800338e:	494b      	ldr	r1, [pc, #300]	; (80034bc <HAL_ADC_Init+0x208>)
 8003390:	400a      	ands	r2, r1
 8003392:	4313      	orrs	r3, r2
 8003394:	60eb      	str	r3, [r5, #12]

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
                    hadc->Init.TriggerFrequencyMode
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003396:	0023      	movs	r3, r4
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003398:	6862      	ldr	r2, [r4, #4]
      if (hadc->Init.OversamplingMode == ENABLE)
 800339a:	333c      	adds	r3, #60	; 0x3c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800339c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
      if (hadc->Init.OversamplingMode == ENABLE)
 800339e:	781b      	ldrb	r3, [r3, #0]
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80033a0:	0f97      	lsrs	r7, r2, #30
 80033a2:	07bf      	lsls	r7, r7, #30
      if (hadc->Init.OversamplingMode == ENABLE)
 80033a4:	469c      	mov	ip, r3
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80033a6:	4339      	orrs	r1, r7
      if (hadc->Init.OversamplingMode == ENABLE)
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d108      	bne.n	80033be <HAL_ADC_Init+0x10a>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80033ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033ae:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80033b0:	4303      	orrs	r3, r0
 80033b2:	430b      	orrs	r3, r1
 80033b4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80033b6:	430b      	orrs	r3, r1
 80033b8:	4661      	mov	r1, ip
 80033ba:	433b      	orrs	r3, r7
 80033bc:	4319      	orrs	r1, r3
                      hadc->Init.Oversampling.RightBitShift |
                      hadc->Init.Oversampling.TriggeredMode
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80033be:	692b      	ldr	r3, [r5, #16]
 80033c0:	4f3f      	ldr	r7, [pc, #252]	; (80034c0 <HAL_ADC_Init+0x20c>)
 80033c2:	403b      	ands	r3, r7
 80033c4:	430b      	orrs	r3, r1
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80033c6:	2180      	movs	r1, #128	; 0x80
      MODIFY_REG(hadc->Instance->CFGR2,
 80033c8:	612b      	str	r3, [r5, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80033ca:	0053      	lsls	r3, r2, #1
 80033cc:	085b      	lsrs	r3, r3, #1
 80033ce:	05c9      	lsls	r1, r1, #23
 80033d0:	428b      	cmp	r3, r1
 80033d2:	d00c      	beq.n	80033ee <HAL_ADC_Init+0x13a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80033d4:	2380      	movs	r3, #128	; 0x80
 80033d6:	061b      	lsls	r3, r3, #24
 80033d8:	429a      	cmp	r2, r3
 80033da:	d008      	beq.n	80033ee <HAL_ADC_Init+0x13a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80033dc:	4939      	ldr	r1, [pc, #228]	; (80034c4 <HAL_ADC_Init+0x210>)
 80033de:	4f3a      	ldr	r7, [pc, #232]	; (80034c8 <HAL_ADC_Init+0x214>)
 80033e0:	680b      	ldr	r3, [r1, #0]
 80033e2:	403b      	ands	r3, r7
 80033e4:	27f0      	movs	r7, #240	; 0xf0
 80033e6:	03bf      	lsls	r7, r7, #14
 80033e8:	403a      	ands	r2, r7
 80033ea:	4313      	orrs	r3, r2
 80033ec:	600b      	str	r3, [r1, #0]
  MODIFY_REG(ADCx->SMPR,
 80033ee:	2107      	movs	r1, #7
 80033f0:	2770      	movs	r7, #112	; 0x70
 80033f2:	696b      	ldr	r3, [r5, #20]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80033f4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80033f6:	438b      	bics	r3, r1
 80033f8:	4313      	orrs	r3, r2
 80033fa:	616b      	str	r3, [r5, #20]
 80033fc:	6969      	ldr	r1, [r5, #20]
 80033fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003400:	43b9      	bics	r1, r7
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	430b      	orrs	r3, r1
 8003406:	616b      	str	r3, [r5, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003408:	9b01      	ldr	r3, [sp, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d133      	bne.n	8003476 <HAL_ADC_Init+0x1c2>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800340e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8003410:	3b10      	subs	r3, #16
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003412:	430b      	orrs	r3, r1
 8003414:	62ab      	str	r3, [r5, #40]	; 0x28
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003416:	2107      	movs	r1, #7
 8003418:	696b      	ldr	r3, [r5, #20]
 800341a:	400b      	ands	r3, r1
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800341c:	429a      	cmp	r2, r3
 800341e:	d13a      	bne.n	8003496 <HAL_ADC_Init+0x1e2>
        == hadc->Init.SamplingTimeCommon1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003420:	2300      	movs	r3, #0
 8003422:	65e3      	str	r3, [r4, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003424:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003426:	3303      	adds	r3, #3
 8003428:	439a      	bics	r2, r3
 800342a:	3b02      	subs	r3, #2
 800342c:	4313      	orrs	r3, r2
 800342e:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
  }

  return tmp_hal_status;
}
 8003430:	0030      	movs	r0, r6
 8003432:	b005      	add	sp, #20
 8003434:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(ADCx->CR,
 8003436:	68aa      	ldr	r2, [r5, #8]
 8003438:	4924      	ldr	r1, [pc, #144]	; (80034cc <HAL_ADC_Init+0x218>)
 800343a:	400a      	ands	r2, r1
 800343c:	4313      	orrs	r3, r2
 800343e:	60ab      	str	r3, [r5, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003440:	4b23      	ldr	r3, [pc, #140]	; (80034d0 <HAL_ADC_Init+0x21c>)
 8003442:	4924      	ldr	r1, [pc, #144]	; (80034d4 <HAL_ADC_Init+0x220>)
 8003444:	6818      	ldr	r0, [r3, #0]
 8003446:	f7fc fe77 	bl	8000138 <__udivsi3>
 800344a:	3001      	adds	r0, #1
 800344c:	0040      	lsls	r0, r0, #1
 800344e:	9003      	str	r0, [sp, #12]
    while (wait_loop_index != 0UL)
 8003450:	9b03      	ldr	r3, [sp, #12]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d100      	bne.n	8003458 <HAL_ADC_Init+0x1a4>
 8003456:	e746      	b.n	80032e6 <HAL_ADC_Init+0x32>
      wait_loop_index--;
 8003458:	9b03      	ldr	r3, [sp, #12]
 800345a:	3b01      	subs	r3, #1
 800345c:	9303      	str	r3, [sp, #12]
 800345e:	e7f7      	b.n	8003450 <HAL_ADC_Init+0x19c>
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003460:	2180      	movs	r1, #128	; 0x80
 8003462:	0389      	lsls	r1, r1, #14
 8003464:	e777      	b.n	8003356 <HAL_ADC_Init+0xa2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003466:	2220      	movs	r2, #32
 8003468:	6da7      	ldr	r7, [r4, #88]	; 0x58
 800346a:	433a      	orrs	r2, r7
 800346c:	65a2      	str	r2, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800346e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003470:	4311      	orrs	r1, r2
 8003472:	65e1      	str	r1, [r4, #92]	; 0x5c
 8003474:	e781      	b.n	800337a <HAL_ADC_Init+0xc6>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003476:	2380      	movs	r3, #128	; 0x80
 8003478:	9901      	ldr	r1, [sp, #4]
 800347a:	039b      	lsls	r3, r3, #14
 800347c:	4299      	cmp	r1, r3
 800347e:	d1ca      	bne.n	8003416 <HAL_ADC_Init+0x162>
      MODIFY_REG(hadc->Instance->CHSELR,
 8003480:	211c      	movs	r1, #28
 8003482:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003484:	69e3      	ldr	r3, [r4, #28]
 8003486:	3b01      	subs	r3, #1
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	400b      	ands	r3, r1
 800348c:	392c      	subs	r1, #44	; 0x2c
 800348e:	4099      	lsls	r1, r3
 8003490:	000b      	movs	r3, r1
 8003492:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003494:	e7bd      	b.n	8003412 <HAL_ADC_Init+0x15e>
      ADC_STATE_CLR_SET(hadc->State,
 8003496:	2312      	movs	r3, #18
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003498:	2601      	movs	r6, #1
      ADC_STATE_CLR_SET(hadc->State,
 800349a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800349c:	439a      	bics	r2, r3
 800349e:	3b02      	subs	r3, #2
 80034a0:	4313      	orrs	r3, r2
 80034a2:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034a4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80034a6:	4333      	orrs	r3, r6
 80034a8:	65e3      	str	r3, [r4, #92]	; 0x5c
      tmp_hal_status = HAL_ERROR;
 80034aa:	e7c1      	b.n	8003430 <HAL_ADC_Init+0x17c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 80034ae:	2601      	movs	r6, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034b0:	431a      	orrs	r2, r3
 80034b2:	65a2      	str	r2, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 80034b4:	e7bc      	b.n	8003430 <HAL_ADC_Init+0x17c>
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	fffffefd 	.word	0xfffffefd
 80034bc:	ffde0201 	.word	0xffde0201
 80034c0:	1ffffc02 	.word	0x1ffffc02
 80034c4:	40012708 	.word	0x40012708
 80034c8:	ffc3ffff 	.word	0xffc3ffff
 80034cc:	6fffffe8 	.word	0x6fffffe8
 80034d0:	20000004 	.word	0x20000004
 80034d4:	00030d40 	.word	0x00030d40

080034d8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80034d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80034da:	6946      	ldr	r6, [r0, #20]
{
 80034dc:	0004      	movs	r4, r0
 80034de:	000f      	movs	r7, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80034e0:	2e08      	cmp	r6, #8
 80034e2:	d00a      	beq.n	80034fa <HAL_ADC_PollForConversion+0x22>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80034e4:	6803      	ldr	r3, [r0, #0]
 80034e6:	2001      	movs	r0, #1
 80034e8:	68db      	ldr	r3, [r3, #12]

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80034ea:	2604      	movs	r6, #4
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80034ec:	4203      	tst	r3, r0
 80034ee:	d004      	beq.n	80034fa <HAL_ADC_PollForConversion+0x22>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034f0:	2320      	movs	r3, #32
 80034f2:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80034f4:	4313      	orrs	r3, r2
 80034f6:	65a3      	str	r3, [r4, #88]	; 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
  }

  /* Return function status */
  return HAL_OK;
}
 80034f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 80034fa:	f7ff febf 	bl	800327c <HAL_GetTick>
 80034fe:	9001      	str	r0, [sp, #4]
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003500:	6825      	ldr	r5, [r4, #0]
 8003502:	682b      	ldr	r3, [r5, #0]
 8003504:	421e      	tst	r6, r3
 8003506:	d025      	beq.n	8003554 <HAL_ADC_PollForConversion+0x7c>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003508:	2380      	movs	r3, #128	; 0x80
 800350a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4313      	orrs	r3, r2
 8003510:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003512:	23c0      	movs	r3, #192	; 0xc0
 8003514:	68ea      	ldr	r2, [r5, #12]
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	421a      	tst	r2, r3
 800351a:	d115      	bne.n	8003548 <HAL_ADC_PollForConversion+0x70>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800351c:	7ea3      	ldrb	r3, [r4, #26]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d112      	bne.n	8003548 <HAL_ADC_PollForConversion+0x70>
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003522:	682b      	ldr	r3, [r5, #0]
 8003524:	071b      	lsls	r3, r3, #28
 8003526:	d50f      	bpl.n	8003548 <HAL_ADC_PollForConversion+0x70>
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003528:	0028      	movs	r0, r5
 800352a:	f7ff febf 	bl	80032ac <LL_ADC_REG_IsConversionOngoing>
 800352e:	2800      	cmp	r0, #0
 8003530:	d128      	bne.n	8003584 <HAL_ADC_PollForConversion+0xac>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003532:	220c      	movs	r2, #12
 8003534:	686b      	ldr	r3, [r5, #4]
 8003536:	4393      	bics	r3, r2
 8003538:	606b      	str	r3, [r5, #4]
        ADC_STATE_CLR_SET(hadc->State,
 800353a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800353c:	4b17      	ldr	r3, [pc, #92]	; (800359c <HAL_ADC_PollForConversion+0xc4>)
 800353e:	401a      	ands	r2, r3
 8003540:	3304      	adds	r3, #4
 8003542:	33ff      	adds	r3, #255	; 0xff
 8003544:	4313      	orrs	r3, r2
 8003546:	65a3      	str	r3, [r4, #88]	; 0x58
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003548:	7e20      	ldrb	r0, [r4, #24]
 800354a:	2800      	cmp	r0, #0
 800354c:	d123      	bne.n	8003596 <HAL_ADC_PollForConversion+0xbe>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800354e:	230c      	movs	r3, #12
 8003550:	602b      	str	r3, [r5, #0]
 8003552:	e7d1      	b.n	80034f8 <HAL_ADC_PollForConversion+0x20>
    if (Timeout != HAL_MAX_DELAY)
 8003554:	1c7b      	adds	r3, r7, #1
 8003556:	d0d4      	beq.n	8003502 <HAL_ADC_PollForConversion+0x2a>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003558:	f7ff fe90 	bl	800327c <HAL_GetTick>
 800355c:	9b01      	ldr	r3, [sp, #4]
 800355e:	1ac0      	subs	r0, r0, r3
 8003560:	42b8      	cmp	r0, r7
 8003562:	d801      	bhi.n	8003568 <HAL_ADC_PollForConversion+0x90>
 8003564:	2f00      	cmp	r7, #0
 8003566:	d1cb      	bne.n	8003500 <HAL_ADC_PollForConversion+0x28>
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003568:	0032      	movs	r2, r6
 800356a:	6823      	ldr	r3, [r4, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	401a      	ands	r2, r3
 8003570:	421e      	tst	r6, r3
 8003572:	d1c5      	bne.n	8003500 <HAL_ADC_PollForConversion+0x28>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003574:	2304      	movs	r3, #4
 8003576:	6da1      	ldr	r1, [r4, #88]	; 0x58
          __HAL_UNLOCK(hadc);
 8003578:	3454      	adds	r4, #84	; 0x54
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800357a:	430b      	orrs	r3, r1
 800357c:	6063      	str	r3, [r4, #4]
          return HAL_TIMEOUT;
 800357e:	2003      	movs	r0, #3
          __HAL_UNLOCK(hadc);
 8003580:	7022      	strb	r2, [r4, #0]
          return HAL_TIMEOUT;
 8003582:	e7b9      	b.n	80034f8 <HAL_ADC_PollForConversion+0x20>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003584:	2320      	movs	r3, #32
 8003586:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003588:	4313      	orrs	r3, r2
 800358a:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800358c:	2301      	movs	r3, #1
 800358e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003590:	4313      	orrs	r3, r2
 8003592:	65e3      	str	r3, [r4, #92]	; 0x5c
 8003594:	e7d8      	b.n	8003548 <HAL_ADC_PollForConversion+0x70>
  return HAL_OK;
 8003596:	2000      	movs	r0, #0
 8003598:	e7ae      	b.n	80034f8 <HAL_ADC_PollForConversion+0x20>
 800359a:	46c0      	nop			; (mov r8, r8)
 800359c:	fffffefe 	.word	0xfffffefe

080035a0 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80035a0:	6803      	ldr	r3, [r0, #0]
 80035a2:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80035a4:	4770      	bx	lr
	...

080035a8 <HAL_ADC_ConfigChannel>:
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80035a8:	2300      	movs	r3, #0
{
 80035aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035ac:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0UL;
 80035ae:	9303      	str	r3, [sp, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80035b0:	0003      	movs	r3, r0
{
 80035b2:	9100      	str	r1, [sp, #0]
  __HAL_LOCK(hadc);
 80035b4:	3354      	adds	r3, #84	; 0x54
 80035b6:	781a      	ldrb	r2, [r3, #0]
{
 80035b8:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 80035ba:	2002      	movs	r0, #2
 80035bc:	2a01      	cmp	r2, #1
 80035be:	d100      	bne.n	80035c2 <HAL_ADC_ConfigChannel+0x1a>
 80035c0:	e0bf      	b.n	8003742 <HAL_ADC_ConfigChannel+0x19a>
 80035c2:	2201      	movs	r2, #1
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80035c4:	692f      	ldr	r7, [r5, #16]
  __HAL_LOCK(hadc);
 80035c6:	701a      	strb	r2, [r3, #0]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035c8:	682e      	ldr	r6, [r5, #0]
 80035ca:	0030      	movs	r0, r6
 80035cc:	f7ff fe6e 	bl	80032ac <LL_ADC_REG_IsConversionOngoing>
 80035d0:	2800      	cmp	r0, #0
 80035d2:	d000      	beq.n	80035d6 <HAL_ADC_ConfigChannel+0x2e>
 80035d4:	e0ea      	b.n	80037ac <HAL_ADC_ConfigChannel+0x204>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80035d6:	9b00      	ldr	r3, [sp, #0]
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80035d8:	2204      	movs	r2, #4
    if (pConfig->Rank != ADC_RANK_NONE)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2180      	movs	r1, #128	; 0x80
 80035de:	469c      	mov	ip, r3
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80035e0:	4397      	bics	r7, r2
    if (pConfig->Rank != ADC_RANK_NONE)
 80035e2:	4662      	mov	r2, ip
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80035e4:	9b00      	ldr	r3, [sp, #0]
 80035e6:	0609      	lsls	r1, r1, #24
 80035e8:	681b      	ldr	r3, [r3, #0]
    if (pConfig->Rank != ADC_RANK_NONE)
 80035ea:	2a02      	cmp	r2, #2
 80035ec:	d100      	bne.n	80035f0 <HAL_ADC_ConfigChannel+0x48>
 80035ee:	e0b1      	b.n	8003754 <HAL_ADC_ConfigChannel+0x1ac>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80035f0:	035a      	lsls	r2, r3, #13
 80035f2:	0b52      	lsrs	r2, r2, #13
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80035f4:	428f      	cmp	r7, r1
 80035f6:	d110      	bne.n	800361a <HAL_ADC_ConfigChannel+0x72>
 80035f8:	6ab1      	ldr	r1, [r6, #40]	; 0x28
  MODIFY_REG(ADCx->CHSELR,
 80035fa:	430a      	orrs	r2, r1
 80035fc:	62b2      	str	r2, [r6, #40]	; 0x28
  MODIFY_REG(ADCx->SMPR,
 80035fe:	9a00      	ldr	r2, [sp, #0]
 8003600:	6970      	ldr	r0, [r6, #20]
 8003602:	6892      	ldr	r2, [r2, #8]
 8003604:	0219      	lsls	r1, r3, #8
 8003606:	4c6c      	ldr	r4, [pc, #432]	; (80037b8 <HAL_ADC_ConfigChannel+0x210>)
 8003608:	400a      	ands	r2, r1
 800360a:	4022      	ands	r2, r4
 800360c:	4388      	bics	r0, r1
 800360e:	4302      	orrs	r2, r0
 8003610:	6172      	str	r2, [r6, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003612:	2b00      	cmp	r3, #0
 8003614:	db60      	blt.n	80036d8 <HAL_ADC_ConfigChannel+0x130>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003616:	2000      	movs	r0, #0
}
 8003618:	e090      	b.n	800373c <HAL_ADC_ConfigChannel+0x194>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800361a:	211f      	movs	r1, #31
 800361c:	4667      	mov	r7, ip
 800361e:	400f      	ands	r7, r1
 8003620:	3910      	subs	r1, #16
 8003622:	40b9      	lsls	r1, r7
 8003624:	43cc      	mvns	r4, r1
 8003626:	9401      	str	r4, [sp, #4]
 8003628:	6e2c      	ldr	r4, [r5, #96]	; 0x60
 800362a:	438c      	bics	r4, r1
 800362c:	0021      	movs	r1, r4
 800362e:	2a00      	cmp	r2, #0
 8003630:	d112      	bne.n	8003658 <HAL_ADC_ConfigChannel+0xb0>
 8003632:	0e98      	lsrs	r0, r3, #26
 8003634:	321f      	adds	r2, #31
 8003636:	4010      	ands	r0, r2
 8003638:	40b8      	lsls	r0, r7
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800363a:	4662      	mov	r2, ip
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800363c:	4308      	orrs	r0, r1
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800363e:	0892      	lsrs	r2, r2, #2
 8003640:	69e9      	ldr	r1, [r5, #28]
 8003642:	3201      	adds	r2, #1
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003644:	6628      	str	r0, [r5, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003646:	428a      	cmp	r2, r1
 8003648:	d8d9      	bhi.n	80035fe <HAL_ADC_ConfigChannel+0x56>
  MODIFY_REG(ADCx->CHSELR,
 800364a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800364c:	9801      	ldr	r0, [sp, #4]
 800364e:	009a      	lsls	r2, r3, #2
 8003650:	0f12      	lsrs	r2, r2, #28
 8003652:	40ba      	lsls	r2, r7
 8003654:	4001      	ands	r1, r0
 8003656:	e7d0      	b.n	80035fa <HAL_ADC_ConfigChannel+0x52>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003658:	2201      	movs	r2, #1
 800365a:	4213      	tst	r3, r2
 800365c:	d1ec      	bne.n	8003638 <HAL_ADC_ConfigChannel+0x90>
 800365e:	1892      	adds	r2, r2, r2
 8003660:	2001      	movs	r0, #1
 8003662:	4213      	tst	r3, r2
 8003664:	d1e8      	bne.n	8003638 <HAL_ADC_ConfigChannel+0x90>
 8003666:	0010      	movs	r0, r2
 8003668:	3202      	adds	r2, #2
 800366a:	4213      	tst	r3, r2
 800366c:	d1e4      	bne.n	8003638 <HAL_ADC_ConfigChannel+0x90>
 800366e:	3001      	adds	r0, #1
 8003670:	071a      	lsls	r2, r3, #28
 8003672:	d4e1      	bmi.n	8003638 <HAL_ADC_ConfigChannel+0x90>
 8003674:	3001      	adds	r0, #1
 8003676:	06da      	lsls	r2, r3, #27
 8003678:	d4de      	bmi.n	8003638 <HAL_ADC_ConfigChannel+0x90>
 800367a:	3001      	adds	r0, #1
 800367c:	069a      	lsls	r2, r3, #26
 800367e:	d4db      	bmi.n	8003638 <HAL_ADC_ConfigChannel+0x90>
 8003680:	3001      	adds	r0, #1
 8003682:	065a      	lsls	r2, r3, #25
 8003684:	d4d8      	bmi.n	8003638 <HAL_ADC_ConfigChannel+0x90>
 8003686:	3001      	adds	r0, #1
 8003688:	061a      	lsls	r2, r3, #24
 800368a:	d4d5      	bmi.n	8003638 <HAL_ADC_ConfigChannel+0x90>
 800368c:	3001      	adds	r0, #1
 800368e:	05da      	lsls	r2, r3, #23
 8003690:	d4d2      	bmi.n	8003638 <HAL_ADC_ConfigChannel+0x90>
 8003692:	3001      	adds	r0, #1
 8003694:	059a      	lsls	r2, r3, #22
 8003696:	d4cf      	bmi.n	8003638 <HAL_ADC_ConfigChannel+0x90>
 8003698:	3001      	adds	r0, #1
 800369a:	055a      	lsls	r2, r3, #21
 800369c:	d4cc      	bmi.n	8003638 <HAL_ADC_ConfigChannel+0x90>
 800369e:	3001      	adds	r0, #1
 80036a0:	051a      	lsls	r2, r3, #20
 80036a2:	d4c9      	bmi.n	8003638 <HAL_ADC_ConfigChannel+0x90>
 80036a4:	3001      	adds	r0, #1
 80036a6:	04da      	lsls	r2, r3, #19
 80036a8:	d4c6      	bmi.n	8003638 <HAL_ADC_ConfigChannel+0x90>
 80036aa:	3001      	adds	r0, #1
 80036ac:	049a      	lsls	r2, r3, #18
 80036ae:	d4c3      	bmi.n	8003638 <HAL_ADC_ConfigChannel+0x90>
 80036b0:	3001      	adds	r0, #1
 80036b2:	045a      	lsls	r2, r3, #17
 80036b4:	d4c0      	bmi.n	8003638 <HAL_ADC_ConfigChannel+0x90>
 80036b6:	3001      	adds	r0, #1
 80036b8:	041a      	lsls	r2, r3, #16
 80036ba:	d4bd      	bmi.n	8003638 <HAL_ADC_ConfigChannel+0x90>
 80036bc:	3001      	adds	r0, #1
 80036be:	03da      	lsls	r2, r3, #15
 80036c0:	d4ba      	bmi.n	8003638 <HAL_ADC_ConfigChannel+0x90>
 80036c2:	3001      	adds	r0, #1
 80036c4:	039a      	lsls	r2, r3, #14
 80036c6:	d4b7      	bmi.n	8003638 <HAL_ADC_ConfigChannel+0x90>
 80036c8:	2280      	movs	r2, #128	; 0x80
 80036ca:	0018      	movs	r0, r3
 80036cc:	02d2      	lsls	r2, r2, #11
 80036ce:	4010      	ands	r0, r2
 80036d0:	4213      	tst	r3, r2
 80036d2:	d0b1      	beq.n	8003638 <HAL_ADC_ConfigChannel+0x90>
 80036d4:	2012      	movs	r0, #18
 80036d6:	e7af      	b.n	8003638 <HAL_ADC_ConfigChannel+0x90>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80036d8:	24e0      	movs	r4, #224	; 0xe0
 80036da:	4a38      	ldr	r2, [pc, #224]	; (80037bc <HAL_ADC_ConfigChannel+0x214>)
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80036dc:	4838      	ldr	r0, [pc, #224]	; (80037c0 <HAL_ADC_ConfigChannel+0x218>)
 80036de:	6811      	ldr	r1, [r2, #0]
 80036e0:	0464      	lsls	r4, r4, #17
 80036e2:	400c      	ands	r4, r1
 80036e4:	4283      	cmp	r3, r0
 80036e6:	d119      	bne.n	800371c <HAL_ADC_ConfigChannel+0x174>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80036e8:	2080      	movs	r0, #128	; 0x80
 80036ea:	0400      	lsls	r0, r0, #16
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80036ec:	4201      	tst	r1, r0
 80036ee:	d192      	bne.n	8003616 <HAL_ADC_ConfigChannel+0x6e>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80036f0:	6813      	ldr	r3, [r2, #0]
 80036f2:	4934      	ldr	r1, [pc, #208]	; (80037c4 <HAL_ADC_ConfigChannel+0x21c>)
 80036f4:	400b      	ands	r3, r1
 80036f6:	4323      	orrs	r3, r4
 80036f8:	4318      	orrs	r0, r3
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036fa:	4b33      	ldr	r3, [pc, #204]	; (80037c8 <HAL_ADC_ConfigChannel+0x220>)
 80036fc:	6010      	str	r0, [r2, #0]
 80036fe:	6818      	ldr	r0, [r3, #0]
 8003700:	4932      	ldr	r1, [pc, #200]	; (80037cc <HAL_ADC_ConfigChannel+0x224>)
 8003702:	f7fc fd19 	bl	8000138 <__udivsi3>
 8003706:	1c43      	adds	r3, r0, #1
 8003708:	200c      	movs	r0, #12
 800370a:	4358      	muls	r0, r3
 800370c:	9003      	str	r0, [sp, #12]
          while (wait_loop_index != 0UL)
 800370e:	9b03      	ldr	r3, [sp, #12]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d080      	beq.n	8003616 <HAL_ADC_ConfigChannel+0x6e>
          {
            wait_loop_index--;
 8003714:	9b03      	ldr	r3, [sp, #12]
 8003716:	3b01      	subs	r3, #1
 8003718:	9303      	str	r3, [sp, #12]
 800371a:	e7f8      	b.n	800370e <HAL_ADC_ConfigChannel+0x166>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800371c:	482c      	ldr	r0, [pc, #176]	; (80037d0 <HAL_ADC_ConfigChannel+0x228>)
 800371e:	4283      	cmp	r3, r0
 8003720:	d111      	bne.n	8003746 <HAL_ADC_ConfigChannel+0x19e>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003722:	2380      	movs	r3, #128	; 0x80
 8003724:	045b      	lsls	r3, r3, #17
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003726:	0008      	movs	r0, r1
 8003728:	4018      	ands	r0, r3
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800372a:	4219      	tst	r1, r3
 800372c:	d000      	beq.n	8003730 <HAL_ADC_ConfigChannel+0x188>
 800372e:	e772      	b.n	8003616 <HAL_ADC_ConfigChannel+0x6e>
 8003730:	6811      	ldr	r1, [r2, #0]
 8003732:	4e24      	ldr	r6, [pc, #144]	; (80037c4 <HAL_ADC_ConfigChannel+0x21c>)
 8003734:	4031      	ands	r1, r6
 8003736:	4321      	orrs	r1, r4
 8003738:	430b      	orrs	r3, r1
 800373a:	6013      	str	r3, [r2, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);

    tmp_hal_status = HAL_ERROR;
  }

  __HAL_UNLOCK(hadc);
 800373c:	2300      	movs	r3, #0
 800373e:	3554      	adds	r5, #84	; 0x54
 8003740:	702b      	strb	r3, [r5, #0]

  return tmp_hal_status;
}
 8003742:	b005      	add	sp, #20
 8003744:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003746:	4823      	ldr	r0, [pc, #140]	; (80037d4 <HAL_ADC_ConfigChannel+0x22c>)
 8003748:	4283      	cmp	r3, r0
 800374a:	d000      	beq.n	800374e <HAL_ADC_ConfigChannel+0x1a6>
 800374c:	e763      	b.n	8003616 <HAL_ADC_ConfigChannel+0x6e>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800374e:	2380      	movs	r3, #128	; 0x80
 8003750:	03db      	lsls	r3, r3, #15
 8003752:	e7e8      	b.n	8003726 <HAL_ADC_ConfigChannel+0x17e>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003754:	428f      	cmp	r7, r1
 8003756:	d104      	bne.n	8003762 <HAL_ADC_ConfigChannel+0x1ba>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003758:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800375a:	0359      	lsls	r1, r3, #13
 800375c:	0b49      	lsrs	r1, r1, #13
 800375e:	438a      	bics	r2, r1
 8003760:	62b2      	str	r2, [r6, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003762:	2b00      	cmp	r3, #0
 8003764:	db00      	blt.n	8003768 <HAL_ADC_ConfigChannel+0x1c0>
 8003766:	e756      	b.n	8003616 <HAL_ADC_ConfigChannel+0x6e>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003768:	4a14      	ldr	r2, [pc, #80]	; (80037bc <HAL_ADC_ConfigChannel+0x214>)
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800376a:	4815      	ldr	r0, [pc, #84]	; (80037c0 <HAL_ADC_ConfigChannel+0x218>)
 800376c:	6811      	ldr	r1, [r2, #0]
 800376e:	4283      	cmp	r3, r0
 8003770:	d108      	bne.n	8003784 <HAL_ADC_ConfigChannel+0x1dc>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003772:	23a0      	movs	r3, #160	; 0xa0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003774:	6810      	ldr	r0, [r2, #0]
 8003776:	045b      	lsls	r3, r3, #17
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003778:	400b      	ands	r3, r1
 800377a:	4912      	ldr	r1, [pc, #72]	; (80037c4 <HAL_ADC_ConfigChannel+0x21c>)
 800377c:	4001      	ands	r1, r0
 800377e:	430b      	orrs	r3, r1
 8003780:	6013      	str	r3, [r2, #0]
 8003782:	e748      	b.n	8003616 <HAL_ADC_ConfigChannel+0x6e>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003784:	4812      	ldr	r0, [pc, #72]	; (80037d0 <HAL_ADC_ConfigChannel+0x228>)
 8003786:	4283      	cmp	r3, r0
 8003788:	d103      	bne.n	8003792 <HAL_ADC_ConfigChannel+0x1ea>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800378a:	23c0      	movs	r3, #192	; 0xc0
 800378c:	6810      	ldr	r0, [r2, #0]
 800378e:	041b      	lsls	r3, r3, #16
 8003790:	e7f2      	b.n	8003778 <HAL_ADC_ConfigChannel+0x1d0>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003792:	4810      	ldr	r0, [pc, #64]	; (80037d4 <HAL_ADC_ConfigChannel+0x22c>)
 8003794:	4283      	cmp	r3, r0
 8003796:	d000      	beq.n	800379a <HAL_ADC_ConfigChannel+0x1f2>
 8003798:	e73d      	b.n	8003616 <HAL_ADC_ConfigChannel+0x6e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800379a:	20c0      	movs	r0, #192	; 0xc0
 800379c:	0440      	lsls	r0, r0, #17
 800379e:	6813      	ldr	r3, [r2, #0]
 80037a0:	4001      	ands	r1, r0
 80037a2:	4808      	ldr	r0, [pc, #32]	; (80037c4 <HAL_ADC_ConfigChannel+0x21c>)
 80037a4:	4003      	ands	r3, r0
 80037a6:	4319      	orrs	r1, r3
 80037a8:	6011      	str	r1, [r2, #0]
 80037aa:	e734      	b.n	8003616 <HAL_ADC_ConfigChannel+0x6e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037ac:	2320      	movs	r3, #32
 80037ae:	6daa      	ldr	r2, [r5, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 80037b0:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037b2:	4313      	orrs	r3, r2
 80037b4:	65ab      	str	r3, [r5, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 80037b6:	e7c1      	b.n	800373c <HAL_ADC_ConfigChannel+0x194>
 80037b8:	07ffff00 	.word	0x07ffff00
 80037bc:	40012708 	.word	0x40012708
 80037c0:	b0001000 	.word	0xb0001000
 80037c4:	fe3fffff 	.word	0xfe3fffff
 80037c8:	20000004 	.word	0x20000004
 80037cc:	00030d40 	.word	0x00030d40
 80037d0:	b8004000 	.word	0xb8004000
 80037d4:	b4002000 	.word	0xb4002000

080037d8 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80037d8:	b570      	push	{r4, r5, r6, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80037da:	6805      	ldr	r5, [r0, #0]
{
 80037dc:	0004      	movs	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80037de:	0028      	movs	r0, r5
 80037e0:	f7ff fd64 	bl	80032ac <LL_ADC_REG_IsConversionOngoing>
 80037e4:	2800      	cmp	r0, #0
 80037e6:	d101      	bne.n	80037ec <ADC_ConversionStop+0x14>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80037e8:	2000      	movs	r0, #0
}
 80037ea:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80037ec:	68ab      	ldr	r3, [r5, #8]
 80037ee:	079b      	lsls	r3, r3, #30
 80037f0:	d405      	bmi.n	80037fe <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 80037f2:	68aa      	ldr	r2, [r5, #8]
 80037f4:	4b0f      	ldr	r3, [pc, #60]	; (8003834 <ADC_ConversionStop+0x5c>)
 80037f6:	401a      	ands	r2, r3
 80037f8:	2310      	movs	r3, #16
 80037fa:	4313      	orrs	r3, r2
 80037fc:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 80037fe:	f7ff fd3d 	bl	800327c <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003802:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 8003804:	0005      	movs	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003806:	6823      	ldr	r3, [r4, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	4233      	tst	r3, r6
 800380c:	d0ec      	beq.n	80037e8 <ADC_ConversionStop+0x10>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800380e:	f7ff fd35 	bl	800327c <HAL_GetTick>
 8003812:	1b40      	subs	r0, r0, r5
 8003814:	2802      	cmp	r0, #2
 8003816:	d9f6      	bls.n	8003806 <ADC_ConversionStop+0x2e>
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003818:	6823      	ldr	r3, [r4, #0]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	4233      	tst	r3, r6
 800381e:	d0f2      	beq.n	8003806 <ADC_ConversionStop+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003820:	2310      	movs	r3, #16
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003822:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003824:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003826:	4313      	orrs	r3, r2
 8003828:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800382a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800382c:	4303      	orrs	r3, r0
 800382e:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 8003830:	e7db      	b.n	80037ea <ADC_ConversionStop+0x12>
 8003832:	46c0      	nop			; (mov r8, r8)
 8003834:	7fffffe8 	.word	0x7fffffe8

08003838 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003838:	2300      	movs	r3, #0
{
 800383a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800383c:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 800383e:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003840:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003842:	2001      	movs	r0, #1
 8003844:	689a      	ldr	r2, [r3, #8]
 8003846:	4202      	tst	r2, r0
 8003848:	d001      	beq.n	800384e <ADC_Enable+0x16>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800384a:	2000      	movs	r0, #0
}
 800384c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800384e:	6899      	ldr	r1, [r3, #8]
 8003850:	4a22      	ldr	r2, [pc, #136]	; (80038dc <ADC_Enable+0xa4>)
 8003852:	4211      	tst	r1, r2
 8003854:	d007      	beq.n	8003866 <ADC_Enable+0x2e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003856:	2310      	movs	r3, #16
 8003858:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800385a:	4313      	orrs	r3, r2
 800385c:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800385e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003860:	4303      	orrs	r3, r0
 8003862:	65e3      	str	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8003864:	e7f2      	b.n	800384c <ADC_Enable+0x14>
  MODIFY_REG(ADCx->CR,
 8003866:	689a      	ldr	r2, [r3, #8]
 8003868:	4d1d      	ldr	r5, [pc, #116]	; (80038e0 <ADC_Enable+0xa8>)
 800386a:	402a      	ands	r2, r5
 800386c:	4310      	orrs	r0, r2
 800386e:	6098      	str	r0, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003870:	4b1c      	ldr	r3, [pc, #112]	; (80038e4 <ADC_Enable+0xac>)
 8003872:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8003874:	021b      	lsls	r3, r3, #8
 8003876:	d423      	bmi.n	80038c0 <ADC_Enable+0x88>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003878:	7e63      	ldrb	r3, [r4, #25]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d0e5      	beq.n	800384a <ADC_Enable+0x12>
      tickstart = HAL_GetTick();
 800387e:	f7ff fcfd 	bl	800327c <HAL_GetTick>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003882:	2601      	movs	r6, #1
      tickstart = HAL_GetTick();
 8003884:	0007      	movs	r7, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003886:	6822      	ldr	r2, [r4, #0]
 8003888:	6813      	ldr	r3, [r2, #0]
 800388a:	4233      	tst	r3, r6
 800388c:	d1dd      	bne.n	800384a <ADC_Enable+0x12>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800388e:	6893      	ldr	r3, [r2, #8]
 8003890:	4233      	tst	r3, r6
 8003892:	d103      	bne.n	800389c <ADC_Enable+0x64>
  MODIFY_REG(ADCx->CR,
 8003894:	6893      	ldr	r3, [r2, #8]
 8003896:	402b      	ands	r3, r5
 8003898:	4333      	orrs	r3, r6
 800389a:	6093      	str	r3, [r2, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800389c:	f7ff fcee 	bl	800327c <HAL_GetTick>
 80038a0:	1bc0      	subs	r0, r0, r7
 80038a2:	2802      	cmp	r0, #2
 80038a4:	d9ef      	bls.n	8003886 <ADC_Enable+0x4e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038a6:	6823      	ldr	r3, [r4, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4233      	tst	r3, r6
 80038ac:	d1eb      	bne.n	8003886 <ADC_Enable+0x4e>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ae:	2310      	movs	r3, #16
 80038b0:	6da2      	ldr	r2, [r4, #88]	; 0x58
            return HAL_ERROR;
 80038b2:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038b4:	4313      	orrs	r3, r2
 80038b6:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038b8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80038ba:	4333      	orrs	r3, r6
 80038bc:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 80038be:	e7c5      	b.n	800384c <ADC_Enable+0x14>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038c0:	4b09      	ldr	r3, [pc, #36]	; (80038e8 <ADC_Enable+0xb0>)
 80038c2:	490a      	ldr	r1, [pc, #40]	; (80038ec <ADC_Enable+0xb4>)
 80038c4:	6818      	ldr	r0, [r3, #0]
 80038c6:	f7fc fc37 	bl	8000138 <__udivsi3>
 80038ca:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80038cc:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 80038ce:	9b01      	ldr	r3, [sp, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0d1      	beq.n	8003878 <ADC_Enable+0x40>
        wait_loop_index--;
 80038d4:	9b01      	ldr	r3, [sp, #4]
 80038d6:	3b01      	subs	r3, #1
 80038d8:	9301      	str	r3, [sp, #4]
 80038da:	e7f8      	b.n	80038ce <ADC_Enable+0x96>
 80038dc:	80000017 	.word	0x80000017
 80038e0:	7fffffe8 	.word	0x7fffffe8
 80038e4:	40012708 	.word	0x40012708
 80038e8:	20000004 	.word	0x20000004
 80038ec:	00030d40 	.word	0x00030d40

080038f0 <HAL_ADC_Start>:
{
 80038f0:	b570      	push	{r4, r5, r6, lr}
 80038f2:	0004      	movs	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038f4:	6800      	ldr	r0, [r0, #0]
 80038f6:	f7ff fcd9 	bl	80032ac <LL_ADC_REG_IsConversionOngoing>
 80038fa:	0006      	movs	r6, r0
    tmp_hal_status = HAL_BUSY;
 80038fc:	2002      	movs	r0, #2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038fe:	2e00      	cmp	r6, #0
 8003900:	d11d      	bne.n	800393e <HAL_ADC_Start+0x4e>
    __HAL_LOCK(hadc);
 8003902:	0025      	movs	r5, r4
 8003904:	3554      	adds	r5, #84	; 0x54
 8003906:	782b      	ldrb	r3, [r5, #0]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d018      	beq.n	800393e <HAL_ADC_Start+0x4e>
 800390c:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 800390e:	0020      	movs	r0, r4
    __HAL_LOCK(hadc);
 8003910:	702b      	strb	r3, [r5, #0]
    tmp_hal_status = ADC_Enable(hadc);
 8003912:	f7ff ff91 	bl	8003838 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003916:	2800      	cmp	r0, #0
 8003918:	d112      	bne.n	8003940 <HAL_ADC_Start+0x50>
      ADC_STATE_CLR_SET(hadc->State,
 800391a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800391c:	4b09      	ldr	r3, [pc, #36]	; (8003944 <HAL_ADC_Start+0x54>)
 800391e:	401a      	ands	r2, r3
 8003920:	2380      	movs	r3, #128	; 0x80
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003926:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 8003928:	65a3      	str	r3, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800392a:	6823      	ldr	r3, [r4, #0]
      ADC_CLEAR_ERRORCODE(hadc);
 800392c:	65e0      	str	r0, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800392e:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hadc);
 8003930:	7028      	strb	r0, [r5, #0]
  MODIFY_REG(ADCx->CR,
 8003932:	6899      	ldr	r1, [r3, #8]
 8003934:	4a04      	ldr	r2, [pc, #16]	; (8003948 <HAL_ADC_Start+0x58>)
 8003936:	4011      	ands	r1, r2
 8003938:	2204      	movs	r2, #4
 800393a:	430a      	orrs	r2, r1
 800393c:	609a      	str	r2, [r3, #8]
}
 800393e:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
 8003940:	702e      	strb	r6, [r5, #0]
 8003942:	e7fc      	b.n	800393e <HAL_ADC_Start+0x4e>
 8003944:	fffff0fe 	.word	0xfffff0fe
 8003948:	7fffffe8 	.word	0x7fffffe8

0800394c <ADC_Disable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800394c:	6803      	ldr	r3, [r0, #0]
{
 800394e:	b570      	push	{r4, r5, r6, lr}
 8003950:	0004      	movs	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003952:	2001      	movs	r0, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003954:	6899      	ldr	r1, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	4202      	tst	r2, r0
 800395a:	d101      	bne.n	8003960 <ADC_Disable+0x14>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800395c:	2000      	movs	r0, #0
}
 800395e:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003960:	2202      	movs	r2, #2
      && (tmp_adc_is_disable_on_going == 0UL)
 8003962:	4211      	tst	r1, r2
 8003964:	d1fa      	bne.n	800395c <ADC_Disable+0x10>
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003966:	2105      	movs	r1, #5
 8003968:	689d      	ldr	r5, [r3, #8]
 800396a:	400d      	ands	r5, r1
 800396c:	2d01      	cmp	r5, #1
 800396e:	d11f      	bne.n	80039b0 <ADC_Disable+0x64>
  MODIFY_REG(ADCx->CR,
 8003970:	6899      	ldr	r1, [r3, #8]
 8003972:	4813      	ldr	r0, [pc, #76]	; (80039c0 <ADC_Disable+0x74>)
 8003974:	4001      	ands	r1, r0
 8003976:	430a      	orrs	r2, r1
 8003978:	609a      	str	r2, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800397a:	2203      	movs	r2, #3
 800397c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800397e:	f7ff fc7d 	bl	800327c <HAL_GetTick>
 8003982:	0006      	movs	r6, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003984:	6823      	ldr	r3, [r4, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	422b      	tst	r3, r5
 800398a:	d0e7      	beq.n	800395c <ADC_Disable+0x10>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800398c:	f7ff fc76 	bl	800327c <HAL_GetTick>
 8003990:	1b80      	subs	r0, r0, r6
 8003992:	2802      	cmp	r0, #2
 8003994:	d9f6      	bls.n	8003984 <ADC_Disable+0x38>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003996:	6823      	ldr	r3, [r4, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	422b      	tst	r3, r5
 800399c:	d0f2      	beq.n	8003984 <ADC_Disable+0x38>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800399e:	2310      	movs	r3, #16
 80039a0:	6da2      	ldr	r2, [r4, #88]	; 0x58
          return HAL_ERROR;
 80039a2:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039a4:	4313      	orrs	r3, r2
 80039a6:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039a8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80039aa:	432b      	orrs	r3, r5
 80039ac:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 80039ae:	e7d6      	b.n	800395e <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039b0:	2310      	movs	r3, #16
 80039b2:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80039b4:	4313      	orrs	r3, r2
 80039b6:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039b8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80039ba:	4303      	orrs	r3, r0
 80039bc:	65e3      	str	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 80039be:	e7ce      	b.n	800395e <ADC_Disable+0x12>
 80039c0:	7fffffe8 	.word	0x7fffffe8

080039c4 <HAL_ADC_Stop>:
{
 80039c4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 80039c6:	0006      	movs	r6, r0
 80039c8:	3654      	adds	r6, #84	; 0x54
 80039ca:	7833      	ldrb	r3, [r6, #0]
{
 80039cc:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80039ce:	2002      	movs	r0, #2
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d012      	beq.n	80039fa <HAL_ADC_Stop+0x36>
 80039d4:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 80039d6:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 80039d8:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 80039da:	f7ff fefd 	bl	80037d8 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80039de:	2800      	cmp	r0, #0
 80039e0:	d109      	bne.n	80039f6 <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 80039e2:	0020      	movs	r0, r4
 80039e4:	f7ff ffb2 	bl	800394c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80039e8:	2800      	cmp	r0, #0
 80039ea:	d104      	bne.n	80039f6 <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 80039ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80039ee:	4a03      	ldr	r2, [pc, #12]	; (80039fc <HAL_ADC_Stop+0x38>)
 80039f0:	4013      	ands	r3, r2
 80039f2:	431d      	orrs	r5, r3
 80039f4:	65a5      	str	r5, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 80039f6:	2300      	movs	r3, #0
 80039f8:	7033      	strb	r3, [r6, #0]
}
 80039fa:	bd70      	pop	{r4, r5, r6, pc}
 80039fc:	fffffefe 	.word	0xfffffefe

08003a00 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a00:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a02:	25ff      	movs	r5, #255	; 0xff
 8003a04:	2403      	movs	r4, #3
 8003a06:	002a      	movs	r2, r5
 8003a08:	4004      	ands	r4, r0
 8003a0a:	00e4      	lsls	r4, r4, #3
 8003a0c:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a0e:	0189      	lsls	r1, r1, #6
 8003a10:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a12:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a14:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a16:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8003a18:	2800      	cmp	r0, #0
 8003a1a:	db0a      	blt.n	8003a32 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a1c:	24c0      	movs	r4, #192	; 0xc0
 8003a1e:	4b0b      	ldr	r3, [pc, #44]	; (8003a4c <HAL_NVIC_SetPriority+0x4c>)
 8003a20:	0880      	lsrs	r0, r0, #2
 8003a22:	0080      	lsls	r0, r0, #2
 8003a24:	18c0      	adds	r0, r0, r3
 8003a26:	00a4      	lsls	r4, r4, #2
 8003a28:	5903      	ldr	r3, [r0, r4]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	430b      	orrs	r3, r1
 8003a2e:	5103      	str	r3, [r0, r4]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8003a30:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a32:	200f      	movs	r0, #15
 8003a34:	4003      	ands	r3, r0
 8003a36:	3b08      	subs	r3, #8
 8003a38:	4805      	ldr	r0, [pc, #20]	; (8003a50 <HAL_NVIC_SetPriority+0x50>)
 8003a3a:	089b      	lsrs	r3, r3, #2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	181b      	adds	r3, r3, r0
 8003a40:	69d8      	ldr	r0, [r3, #28]
 8003a42:	4002      	ands	r2, r0
 8003a44:	430a      	orrs	r2, r1
 8003a46:	61da      	str	r2, [r3, #28]
 8003a48:	e7f2      	b.n	8003a30 <HAL_NVIC_SetPriority+0x30>
 8003a4a:	46c0      	nop			; (mov r8, r8)
 8003a4c:	e000e100 	.word	0xe000e100
 8003a50:	e000ed00 	.word	0xe000ed00

08003a54 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003a54:	2800      	cmp	r0, #0
 8003a56:	db05      	blt.n	8003a64 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a58:	231f      	movs	r3, #31
 8003a5a:	4018      	ands	r0, r3
 8003a5c:	3b1e      	subs	r3, #30
 8003a5e:	4083      	lsls	r3, r0
 8003a60:	4a01      	ldr	r2, [pc, #4]	; (8003a68 <HAL_NVIC_EnableIRQ+0x14>)
 8003a62:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003a64:	4770      	bx	lr
 8003a66:	46c0      	nop			; (mov r8, r8)
 8003a68:	e000e100 	.word	0xe000e100

08003a6c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a6c:	2280      	movs	r2, #128	; 0x80
 8003a6e:	1e43      	subs	r3, r0, #1
 8003a70:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a72:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d20d      	bcs.n	8003a94 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a78:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a7a:	4a07      	ldr	r2, [pc, #28]	; (8003a98 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a7c:	4807      	ldr	r0, [pc, #28]	; (8003a9c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a7e:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a80:	6a03      	ldr	r3, [r0, #32]
 8003a82:	0609      	lsls	r1, r1, #24
 8003a84:	021b      	lsls	r3, r3, #8
 8003a86:	0a1b      	lsrs	r3, r3, #8
 8003a88:	430b      	orrs	r3, r1
 8003a8a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a8c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a8e:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a90:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a92:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8003a94:	4770      	bx	lr
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	e000e010 	.word	0xe000e010
 8003a9c:	e000ed00 	.word	0xe000ed00

08003aa0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003aa2:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8003aa4:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 8003aa6:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003aa8:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8003aaa:	2c00      	cmp	r4, #0
 8003aac:	d002      	beq.n	8003ab4 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003aae:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8003ab0:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8003ab2:	6065      	str	r5, [r4, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003ab4:	241c      	movs	r4, #28
 8003ab6:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8003ab8:	4e08      	ldr	r6, [pc, #32]	; (8003adc <DMA_SetConfig+0x3c>)
 8003aba:	4025      	ands	r5, r4
 8003abc:	3c1b      	subs	r4, #27
 8003abe:	40ac      	lsls	r4, r5
 8003ac0:	6877      	ldr	r7, [r6, #4]
 8003ac2:	433c      	orrs	r4, r7
 8003ac4:	6074      	str	r4, [r6, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ac6:	6804      	ldr	r4, [r0, #0]
 8003ac8:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003aca:	6883      	ldr	r3, [r0, #8]
 8003acc:	2b10      	cmp	r3, #16
 8003ace:	d102      	bne.n	8003ad6 <DMA_SetConfig+0x36>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ad0:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003ad2:	60e1      	str	r1, [r4, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 8003ad6:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ad8:	60e2      	str	r2, [r4, #12]
}
 8003ada:	e7fb      	b.n	8003ad4 <DMA_SetConfig+0x34>
 8003adc:	40020000 	.word	0x40020000

08003ae0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ae0:	b510      	push	{r4, lr}
 8003ae2:	0004      	movs	r4, r0
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003ae4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003ae6:	4a09      	ldr	r2, [pc, #36]	; (8003b0c <DMA_CalcDMAMUXChannelBaseAndMask+0x2c>)
 8003ae8:	089b      	lsrs	r3, r3, #2
 8003aea:	189b      	adds	r3, r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	6443      	str	r3, [r0, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003af0:	6800      	ldr	r0, [r0, #0]
 8003af2:	2114      	movs	r1, #20
 8003af4:	b2c0      	uxtb	r0, r0
 8003af6:	3808      	subs	r0, #8
 8003af8:	f7fc fb1e 	bl	8000138 <__udivsi3>
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003afc:	4b04      	ldr	r3, [pc, #16]	; (8003b10 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 8003afe:	64a3      	str	r3, [r4, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003b00:	231f      	movs	r3, #31
 8003b02:	4018      	ands	r0, r3
 8003b04:	3b1e      	subs	r3, #30
 8003b06:	4083      	lsls	r3, r0
 8003b08:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 8003b0a:	bd10      	pop	{r4, pc}
 8003b0c:	10008200 	.word	0x10008200
 8003b10:	40020880 	.word	0x40020880

08003b14 <HAL_DMA_Init>:
{
 8003b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b16:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003b18:	2001      	movs	r0, #1
  if (hdma == NULL)
 8003b1a:	2c00      	cmp	r4, #0
 8003b1c:	d048      	beq.n	8003bb0 <HAL_DMA_Init+0x9c>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003b1e:	6825      	ldr	r5, [r4, #0]
 8003b20:	4b26      	ldr	r3, [pc, #152]	; (8003bbc <HAL_DMA_Init+0xa8>)
 8003b22:	2114      	movs	r1, #20
 8003b24:	18e8      	adds	r0, r5, r3
 8003b26:	f7fc fb07 	bl	8000138 <__udivsi3>
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b2a:	2302      	movs	r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003b2c:	0080      	lsls	r0, r0, #2
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b2e:	1da6      	adds	r6, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003b30:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b32:	77f3      	strb	r3, [r6, #31]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003b34:	682b      	ldr	r3, [r5, #0]
 8003b36:	4a22      	ldr	r2, [pc, #136]	; (8003bc0 <HAL_DMA_Init+0xac>)
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003b38:	68a7      	ldr	r7, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003b3e:	68e3      	ldr	r3, [r4, #12]
 8003b40:	6921      	ldr	r1, [r4, #16]
 8003b42:	433b      	orrs	r3, r7
 8003b44:	430b      	orrs	r3, r1
 8003b46:	6961      	ldr	r1, [r4, #20]
 8003b48:	682a      	ldr	r2, [r5, #0]
 8003b4a:	430b      	orrs	r3, r1
 8003b4c:	69a1      	ldr	r1, [r4, #24]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003b4e:	0020      	movs	r0, r4
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003b50:	430b      	orrs	r3, r1
 8003b52:	69e1      	ldr	r1, [r4, #28]
 8003b54:	430b      	orrs	r3, r1
 8003b56:	6a21      	ldr	r1, [r4, #32]
 8003b58:	430b      	orrs	r3, r1
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	602b      	str	r3, [r5, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003b5e:	f7ff ffbf 	bl	8003ae0 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003b62:	2380      	movs	r3, #128	; 0x80
 8003b64:	01db      	lsls	r3, r3, #7
 8003b66:	429f      	cmp	r7, r3
 8003b68:	d101      	bne.n	8003b6e <HAL_DMA_Init+0x5a>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b6e:	233f      	movs	r3, #63	; 0x3f
 8003b70:	6862      	ldr	r2, [r4, #4]
 8003b72:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003b74:	4013      	ands	r3, r2
 8003b76:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b78:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003b7a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003b7c:	3a01      	subs	r2, #1
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b7e:	6048      	str	r0, [r1, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003b80:	2a03      	cmp	r2, #3
 8003b82:	d816      	bhi.n	8003bb2 <HAL_DMA_Init+0x9e>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b84:	4a0f      	ldr	r2, [pc, #60]	; (8003bc4 <HAL_DMA_Init+0xb0>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b86:	4810      	ldr	r0, [pc, #64]	; (8003bc8 <HAL_DMA_Init+0xb4>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b88:	1899      	adds	r1, r3, r2

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003b8a:	2203      	movs	r2, #3
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	4013      	ands	r3, r2
 8003b90:	3a02      	subs	r2, #2
 8003b92:	409a      	lsls	r2, r3
 8003b94:	65a2      	str	r2, [r4, #88]	; 0x58
 8003b96:	0013      	movs	r3, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003b98:	2200      	movs	r2, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b9a:	0089      	lsls	r1, r1, #2
 8003b9c:	6521      	str	r1, [r4, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b9e:	6560      	str	r0, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ba0:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ba2:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ba4:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8003ba6:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ba8:	63e0      	str	r0, [r4, #60]	; 0x3c
  __HAL_UNLOCK(hdma);
 8003baa:	3405      	adds	r4, #5
  hdma->State = HAL_DMA_STATE_READY;
 8003bac:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hdma);
 8003bae:	77e0      	strb	r0, [r4, #31]
}
 8003bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->DMAmuxRequestGen = 0U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003bb6:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003bb8:	65a3      	str	r3, [r4, #88]	; 0x58
 8003bba:	e7f3      	b.n	8003ba4 <HAL_DMA_Init+0x90>
 8003bbc:	bffdfff8 	.word	0xbffdfff8
 8003bc0:	ffff800f 	.word	0xffff800f
 8003bc4:	1000823f 	.word	0x1000823f
 8003bc8:	40020940 	.word	0x40020940

08003bcc <HAL_DMA_Start_IT>:
{
 8003bcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8003bce:	1d45      	adds	r5, r0, #5
{
 8003bd0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 8003bd2:	7fee      	ldrb	r6, [r5, #31]
{
 8003bd4:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8003bd6:	2002      	movs	r0, #2
 8003bd8:	2e01      	cmp	r6, #1
 8003bda:	d033      	beq.n	8003c44 <HAL_DMA_Start_IT+0x78>
 8003bdc:	3801      	subs	r0, #1
 8003bde:	77e8      	strb	r0, [r5, #31]
  if (hdma->State == HAL_DMA_STATE_READY)
 8003be0:	1da7      	adds	r7, r4, #6
 8003be2:	7ffe      	ldrb	r6, [r7, #31]
 8003be4:	46b4      	mov	ip, r6
 8003be6:	4663      	mov	r3, ip
 8003be8:	b2f6      	uxtb	r6, r6
 8003bea:	9600      	str	r6, [sp, #0]
 8003bec:	2600      	movs	r6, #0
 8003bee:	4283      	cmp	r3, r0
 8003bf0:	d130      	bne.n	8003c54 <HAL_DMA_Start_IT+0x88>
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bf2:	3001      	adds	r0, #1
 8003bf4:	77f8      	strb	r0, [r7, #31]
    __HAL_DMA_DISABLE(hdma);
 8003bf6:	6825      	ldr	r5, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bf8:	63e6      	str	r6, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003bfa:	6828      	ldr	r0, [r5, #0]
 8003bfc:	9b00      	ldr	r3, [sp, #0]
 8003bfe:	4398      	bics	r0, r3
 8003c00:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c02:	9b01      	ldr	r3, [sp, #4]
 8003c04:	0020      	movs	r0, r4
 8003c06:	f7ff ff4b 	bl	8003aa0 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8003c0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003c0c:	42b3      	cmp	r3, r6
 8003c0e:	d01a      	beq.n	8003c46 <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c10:	230e      	movs	r3, #14
 8003c12:	682a      	ldr	r2, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003c14:	4313      	orrs	r3, r2
 8003c16:	602b      	str	r3, [r5, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003c18:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	03d2      	lsls	r2, r2, #15
 8003c1e:	d504      	bpl.n	8003c2a <HAL_DMA_Start_IT+0x5e>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003c20:	2280      	movs	r2, #128	; 0x80
 8003c22:	6819      	ldr	r1, [r3, #0]
 8003c24:	0052      	lsls	r2, r2, #1
 8003c26:	430a      	orrs	r2, r1
 8003c28:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8003c2a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d004      	beq.n	8003c3a <HAL_DMA_Start_IT+0x6e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003c30:	2280      	movs	r2, #128	; 0x80
 8003c32:	6819      	ldr	r1, [r3, #0]
 8003c34:	0052      	lsls	r2, r2, #1
 8003c36:	430a      	orrs	r2, r1
 8003c38:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8003c3a:	2301      	movs	r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8003c3c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8003c3e:	682a      	ldr	r2, [r5, #0]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	602b      	str	r3, [r5, #0]
}
 8003c44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c46:	2204      	movs	r2, #4
 8003c48:	682b      	ldr	r3, [r5, #0]
 8003c4a:	4393      	bics	r3, r2
 8003c4c:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003c4e:	682a      	ldr	r2, [r5, #0]
 8003c50:	230a      	movs	r3, #10
 8003c52:	e7df      	b.n	8003c14 <HAL_DMA_Start_IT+0x48>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003c54:	2380      	movs	r3, #128	; 0x80
 8003c56:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003c58:	77ee      	strb	r6, [r5, #31]
    status = HAL_ERROR;
 8003c5a:	e7f3      	b.n	8003c44 <HAL_DMA_Start_IT+0x78>

08003c5c <HAL_DMA_Abort>:
{
 8003c5c:	0003      	movs	r3, r0
 8003c5e:	b5f0      	push	{r4, r5, r6, r7, lr}
    return HAL_ERROR;
 8003c60:	2001      	movs	r0, #1
  if (NULL == hdma)
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d009      	beq.n	8003c7a <HAL_DMA_Abort+0x1e>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003c66:	1d98      	adds	r0, r3, #6
 8003c68:	7fc2      	ldrb	r2, [r0, #31]
 8003c6a:	1d5c      	adds	r4, r3, #5
 8003c6c:	2a02      	cmp	r2, #2
 8003c6e:	d005      	beq.n	8003c7c <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c70:	2204      	movs	r2, #4
 8003c72:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003c74:	2300      	movs	r3, #0
    return HAL_ERROR;
 8003c76:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8003c78:	77e3      	strb	r3, [r4, #31]
}
 8003c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c7c:	250e      	movs	r5, #14
 8003c7e:	6819      	ldr	r1, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c80:	6c5e      	ldr	r6, [r3, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c82:	680a      	ldr	r2, [r1, #0]
 8003c84:	43aa      	bics	r2, r5
 8003c86:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c88:	6832      	ldr	r2, [r6, #0]
 8003c8a:	4d10      	ldr	r5, [pc, #64]	; (8003ccc <HAL_DMA_Abort+0x70>)
 8003c8c:	402a      	ands	r2, r5
 8003c8e:	6032      	str	r2, [r6, #0]
    __HAL_DMA_DISABLE(hdma);
 8003c90:	2201      	movs	r2, #1
 8003c92:	680e      	ldr	r6, [r1, #0]
 8003c94:	4396      	bics	r6, r2
 8003c96:	600e      	str	r6, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8003c98:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003c9a:	321b      	adds	r2, #27
 8003c9c:	4011      	ands	r1, r2
 8003c9e:	3a1b      	subs	r2, #27
 8003ca0:	408a      	lsls	r2, r1
 8003ca2:	4e0b      	ldr	r6, [pc, #44]	; (8003cd0 <HAL_DMA_Abort+0x74>)
 8003ca4:	6877      	ldr	r7, [r6, #4]
 8003ca6:	433a      	orrs	r2, r7
 8003ca8:	6072      	str	r2, [r6, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003caa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003cac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cae:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8003cb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003cb2:	2a00      	cmp	r2, #0
 8003cb4:	d005      	beq.n	8003cc2 <HAL_DMA_Abort+0x66>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003cb6:	6811      	ldr	r1, [r2, #0]
 8003cb8:	4029      	ands	r1, r5
 8003cba:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc0:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	77c3      	strb	r3, [r0, #31]
    __HAL_UNLOCK(hdma);
 8003cc6:	2000      	movs	r0, #0
 8003cc8:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 8003cca:	e7d6      	b.n	8003c7a <HAL_DMA_Abort+0x1e>
 8003ccc:	fffffeff 	.word	0xfffffeff
 8003cd0:	40020000 	.word	0x40020000

08003cd4 <HAL_DMA_Abort_IT>:
{
 8003cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003cd6:	1d81      	adds	r1, r0, #6
 8003cd8:	7fcb      	ldrb	r3, [r1, #31]
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d004      	beq.n	8003ce8 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cde:	2304      	movs	r3, #4
 8003ce0:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8003ce2:	3b03      	subs	r3, #3
}
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ce8:	240e      	movs	r4, #14
 8003cea:	6802      	ldr	r2, [r0, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8003cec:	271c      	movs	r7, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cee:	6813      	ldr	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003cf0:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cf2:	43a3      	bics	r3, r4
 8003cf4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	6814      	ldr	r4, [r2, #0]
 8003cfa:	439c      	bics	r4, r3
 8003cfc:	6014      	str	r4, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003cfe:	682a      	ldr	r2, [r5, #0]
 8003d00:	4c10      	ldr	r4, [pc, #64]	; (8003d44 <HAL_DMA_Abort_IT+0x70>)
 8003d02:	4022      	ands	r2, r4
 8003d04:	602a      	str	r2, [r5, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8003d06:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003d08:	4d0f      	ldr	r5, [pc, #60]	; (8003d48 <HAL_DMA_Abort_IT+0x74>)
 8003d0a:	403a      	ands	r2, r7
 8003d0c:	4093      	lsls	r3, r2
 8003d0e:	686e      	ldr	r6, [r5, #4]
 8003d10:	4333      	orrs	r3, r6
 8003d12:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d14:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8003d16:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003d18:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8003d1a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d005      	beq.n	8003d2c <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	4022      	ands	r2, r4
 8003d24:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d26:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003d28:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8003d2a:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003d2c:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8003d2e:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8003d30:	77cb      	strb	r3, [r1, #31]
    __HAL_UNLOCK(hdma);
 8003d32:	1d43      	adds	r3, r0, #5
 8003d34:	77dc      	strb	r4, [r3, #31]
    if (hdma->XferAbortCallback != NULL)
 8003d36:	6b82      	ldr	r2, [r0, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 8003d38:	0013      	movs	r3, r2
    if (hdma->XferAbortCallback != NULL)
 8003d3a:	42a2      	cmp	r2, r4
 8003d3c:	d0d2      	beq.n	8003ce4 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8003d3e:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8003d40:	0023      	movs	r3, r4
 8003d42:	e7cf      	b.n	8003ce4 <HAL_DMA_Abort_IT+0x10>
 8003d44:	fffffeff 	.word	0xfffffeff
 8003d48:	40020000 	.word	0x40020000

08003d4c <HAL_DMA_IRQHandler>:
{
 8003d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003d4e:	241c      	movs	r4, #28
 8003d50:	2704      	movs	r7, #4
 8003d52:	6c01      	ldr	r1, [r0, #64]	; 0x40
  uint32_t flag_it = DMA1->ISR;
 8003d54:	4a26      	ldr	r2, [pc, #152]	; (8003df0 <HAL_DMA_IRQHandler+0xa4>)
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003d56:	4021      	ands	r1, r4
 8003d58:	003c      	movs	r4, r7
 8003d5a:	408c      	lsls	r4, r1
  uint32_t flag_it = DMA1->ISR;
 8003d5c:	6816      	ldr	r6, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003d5e:	6803      	ldr	r3, [r0, #0]
 8003d60:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003d62:	4226      	tst	r6, r4
 8003d64:	d00f      	beq.n	8003d86 <HAL_DMA_IRQHandler+0x3a>
 8003d66:	423d      	tst	r5, r7
 8003d68:	d00d      	beq.n	8003d86 <HAL_DMA_IRQHandler+0x3a>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d6a:	6819      	ldr	r1, [r3, #0]
 8003d6c:	0689      	lsls	r1, r1, #26
 8003d6e:	d402      	bmi.n	8003d76 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d70:	6819      	ldr	r1, [r3, #0]
 8003d72:	43b9      	bics	r1, r7
 8003d74:	6019      	str	r1, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003d76:	6853      	ldr	r3, [r2, #4]
 8003d78:	431c      	orrs	r4, r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003d7a:	6b03      	ldr	r3, [r0, #48]	; 0x30
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003d7c:	6054      	str	r4, [r2, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d01b      	beq.n	8003dba <HAL_DMA_IRQHandler+0x6e>
      hdma->XferErrorCallback(hdma);
 8003d82:	4798      	blx	r3
  return;
 8003d84:	e019      	b.n	8003dba <HAL_DMA_IRQHandler+0x6e>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003d86:	2702      	movs	r7, #2
 8003d88:	003c      	movs	r4, r7
 8003d8a:	408c      	lsls	r4, r1
 8003d8c:	4226      	tst	r6, r4
 8003d8e:	d015      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x70>
 8003d90:	423d      	tst	r5, r7
 8003d92:	d013      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x70>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d94:	6819      	ldr	r1, [r3, #0]
 8003d96:	0689      	lsls	r1, r1, #26
 8003d98:	d406      	bmi.n	8003da8 <HAL_DMA_IRQHandler+0x5c>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d9a:	250a      	movs	r5, #10
 8003d9c:	6819      	ldr	r1, [r3, #0]
 8003d9e:	43a9      	bics	r1, r5
 8003da0:	6019      	str	r1, [r3, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8003da2:	2101      	movs	r1, #1
 8003da4:	1d83      	adds	r3, r0, #6
 8003da6:	77d9      	strb	r1, [r3, #31]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003da8:	6853      	ldr	r3, [r2, #4]
 8003daa:	431c      	orrs	r4, r3
 8003dac:	6054      	str	r4, [r2, #4]
      __HAL_UNLOCK(hdma);
 8003dae:	2200      	movs	r2, #0
 8003db0:	1d43      	adds	r3, r0, #5
 8003db2:	77da      	strb	r2, [r3, #31]
      if (hdma->XferCpltCallback != NULL)
 8003db4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d1e3      	bne.n	8003d82 <HAL_DMA_IRQHandler+0x36>
}
 8003dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003dbc:	2408      	movs	r4, #8
 8003dbe:	0027      	movs	r7, r4
 8003dc0:	408f      	lsls	r7, r1
 8003dc2:	423e      	tst	r6, r7
 8003dc4:	d0f9      	beq.n	8003dba <HAL_DMA_IRQHandler+0x6e>
 8003dc6:	4225      	tst	r5, r4
 8003dc8:	d0f7      	beq.n	8003dba <HAL_DMA_IRQHandler+0x6e>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dca:	250e      	movs	r5, #14
 8003dcc:	681c      	ldr	r4, [r3, #0]
 8003dce:	43ac      	bics	r4, r5
 8003dd0:	601c      	str	r4, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	001d      	movs	r5, r3
 8003dd6:	408d      	lsls	r5, r1
 8003dd8:	0029      	movs	r1, r5
 8003dda:	6854      	ldr	r4, [r2, #4]
 8003ddc:	4321      	orrs	r1, r4
 8003dde:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003de0:	1d82      	adds	r2, r0, #6
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003de2:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003de4:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8003de6:	2200      	movs	r2, #0
 8003de8:	1d43      	adds	r3, r0, #5
 8003dea:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8003dec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003dee:	e7e2      	b.n	8003db6 <HAL_DMA_IRQHandler+0x6a>
 8003df0:	40020000 	.word	0x40020000

08003df4 <HAL_DMA_GetState>:
  return hdma->State;
 8003df4:	3006      	adds	r0, #6
 8003df6:	7fc0      	ldrb	r0, [r0, #31]
 8003df8:	b2c0      	uxtb	r0, r0
}
 8003dfa:	4770      	bx	lr

08003dfc <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8003dfc:	2300      	movs	r3, #0
{
 8003dfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e00:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e02:	680a      	ldr	r2, [r1, #0]
 8003e04:	0014      	movs	r4, r2
 8003e06:	40dc      	lsrs	r4, r3
 8003e08:	d101      	bne.n	8003e0e <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  }
}
 8003e0a:	b005      	add	sp, #20
 8003e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e0e:	2501      	movs	r5, #1
 8003e10:	0014      	movs	r4, r2
 8003e12:	409d      	lsls	r5, r3
 8003e14:	402c      	ands	r4, r5
 8003e16:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 8003e18:	422a      	tst	r2, r5
 8003e1a:	d100      	bne.n	8003e1e <HAL_GPIO_Init+0x22>
 8003e1c:	e091      	b.n	8003f42 <HAL_GPIO_Init+0x146>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e1e:	684a      	ldr	r2, [r1, #4]
 8003e20:	005f      	lsls	r7, r3, #1
 8003e22:	4694      	mov	ip, r2
 8003e24:	2203      	movs	r2, #3
 8003e26:	4664      	mov	r4, ip
 8003e28:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e2a:	2403      	movs	r4, #3
 8003e2c:	40bc      	lsls	r4, r7
 8003e2e:	43e4      	mvns	r4, r4
 8003e30:	9401      	str	r4, [sp, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e32:	1e54      	subs	r4, r2, #1
 8003e34:	2c01      	cmp	r4, #1
 8003e36:	d82e      	bhi.n	8003e96 <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 8003e38:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e3a:	9c01      	ldr	r4, [sp, #4]
 8003e3c:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e3e:	68cc      	ldr	r4, [r1, #12]
 8003e40:	40bc      	lsls	r4, r7
 8003e42:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8003e44:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8003e46:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e48:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e4a:	43ac      	bics	r4, r5
 8003e4c:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e4e:	4664      	mov	r4, ip
 8003e50:	0924      	lsrs	r4, r4, #4
 8003e52:	4034      	ands	r4, r6
 8003e54:	409c      	lsls	r4, r3
 8003e56:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8003e58:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8003e5a:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003e5c:	9c01      	ldr	r4, [sp, #4]
 8003e5e:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003e60:	688c      	ldr	r4, [r1, #8]
 8003e62:	40bc      	lsls	r4, r7
 8003e64:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8003e66:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e68:	2a02      	cmp	r2, #2
 8003e6a:	d116      	bne.n	8003e9a <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e6c:	2507      	movs	r5, #7
 8003e6e:	260f      	movs	r6, #15
 8003e70:	401d      	ands	r5, r3
 8003e72:	00ad      	lsls	r5, r5, #2
 8003e74:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 8003e76:	08dc      	lsrs	r4, r3, #3
 8003e78:	00a4      	lsls	r4, r4, #2
 8003e7a:	1904      	adds	r4, r0, r4
 8003e7c:	9402      	str	r4, [sp, #8]
 8003e7e:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e80:	9603      	str	r6, [sp, #12]
 8003e82:	0026      	movs	r6, r4
 8003e84:	9c03      	ldr	r4, [sp, #12]
 8003e86:	43a6      	bics	r6, r4
 8003e88:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e8a:	690e      	ldr	r6, [r1, #16]
 8003e8c:	40ae      	lsls	r6, r5
 8003e8e:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 8003e90:	9c02      	ldr	r4, [sp, #8]
 8003e92:	6226      	str	r6, [r4, #32]
 8003e94:	e001      	b.n	8003e9a <HAL_GPIO_Init+0x9e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e96:	2a03      	cmp	r2, #3
 8003e98:	d1df      	bne.n	8003e5a <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e9a:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8003e9c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003e9e:	9d01      	ldr	r5, [sp, #4]
 8003ea0:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ea2:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ea4:	24c0      	movs	r4, #192	; 0xc0
      GPIOx->MODER = temp;
 8003ea6:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ea8:	4662      	mov	r2, ip
 8003eaa:	02a4      	lsls	r4, r4, #10
 8003eac:	4222      	tst	r2, r4
 8003eae:	d048      	beq.n	8003f42 <HAL_GPIO_Init+0x146>
        temp = EXTI->EXTICR[position >> 2u];
 8003eb0:	4a25      	ldr	r2, [pc, #148]	; (8003f48 <HAL_GPIO_Init+0x14c>)
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003eb2:	2503      	movs	r5, #3
        temp = EXTI->EXTICR[position >> 2u];
 8003eb4:	089c      	lsrs	r4, r3, #2
 8003eb6:	00a4      	lsls	r4, r4, #2
 8003eb8:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003eba:	220f      	movs	r2, #15
 8003ebc:	401d      	ands	r5, r3
 8003ebe:	00ed      	lsls	r5, r5, #3
 8003ec0:	40aa      	lsls	r2, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003ec2:	27a0      	movs	r7, #160	; 0xa0
        temp = EXTI->EXTICR[position >> 2u];
 8003ec4:	6e26      	ldr	r6, [r4, #96]	; 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003ec6:	05ff      	lsls	r7, r7, #23
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003ec8:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003eca:	2200      	movs	r2, #0
 8003ecc:	42b8      	cmp	r0, r7
 8003ece:	d00c      	beq.n	8003eea <HAL_GPIO_Init+0xee>
 8003ed0:	4f1e      	ldr	r7, [pc, #120]	; (8003f4c <HAL_GPIO_Init+0x150>)
 8003ed2:	3201      	adds	r2, #1
 8003ed4:	42b8      	cmp	r0, r7
 8003ed6:	d008      	beq.n	8003eea <HAL_GPIO_Init+0xee>
 8003ed8:	4f1d      	ldr	r7, [pc, #116]	; (8003f50 <HAL_GPIO_Init+0x154>)
 8003eda:	3201      	adds	r2, #1
 8003edc:	42b8      	cmp	r0, r7
 8003ede:	d004      	beq.n	8003eea <HAL_GPIO_Init+0xee>
 8003ee0:	4f1c      	ldr	r7, [pc, #112]	; (8003f54 <HAL_GPIO_Init+0x158>)
 8003ee2:	3201      	adds	r2, #1
 8003ee4:	42b8      	cmp	r0, r7
 8003ee6:	d000      	beq.n	8003eea <HAL_GPIO_Init+0xee>
 8003ee8:	3202      	adds	r2, #2
 8003eea:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003eec:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003eee:	4332      	orrs	r2, r6
        EXTI->EXTICR[position >> 2u] = temp;
 8003ef0:	6622      	str	r2, [r4, #96]	; 0x60
        temp = EXTI->RTSR1;
 8003ef2:	4c15      	ldr	r4, [pc, #84]	; (8003f48 <HAL_GPIO_Init+0x14c>)
        temp &= ~(iocurrent);
 8003ef4:	9a00      	ldr	r2, [sp, #0]
        temp = EXTI->RTSR1;
 8003ef6:	6826      	ldr	r6, [r4, #0]
          temp |= iocurrent;
 8003ef8:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 8003efa:	43d2      	mvns	r2, r2
          temp |= iocurrent;
 8003efc:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003efe:	02ff      	lsls	r7, r7, #11
 8003f00:	d401      	bmi.n	8003f06 <HAL_GPIO_Init+0x10a>
        temp &= ~(iocurrent);
 8003f02:	0035      	movs	r5, r6
 8003f04:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f06:	4667      	mov	r7, ip
        EXTI->RTSR1 = temp;
 8003f08:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8003f0a:	6866      	ldr	r6, [r4, #4]
          temp |= iocurrent;
 8003f0c:	9d00      	ldr	r5, [sp, #0]
 8003f0e:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f10:	02bf      	lsls	r7, r7, #10
 8003f12:	d401      	bmi.n	8003f18 <HAL_GPIO_Init+0x11c>
        temp &= ~(iocurrent);
 8003f14:	0035      	movs	r5, r6
 8003f16:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f18:	4667      	mov	r7, ip
        EXTI->FTSR1 = temp;
 8003f1a:	6065      	str	r5, [r4, #4]
        temp = EXTI->EMR1;
 8003f1c:	4c0e      	ldr	r4, [pc, #56]	; (8003f58 <HAL_GPIO_Init+0x15c>)
          temp |= iocurrent;
 8003f1e:	9d00      	ldr	r5, [sp, #0]
        temp = EXTI->EMR1;
 8003f20:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
          temp |= iocurrent;
 8003f22:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f24:	03bf      	lsls	r7, r7, #14
 8003f26:	d401      	bmi.n	8003f2c <HAL_GPIO_Init+0x130>
        temp &= ~(iocurrent);
 8003f28:	0035      	movs	r5, r6
 8003f2a:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f2c:	4667      	mov	r7, ip
        EXTI->EMR1 = temp;
 8003f2e:	67e5      	str	r5, [r4, #124]	; 0x7c
        temp = EXTI->IMR1;
 8003f30:	4c0a      	ldr	r4, [pc, #40]	; (8003f5c <HAL_GPIO_Init+0x160>)
          temp |= iocurrent;
 8003f32:	9e00      	ldr	r6, [sp, #0]
        temp = EXTI->IMR1;
 8003f34:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
          temp |= iocurrent;
 8003f36:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f38:	03ff      	lsls	r7, r7, #15
 8003f3a:	d401      	bmi.n	8003f40 <HAL_GPIO_Init+0x144>
        temp &= ~(iocurrent);
 8003f3c:	4015      	ands	r5, r2
 8003f3e:	002e      	movs	r6, r5
        EXTI->IMR1 = temp;
 8003f40:	67e6      	str	r6, [r4, #124]	; 0x7c
    position++;
 8003f42:	3301      	adds	r3, #1
 8003f44:	e75d      	b.n	8003e02 <HAL_GPIO_Init+0x6>
 8003f46:	46c0      	nop			; (mov r8, r8)
 8003f48:	40021800 	.word	0x40021800
 8003f4c:	50000400 	.word	0x50000400
 8003f50:	50000800 	.word	0x50000800
 8003f54:	50000c00 	.word	0x50000c00
 8003f58:	40021808 	.word	0x40021808
 8003f5c:	40021804 	.word	0x40021804

08003f60 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003f60:	6900      	ldr	r0, [r0, #16]
 8003f62:	4008      	ands	r0, r1
 8003f64:	1e43      	subs	r3, r0, #1
 8003f66:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8003f68:	b2c0      	uxtb	r0, r0
}
 8003f6a:	4770      	bx	lr

08003f6c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f6c:	2a00      	cmp	r2, #0
 8003f6e:	d001      	beq.n	8003f74 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f70:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f72:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f74:	6281      	str	r1, [r0, #40]	; 0x28
}
 8003f76:	e7fc      	b.n	8003f72 <HAL_GPIO_WritePin+0x6>

08003f78 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003f78:	6803      	ldr	r3, [r0, #0]
 8003f7a:	699a      	ldr	r2, [r3, #24]
 8003f7c:	0792      	lsls	r2, r2, #30
 8003f7e:	d501      	bpl.n	8003f84 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003f80:	2200      	movs	r2, #0
 8003f82:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f84:	2201      	movs	r2, #1
 8003f86:	6999      	ldr	r1, [r3, #24]
 8003f88:	4211      	tst	r1, r2
 8003f8a:	d102      	bne.n	8003f92 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003f8c:	6999      	ldr	r1, [r3, #24]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	619a      	str	r2, [r3, #24]
  }
}
 8003f92:	4770      	bx	lr

08003f94 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003f94:	b530      	push	{r4, r5, lr}
 8003f96:	9c03      	ldr	r4, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003f98:	6800      	ldr	r0, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f9a:	4323      	orrs	r3, r4
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f9c:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f9e:	0589      	lsls	r1, r1, #22
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	0d89      	lsrs	r1, r1, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8003fa4:	4b05      	ldr	r3, [pc, #20]	; (8003fbc <I2C_TransferConfig+0x28>)
 8003fa6:	6845      	ldr	r5, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003fa8:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8003faa:	0d64      	lsrs	r4, r4, #21
 8003fac:	4323      	orrs	r3, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003fae:	0052      	lsls	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8003fb0:	439d      	bics	r5, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003fb2:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8003fb4:	432a      	orrs	r2, r5
 8003fb6:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003fb8:	bd30      	pop	{r4, r5, pc}
 8003fba:	46c0      	nop			; (mov r8, r8)
 8003fbc:	03ff63ff 	.word	0x03ff63ff

08003fc0 <I2C_IsErrorOccurred>:
{
 8003fc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fc2:	0015      	movs	r5, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8003fc4:	6802      	ldr	r2, [r0, #0]
{
 8003fc6:	000e      	movs	r6, r1
  uint32_t itflag   = hi2c->Instance->ISR;
 8003fc8:	6991      	ldr	r1, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003fca:	2310      	movs	r3, #16
 8003fcc:	000f      	movs	r7, r1
{
 8003fce:	0004      	movs	r4, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003fd0:	401f      	ands	r7, r3
  HAL_StatusTypeDef status = HAL_OK;
 8003fd2:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003fd4:	4219      	tst	r1, r3
 8003fd6:	d00e      	beq.n	8003ff6 <I2C_IsErrorOccurred+0x36>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003fd8:	2720      	movs	r7, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fda:	61d3      	str	r3, [r2, #28]
  uint32_t error_code = 0;
 8003fdc:	9000      	str	r0, [sp, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fde:	9001      	str	r0, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003fe0:	6823      	ldr	r3, [r4, #0]
 8003fe2:	699a      	ldr	r2, [r3, #24]
 8003fe4:	423a      	tst	r2, r7
 8003fe6:	d163      	bne.n	80040b0 <I2C_IsErrorOccurred+0xf0>
 8003fe8:	9a01      	ldr	r2, [sp, #4]
 8003fea:	2a00      	cmp	r2, #0
 8003fec:	d031      	beq.n	8004052 <I2C_IsErrorOccurred+0x92>
    error_code |= HAL_I2C_ERROR_AF;
 8003fee:	2704      	movs	r7, #4
    status = HAL_ERROR;
 8003ff0:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 8003ff2:	9b00      	ldr	r3, [sp, #0]
 8003ff4:	431f      	orrs	r7, r3
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003ff6:	2280      	movs	r2, #128	; 0x80
  itflag = hi2c->Instance->ISR;
 8003ff8:	6825      	ldr	r5, [r4, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003ffa:	0052      	lsls	r2, r2, #1
  itflag = hi2c->Instance->ISR;
 8003ffc:	69ab      	ldr	r3, [r5, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003ffe:	4213      	tst	r3, r2
 8004000:	d002      	beq.n	8004008 <I2C_IsErrorOccurred+0x48>
    error_code |= HAL_I2C_ERROR_BERR;
 8004002:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004004:	61ea      	str	r2, [r5, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8004006:	4307      	orrs	r7, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004008:	2280      	movs	r2, #128	; 0x80
 800400a:	00d2      	lsls	r2, r2, #3
 800400c:	4213      	tst	r3, r2
 800400e:	d003      	beq.n	8004018 <I2C_IsErrorOccurred+0x58>
    error_code |= HAL_I2C_ERROR_OVR;
 8004010:	2108      	movs	r1, #8
    status = HAL_ERROR;
 8004012:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_OVR;
 8004014:	430f      	orrs	r7, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004016:	61ea      	str	r2, [r5, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004018:	2280      	movs	r2, #128	; 0x80
 800401a:	0092      	lsls	r2, r2, #2
 800401c:	4213      	tst	r3, r2
 800401e:	d04c      	beq.n	80040ba <I2C_IsErrorOccurred+0xfa>
    error_code |= HAL_I2C_ERROR_ARLO;
 8004020:	2302      	movs	r3, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004022:	61ea      	str	r2, [r5, #28]
    error_code |= HAL_I2C_ERROR_ARLO;
 8004024:	431f      	orrs	r7, r3
    I2C_Flush_TXDR(hi2c);
 8004026:	0020      	movs	r0, r4
 8004028:	f7ff ffa6 	bl	8003f78 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800402c:	686b      	ldr	r3, [r5, #4]
 800402e:	4a24      	ldr	r2, [pc, #144]	; (80040c0 <I2C_IsErrorOccurred+0x100>)
    __HAL_UNLOCK(hi2c);
 8004030:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8004032:	4013      	ands	r3, r2
 8004034:	606b      	str	r3, [r5, #4]
    hi2c->ErrorCode |= error_code;
 8004036:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004038:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 800403a:	433b      	orrs	r3, r7
 800403c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800403e:	0023      	movs	r3, r4
 8004040:	3341      	adds	r3, #65	; 0x41
 8004042:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004044:	0022      	movs	r2, r4
 8004046:	2300      	movs	r3, #0
 8004048:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 800404a:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800404c:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 800404e:	7023      	strb	r3, [r4, #0]
 8004050:	e035      	b.n	80040be <I2C_IsErrorOccurred+0xfe>
      if (Timeout != HAL_MAX_DELAY)
 8004052:	1c72      	adds	r2, r6, #1
 8004054:	d0c5      	beq.n	8003fe2 <I2C_IsErrorOccurred+0x22>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004056:	f7ff f911 	bl	800327c <HAL_GetTick>
 800405a:	1b40      	subs	r0, r0, r5
 800405c:	42b0      	cmp	r0, r6
 800405e:	d801      	bhi.n	8004064 <I2C_IsErrorOccurred+0xa4>
 8004060:	2e00      	cmp	r6, #0
 8004062:	d1bd      	bne.n	8003fe0 <I2C_IsErrorOccurred+0x20>
          tmp2 = hi2c->Mode;
 8004064:	0022      	movs	r2, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004066:	6823      	ldr	r3, [r4, #0]
          tmp2 = hi2c->Mode;
 8004068:	3242      	adds	r2, #66	; 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800406a:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800406c:	7811      	ldrb	r1, [r2, #0]
 800406e:	b2ca      	uxtb	r2, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004070:	2180      	movs	r1, #128	; 0x80
          tmp2 = hi2c->Mode;
 8004072:	4694      	mov	ip, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004074:	699a      	ldr	r2, [r3, #24]
 8004076:	0209      	lsls	r1, r1, #8
 8004078:	420a      	tst	r2, r1
 800407a:	d00c      	beq.n	8004096 <I2C_IsErrorOccurred+0xd6>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800407c:	2280      	movs	r2, #128	; 0x80
 800407e:	01d2      	lsls	r2, r2, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004080:	4210      	tst	r0, r2
 8004082:	d108      	bne.n	8004096 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004084:	4661      	mov	r1, ip
 8004086:	2920      	cmp	r1, #32
 8004088:	d005      	beq.n	8004096 <I2C_IsErrorOccurred+0xd6>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800408a:	6859      	ldr	r1, [r3, #4]
 800408c:	430a      	orrs	r2, r1
 800408e:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8004090:	f7ff f8f4 	bl	800327c <HAL_GetTick>
 8004094:	0005      	movs	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004096:	6823      	ldr	r3, [r4, #0]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	423b      	tst	r3, r7
 800409c:	d1a0      	bne.n	8003fe0 <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800409e:	f7ff f8ed 	bl	800327c <HAL_GetTick>
 80040a2:	1b40      	subs	r0, r0, r5
 80040a4:	2819      	cmp	r0, #25
 80040a6:	d9f6      	bls.n	8004096 <I2C_IsErrorOccurred+0xd6>
              status = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80040aa:	9700      	str	r7, [sp, #0]
              status = HAL_ERROR;
 80040ac:	9301      	str	r3, [sp, #4]
 80040ae:	e797      	b.n	8003fe0 <I2C_IsErrorOccurred+0x20>
    if (status == HAL_OK)
 80040b0:	9a01      	ldr	r2, [sp, #4]
 80040b2:	2a00      	cmp	r2, #0
 80040b4:	d19b      	bne.n	8003fee <I2C_IsErrorOccurred+0x2e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040b6:	61df      	str	r7, [r3, #28]
 80040b8:	e799      	b.n	8003fee <I2C_IsErrorOccurred+0x2e>
  if (status != HAL_OK)
 80040ba:	2800      	cmp	r0, #0
 80040bc:	d1b3      	bne.n	8004026 <I2C_IsErrorOccurred+0x66>
}
 80040be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80040c0:	fe00e800 	.word	0xfe00e800

080040c4 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80040c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040c6:	0004      	movs	r4, r0
 80040c8:	000d      	movs	r5, r1
 80040ca:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80040cc:	2702      	movs	r7, #2
 80040ce:	6823      	ldr	r3, [r4, #0]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	423b      	tst	r3, r7
 80040d4:	d001      	beq.n	80040da <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 80040d6:	2000      	movs	r0, #0
}
 80040d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80040da:	0032      	movs	r2, r6
 80040dc:	0029      	movs	r1, r5
 80040de:	0020      	movs	r0, r4
 80040e0:	f7ff ff6e 	bl	8003fc0 <I2C_IsErrorOccurred>
 80040e4:	2800      	cmp	r0, #0
 80040e6:	d118      	bne.n	800411a <I2C_WaitOnTXISFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 80040e8:	1c6b      	adds	r3, r5, #1
 80040ea:	d0f0      	beq.n	80040ce <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ec:	f7ff f8c6 	bl	800327c <HAL_GetTick>
 80040f0:	1b80      	subs	r0, r0, r6
 80040f2:	42a8      	cmp	r0, r5
 80040f4:	d801      	bhi.n	80040fa <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 80040f6:	2d00      	cmp	r5, #0
 80040f8:	d1e9      	bne.n	80040ce <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80040fa:	6823      	ldr	r3, [r4, #0]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	001a      	movs	r2, r3
 8004100:	403a      	ands	r2, r7
 8004102:	423b      	tst	r3, r7
 8004104:	d1e3      	bne.n	80040ce <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004106:	2120      	movs	r1, #32
 8004108:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800410a:	430b      	orrs	r3, r1
 800410c:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800410e:	0023      	movs	r3, r4
          __HAL_UNLOCK(hi2c);
 8004110:	3440      	adds	r4, #64	; 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 8004112:	3341      	adds	r3, #65	; 0x41
 8004114:	7019      	strb	r1, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004116:	705a      	strb	r2, [r3, #1]
          __HAL_UNLOCK(hi2c);
 8004118:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 800411a:	2001      	movs	r0, #1
 800411c:	e7dc      	b.n	80040d8 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

0800411e <I2C_WaitOnFlagUntilTimeout>:
{
 800411e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004120:	0004      	movs	r4, r0
 8004122:	000d      	movs	r5, r1
 8004124:	0017      	movs	r7, r2
 8004126:	001e      	movs	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004128:	6823      	ldr	r3, [r4, #0]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	402b      	ands	r3, r5
 800412e:	1b5b      	subs	r3, r3, r5
 8004130:	425a      	negs	r2, r3
 8004132:	4153      	adcs	r3, r2
 8004134:	42bb      	cmp	r3, r7
 8004136:	d001      	beq.n	800413c <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8004138:	2000      	movs	r0, #0
}
 800413a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800413c:	0031      	movs	r1, r6
 800413e:	0020      	movs	r0, r4
 8004140:	9a06      	ldr	r2, [sp, #24]
 8004142:	f7ff ff3d 	bl	8003fc0 <I2C_IsErrorOccurred>
 8004146:	2800      	cmp	r0, #0
 8004148:	d11e      	bne.n	8004188 <I2C_WaitOnFlagUntilTimeout+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 800414a:	1c73      	adds	r3, r6, #1
 800414c:	d0ec      	beq.n	8004128 <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800414e:	f7ff f895 	bl	800327c <HAL_GetTick>
 8004152:	9b06      	ldr	r3, [sp, #24]
 8004154:	1ac0      	subs	r0, r0, r3
 8004156:	42b0      	cmp	r0, r6
 8004158:	d801      	bhi.n	800415e <I2C_WaitOnFlagUntilTimeout+0x40>
 800415a:	2e00      	cmp	r6, #0
 800415c:	d1e4      	bne.n	8004128 <I2C_WaitOnFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800415e:	6823      	ldr	r3, [r4, #0]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	402b      	ands	r3, r5
 8004164:	1b5b      	subs	r3, r3, r5
 8004166:	425a      	negs	r2, r3
 8004168:	4153      	adcs	r3, r2
 800416a:	42bb      	cmp	r3, r7
 800416c:	d1dc      	bne.n	8004128 <I2C_WaitOnFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800416e:	2220      	movs	r2, #32
 8004170:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004172:	4313      	orrs	r3, r2
 8004174:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004176:	0023      	movs	r3, r4
 8004178:	3341      	adds	r3, #65	; 0x41
 800417a:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800417c:	0022      	movs	r2, r4
 800417e:	2300      	movs	r3, #0
 8004180:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 8004182:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004184:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 8004186:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8004188:	2001      	movs	r0, #1
 800418a:	e7d6      	b.n	800413a <I2C_WaitOnFlagUntilTimeout+0x1c>

0800418c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800418c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800418e:	0004      	movs	r4, r0
 8004190:	000e      	movs	r6, r1
 8004192:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004194:	2520      	movs	r5, #32
 8004196:	6823      	ldr	r3, [r4, #0]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	422b      	tst	r3, r5
 800419c:	d001      	beq.n	80041a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 800419e:	2000      	movs	r0, #0
}
 80041a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80041a2:	003a      	movs	r2, r7
 80041a4:	0031      	movs	r1, r6
 80041a6:	0020      	movs	r0, r4
 80041a8:	f7ff ff0a 	bl	8003fc0 <I2C_IsErrorOccurred>
 80041ac:	2800      	cmp	r0, #0
 80041ae:	d115      	bne.n	80041dc <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041b0:	f7ff f864 	bl	800327c <HAL_GetTick>
 80041b4:	1bc0      	subs	r0, r0, r7
 80041b6:	42b0      	cmp	r0, r6
 80041b8:	d801      	bhi.n	80041be <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 80041ba:	2e00      	cmp	r6, #0
 80041bc:	d1eb      	bne.n	8004196 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80041be:	6823      	ldr	r3, [r4, #0]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	001a      	movs	r2, r3
 80041c4:	402a      	ands	r2, r5
 80041c6:	422b      	tst	r3, r5
 80041c8:	d1e5      	bne.n	8004196 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80041cc:	432b      	orrs	r3, r5
 80041ce:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80041d0:	0023      	movs	r3, r4
        __HAL_UNLOCK(hi2c);
 80041d2:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 80041d4:	3341      	adds	r3, #65	; 0x41
 80041d6:	701d      	strb	r5, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d8:	705a      	strb	r2, [r3, #1]
        __HAL_UNLOCK(hi2c);
 80041da:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 80041dc:	2001      	movs	r0, #1
 80041de:	e7df      	b.n	80041a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

080041e0 <HAL_I2C_Init>:
{
 80041e0:	b570      	push	{r4, r5, r6, lr}
 80041e2:	0004      	movs	r4, r0
    return HAL_ERROR;
 80041e4:	2001      	movs	r0, #1
  if (hi2c == NULL)
 80041e6:	2c00      	cmp	r4, #0
 80041e8:	d04e      	beq.n	8004288 <HAL_I2C_Init+0xa8>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041ea:	0025      	movs	r5, r4
 80041ec:	3541      	adds	r5, #65	; 0x41
 80041ee:	782b      	ldrb	r3, [r5, #0]
 80041f0:	b2da      	uxtb	r2, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d105      	bne.n	8004202 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 80041f6:	0023      	movs	r3, r4
 80041f8:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 80041fa:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 80041fc:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 80041fe:	f7fe fdd5 	bl	8002dac <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004202:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8004204:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004206:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8004208:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800420a:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 800420c:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800420e:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8004210:	438a      	bics	r2, r1
 8004212:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004214:	491d      	ldr	r1, [pc, #116]	; (800428c <HAL_I2C_Init+0xac>)
 8004216:	6862      	ldr	r2, [r4, #4]
 8004218:	400a      	ands	r2, r1
 800421a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800421c:	689a      	ldr	r2, [r3, #8]
 800421e:	491c      	ldr	r1, [pc, #112]	; (8004290 <HAL_I2C_Init+0xb0>)
 8004220:	400a      	ands	r2, r1
 8004222:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004224:	2801      	cmp	r0, #1
 8004226:	d107      	bne.n	8004238 <HAL_I2C_Init+0x58>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004228:	2280      	movs	r2, #128	; 0x80
 800422a:	0212      	lsls	r2, r2, #8
 800422c:	4332      	orrs	r2, r6
 800422e:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	4818      	ldr	r0, [pc, #96]	; (8004294 <HAL_I2C_Init+0xb4>)
 8004234:	4002      	ands	r2, r0
 8004236:	e009      	b.n	800424c <HAL_I2C_Init+0x6c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004238:	2284      	movs	r2, #132	; 0x84
 800423a:	0212      	lsls	r2, r2, #8
 800423c:	4332      	orrs	r2, r6
 800423e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004240:	2802      	cmp	r0, #2
 8004242:	d1f5      	bne.n	8004230 <HAL_I2C_Init+0x50>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004244:	2280      	movs	r2, #128	; 0x80
 8004246:	6858      	ldr	r0, [r3, #4]
 8004248:	0112      	lsls	r2, r2, #4
 800424a:	4302      	orrs	r2, r0
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800424c:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800424e:	6858      	ldr	r0, [r3, #4]
 8004250:	4a11      	ldr	r2, [pc, #68]	; (8004298 <HAL_I2C_Init+0xb8>)
 8004252:	4302      	orrs	r2, r0
 8004254:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004256:	68da      	ldr	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004258:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800425a:	400a      	ands	r2, r1
 800425c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800425e:	6961      	ldr	r1, [r4, #20]
 8004260:	6922      	ldr	r2, [r4, #16]
 8004262:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004264:	69a1      	ldr	r1, [r4, #24]
 8004266:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004268:	430a      	orrs	r2, r1
 800426a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800426c:	6a21      	ldr	r1, [r4, #32]
 800426e:	69e2      	ldr	r2, [r4, #28]
 8004270:	430a      	orrs	r2, r1
 8004272:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8004274:	2201      	movs	r2, #1
 8004276:	6819      	ldr	r1, [r3, #0]
 8004278:	430a      	orrs	r2, r1
 800427a:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800427c:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800427e:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004280:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004282:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004284:	3442      	adds	r4, #66	; 0x42
 8004286:	7020      	strb	r0, [r4, #0]
}
 8004288:	bd70      	pop	{r4, r5, r6, pc}
 800428a:	46c0      	nop			; (mov r8, r8)
 800428c:	f0ffffff 	.word	0xf0ffffff
 8004290:	ffff7fff 	.word	0xffff7fff
 8004294:	fffff7ff 	.word	0xfffff7ff
 8004298:	02008000 	.word	0x02008000

0800429c <HAL_I2C_Mem_Write>:
{
 800429c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800429e:	b089      	sub	sp, #36	; 0x24
 80042a0:	9304      	str	r3, [sp, #16]
 80042a2:	ab0e      	add	r3, sp, #56	; 0x38
 80042a4:	9203      	str	r2, [sp, #12]
 80042a6:	cb04      	ldmia	r3!, {r2}
 80042a8:	0004      	movs	r4, r0
 80042aa:	881b      	ldrh	r3, [r3, #0]
 80042ac:	9205      	str	r2, [sp, #20]
 80042ae:	9306      	str	r3, [sp, #24]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80042b0:	0003      	movs	r3, r0
 80042b2:	3341      	adds	r3, #65	; 0x41
 80042b4:	9307      	str	r3, [sp, #28]
 80042b6:	781b      	ldrb	r3, [r3, #0]
{
 80042b8:	000f      	movs	r7, r1
    return HAL_BUSY;
 80042ba:	2002      	movs	r0, #2
{
 80042bc:	9e10      	ldr	r6, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 80042be:	2b20      	cmp	r3, #32
 80042c0:	d108      	bne.n	80042d4 <HAL_I2C_Mem_Write+0x38>
    if ((pData == NULL) || (Size == 0U))
 80042c2:	2a00      	cmp	r2, #0
 80042c4:	d002      	beq.n	80042cc <HAL_I2C_Mem_Write+0x30>
 80042c6:	9b06      	ldr	r3, [sp, #24]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d105      	bne.n	80042d8 <HAL_I2C_Mem_Write+0x3c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80042cc:	2380      	movs	r3, #128	; 0x80
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80042d2:	2001      	movs	r0, #1
}
 80042d4:	b009      	add	sp, #36	; 0x24
 80042d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 80042d8:	0023      	movs	r3, r4
 80042da:	3340      	adds	r3, #64	; 0x40
 80042dc:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 80042de:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 80042e0:	2a01      	cmp	r2, #1
 80042e2:	d0f7      	beq.n	80042d4 <HAL_I2C_Mem_Write+0x38>
 80042e4:	2201      	movs	r2, #1
 80042e6:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80042e8:	f7fe ffc8 	bl	800327c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042ec:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 80042ee:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042f0:	9000      	str	r0, [sp, #0]
 80042f2:	2319      	movs	r3, #25
 80042f4:	2201      	movs	r2, #1
 80042f6:	0020      	movs	r0, r4
 80042f8:	0209      	lsls	r1, r1, #8
 80042fa:	f7ff ff10 	bl	800411e <I2C_WaitOnFlagUntilTimeout>
 80042fe:	2800      	cmp	r0, #0
 8004300:	d1e7      	bne.n	80042d2 <HAL_I2C_Mem_Write+0x36>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004302:	2321      	movs	r3, #33	; 0x21
 8004304:	9a07      	ldr	r2, [sp, #28]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004306:	0039      	movs	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004308:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800430a:	0023      	movs	r3, r4
 800430c:	3342      	adds	r3, #66	; 0x42
 800430e:	9307      	str	r3, [sp, #28]
 8004310:	2340      	movs	r3, #64	; 0x40
 8004312:	9a07      	ldr	r2, [sp, #28]
 8004314:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr  = pData;
 8004316:	9b05      	ldr	r3, [sp, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004318:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800431a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800431c:	9b06      	ldr	r3, [sp, #24]
    hi2c->XferISR   = NULL;
 800431e:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8004320:	8563      	strh	r3, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004322:	466b      	mov	r3, sp
 8004324:	7c1a      	ldrb	r2, [r3, #16]
 8004326:	4b4c      	ldr	r3, [pc, #304]	; (8004458 <HAL_I2C_Mem_Write+0x1bc>)
 8004328:	0020      	movs	r0, r4
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	2380      	movs	r3, #128	; 0x80
 800432e:	045b      	lsls	r3, r3, #17
 8004330:	f7ff fe30 	bl	8003f94 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004334:	002a      	movs	r2, r5
 8004336:	0031      	movs	r1, r6
 8004338:	0020      	movs	r0, r4
 800433a:	f7ff fec3 	bl	80040c4 <I2C_WaitOnTXISFlagUntilTimeout>
 800433e:	2800      	cmp	r0, #0
 8004340:	d129      	bne.n	8004396 <HAL_I2C_Mem_Write+0xfa>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004342:	9a04      	ldr	r2, [sp, #16]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004344:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004346:	2a01      	cmp	r2, #1
 8004348:	d116      	bne.n	8004378 <HAL_I2C_Mem_Write+0xdc>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800434a:	466a      	mov	r2, sp
 800434c:	7b12      	ldrb	r2, [r2, #12]
 800434e:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004350:	0033      	movs	r3, r6
 8004352:	2200      	movs	r2, #0
 8004354:	2180      	movs	r1, #128	; 0x80
 8004356:	0020      	movs	r0, r4
 8004358:	9500      	str	r5, [sp, #0]
 800435a:	f7ff fee0 	bl	800411e <I2C_WaitOnFlagUntilTimeout>
 800435e:	2800      	cmp	r0, #0
 8004360:	d119      	bne.n	8004396 <HAL_I2C_Mem_Write+0xfa>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004362:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004364:	2bff      	cmp	r3, #255	; 0xff
 8004366:	d81a      	bhi.n	800439e <HAL_I2C_Mem_Write+0x102>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004368:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = hi2c->XferCount;
 800436a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800436c:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 800436e:	b292      	uxth	r2, r2
 8004370:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004372:	b2d2      	uxtb	r2, r2
 8004374:	9000      	str	r0, [sp, #0]
 8004376:	e017      	b.n	80043a8 <HAL_I2C_Mem_Write+0x10c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004378:	9a03      	ldr	r2, [sp, #12]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800437a:	0031      	movs	r1, r6
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800437c:	0a12      	lsrs	r2, r2, #8
 800437e:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004380:	0020      	movs	r0, r4
 8004382:	002a      	movs	r2, r5
 8004384:	f7ff fe9e 	bl	80040c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004388:	2800      	cmp	r0, #0
 800438a:	d104      	bne.n	8004396 <HAL_I2C_Mem_Write+0xfa>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800438c:	466b      	mov	r3, sp
 800438e:	6822      	ldr	r2, [r4, #0]
 8004390:	7b1b      	ldrb	r3, [r3, #12]
 8004392:	6293      	str	r3, [r2, #40]	; 0x28
 8004394:	e7dc      	b.n	8004350 <HAL_I2C_Mem_Write+0xb4>
      __HAL_UNLOCK(hi2c);
 8004396:	2300      	movs	r3, #0
 8004398:	3440      	adds	r4, #64	; 0x40
 800439a:	7023      	strb	r3, [r4, #0]
 800439c:	e799      	b.n	80042d2 <HAL_I2C_Mem_Write+0x36>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800439e:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80043a0:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80043a2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80043a4:	045b      	lsls	r3, r3, #17
 80043a6:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80043a8:	0039      	movs	r1, r7
 80043aa:	0020      	movs	r0, r4
 80043ac:	f7ff fdf2 	bl	8003f94 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043b0:	002a      	movs	r2, r5
 80043b2:	0031      	movs	r1, r6
 80043b4:	0020      	movs	r0, r4
 80043b6:	f7ff fe85 	bl	80040c4 <I2C_WaitOnTXISFlagUntilTimeout>
 80043ba:	2800      	cmp	r0, #0
 80043bc:	d000      	beq.n	80043c0 <HAL_I2C_Mem_Write+0x124>
 80043be:	e788      	b.n	80042d2 <HAL_I2C_Mem_Write+0x36>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80043c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043c2:	6822      	ldr	r2, [r4, #0]
 80043c4:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 80043c6:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80043c8:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80043ca:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80043cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80043ce:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80043d0:	3b01      	subs	r3, #1
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80043d6:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80043da:	b292      	uxth	r2, r2
 80043dc:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d017      	beq.n	8004412 <HAL_I2C_Mem_Write+0x176>
 80043e2:	2a00      	cmp	r2, #0
 80043e4:	d115      	bne.n	8004412 <HAL_I2C_Mem_Write+0x176>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043e6:	0033      	movs	r3, r6
 80043e8:	2180      	movs	r1, #128	; 0x80
 80043ea:	0020      	movs	r0, r4
 80043ec:	9500      	str	r5, [sp, #0]
 80043ee:	f7ff fe96 	bl	800411e <I2C_WaitOnFlagUntilTimeout>
 80043f2:	2800      	cmp	r0, #0
 80043f4:	d000      	beq.n	80043f8 <HAL_I2C_Mem_Write+0x15c>
 80043f6:	e76c      	b.n	80042d2 <HAL_I2C_Mem_Write+0x36>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80043fa:	2bff      	cmp	r3, #255	; 0xff
 80043fc:	d923      	bls.n	8004446 <HAL_I2C_Mem_Write+0x1aa>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80043fe:	23ff      	movs	r3, #255	; 0xff
 8004400:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004402:	2380      	movs	r3, #128	; 0x80
 8004404:	22ff      	movs	r2, #255	; 0xff
 8004406:	9000      	str	r0, [sp, #0]
 8004408:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800440a:	0039      	movs	r1, r7
 800440c:	0020      	movs	r0, r4
 800440e:	f7ff fdc1 	bl	8003f94 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8004412:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1cb      	bne.n	80043b0 <HAL_I2C_Mem_Write+0x114>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004418:	002a      	movs	r2, r5
 800441a:	0031      	movs	r1, r6
 800441c:	0020      	movs	r0, r4
 800441e:	f7ff feb5 	bl	800418c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004422:	2800      	cmp	r0, #0
 8004424:	d000      	beq.n	8004428 <HAL_I2C_Mem_Write+0x18c>
 8004426:	e754      	b.n	80042d2 <HAL_I2C_Mem_Write+0x36>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004428:	2120      	movs	r1, #32
 800442a:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800442c:	4d0b      	ldr	r5, [pc, #44]	; (800445c <HAL_I2C_Mem_Write+0x1c0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800442e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004430:	685a      	ldr	r2, [r3, #4]
 8004432:	402a      	ands	r2, r5
 8004434:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004436:	0023      	movs	r3, r4
 8004438:	3341      	adds	r3, #65	; 0x41
 800443a:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800443c:	9b07      	ldr	r3, [sp, #28]
    __HAL_UNLOCK(hi2c);
 800443e:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004440:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8004442:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8004444:	e746      	b.n	80042d4 <HAL_I2C_Mem_Write+0x38>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004446:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8004448:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800444a:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 800444c:	b292      	uxth	r2, r2
 800444e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004450:	b2d2      	uxtb	r2, r2
 8004452:	9000      	str	r0, [sp, #0]
 8004454:	e7d9      	b.n	800440a <HAL_I2C_Mem_Write+0x16e>
 8004456:	46c0      	nop			; (mov r8, r8)
 8004458:	80002000 	.word	0x80002000
 800445c:	fe00e800 	.word	0xfe00e800

08004460 <HAL_I2C_Mem_Read>:
{
 8004460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004462:	b089      	sub	sp, #36	; 0x24
 8004464:	9304      	str	r3, [sp, #16]
 8004466:	ab0e      	add	r3, sp, #56	; 0x38
 8004468:	9203      	str	r2, [sp, #12]
 800446a:	cb04      	ldmia	r3!, {r2}
 800446c:	0004      	movs	r4, r0
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	9205      	str	r2, [sp, #20]
 8004472:	9306      	str	r3, [sp, #24]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004474:	0003      	movs	r3, r0
 8004476:	3341      	adds	r3, #65	; 0x41
 8004478:	9307      	str	r3, [sp, #28]
 800447a:	781b      	ldrb	r3, [r3, #0]
{
 800447c:	000f      	movs	r7, r1
    return HAL_BUSY;
 800447e:	2002      	movs	r0, #2
{
 8004480:	9e10      	ldr	r6, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004482:	2b20      	cmp	r3, #32
 8004484:	d108      	bne.n	8004498 <HAL_I2C_Mem_Read+0x38>
    if ((pData == NULL) || (Size == 0U))
 8004486:	2a00      	cmp	r2, #0
 8004488:	d002      	beq.n	8004490 <HAL_I2C_Mem_Read+0x30>
 800448a:	9b06      	ldr	r3, [sp, #24]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d105      	bne.n	800449c <HAL_I2C_Mem_Read+0x3c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004490:	2380      	movs	r3, #128	; 0x80
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8004496:	2001      	movs	r0, #1
}
 8004498:	b009      	add	sp, #36	; 0x24
 800449a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 800449c:	0023      	movs	r3, r4
 800449e:	3340      	adds	r3, #64	; 0x40
 80044a0:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 80044a2:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 80044a4:	2a01      	cmp	r2, #1
 80044a6:	d0f7      	beq.n	8004498 <HAL_I2C_Mem_Read+0x38>
 80044a8:	2201      	movs	r2, #1
 80044aa:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80044ac:	f7fe fee6 	bl	800327c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80044b0:	2180      	movs	r1, #128	; 0x80
 80044b2:	2319      	movs	r3, #25
 80044b4:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80044b6:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80044b8:	2201      	movs	r2, #1
 80044ba:	0020      	movs	r0, r4
 80044bc:	0209      	lsls	r1, r1, #8
 80044be:	f7ff fe2e 	bl	800411e <I2C_WaitOnFlagUntilTimeout>
 80044c2:	1e03      	subs	r3, r0, #0
 80044c4:	d1e7      	bne.n	8004496 <HAL_I2C_Mem_Read+0x36>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80044c6:	2222      	movs	r2, #34	; 0x22
 80044c8:	9907      	ldr	r1, [sp, #28]
 80044ca:	700a      	strb	r2, [r1, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044cc:	0022      	movs	r2, r4
 80044ce:	3242      	adds	r2, #66	; 0x42
 80044d0:	9207      	str	r2, [sp, #28]
 80044d2:	2240      	movs	r2, #64	; 0x40
 80044d4:	9907      	ldr	r1, [sp, #28]
 80044d6:	700a      	strb	r2, [r1, #0]
    hi2c->pBuffPtr  = pData;
 80044d8:	9a05      	ldr	r2, [sp, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044da:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80044dc:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80044de:	9a06      	ldr	r2, [sp, #24]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80044e0:	494f      	ldr	r1, [pc, #316]	; (8004620 <HAL_I2C_Mem_Read+0x1c0>)
    hi2c->XferCount = Size;
 80044e2:	8562      	strh	r2, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80044e4:	466a      	mov	r2, sp
    hi2c->XferISR   = NULL;
 80044e6:	6360      	str	r0, [r4, #52]	; 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80044e8:	7c12      	ldrb	r2, [r2, #16]
 80044ea:	0020      	movs	r0, r4
 80044ec:	9100      	str	r1, [sp, #0]
 80044ee:	0039      	movs	r1, r7
 80044f0:	f7ff fd50 	bl	8003f94 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044f4:	002a      	movs	r2, r5
 80044f6:	0031      	movs	r1, r6
 80044f8:	0020      	movs	r0, r4
 80044fa:	f7ff fde3 	bl	80040c4 <I2C_WaitOnTXISFlagUntilTimeout>
 80044fe:	2800      	cmp	r0, #0
 8004500:	d12a      	bne.n	8004558 <HAL_I2C_Mem_Read+0xf8>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004502:	9a04      	ldr	r2, [sp, #16]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004504:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004506:	2a01      	cmp	r2, #1
 8004508:	d117      	bne.n	800453a <HAL_I2C_Mem_Read+0xda>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800450a:	466a      	mov	r2, sp
 800450c:	7b12      	ldrb	r2, [r2, #12]
 800450e:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004510:	0033      	movs	r3, r6
 8004512:	2200      	movs	r2, #0
 8004514:	2140      	movs	r1, #64	; 0x40
 8004516:	0020      	movs	r0, r4
 8004518:	9500      	str	r5, [sp, #0]
 800451a:	f7ff fe00 	bl	800411e <I2C_WaitOnFlagUntilTimeout>
 800451e:	2800      	cmp	r0, #0
 8004520:	d11a      	bne.n	8004558 <HAL_I2C_Mem_Read+0xf8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004522:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004524:	4b3f      	ldr	r3, [pc, #252]	; (8004624 <HAL_I2C_Mem_Read+0x1c4>)
 8004526:	2aff      	cmp	r2, #255	; 0xff
 8004528:	d81a      	bhi.n	8004560 <HAL_I2C_Mem_Read+0x100>
      hi2c->XferSize = hi2c->XferCount;
 800452a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800452c:	b292      	uxth	r2, r2
 800452e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	2380      	movs	r3, #128	; 0x80
 8004534:	b2d2      	uxtb	r2, r2
 8004536:	049b      	lsls	r3, r3, #18
 8004538:	e017      	b.n	800456a <HAL_I2C_Mem_Read+0x10a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800453a:	9a03      	ldr	r2, [sp, #12]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800453c:	0031      	movs	r1, r6
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800453e:	0a12      	lsrs	r2, r2, #8
 8004540:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004542:	0020      	movs	r0, r4
 8004544:	002a      	movs	r2, r5
 8004546:	f7ff fdbd 	bl	80040c4 <I2C_WaitOnTXISFlagUntilTimeout>
 800454a:	2800      	cmp	r0, #0
 800454c:	d104      	bne.n	8004558 <HAL_I2C_Mem_Read+0xf8>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800454e:	466b      	mov	r3, sp
 8004550:	6822      	ldr	r2, [r4, #0]
 8004552:	7b1b      	ldrb	r3, [r3, #12]
 8004554:	6293      	str	r3, [r2, #40]	; 0x28
 8004556:	e7db      	b.n	8004510 <HAL_I2C_Mem_Read+0xb0>
      __HAL_UNLOCK(hi2c);
 8004558:	2300      	movs	r3, #0
 800455a:	3440      	adds	r4, #64	; 0x40
 800455c:	7023      	strb	r3, [r4, #0]
 800455e:	e79a      	b.n	8004496 <HAL_I2C_Mem_Read+0x36>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004560:	22ff      	movs	r2, #255	; 0xff
 8004562:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	2380      	movs	r3, #128	; 0x80
 8004568:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800456a:	0039      	movs	r1, r7
 800456c:	0020      	movs	r0, r4
 800456e:	f7ff fd11 	bl	8003f94 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004572:	0033      	movs	r3, r6
 8004574:	2200      	movs	r2, #0
 8004576:	2104      	movs	r1, #4
 8004578:	0020      	movs	r0, r4
 800457a:	9500      	str	r5, [sp, #0]
 800457c:	f7ff fdcf 	bl	800411e <I2C_WaitOnFlagUntilTimeout>
 8004580:	2800      	cmp	r0, #0
 8004582:	d000      	beq.n	8004586 <HAL_I2C_Mem_Read+0x126>
 8004584:	e787      	b.n	8004496 <HAL_I2C_Mem_Read+0x36>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004586:	6823      	ldr	r3, [r4, #0]
 8004588:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800458a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800458c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800458e:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004590:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004592:	3301      	adds	r3, #1
 8004594:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004596:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004598:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800459a:	3b01      	subs	r3, #1
 800459c:	b29b      	uxth	r3, r3
 800459e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80045a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80045a2:	b292      	uxth	r2, r2
 80045a4:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d017      	beq.n	80045da <HAL_I2C_Mem_Read+0x17a>
 80045aa:	2a00      	cmp	r2, #0
 80045ac:	d115      	bne.n	80045da <HAL_I2C_Mem_Read+0x17a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80045ae:	0033      	movs	r3, r6
 80045b0:	2180      	movs	r1, #128	; 0x80
 80045b2:	0020      	movs	r0, r4
 80045b4:	9500      	str	r5, [sp, #0]
 80045b6:	f7ff fdb2 	bl	800411e <I2C_WaitOnFlagUntilTimeout>
 80045ba:	2800      	cmp	r0, #0
 80045bc:	d000      	beq.n	80045c0 <HAL_I2C_Mem_Read+0x160>
 80045be:	e76a      	b.n	8004496 <HAL_I2C_Mem_Read+0x36>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80045c2:	2bff      	cmp	r3, #255	; 0xff
 80045c4:	d923      	bls.n	800460e <HAL_I2C_Mem_Read+0x1ae>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80045c6:	23ff      	movs	r3, #255	; 0xff
 80045c8:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80045ca:	2380      	movs	r3, #128	; 0x80
 80045cc:	22ff      	movs	r2, #255	; 0xff
 80045ce:	9000      	str	r0, [sp, #0]
 80045d0:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045d2:	0039      	movs	r1, r7
 80045d4:	0020      	movs	r0, r4
 80045d6:	f7ff fcdd 	bl	8003f94 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80045da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1c8      	bne.n	8004572 <HAL_I2C_Mem_Read+0x112>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045e0:	002a      	movs	r2, r5
 80045e2:	0031      	movs	r1, r6
 80045e4:	0020      	movs	r0, r4
 80045e6:	f7ff fdd1 	bl	800418c <I2C_WaitOnSTOPFlagUntilTimeout>
 80045ea:	2800      	cmp	r0, #0
 80045ec:	d000      	beq.n	80045f0 <HAL_I2C_Mem_Read+0x190>
 80045ee:	e752      	b.n	8004496 <HAL_I2C_Mem_Read+0x36>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045f0:	2120      	movs	r1, #32
 80045f2:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80045f4:	4d0c      	ldr	r5, [pc, #48]	; (8004628 <HAL_I2C_Mem_Read+0x1c8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045f6:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80045f8:	685a      	ldr	r2, [r3, #4]
 80045fa:	402a      	ands	r2, r5
 80045fc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80045fe:	0023      	movs	r3, r4
 8004600:	3341      	adds	r3, #65	; 0x41
 8004602:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004604:	9b07      	ldr	r3, [sp, #28]
    __HAL_UNLOCK(hi2c);
 8004606:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004608:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 800460a:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800460c:	e744      	b.n	8004498 <HAL_I2C_Mem_Read+0x38>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800460e:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8004610:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004612:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8004614:	b292      	uxth	r2, r2
 8004616:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004618:	b2d2      	uxtb	r2, r2
 800461a:	9000      	str	r0, [sp, #0]
 800461c:	e7d9      	b.n	80045d2 <HAL_I2C_Mem_Read+0x172>
 800461e:	46c0      	nop			; (mov r8, r8)
 8004620:	80002000 	.word	0x80002000
 8004624:	80002400 	.word	0x80002400
 8004628:	fe00e800 	.word	0xfe00e800

0800462c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800462c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800462e:	0004      	movs	r4, r0
 8004630:	3441      	adds	r4, #65	; 0x41
 8004632:	7822      	ldrb	r2, [r4, #0]
{
 8004634:	0003      	movs	r3, r0
 8004636:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8004638:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800463a:	b2d6      	uxtb	r6, r2
 800463c:	2a20      	cmp	r2, #32
 800463e:	d118      	bne.n	8004672 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 8004640:	001d      	movs	r5, r3
 8004642:	3540      	adds	r5, #64	; 0x40
 8004644:	782a      	ldrb	r2, [r5, #0]
 8004646:	2a01      	cmp	r2, #1
 8004648:	d013      	beq.n	8004672 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 800464a:	2224      	movs	r2, #36	; 0x24
 800464c:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	3a23      	subs	r2, #35	; 0x23
 8004652:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004654:	4807      	ldr	r0, [pc, #28]	; (8004674 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8004656:	4391      	bics	r1, r2
 8004658:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800465a:	6819      	ldr	r1, [r3, #0]
 800465c:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 800465e:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004660:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8004662:	6819      	ldr	r1, [r3, #0]
 8004664:	4339      	orrs	r1, r7
 8004666:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8004668:	6819      	ldr	r1, [r3, #0]
 800466a:	430a      	orrs	r2, r1
 800466c:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800466e:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8004670:	7028      	strb	r0, [r5, #0]
  }
}
 8004672:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004674:	ffffefff 	.word	0xffffefff

08004678 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004678:	0002      	movs	r2, r0
{
 800467a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800467c:	3241      	adds	r2, #65	; 0x41
 800467e:	7814      	ldrb	r4, [r2, #0]
{
 8004680:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004682:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8004684:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004686:	2c20      	cmp	r4, #32
 8004688:	d117      	bne.n	80046ba <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 800468a:	001c      	movs	r4, r3
 800468c:	3440      	adds	r4, #64	; 0x40
 800468e:	7826      	ldrb	r6, [r4, #0]
 8004690:	2e01      	cmp	r6, #1
 8004692:	d012      	beq.n	80046ba <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004694:	3022      	adds	r0, #34	; 0x22
 8004696:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	3823      	subs	r0, #35	; 0x23
 800469c:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800469e:	4f07      	ldr	r7, [pc, #28]	; (80046bc <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 80046a0:	4386      	bics	r6, r0
 80046a2:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 80046a4:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 80046a6:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 80046a8:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 80046aa:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 80046ac:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80046ae:	6819      	ldr	r1, [r3, #0]
 80046b0:	4308      	orrs	r0, r1
 80046b2:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80046b4:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80046b6:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80046b8:	7020      	strb	r0, [r4, #0]
  }
}
 80046ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046bc:	fffff0ff 	.word	0xfffff0ff

080046c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80046c0:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80046c2:	4c11      	ldr	r4, [pc, #68]	; (8004708 <HAL_PWREx_ControlVoltageScaling+0x48>)
 80046c4:	4911      	ldr	r1, [pc, #68]	; (800470c <HAL_PWREx_ControlVoltageScaling+0x4c>)
 80046c6:	6823      	ldr	r3, [r4, #0]
{
 80046c8:	0002      	movs	r2, r0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80046ca:	400b      	ands	r3, r1
 80046cc:	4303      	orrs	r3, r0
 80046ce:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046d0:	2380      	movs	r3, #128	; 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80046d2:	2000      	movs	r0, #0
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d10e      	bne.n	80046f8 <HAL_PWREx_ControlVoltageScaling+0x38>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80046da:	4b0d      	ldr	r3, [pc, #52]	; (8004710 <HAL_PWREx_ControlVoltageScaling+0x50>)
 80046dc:	490d      	ldr	r1, [pc, #52]	; (8004714 <HAL_PWREx_ControlVoltageScaling+0x54>)
 80046de:	6818      	ldr	r0, [r3, #0]
 80046e0:	2306      	movs	r3, #6
 80046e2:	4358      	muls	r0, r3
 80046e4:	f7fb fd28 	bl	8000138 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046e8:	2280      	movs	r2, #128	; 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80046ea:	1c43      	adds	r3, r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046ec:	00d2      	lsls	r2, r2, #3
 80046ee:	6961      	ldr	r1, [r4, #20]
 80046f0:	0008      	movs	r0, r1
 80046f2:	4010      	ands	r0, r2
 80046f4:	4211      	tst	r1, r2
 80046f6:	d100      	bne.n	80046fa <HAL_PWREx_ControlVoltageScaling+0x3a>
}
 80046f8:	bd10      	pop	{r4, pc}
      if (wait_loop_index != 0U)
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <HAL_PWREx_ControlVoltageScaling+0x42>
        wait_loop_index--;
 80046fe:	3b01      	subs	r3, #1
 8004700:	e7f5      	b.n	80046ee <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 8004702:	2003      	movs	r0, #3
 8004704:	e7f8      	b.n	80046f8 <HAL_PWREx_ControlVoltageScaling+0x38>
 8004706:	46c0      	nop			; (mov r8, r8)
 8004708:	40007000 	.word	0x40007000
 800470c:	fffff9ff 	.word	0xfffff9ff
 8004710:	20000004 	.word	0x20000004
 8004714:	000f4240 	.word	0x000f4240

08004718 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800471a:	0004      	movs	r4, r0
 800471c:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800471e:	2800      	cmp	r0, #0
 8004720:	d023      	beq.n	800476a <HAL_RCC_OscConfig+0x52>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004722:	6803      	ldr	r3, [r0, #0]
 8004724:	07db      	lsls	r3, r3, #31
 8004726:	d410      	bmi.n	800474a <HAL_RCC_OscConfig+0x32>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004728:	6823      	ldr	r3, [r4, #0]
 800472a:	079b      	lsls	r3, r3, #30
 800472c:	d45e      	bmi.n	80047ec <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800472e:	6823      	ldr	r3, [r4, #0]
 8004730:	071b      	lsls	r3, r3, #28
 8004732:	d500      	bpl.n	8004736 <HAL_RCC_OscConfig+0x1e>
 8004734:	e0c2      	b.n	80048bc <HAL_RCC_OscConfig+0x1a4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004736:	6823      	ldr	r3, [r4, #0]
 8004738:	075b      	lsls	r3, r3, #29
 800473a:	d500      	bpl.n	800473e <HAL_RCC_OscConfig+0x26>
 800473c:	e0f3      	b.n	8004926 <HAL_RCC_OscConfig+0x20e>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800473e:	69e3      	ldr	r3, [r4, #28]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d000      	beq.n	8004746 <HAL_RCC_OscConfig+0x2e>
 8004744:	e17a      	b.n	8004a3c <HAL_RCC_OscConfig+0x324>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8004746:	2000      	movs	r0, #0
 8004748:	e029      	b.n	800479e <HAL_RCC_OscConfig+0x86>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800474a:	2238      	movs	r2, #56	; 0x38
 800474c:	4daf      	ldr	r5, [pc, #700]	; (8004a0c <HAL_RCC_OscConfig+0x2f4>)
 800474e:	68ab      	ldr	r3, [r5, #8]
 8004750:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004752:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004754:	2b10      	cmp	r3, #16
 8004756:	d10a      	bne.n	800476e <HAL_RCC_OscConfig+0x56>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004758:	43d3      	mvns	r3, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800475a:	079b      	lsls	r3, r3, #30
 800475c:	d109      	bne.n	8004772 <HAL_RCC_OscConfig+0x5a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800475e:	682b      	ldr	r3, [r5, #0]
 8004760:	039b      	lsls	r3, r3, #14
 8004762:	d5e1      	bpl.n	8004728 <HAL_RCC_OscConfig+0x10>
 8004764:	6863      	ldr	r3, [r4, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1de      	bne.n	8004728 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 800476a:	2001      	movs	r0, #1
 800476c:	e017      	b.n	800479e <HAL_RCC_OscConfig+0x86>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800476e:	2b08      	cmp	r3, #8
 8004770:	d0f5      	beq.n	800475e <HAL_RCC_OscConfig+0x46>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004772:	2280      	movs	r2, #128	; 0x80
 8004774:	6863      	ldr	r3, [r4, #4]
 8004776:	0252      	lsls	r2, r2, #9
 8004778:	4293      	cmp	r3, r2
 800477a:	d112      	bne.n	80047a2 <HAL_RCC_OscConfig+0x8a>
 800477c:	682a      	ldr	r2, [r5, #0]
 800477e:	4313      	orrs	r3, r2
 8004780:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004782:	f7fe fd7b 	bl	800327c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004786:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8004788:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800478a:	02bf      	lsls	r7, r7, #10
 800478c:	682b      	ldr	r3, [r5, #0]
 800478e:	423b      	tst	r3, r7
 8004790:	d1ca      	bne.n	8004728 <HAL_RCC_OscConfig+0x10>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004792:	f7fe fd73 	bl	800327c <HAL_GetTick>
 8004796:	1b80      	subs	r0, r0, r6
 8004798:	2864      	cmp	r0, #100	; 0x64
 800479a:	d9f7      	bls.n	800478c <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 800479c:	2003      	movs	r0, #3
}
 800479e:	b005      	add	sp, #20
 80047a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047a2:	21a0      	movs	r1, #160	; 0xa0
 80047a4:	02c9      	lsls	r1, r1, #11
 80047a6:	428b      	cmp	r3, r1
 80047a8:	d108      	bne.n	80047bc <HAL_RCC_OscConfig+0xa4>
 80047aa:	2380      	movs	r3, #128	; 0x80
 80047ac:	6829      	ldr	r1, [r5, #0]
 80047ae:	02db      	lsls	r3, r3, #11
 80047b0:	430b      	orrs	r3, r1
 80047b2:	602b      	str	r3, [r5, #0]
 80047b4:	682b      	ldr	r3, [r5, #0]
 80047b6:	431a      	orrs	r2, r3
 80047b8:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047ba:	e7e2      	b.n	8004782 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047bc:	682a      	ldr	r2, [r5, #0]
 80047be:	4994      	ldr	r1, [pc, #592]	; (8004a10 <HAL_RCC_OscConfig+0x2f8>)
 80047c0:	400a      	ands	r2, r1
 80047c2:	602a      	str	r2, [r5, #0]
 80047c4:	682a      	ldr	r2, [r5, #0]
 80047c6:	4993      	ldr	r1, [pc, #588]	; (8004a14 <HAL_RCC_OscConfig+0x2fc>)
 80047c8:	400a      	ands	r2, r1
 80047ca:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1d8      	bne.n	8004782 <HAL_RCC_OscConfig+0x6a>
        tickstart = HAL_GetTick();
 80047d0:	f7fe fd54 	bl	800327c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047d4:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 80047d6:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047d8:	02bf      	lsls	r7, r7, #10
 80047da:	682b      	ldr	r3, [r5, #0]
 80047dc:	423b      	tst	r3, r7
 80047de:	d0a3      	beq.n	8004728 <HAL_RCC_OscConfig+0x10>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047e0:	f7fe fd4c 	bl	800327c <HAL_GetTick>
 80047e4:	1b80      	subs	r0, r0, r6
 80047e6:	2864      	cmp	r0, #100	; 0x64
 80047e8:	d9f7      	bls.n	80047da <HAL_RCC_OscConfig+0xc2>
 80047ea:	e7d7      	b.n	800479c <HAL_RCC_OscConfig+0x84>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047ec:	2238      	movs	r2, #56	; 0x38
 80047ee:	4d87      	ldr	r5, [pc, #540]	; (8004a0c <HAL_RCC_OscConfig+0x2f4>)
 80047f0:	68ab      	ldr	r3, [r5, #8]
 80047f2:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047f4:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80047f6:	2b10      	cmp	r3, #16
 80047f8:	d127      	bne.n	800484a <HAL_RCC_OscConfig+0x132>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047fa:	2103      	movs	r1, #3
 80047fc:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80047fe:	2a02      	cmp	r2, #2
 8004800:	d125      	bne.n	800484e <HAL_RCC_OscConfig+0x136>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004802:	682a      	ldr	r2, [r5, #0]
 8004804:	0552      	lsls	r2, r2, #21
 8004806:	d502      	bpl.n	800480e <HAL_RCC_OscConfig+0xf6>
 8004808:	68e2      	ldr	r2, [r4, #12]
 800480a:	2a00      	cmp	r2, #0
 800480c:	d0ad      	beq.n	800476a <HAL_RCC_OscConfig+0x52>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800480e:	6869      	ldr	r1, [r5, #4]
 8004810:	6962      	ldr	r2, [r4, #20]
 8004812:	4881      	ldr	r0, [pc, #516]	; (8004a18 <HAL_RCC_OscConfig+0x300>)
 8004814:	0212      	lsls	r2, r2, #8
 8004816:	4001      	ands	r1, r0
 8004818:	430a      	orrs	r2, r1
 800481a:	606a      	str	r2, [r5, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10c      	bne.n	800483a <HAL_RCC_OscConfig+0x122>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004820:	682b      	ldr	r3, [r5, #0]
 8004822:	4a7e      	ldr	r2, [pc, #504]	; (8004a1c <HAL_RCC_OscConfig+0x304>)
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004824:	497e      	ldr	r1, [pc, #504]	; (8004a20 <HAL_RCC_OscConfig+0x308>)
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004826:	4013      	ands	r3, r2
 8004828:	6922      	ldr	r2, [r4, #16]
 800482a:	4313      	orrs	r3, r2
 800482c:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800482e:	682b      	ldr	r3, [r5, #0]
 8004830:	4a7c      	ldr	r2, [pc, #496]	; (8004a24 <HAL_RCC_OscConfig+0x30c>)
 8004832:	049b      	lsls	r3, r3, #18
 8004834:	0f5b      	lsrs	r3, r3, #29
 8004836:	40da      	lsrs	r2, r3
 8004838:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800483a:	4b7b      	ldr	r3, [pc, #492]	; (8004a28 <HAL_RCC_OscConfig+0x310>)
 800483c:	6818      	ldr	r0, [r3, #0]
 800483e:	f7fe fcd5 	bl	80031ec <HAL_InitTick>
 8004842:	2800      	cmp	r0, #0
 8004844:	d100      	bne.n	8004848 <HAL_RCC_OscConfig+0x130>
 8004846:	e772      	b.n	800472e <HAL_RCC_OscConfig+0x16>
 8004848:	e78f      	b.n	800476a <HAL_RCC_OscConfig+0x52>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800484a:	2b00      	cmp	r3, #0
 800484c:	d0d9      	beq.n	8004802 <HAL_RCC_OscConfig+0xea>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800484e:	68e3      	ldr	r3, [r4, #12]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d020      	beq.n	8004896 <HAL_RCC_OscConfig+0x17e>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004854:	682b      	ldr	r3, [r5, #0]
 8004856:	4a71      	ldr	r2, [pc, #452]	; (8004a1c <HAL_RCC_OscConfig+0x304>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004858:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800485a:	4013      	ands	r3, r2
 800485c:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800485e:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004860:	4313      	orrs	r3, r2
 8004862:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8004864:	2380      	movs	r3, #128	; 0x80
 8004866:	682a      	ldr	r2, [r5, #0]
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	4313      	orrs	r3, r2
 800486c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800486e:	f7fe fd05 	bl	800327c <HAL_GetTick>
 8004872:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004874:	682b      	ldr	r3, [r5, #0]
 8004876:	423b      	tst	r3, r7
 8004878:	d007      	beq.n	800488a <HAL_RCC_OscConfig+0x172>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800487a:	686a      	ldr	r2, [r5, #4]
 800487c:	6963      	ldr	r3, [r4, #20]
 800487e:	4966      	ldr	r1, [pc, #408]	; (8004a18 <HAL_RCC_OscConfig+0x300>)
 8004880:	021b      	lsls	r3, r3, #8
 8004882:	400a      	ands	r2, r1
 8004884:	4313      	orrs	r3, r2
 8004886:	606b      	str	r3, [r5, #4]
 8004888:	e751      	b.n	800472e <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800488a:	f7fe fcf7 	bl	800327c <HAL_GetTick>
 800488e:	1b80      	subs	r0, r0, r6
 8004890:	2802      	cmp	r0, #2
 8004892:	d9ef      	bls.n	8004874 <HAL_RCC_OscConfig+0x15c>
 8004894:	e782      	b.n	800479c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8004896:	682b      	ldr	r3, [r5, #0]
 8004898:	4a64      	ldr	r2, [pc, #400]	; (8004a2c <HAL_RCC_OscConfig+0x314>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800489a:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 800489c:	4013      	ands	r3, r2
 800489e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80048a0:	f7fe fcec 	bl	800327c <HAL_GetTick>
 80048a4:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048a6:	00ff      	lsls	r7, r7, #3
 80048a8:	682b      	ldr	r3, [r5, #0]
 80048aa:	423b      	tst	r3, r7
 80048ac:	d100      	bne.n	80048b0 <HAL_RCC_OscConfig+0x198>
 80048ae:	e73e      	b.n	800472e <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048b0:	f7fe fce4 	bl	800327c <HAL_GetTick>
 80048b4:	1b80      	subs	r0, r0, r6
 80048b6:	2802      	cmp	r0, #2
 80048b8:	d9f6      	bls.n	80048a8 <HAL_RCC_OscConfig+0x190>
 80048ba:	e76f      	b.n	800479c <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80048bc:	2238      	movs	r2, #56	; 0x38
 80048be:	4d53      	ldr	r5, [pc, #332]	; (8004a0c <HAL_RCC_OscConfig+0x2f4>)
 80048c0:	68ab      	ldr	r3, [r5, #8]
 80048c2:	4013      	ands	r3, r2
 80048c4:	2b18      	cmp	r3, #24
 80048c6:	d108      	bne.n	80048da <HAL_RCC_OscConfig+0x1c2>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80048c8:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80048ca:	079b      	lsls	r3, r3, #30
 80048cc:	d400      	bmi.n	80048d0 <HAL_RCC_OscConfig+0x1b8>
 80048ce:	e732      	b.n	8004736 <HAL_RCC_OscConfig+0x1e>
 80048d0:	69a3      	ldr	r3, [r4, #24]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d000      	beq.n	80048d8 <HAL_RCC_OscConfig+0x1c0>
 80048d6:	e72e      	b.n	8004736 <HAL_RCC_OscConfig+0x1e>
 80048d8:	e747      	b.n	800476a <HAL_RCC_OscConfig+0x52>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048da:	69a2      	ldr	r2, [r4, #24]
 80048dc:	2301      	movs	r3, #1
 80048de:	2a00      	cmp	r2, #0
 80048e0:	d010      	beq.n	8004904 <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_LSI_ENABLE();
 80048e2:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048e4:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 80048e6:	4313      	orrs	r3, r2
 80048e8:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 80048ea:	f7fe fcc7 	bl	800327c <HAL_GetTick>
 80048ee:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048f0:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80048f2:	423b      	tst	r3, r7
 80048f4:	d000      	beq.n	80048f8 <HAL_RCC_OscConfig+0x1e0>
 80048f6:	e71e      	b.n	8004736 <HAL_RCC_OscConfig+0x1e>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048f8:	f7fe fcc0 	bl	800327c <HAL_GetTick>
 80048fc:	1b80      	subs	r0, r0, r6
 80048fe:	2802      	cmp	r0, #2
 8004900:	d9f6      	bls.n	80048f0 <HAL_RCC_OscConfig+0x1d8>
 8004902:	e74b      	b.n	800479c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_LSI_DISABLE();
 8004904:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004906:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8004908:	439a      	bics	r2, r3
 800490a:	662a      	str	r2, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 800490c:	f7fe fcb6 	bl	800327c <HAL_GetTick>
 8004910:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004912:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8004914:	423b      	tst	r3, r7
 8004916:	d100      	bne.n	800491a <HAL_RCC_OscConfig+0x202>
 8004918:	e70d      	b.n	8004736 <HAL_RCC_OscConfig+0x1e>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800491a:	f7fe fcaf 	bl	800327c <HAL_GetTick>
 800491e:	1b80      	subs	r0, r0, r6
 8004920:	2802      	cmp	r0, #2
 8004922:	d9f6      	bls.n	8004912 <HAL_RCC_OscConfig+0x1fa>
 8004924:	e73a      	b.n	800479c <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004926:	2238      	movs	r2, #56	; 0x38
 8004928:	4d38      	ldr	r5, [pc, #224]	; (8004a0c <HAL_RCC_OscConfig+0x2f4>)
 800492a:	68ab      	ldr	r3, [r5, #8]
 800492c:	4013      	ands	r3, r2
 800492e:	2b20      	cmp	r3, #32
 8004930:	d108      	bne.n	8004944 <HAL_RCC_OscConfig+0x22c>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004932:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8004934:	079b      	lsls	r3, r3, #30
 8004936:	d400      	bmi.n	800493a <HAL_RCC_OscConfig+0x222>
 8004938:	e701      	b.n	800473e <HAL_RCC_OscConfig+0x26>
 800493a:	68a3      	ldr	r3, [r4, #8]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d000      	beq.n	8004942 <HAL_RCC_OscConfig+0x22a>
 8004940:	e6fd      	b.n	800473e <HAL_RCC_OscConfig+0x26>
 8004942:	e712      	b.n	800476a <HAL_RCC_OscConfig+0x52>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004944:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8004946:	2100      	movs	r1, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004948:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800494a:	0552      	lsls	r2, r2, #21
    FlagStatus       pwrclkchanged = RESET;
 800494c:	9100      	str	r1, [sp, #0]
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800494e:	4213      	tst	r3, r2
 8004950:	d108      	bne.n	8004964 <HAL_RCC_OscConfig+0x24c>
        __HAL_RCC_PWR_CLK_ENABLE();
 8004952:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8004954:	4313      	orrs	r3, r2
 8004956:	63eb      	str	r3, [r5, #60]	; 0x3c
 8004958:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800495a:	4013      	ands	r3, r2
 800495c:	9303      	str	r3, [sp, #12]
 800495e:	9b03      	ldr	r3, [sp, #12]
        pwrclkchanged = SET;
 8004960:	2301      	movs	r3, #1
 8004962:	9300      	str	r3, [sp, #0]
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004964:	2780      	movs	r7, #128	; 0x80
 8004966:	4e32      	ldr	r6, [pc, #200]	; (8004a30 <HAL_RCC_OscConfig+0x318>)
 8004968:	007f      	lsls	r7, r7, #1
 800496a:	6833      	ldr	r3, [r6, #0]
 800496c:	423b      	tst	r3, r7
 800496e:	d015      	beq.n	800499c <HAL_RCC_OscConfig+0x284>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004970:	68a3      	ldr	r3, [r4, #8]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d122      	bne.n	80049bc <HAL_RCC_OscConfig+0x2a4>
 8004976:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8004978:	4313      	orrs	r3, r2
 800497a:	65eb      	str	r3, [r5, #92]	; 0x5c
        tickstart = HAL_GetTick();
 800497c:	f7fe fc7e 	bl	800327c <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004980:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8004982:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004984:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8004986:	423b      	tst	r3, r7
 8004988:	d038      	beq.n	80049fc <HAL_RCC_OscConfig+0x2e4>
      if (pwrclkchanged == SET)
 800498a:	9b00      	ldr	r3, [sp, #0]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d000      	beq.n	8004992 <HAL_RCC_OscConfig+0x27a>
 8004990:	e6d5      	b.n	800473e <HAL_RCC_OscConfig+0x26>
        __HAL_RCC_PWR_CLK_DISABLE();
 8004992:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8004994:	4a27      	ldr	r2, [pc, #156]	; (8004a34 <HAL_RCC_OscConfig+0x31c>)
 8004996:	4013      	ands	r3, r2
 8004998:	63eb      	str	r3, [r5, #60]	; 0x3c
 800499a:	e6d0      	b.n	800473e <HAL_RCC_OscConfig+0x26>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800499c:	6833      	ldr	r3, [r6, #0]
 800499e:	433b      	orrs	r3, r7
 80049a0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80049a2:	f7fe fc6b 	bl	800327c <HAL_GetTick>
 80049a6:	9001      	str	r0, [sp, #4]
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049a8:	6833      	ldr	r3, [r6, #0]
 80049aa:	423b      	tst	r3, r7
 80049ac:	d1e0      	bne.n	8004970 <HAL_RCC_OscConfig+0x258>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ae:	f7fe fc65 	bl	800327c <HAL_GetTick>
 80049b2:	9b01      	ldr	r3, [sp, #4]
 80049b4:	1ac0      	subs	r0, r0, r3
 80049b6:	2802      	cmp	r0, #2
 80049b8:	d9f6      	bls.n	80049a8 <HAL_RCC_OscConfig+0x290>
 80049ba:	e6ef      	b.n	800479c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049bc:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80049be:	2b05      	cmp	r3, #5
 80049c0:	d105      	bne.n	80049ce <HAL_RCC_OscConfig+0x2b6>
 80049c2:	3b01      	subs	r3, #1
 80049c4:	4313      	orrs	r3, r2
 80049c6:	65eb      	str	r3, [r5, #92]	; 0x5c
 80049c8:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80049ca:	2301      	movs	r3, #1
 80049cc:	e7d4      	b.n	8004978 <HAL_RCC_OscConfig+0x260>
 80049ce:	2101      	movs	r1, #1
 80049d0:	438a      	bics	r2, r1
 80049d2:	65ea      	str	r2, [r5, #92]	; 0x5c
 80049d4:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80049d6:	3103      	adds	r1, #3
 80049d8:	438a      	bics	r2, r1
 80049da:	65ea      	str	r2, [r5, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1cd      	bne.n	800497c <HAL_RCC_OscConfig+0x264>
        tickstart = HAL_GetTick();
 80049e0:	f7fe fc4c 	bl	800327c <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049e4:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 80049e6:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049e8:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80049ea:	423b      	tst	r3, r7
 80049ec:	d0cd      	beq.n	800498a <HAL_RCC_OscConfig+0x272>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ee:	f7fe fc45 	bl	800327c <HAL_GetTick>
 80049f2:	4b11      	ldr	r3, [pc, #68]	; (8004a38 <HAL_RCC_OscConfig+0x320>)
 80049f4:	1b80      	subs	r0, r0, r6
 80049f6:	4298      	cmp	r0, r3
 80049f8:	d9f6      	bls.n	80049e8 <HAL_RCC_OscConfig+0x2d0>
 80049fa:	e6cf      	b.n	800479c <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049fc:	f7fe fc3e 	bl	800327c <HAL_GetTick>
 8004a00:	4b0d      	ldr	r3, [pc, #52]	; (8004a38 <HAL_RCC_OscConfig+0x320>)
 8004a02:	1b80      	subs	r0, r0, r6
 8004a04:	4298      	cmp	r0, r3
 8004a06:	d9bd      	bls.n	8004984 <HAL_RCC_OscConfig+0x26c>
 8004a08:	e6c8      	b.n	800479c <HAL_RCC_OscConfig+0x84>
 8004a0a:	46c0      	nop			; (mov r8, r8)
 8004a0c:	40021000 	.word	0x40021000
 8004a10:	fffeffff 	.word	0xfffeffff
 8004a14:	fffbffff 	.word	0xfffbffff
 8004a18:	ffff80ff 	.word	0xffff80ff
 8004a1c:	ffffc7ff 	.word	0xffffc7ff
 8004a20:	20000004 	.word	0x20000004
 8004a24:	00f42400 	.word	0x00f42400
 8004a28:	2000000c 	.word	0x2000000c
 8004a2c:	fffffeff 	.word	0xfffffeff
 8004a30:	40007000 	.word	0x40007000
 8004a34:	efffffff 	.word	0xefffffff
 8004a38:	00001388 	.word	0x00001388
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a3c:	2138      	movs	r1, #56	; 0x38
 8004a3e:	4d3f      	ldr	r5, [pc, #252]	; (8004b3c <HAL_RCC_OscConfig+0x424>)
 8004a40:	68aa      	ldr	r2, [r5, #8]
 8004a42:	400a      	ands	r2, r1
 8004a44:	2a10      	cmp	r2, #16
 8004a46:	d053      	beq.n	8004af0 <HAL_RCC_OscConfig+0x3d8>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a48:	4a3d      	ldr	r2, [pc, #244]	; (8004b40 <HAL_RCC_OscConfig+0x428>)
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d138      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x3a8>
        __HAL_RCC_PLL_DISABLE();
 8004a4e:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a50:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8004a52:	4013      	ands	r3, r2
 8004a54:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004a56:	f7fe fc11 	bl	800327c <HAL_GetTick>
 8004a5a:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a5c:	04bf      	lsls	r7, r7, #18
 8004a5e:	682b      	ldr	r3, [r5, #0]
 8004a60:	423b      	tst	r3, r7
 8004a62:	d127      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x39c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a64:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004a66:	6a23      	ldr	r3, [r4, #32]
 8004a68:	68ea      	ldr	r2, [r5, #12]
 8004a6a:	430b      	orrs	r3, r1
 8004a6c:	4935      	ldr	r1, [pc, #212]	; (8004b44 <HAL_RCC_OscConfig+0x42c>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a6e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a70:	400a      	ands	r2, r1
 8004a72:	4313      	orrs	r3, r2
 8004a74:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a76:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004a80:	0212      	lsls	r2, r2, #8
 8004a82:	4313      	orrs	r3, r2
 8004a84:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8004a86:	2380      	movs	r3, #128	; 0x80
 8004a88:	682a      	ldr	r2, [r5, #0]
 8004a8a:	045b      	lsls	r3, r3, #17
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004a90:	2380      	movs	r3, #128	; 0x80
 8004a92:	68ea      	ldr	r2, [r5, #12]
 8004a94:	055b      	lsls	r3, r3, #21
 8004a96:	4313      	orrs	r3, r2
 8004a98:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8004a9a:	f7fe fbef 	bl	800327c <HAL_GetTick>
 8004a9e:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aa0:	682b      	ldr	r3, [r5, #0]
 8004aa2:	4233      	tst	r3, r6
 8004aa4:	d000      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x390>
 8004aa6:	e64e      	b.n	8004746 <HAL_RCC_OscConfig+0x2e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aa8:	f7fe fbe8 	bl	800327c <HAL_GetTick>
 8004aac:	1b00      	subs	r0, r0, r4
 8004aae:	2802      	cmp	r0, #2
 8004ab0:	d9f6      	bls.n	8004aa0 <HAL_RCC_OscConfig+0x388>
 8004ab2:	e673      	b.n	800479c <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ab4:	f7fe fbe2 	bl	800327c <HAL_GetTick>
 8004ab8:	1b80      	subs	r0, r0, r6
 8004aba:	2802      	cmp	r0, #2
 8004abc:	d9cf      	bls.n	8004a5e <HAL_RCC_OscConfig+0x346>
 8004abe:	e66d      	b.n	800479c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_PLL_DISABLE();
 8004ac0:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ac2:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004ac8:	f7fe fbd8 	bl	800327c <HAL_GetTick>
 8004acc:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ace:	04b6      	lsls	r6, r6, #18
 8004ad0:	682b      	ldr	r3, [r5, #0]
 8004ad2:	0018      	movs	r0, r3
 8004ad4:	4030      	ands	r0, r6
 8004ad6:	4233      	tst	r3, r6
 8004ad8:	d104      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x3cc>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004ada:	68eb      	ldr	r3, [r5, #12]
 8004adc:	4a1a      	ldr	r2, [pc, #104]	; (8004b48 <HAL_RCC_OscConfig+0x430>)
 8004ade:	4013      	ands	r3, r2
 8004ae0:	60eb      	str	r3, [r5, #12]
 8004ae2:	e65c      	b.n	800479e <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae4:	f7fe fbca 	bl	800327c <HAL_GetTick>
 8004ae8:	1b00      	subs	r0, r0, r4
 8004aea:	2802      	cmp	r0, #2
 8004aec:	d9f0      	bls.n	8004ad0 <HAL_RCC_OscConfig+0x3b8>
 8004aee:	e655      	b.n	800479c <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d100      	bne.n	8004af6 <HAL_RCC_OscConfig+0x3de>
 8004af4:	e639      	b.n	800476a <HAL_RCC_OscConfig+0x52>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004af6:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 8004af8:	68eb      	ldr	r3, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004afa:	6a21      	ldr	r1, [r4, #32]
 8004afc:	401a      	ands	r2, r3
 8004afe:	428a      	cmp	r2, r1
 8004b00:	d000      	beq.n	8004b04 <HAL_RCC_OscConfig+0x3ec>
 8004b02:	e632      	b.n	800476a <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b04:	2270      	movs	r2, #112	; 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b06:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b08:	401a      	ands	r2, r3
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b0a:	428a      	cmp	r2, r1
 8004b0c:	d000      	beq.n	8004b10 <HAL_RCC_OscConfig+0x3f8>
 8004b0e:	e62c      	b.n	800476a <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b10:	21fe      	movs	r1, #254	; 0xfe
 8004b12:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004b14:	01c9      	lsls	r1, r1, #7
 8004b16:	4019      	ands	r1, r3
 8004b18:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b1a:	4291      	cmp	r1, r2
 8004b1c:	d000      	beq.n	8004b20 <HAL_RCC_OscConfig+0x408>
 8004b1e:	e624      	b.n	800476a <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b20:	22f8      	movs	r2, #248	; 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b22:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b24:	0392      	lsls	r2, r2, #14
 8004b26:	401a      	ands	r2, r3
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b28:	428a      	cmp	r2, r1
 8004b2a:	d000      	beq.n	8004b2e <HAL_RCC_OscConfig+0x416>
 8004b2c:	e61d      	b.n	800476a <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b2e:	6b22      	ldr	r2, [r4, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004b30:	0f5b      	lsrs	r3, r3, #29
 8004b32:	075b      	lsls	r3, r3, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d100      	bne.n	8004b3a <HAL_RCC_OscConfig+0x422>
 8004b38:	e605      	b.n	8004746 <HAL_RCC_OscConfig+0x2e>
 8004b3a:	e616      	b.n	800476a <HAL_RCC_OscConfig+0x52>
 8004b3c:	40021000 	.word	0x40021000
 8004b40:	feffffff 	.word	0xfeffffff
 8004b44:	1fc1808c 	.word	0x1fc1808c
 8004b48:	effefffc 	.word	0xeffefffc

08004b4c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b4c:	2338      	movs	r3, #56	; 0x38
{
 8004b4e:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b50:	4c1d      	ldr	r4, [pc, #116]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0x7c>)
 8004b52:	68a2      	ldr	r2, [r4, #8]
 8004b54:	421a      	tst	r2, r3
 8004b56:	d105      	bne.n	8004b64 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004b58:	6823      	ldr	r3, [r4, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004b5a:	481c      	ldr	r0, [pc, #112]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x80>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004b5c:	049b      	lsls	r3, r3, #18
 8004b5e:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004b60:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8004b62:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b64:	68a2      	ldr	r2, [r4, #8]
 8004b66:	401a      	ands	r2, r3
 8004b68:	2a08      	cmp	r2, #8
 8004b6a:	d027      	beq.n	8004bbc <HAL_RCC_GetSysClockFreq+0x70>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b6c:	68a2      	ldr	r2, [r4, #8]
 8004b6e:	401a      	ands	r2, r3
 8004b70:	2a10      	cmp	r2, #16
 8004b72:	d117      	bne.n	8004ba4 <HAL_RCC_GetSysClockFreq+0x58>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004b74:	68e3      	ldr	r3, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b76:	68e1      	ldr	r1, [r4, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004b78:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004b7a:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b7c:	0649      	lsls	r1, r1, #25
 8004b7e:	0f49      	lsrs	r1, r1, #29
 8004b80:	326f      	adds	r2, #111	; 0x6f
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004b82:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b84:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004b86:	4015      	ands	r5, r2
    switch (pllsource)
 8004b88:	079b      	lsls	r3, r3, #30
 8004b8a:	d109      	bne.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x54>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b8c:	4810      	ldr	r0, [pc, #64]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004b8e:	f7fb fad3 	bl	8000138 <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004b92:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004b94:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004b96:	0f49      	lsrs	r1, r1, #29
 8004b98:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8004b9a:	f7fb facd 	bl	8000138 <__udivsi3>
 8004b9e:	e7e0      	b.n	8004b62 <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004ba0:	480a      	ldr	r0, [pc, #40]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x80>)
 8004ba2:	e7f4      	b.n	8004b8e <HAL_RCC_GetSysClockFreq+0x42>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004ba4:	68a2      	ldr	r2, [r4, #8]
 8004ba6:	401a      	ands	r2, r3
 8004ba8:	2a20      	cmp	r2, #32
 8004baa:	d009      	beq.n	8004bc0 <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004bac:	68a2      	ldr	r2, [r4, #8]
    sysclockfreq = 0U;
 8004bae:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	2b18      	cmp	r3, #24
 8004bb4:	d1d5      	bne.n	8004b62 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSI_VALUE;
 8004bb6:	20fa      	movs	r0, #250	; 0xfa
 8004bb8:	01c0      	lsls	r0, r0, #7
  return sysclockfreq;
 8004bba:	e7d2      	b.n	8004b62 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8004bbc:	4804      	ldr	r0, [pc, #16]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x84>)
 8004bbe:	e7d0      	b.n	8004b62 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 8004bc0:	2080      	movs	r0, #128	; 0x80
 8004bc2:	0200      	lsls	r0, r0, #8
 8004bc4:	e7cd      	b.n	8004b62 <HAL_RCC_GetSysClockFreq+0x16>
 8004bc6:	46c0      	nop			; (mov r8, r8)
 8004bc8:	40021000 	.word	0x40021000
 8004bcc:	00f42400 	.word	0x00f42400
 8004bd0:	007a1200 	.word	0x007a1200

08004bd4 <HAL_RCC_ClockConfig>:
{
 8004bd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bd6:	0004      	movs	r4, r0
 8004bd8:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8004bda:	2800      	cmp	r0, #0
 8004bdc:	d101      	bne.n	8004be2 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8004bde:	2001      	movs	r0, #1
}
 8004be0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004be2:	2707      	movs	r7, #7
 8004be4:	4e4a      	ldr	r6, [pc, #296]	; (8004d10 <HAL_RCC_ClockConfig+0x13c>)
 8004be6:	6833      	ldr	r3, [r6, #0]
 8004be8:	403b      	ands	r3, r7
 8004bea:	428b      	cmp	r3, r1
 8004bec:	d32a      	bcc.n	8004c44 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bee:	6822      	ldr	r2, [r4, #0]
 8004bf0:	0793      	lsls	r3, r2, #30
 8004bf2:	d43b      	bmi.n	8004c6c <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bf4:	07d2      	lsls	r2, r2, #31
 8004bf6:	d448      	bmi.n	8004c8a <HAL_RCC_ClockConfig+0xb6>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bf8:	2707      	movs	r7, #7
 8004bfa:	6833      	ldr	r3, [r6, #0]
 8004bfc:	403b      	ands	r3, r7
 8004bfe:	42ab      	cmp	r3, r5
 8004c00:	d90a      	bls.n	8004c18 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c02:	6833      	ldr	r3, [r6, #0]
 8004c04:	43bb      	bics	r3, r7
 8004c06:	432b      	orrs	r3, r5
 8004c08:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004c0a:	f7fe fb37 	bl	800327c <HAL_GetTick>
 8004c0e:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004c10:	6833      	ldr	r3, [r6, #0]
 8004c12:	403b      	ands	r3, r7
 8004c14:	42ab      	cmp	r3, r5
 8004c16:	d16b      	bne.n	8004cf0 <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c18:	6823      	ldr	r3, [r4, #0]
 8004c1a:	4d3e      	ldr	r5, [pc, #248]	; (8004d14 <HAL_RCC_ClockConfig+0x140>)
 8004c1c:	075b      	lsls	r3, r3, #29
 8004c1e:	d46f      	bmi.n	8004d00 <HAL_RCC_ClockConfig+0x12c>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004c20:	f7ff ff94 	bl	8004b4c <HAL_RCC_GetSysClockFreq>
 8004c24:	68ab      	ldr	r3, [r5, #8]
 8004c26:	493c      	ldr	r1, [pc, #240]	; (8004d18 <HAL_RCC_ClockConfig+0x144>)
 8004c28:	051b      	lsls	r3, r3, #20
 8004c2a:	0f1b      	lsrs	r3, r3, #28
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	585b      	ldr	r3, [r3, r1]
 8004c30:	211f      	movs	r1, #31
 8004c32:	400b      	ands	r3, r1
 8004c34:	40d8      	lsrs	r0, r3
 8004c36:	4a39      	ldr	r2, [pc, #228]	; (8004d1c <HAL_RCC_ClockConfig+0x148>)
  return HAL_InitTick(uwTickPrio);
 8004c38:	4b39      	ldr	r3, [pc, #228]	; (8004d20 <HAL_RCC_ClockConfig+0x14c>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004c3a:	6010      	str	r0, [r2, #0]
  return HAL_InitTick(uwTickPrio);
 8004c3c:	6818      	ldr	r0, [r3, #0]
 8004c3e:	f7fe fad5 	bl	80031ec <HAL_InitTick>
 8004c42:	e7cd      	b.n	8004be0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c44:	6833      	ldr	r3, [r6, #0]
 8004c46:	43bb      	bics	r3, r7
 8004c48:	430b      	orrs	r3, r1
 8004c4a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004c4c:	f7fe fb16 	bl	800327c <HAL_GetTick>
 8004c50:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004c52:	6833      	ldr	r3, [r6, #0]
 8004c54:	403b      	ands	r3, r7
 8004c56:	42ab      	cmp	r3, r5
 8004c58:	d0c9      	beq.n	8004bee <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c5a:	f7fe fb0f 	bl	800327c <HAL_GetTick>
 8004c5e:	9b01      	ldr	r3, [sp, #4]
 8004c60:	1ac0      	subs	r0, r0, r3
 8004c62:	4b30      	ldr	r3, [pc, #192]	; (8004d24 <HAL_RCC_ClockConfig+0x150>)
 8004c64:	4298      	cmp	r0, r3
 8004c66:	d9f4      	bls.n	8004c52 <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8004c68:	2003      	movs	r0, #3
 8004c6a:	e7b9      	b.n	8004be0 <HAL_RCC_ClockConfig+0xc>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c6c:	4929      	ldr	r1, [pc, #164]	; (8004d14 <HAL_RCC_ClockConfig+0x140>)
 8004c6e:	0753      	lsls	r3, r2, #29
 8004c70:	d504      	bpl.n	8004c7c <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004c72:	23e0      	movs	r3, #224	; 0xe0
 8004c74:	6888      	ldr	r0, [r1, #8]
 8004c76:	01db      	lsls	r3, r3, #7
 8004c78:	4303      	orrs	r3, r0
 8004c7a:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c7c:	688b      	ldr	r3, [r1, #8]
 8004c7e:	482a      	ldr	r0, [pc, #168]	; (8004d28 <HAL_RCC_ClockConfig+0x154>)
 8004c80:	4003      	ands	r3, r0
 8004c82:	68a0      	ldr	r0, [r4, #8]
 8004c84:	4303      	orrs	r3, r0
 8004c86:	608b      	str	r3, [r1, #8]
 8004c88:	e7b4      	b.n	8004bf4 <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c8a:	6862      	ldr	r2, [r4, #4]
 8004c8c:	4f21      	ldr	r7, [pc, #132]	; (8004d14 <HAL_RCC_ClockConfig+0x140>)
 8004c8e:	2a01      	cmp	r2, #1
 8004c90:	d119      	bne.n	8004cc6 <HAL_RCC_ClockConfig+0xf2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	039b      	lsls	r3, r3, #14
 8004c96:	d5a2      	bpl.n	8004bde <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c98:	2107      	movs	r1, #7
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	438b      	bics	r3, r1
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 8004ca2:	f7fe faeb 	bl	800327c <HAL_GetTick>
 8004ca6:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ca8:	2338      	movs	r3, #56	; 0x38
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	401a      	ands	r2, r3
 8004cae:	6863      	ldr	r3, [r4, #4]
 8004cb0:	00db      	lsls	r3, r3, #3
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d0a0      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cb6:	f7fe fae1 	bl	800327c <HAL_GetTick>
 8004cba:	9b01      	ldr	r3, [sp, #4]
 8004cbc:	1ac0      	subs	r0, r0, r3
 8004cbe:	4b19      	ldr	r3, [pc, #100]	; (8004d24 <HAL_RCC_ClockConfig+0x150>)
 8004cc0:	4298      	cmp	r0, r3
 8004cc2:	d9f1      	bls.n	8004ca8 <HAL_RCC_ClockConfig+0xd4>
 8004cc4:	e7d0      	b.n	8004c68 <HAL_RCC_ClockConfig+0x94>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cc6:	2a02      	cmp	r2, #2
 8004cc8:	d103      	bne.n	8004cd2 <HAL_RCC_ClockConfig+0xfe>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	019b      	lsls	r3, r3, #6
 8004cce:	d4e3      	bmi.n	8004c98 <HAL_RCC_ClockConfig+0xc4>
 8004cd0:	e785      	b.n	8004bde <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004cd2:	2a00      	cmp	r2, #0
 8004cd4:	d103      	bne.n	8004cde <HAL_RCC_ClockConfig+0x10a>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	055b      	lsls	r3, r3, #21
 8004cda:	d4dd      	bmi.n	8004c98 <HAL_RCC_ClockConfig+0xc4>
 8004cdc:	e77f      	b.n	8004bde <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004cde:	2302      	movs	r3, #2
 8004ce0:	2a03      	cmp	r2, #3
 8004ce2:	d103      	bne.n	8004cec <HAL_RCC_ClockConfig+0x118>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ce4:	6e39      	ldr	r1, [r7, #96]	; 0x60
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ce6:	4219      	tst	r1, r3
 8004ce8:	d1d6      	bne.n	8004c98 <HAL_RCC_ClockConfig+0xc4>
 8004cea:	e778      	b.n	8004bde <HAL_RCC_ClockConfig+0xa>
 8004cec:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004cee:	e7fa      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x112>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cf0:	f7fe fac4 	bl	800327c <HAL_GetTick>
 8004cf4:	9b01      	ldr	r3, [sp, #4]
 8004cf6:	1ac0      	subs	r0, r0, r3
 8004cf8:	4b0a      	ldr	r3, [pc, #40]	; (8004d24 <HAL_RCC_ClockConfig+0x150>)
 8004cfa:	4298      	cmp	r0, r3
 8004cfc:	d988      	bls.n	8004c10 <HAL_RCC_ClockConfig+0x3c>
 8004cfe:	e7b3      	b.n	8004c68 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004d00:	68ab      	ldr	r3, [r5, #8]
 8004d02:	4a0a      	ldr	r2, [pc, #40]	; (8004d2c <HAL_RCC_ClockConfig+0x158>)
 8004d04:	4013      	ands	r3, r2
 8004d06:	68e2      	ldr	r2, [r4, #12]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	60ab      	str	r3, [r5, #8]
 8004d0c:	e788      	b.n	8004c20 <HAL_RCC_ClockConfig+0x4c>
 8004d0e:	46c0      	nop			; (mov r8, r8)
 8004d10:	40022000 	.word	0x40022000
 8004d14:	40021000 	.word	0x40021000
 8004d18:	0800b22c 	.word	0x0800b22c
 8004d1c:	20000004 	.word	0x20000004
 8004d20:	2000000c 	.word	0x2000000c
 8004d24:	00001388 	.word	0x00001388
 8004d28:	fffff0ff 	.word	0xfffff0ff
 8004d2c:	ffff8fff 	.word	0xffff8fff

08004d30 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004d30:	4b06      	ldr	r3, [pc, #24]	; (8004d4c <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004d32:	4907      	ldr	r1, [pc, #28]	; (8004d50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d34:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8004d36:	4a07      	ldr	r2, [pc, #28]	; (8004d54 <HAL_RCC_GetPCLK1Freq+0x24>)
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004d38:	045b      	lsls	r3, r3, #17
 8004d3a:	0f5b      	lsrs	r3, r3, #29
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	585b      	ldr	r3, [r3, r1]
 8004d40:	211f      	movs	r1, #31
 8004d42:	6810      	ldr	r0, [r2, #0]
 8004d44:	400b      	ands	r3, r1
 8004d46:	40d8      	lsrs	r0, r3
}
 8004d48:	4770      	bx	lr
 8004d4a:	46c0      	nop			; (mov r8, r8)
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	0800b26c 	.word	0x0800b26c
 8004d54:	20000004 	.word	0x20000004

08004d58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d58:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d5a:	6803      	ldr	r3, [r0, #0]
{
 8004d5c:	0005      	movs	r5, r0
 8004d5e:	b085      	sub	sp, #20
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d60:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d62:	039b      	lsls	r3, r3, #14
 8004d64:	d53b      	bpl.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x86>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d66:	2280      	movs	r2, #128	; 0x80
 8004d68:	4c48      	ldr	r4, [pc, #288]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d6a:	0552      	lsls	r2, r2, #21
 8004d6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8004d6e:	9000      	str	r0, [sp, #0]
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d70:	4213      	tst	r3, r2
 8004d72:	d108      	bne.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004d76:	4313      	orrs	r3, r2
 8004d78:	63e3      	str	r3, [r4, #60]	; 0x3c
 8004d7a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	9303      	str	r3, [sp, #12]
 8004d80:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8004d82:	2301      	movs	r3, #1
 8004d84:	9300      	str	r3, [sp, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d86:	2780      	movs	r7, #128	; 0x80
 8004d88:	4e41      	ldr	r6, [pc, #260]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8004d8a:	007f      	lsls	r7, r7, #1
 8004d8c:	6833      	ldr	r3, [r6, #0]
 8004d8e:	433b      	orrs	r3, r7
 8004d90:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d92:	f7fe fa73 	bl	800327c <HAL_GetTick>
 8004d96:	9001      	str	r0, [sp, #4]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d98:	6833      	ldr	r3, [r6, #0]
 8004d9a:	423b      	tst	r3, r7
 8004d9c:	d011      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x6a>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d9e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004da0:	23c0      	movs	r3, #192	; 0xc0
 8004da2:	0010      	movs	r0, r2
 8004da4:	009b      	lsls	r3, r3, #2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004da6:	6969      	ldr	r1, [r5, #20]
 8004da8:	4e3a      	ldr	r6, [pc, #232]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004daa:	4018      	ands	r0, r3
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004dac:	421a      	tst	r2, r3
 8004dae:	d001      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004db0:	4288      	cmp	r0, r1
 8004db2:	d14d      	bne.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004db4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004db6:	696a      	ldr	r2, [r5, #20]
 8004db8:	4033      	ands	r3, r6
 8004dba:	4313      	orrs	r3, r2
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004dbc:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dbe:	65e3      	str	r3, [r4, #92]	; 0x5c
 8004dc0:	e006      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dc2:	f7fe fa5b 	bl	800327c <HAL_GetTick>
 8004dc6:	9b01      	ldr	r3, [sp, #4]
 8004dc8:	1ac0      	subs	r0, r0, r3
 8004dca:	2802      	cmp	r0, #2
 8004dcc:	d9e4      	bls.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x40>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dce:	2003      	movs	r0, #3
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004dd0:	9b00      	ldr	r3, [sp, #0]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d103      	bne.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dd6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004dd8:	4a2f      	ldr	r2, [pc, #188]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004dda:	4013      	ands	r3, r2
 8004ddc:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004dde:	682a      	ldr	r2, [r5, #0]
 8004de0:	07d3      	lsls	r3, r2, #31
 8004de2:	d506      	bpl.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004de4:	2403      	movs	r4, #3
 8004de6:	4929      	ldr	r1, [pc, #164]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004de8:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8004dea:	43a3      	bics	r3, r4
 8004dec:	686c      	ldr	r4, [r5, #4]
 8004dee:	4323      	orrs	r3, r4
 8004df0:	654b      	str	r3, [r1, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004df2:	0693      	lsls	r3, r2, #26
 8004df4:	d506      	bpl.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004df6:	4925      	ldr	r1, [pc, #148]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004df8:	4c28      	ldr	r4, [pc, #160]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8004dfa:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8004dfc:	4023      	ands	r3, r4
 8004dfe:	68ac      	ldr	r4, [r5, #8]
 8004e00:	4323      	orrs	r3, r4
 8004e02:	654b      	str	r3, [r1, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e04:	0453      	lsls	r3, r2, #17
 8004e06:	d50f      	bpl.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e08:	4920      	ldr	r1, [pc, #128]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e0a:	692c      	ldr	r4, [r5, #16]
 8004e0c:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	089b      	lsrs	r3, r3, #2
 8004e12:	4323      	orrs	r3, r4
 8004e14:	654b      	str	r3, [r1, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004e16:	2380      	movs	r3, #128	; 0x80
 8004e18:	05db      	lsls	r3, r3, #23
 8004e1a:	429c      	cmp	r4, r3
 8004e1c:	d104      	bne.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004e1e:	2380      	movs	r3, #128	; 0x80
 8004e20:	68cc      	ldr	r4, [r1, #12]
 8004e22:	025b      	lsls	r3, r3, #9
 8004e24:	4323      	orrs	r3, r4
 8004e26:	60cb      	str	r3, [r1, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004e28:	0512      	lsls	r2, r2, #20
 8004e2a:	d50f      	bpl.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004e2c:	4a17      	ldr	r2, [pc, #92]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e2e:	4c1c      	ldr	r4, [pc, #112]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8004e30:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004e32:	68e9      	ldr	r1, [r5, #12]
 8004e34:	4023      	ands	r3, r4
 8004e36:	430b      	orrs	r3, r1
 8004e38:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004e3a:	2380      	movs	r3, #128	; 0x80
 8004e3c:	01db      	lsls	r3, r3, #7
 8004e3e:	4299      	cmp	r1, r3
 8004e40:	d104      	bne.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004e42:	2380      	movs	r3, #128	; 0x80
 8004e44:	68d1      	ldr	r1, [r2, #12]
 8004e46:	025b      	lsls	r3, r3, #9
 8004e48:	430b      	orrs	r3, r1
 8004e4a:	60d3      	str	r3, [r2, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 8004e4c:	b005      	add	sp, #20
 8004e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e50:	2280      	movs	r2, #128	; 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e52:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e54:	6de0      	ldr	r0, [r4, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e56:	0019      	movs	r1, r3
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e58:	0252      	lsls	r2, r2, #9
 8004e5a:	4302      	orrs	r2, r0
 8004e5c:	65e2      	str	r2, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e5e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004e60:	4810      	ldr	r0, [pc, #64]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e62:	4031      	ands	r1, r6
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e64:	4002      	ands	r2, r0
 8004e66:	65e2      	str	r2, [r4, #92]	; 0x5c
        RCC->BDCR = tmpregister;
 8004e68:	65e1      	str	r1, [r4, #92]	; 0x5c
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e6a:	07db      	lsls	r3, r3, #31
 8004e6c:	d5a2      	bpl.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
        tickstart = HAL_GetTick();
 8004e6e:	f7fe fa05 	bl	800327c <HAL_GetTick>
 8004e72:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e74:	2202      	movs	r2, #2
 8004e76:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004e78:	4213      	tst	r3, r2
 8004e7a:	d19b      	bne.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e7c:	f7fe f9fe 	bl	800327c <HAL_GetTick>
 8004e80:	4b09      	ldr	r3, [pc, #36]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004e82:	1bc0      	subs	r0, r0, r7
 8004e84:	4298      	cmp	r0, r3
 8004e86:	d9f5      	bls.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8004e88:	e7a1      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004e8a:	46c0      	nop			; (mov r8, r8)
 8004e8c:	40021000 	.word	0x40021000
 8004e90:	40007000 	.word	0x40007000
 8004e94:	fffffcff 	.word	0xfffffcff
 8004e98:	efffffff 	.word	0xefffffff
 8004e9c:	ffffcfff 	.word	0xffffcfff
 8004ea0:	ffff3fff 	.word	0xffff3fff
 8004ea4:	fffeffff 	.word	0xfffeffff
 8004ea8:	00001388 	.word	0x00001388

08004eac <HAL_RTC_AlarmIRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004eac:	6803      	ldr	r3, [r0, #0]
{
 8004eae:	b510      	push	{r4, lr}
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004eb0:	699a      	ldr	r2, [r3, #24]
{
 8004eb2:	0004      	movs	r4, r0
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004eb4:	04d2      	lsls	r2, r2, #19
 8004eb6:	d508      	bpl.n	8004eca <HAL_RTC_AlarmIRQHandler+0x1e>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004eb8:	2201      	movs	r2, #1
 8004eba:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004ebc:	4211      	tst	r1, r2
 8004ebe:	d004      	beq.n	8004eca <HAL_RTC_AlarmIRQHandler+0x1e>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004ec0:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004ec6:	f7fd fcab 	bl	8002820 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004eca:	6823      	ldr	r3, [r4, #0]
 8004ecc:	699a      	ldr	r2, [r3, #24]
 8004ece:	0492      	lsls	r2, r2, #18
 8004ed0:	d509      	bpl.n	8004ee6 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004ed6:	4211      	tst	r1, r2
 8004ed8:	d005      	beq.n	8004ee6 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8004eda:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004edc:	0020      	movs	r0, r4
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	65da      	str	r2, [r3, #92]	; 0x5c
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004ee2:	f000 f911 	bl	8005108 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	3429      	adds	r4, #41	; 0x29
 8004eea:	7023      	strb	r3, [r4, #0]
}
 8004eec:	bd10      	pop	{r4, pc}
	...

08004ef0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8004ef2:	4a0b      	ldr	r2, [pc, #44]	; (8004f20 <HAL_RTC_WaitForSynchro+0x30>)
 8004ef4:	6803      	ldr	r3, [r0, #0]
{
 8004ef6:	0004      	movs	r4, r0
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8004ef8:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004efa:	f7fe f9bf 	bl	800327c <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004efe:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8004f00:	0005      	movs	r5, r0
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004f02:	2620      	movs	r6, #32
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004f04:	00bf      	lsls	r7, r7, #2
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004f06:	6823      	ldr	r3, [r4, #0]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	4233      	tst	r3, r6
 8004f0c:	d001      	beq.n	8004f12 <HAL_RTC_WaitForSynchro+0x22>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8004f0e:	2000      	movs	r0, #0
}
 8004f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004f12:	f7fe f9b3 	bl	800327c <HAL_GetTick>
 8004f16:	1b40      	subs	r0, r0, r5
 8004f18:	42b8      	cmp	r0, r7
 8004f1a:	d9f4      	bls.n	8004f06 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8004f1c:	2003      	movs	r0, #3
 8004f1e:	e7f7      	b.n	8004f10 <HAL_RTC_WaitForSynchro+0x20>
 8004f20:	0001005f 	.word	0x0001005f

08004f24 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004f24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8004f26:	2640      	movs	r6, #64	; 0x40
 8004f28:	6803      	ldr	r3, [r0, #0]
{
 8004f2a:	0005      	movs	r5, r0
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8004f2c:	68da      	ldr	r2, [r3, #12]
  HAL_StatusTypeDef status = HAL_OK;  
 8004f2e:	2400      	movs	r4, #0
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8004f30:	4232      	tst	r2, r6
 8004f32:	d10e      	bne.n	8004f52 <RTC_EnterInitMode+0x2e>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8004f34:	2280      	movs	r2, #128	; 0x80
 8004f36:	68d9      	ldr	r1, [r3, #12]

    tickstart = HAL_GetTick();
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004f38:	27fa      	movs	r7, #250	; 0xfa
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8004f3e:	f7fe f99d 	bl	800327c <HAL_GetTick>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004f42:	00bf      	lsls	r7, r7, #2
    tickstart = HAL_GetTick();
 8004f44:	9001      	str	r0, [sp, #4]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004f46:	682b      	ldr	r3, [r5, #0]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	4233      	tst	r3, r6
 8004f4c:	d101      	bne.n	8004f52 <RTC_EnterInitMode+0x2e>
 8004f4e:	2c03      	cmp	r4, #3
 8004f50:	d101      	bne.n	8004f56 <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
}
 8004f52:	0020      	movs	r0, r4
 8004f54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004f56:	f7fe f991 	bl	800327c <HAL_GetTick>
 8004f5a:	9b01      	ldr	r3, [sp, #4]
 8004f5c:	1ac0      	subs	r0, r0, r3
 8004f5e:	42b8      	cmp	r0, r7
 8004f60:	d9f1      	bls.n	8004f46 <RTC_EnterInitMode+0x22>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f62:	002b      	movs	r3, r5
 8004f64:	2403      	movs	r4, #3
 8004f66:	3329      	adds	r3, #41	; 0x29
 8004f68:	701c      	strb	r4, [r3, #0]
 8004f6a:	e7ec      	b.n	8004f46 <RTC_EnterInitMode+0x22>

08004f6c <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004f6c:	2280      	movs	r2, #128	; 0x80
{
 8004f6e:	b570      	push	{r4, r5, r6, lr}
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004f70:	4c0f      	ldr	r4, [pc, #60]	; (8004fb0 <RTC_ExitInitMode+0x44>)
{
 8004f72:	0005      	movs	r5, r0
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004f74:	68e3      	ldr	r3, [r4, #12]
 8004f76:	4393      	bics	r3, r2
 8004f78:	60e3      	str	r3, [r4, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004f7a:	69a3      	ldr	r3, [r4, #24]
 8004f7c:	3a60      	subs	r2, #96	; 0x60
 8004f7e:	4213      	tst	r3, r2
 8004f80:	d107      	bne.n	8004f92 <RTC_ExitInitMode+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f82:	f7ff ffb5 	bl	8004ef0 <HAL_RTC_WaitForSynchro>
 8004f86:	2800      	cmp	r0, #0
 8004f88:	d002      	beq.n	8004f90 <RTC_ExitInitMode+0x24>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f8a:	2003      	movs	r0, #3
 8004f8c:	3529      	adds	r5, #41	; 0x29
 8004f8e:	7028      	strb	r0, [r5, #0]
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
  }

  return status;
}
 8004f90:	bd70      	pop	{r4, r5, r6, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004f92:	69a3      	ldr	r3, [r4, #24]
 8004f94:	4393      	bics	r3, r2
 8004f96:	61a3      	str	r3, [r4, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f98:	f7ff ffaa 	bl	8004ef0 <HAL_RTC_WaitForSynchro>
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	d002      	beq.n	8004fa6 <RTC_ExitInitMode+0x3a>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004fa0:	2003      	movs	r0, #3
 8004fa2:	3529      	adds	r5, #41	; 0x29
 8004fa4:	7028      	strb	r0, [r5, #0]
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004fa6:	2320      	movs	r3, #32
 8004fa8:	69a2      	ldr	r2, [r4, #24]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	61a3      	str	r3, [r4, #24]
  return status;
 8004fae:	e7ef      	b.n	8004f90 <RTC_ExitInitMode+0x24>
 8004fb0:	40002800 	.word	0x40002800

08004fb4 <HAL_RTC_Init>:
{
 8004fb4:	b570      	push	{r4, r5, r6, lr}
 8004fb6:	0004      	movs	r4, r0
  HAL_StatusTypeDef status = HAL_ERROR;
 8004fb8:	2001      	movs	r0, #1
  if(hrtc != NULL)
 8004fba:	2c00      	cmp	r4, #0
 8004fbc:	d017      	beq.n	8004fee <HAL_RTC_Init+0x3a>
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004fbe:	0025      	movs	r5, r4
 8004fc0:	3529      	adds	r5, #41	; 0x29
 8004fc2:	782b      	ldrb	r3, [r5, #0]
 8004fc4:	b2da      	uxtb	r2, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d108      	bne.n	8004fdc <HAL_RTC_Init+0x28>
      hrtc->Lock = HAL_UNLOCKED;
 8004fca:	0023      	movs	r3, r4
 8004fcc:	3328      	adds	r3, #40	; 0x28
 8004fce:	701a      	strb	r2, [r3, #0]
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004fd0:	2388      	movs	r3, #136	; 0x88
 8004fd2:	021b      	lsls	r3, r3, #8
      HAL_RTC_MspInit(hrtc);
 8004fd4:	0020      	movs	r0, r4
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004fd6:	6063      	str	r3, [r4, #4]
      HAL_RTC_MspInit(hrtc);
 8004fd8:	f7fd ff1a 	bl	8002e10 <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004fdc:	2302      	movs	r3, #2
 8004fde:	702b      	strb	r3, [r5, #0]
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004fe0:	6823      	ldr	r3, [r4, #0]
 8004fe2:	68da      	ldr	r2, [r3, #12]
 8004fe4:	06d2      	lsls	r2, r2, #27
 8004fe6:	d503      	bpl.n	8004ff0 <HAL_RTC_Init+0x3c>
      hrtc->State = HAL_RTC_STATE_READY;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	2000      	movs	r0, #0
 8004fec:	702b      	strb	r3, [r5, #0]
}
 8004fee:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ff0:	22ca      	movs	r2, #202	; 0xca
 8004ff2:	625a      	str	r2, [r3, #36]	; 0x24
 8004ff4:	3a77      	subs	r2, #119	; 0x77
      status = RTC_EnterInitMode(hrtc);
 8004ff6:	0020      	movs	r0, r4
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ff8:	625a      	str	r2, [r3, #36]	; 0x24
      status = RTC_EnterInitMode(hrtc);
 8004ffa:	f7ff ff93 	bl	8004f24 <RTC_EnterInitMode>
      if(status == HAL_OK)
 8004ffe:	2800      	cmp	r0, #0
 8005000:	d125      	bne.n	800504e <HAL_RTC_Init+0x9a>
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8005002:	6823      	ldr	r3, [r4, #0]
 8005004:	4915      	ldr	r1, [pc, #84]	; (800505c <HAL_RTC_Init+0xa8>)
 8005006:	699a      	ldr	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005008:	6960      	ldr	r0, [r4, #20]
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800500a:	400a      	ands	r2, r1
 800500c:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800500e:	68a2      	ldr	r2, [r4, #8]
 8005010:	6999      	ldr	r1, [r3, #24]
 8005012:	4302      	orrs	r2, r0
 8005014:	69e0      	ldr	r0, [r4, #28]
 8005016:	4302      	orrs	r2, r0
 8005018:	430a      	orrs	r2, r1
 800501a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800501c:	6922      	ldr	r2, [r4, #16]
        status = RTC_ExitInitMode(hrtc);
 800501e:	0020      	movs	r0, r4
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005020:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005022:	68e2      	ldr	r2, [r4, #12]
 8005024:	6919      	ldr	r1, [r3, #16]
 8005026:	0412      	lsls	r2, r2, #16
 8005028:	430a      	orrs	r2, r1
 800502a:	611a      	str	r2, [r3, #16]
        status = RTC_ExitInitMode(hrtc);
 800502c:	f7ff ff9e 	bl	8004f6c <RTC_ExitInitMode>
      if (status == HAL_OK)
 8005030:	2800      	cmp	r0, #0
 8005032:	d10c      	bne.n	800504e <HAL_RTC_Init+0x9a>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8005034:	6822      	ldr	r2, [r4, #0]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005036:	6a26      	ldr	r6, [r4, #32]
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8005038:	6993      	ldr	r3, [r2, #24]
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	08db      	lsrs	r3, r3, #3
 800503e:	6193      	str	r3, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005040:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005042:	6991      	ldr	r1, [r2, #24]
 8005044:	4333      	orrs	r3, r6
 8005046:	69a6      	ldr	r6, [r4, #24]
 8005048:	4333      	orrs	r3, r6
 800504a:	430b      	orrs	r3, r1
 800504c:	6193      	str	r3, [r2, #24]
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800504e:	22ff      	movs	r2, #255	; 0xff
 8005050:	6823      	ldr	r3, [r4, #0]
 8005052:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8005054:	2800      	cmp	r0, #0
 8005056:	d0c7      	beq.n	8004fe8 <HAL_RTC_Init+0x34>
 8005058:	e7c9      	b.n	8004fee <HAL_RTC_Init+0x3a>
 800505a:	46c0      	nop			; (mov r8, r8)
 800505c:	fb8fffbf 	.word	0xfb8fffbf

08005060 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005060:	0902      	lsrs	r2, r0, #4
{
 8005062:	0003      	movs	r3, r0
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005064:	200a      	movs	r0, #10
 8005066:	4350      	muls	r0, r2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005068:	220f      	movs	r2, #15
 800506a:	4013      	ands	r3, r2
 800506c:	18c0      	adds	r0, r0, r3
 800506e:	b2c0      	uxtb	r0, r0
}
 8005070:	4770      	bx	lr
	...

08005074 <HAL_RTC_GetTime>:
{
 8005074:	b570      	push	{r4, r5, r6, lr}
 8005076:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005078:	6801      	ldr	r1, [r0, #0]
 800507a:	688b      	ldr	r3, [r1, #8]
 800507c:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800507e:	690b      	ldr	r3, [r1, #16]
 8005080:	045b      	lsls	r3, r3, #17
 8005082:	0c5b      	lsrs	r3, r3, #17
 8005084:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005086:	680b      	ldr	r3, [r1, #0]
 8005088:	490d      	ldr	r1, [pc, #52]	; (80050c0 <HAL_RTC_GetTime+0x4c>)
 800508a:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800508c:	0298      	lsls	r0, r3, #10
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800508e:	0a1d      	lsrs	r5, r3, #8
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005090:	b2de      	uxtb	r6, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005092:	0e80      	lsrs	r0, r0, #26
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005094:	b2ed      	uxtb	r5, r5
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005096:	0d9b      	lsrs	r3, r3, #22
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005098:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800509a:	7065      	strb	r5, [r4, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800509c:	70a6      	strb	r6, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800509e:	70e3      	strb	r3, [r4, #3]
  if(Format == RTC_FORMAT_BIN)
 80050a0:	2a00      	cmp	r2, #0
 80050a2:	d10a      	bne.n	80050ba <HAL_RTC_GetTime+0x46>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80050a4:	f7ff ffdc 	bl	8005060 <RTC_Bcd2ToByte>
 80050a8:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80050aa:	0028      	movs	r0, r5
 80050ac:	f7ff ffd8 	bl	8005060 <RTC_Bcd2ToByte>
 80050b0:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80050b2:	0030      	movs	r0, r6
 80050b4:	f7ff ffd4 	bl	8005060 <RTC_Bcd2ToByte>
 80050b8:	70a0      	strb	r0, [r4, #2]
}
 80050ba:	2000      	movs	r0, #0
 80050bc:	bd70      	pop	{r4, r5, r6, pc}
 80050be:	46c0      	nop			; (mov r8, r8)
 80050c0:	007f7f7f 	.word	0x007f7f7f

080050c4 <HAL_RTC_GetDate>:
{
 80050c4:	b570      	push	{r4, r5, r6, lr}
 80050c6:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80050c8:	6803      	ldr	r3, [r0, #0]
 80050ca:	490e      	ldr	r1, [pc, #56]	; (8005104 <HAL_RTC_GetDate+0x40>)
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80050d0:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80050d2:	04dd      	lsls	r5, r3, #19
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80050d4:	b2de      	uxtb	r6, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80050d6:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80050d8:	0eed      	lsrs	r5, r5, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80050da:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80050dc:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80050de:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80050e0:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80050e2:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 80050e4:	2a00      	cmp	r2, #0
 80050e6:	d10a      	bne.n	80050fe <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80050e8:	f7ff ffba 	bl	8005060 <RTC_Bcd2ToByte>
 80050ec:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80050ee:	0028      	movs	r0, r5
 80050f0:	f7ff ffb6 	bl	8005060 <RTC_Bcd2ToByte>
 80050f4:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80050f6:	0030      	movs	r0, r6
 80050f8:	f7ff ffb2 	bl	8005060 <RTC_Bcd2ToByte>
 80050fc:	70a0      	strb	r0, [r4, #2]
}
 80050fe:	2000      	movs	r0, #0
 8005100:	bd70      	pop	{r4, r5, r6, pc}
 8005102:	46c0      	nop			; (mov r8, r8)
 8005104:	00ffff3f 	.word	0x00ffff3f

08005108 <HAL_RTCEx_AlarmBEventCallback>:
 8005108:	4770      	bx	lr
	...

0800510c <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800510c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800510e:	0017      	movs	r7, r2
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005110:	2200      	movs	r2, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8005112:	b085      	sub	sp, #20
 8005114:	001d      	movs	r5, r3
  __IO uint8_t  tmpreg8 = 0;
 8005116:	ab02      	add	r3, sp, #8
 8005118:	70da      	strb	r2, [r3, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800511a:	0004      	movs	r4, r0
 800511c:	000e      	movs	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800511e:	f7fe f8ad 	bl	800327c <HAL_GetTick>
 8005122:	19ed      	adds	r5, r5, r7
 8005124:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8005126:	f7fe f8a9 	bl	800327c <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800512a:	2223      	movs	r2, #35	; 0x23
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800512c:	6823      	ldr	r3, [r4, #0]
  tmp_tickstart = HAL_GetTick();
 800512e:	9000      	str	r0, [sp, #0]
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005130:	9301      	str	r3, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005132:	4b2a      	ldr	r3, [pc, #168]	; (80051dc <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd0>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4353      	muls	r3, r2
 8005138:	0d1b      	lsrs	r3, r3, #20
 800513a:	436b      	muls	r3, r5
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 800513c:	9303      	str	r3, [sp, #12]
  while ((hspi->Instance->SR & Fifo) != State)
 800513e:	6821      	ldr	r1, [r4, #0]
      tmpreg8 = *ptmpreg8;
 8005140:	ab02      	add	r3, sp, #8
 8005142:	1cda      	adds	r2, r3, #3
  while ((hspi->Instance->SR & Fifo) != State)
 8005144:	688b      	ldr	r3, [r1, #8]
 8005146:	0018      	movs	r0, r3
 8005148:	4030      	ands	r0, r6
 800514a:	4233      	tst	r3, r6
 800514c:	d03b      	beq.n	80051c6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xba>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800514e:	23c0      	movs	r3, #192	; 0xc0
 8005150:	00db      	lsls	r3, r3, #3
 8005152:	429e      	cmp	r6, r3
 8005154:	d104      	bne.n	8005160 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
      tmpreg8 = *ptmpreg8;
 8005156:	9b01      	ldr	r3, [sp, #4]
 8005158:	7b1b      	ldrb	r3, [r3, #12]
 800515a:	b2db      	uxtb	r3, r3
 800515c:	7013      	strb	r3, [r2, #0]
      UNUSED(tmpreg8);
 800515e:	7813      	ldrb	r3, [r2, #0]
    if (Timeout != HAL_MAX_DELAY)
 8005160:	1c7b      	adds	r3, r7, #1
 8005162:	d0ef      	beq.n	8005144 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x38>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005164:	f7fe f88a 	bl	800327c <HAL_GetTick>
 8005168:	9b00      	ldr	r3, [sp, #0]
 800516a:	1ac0      	subs	r0, r0, r3
 800516c:	42a8      	cmp	r0, r5
 800516e:	d32c      	bcc.n	80051ca <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005170:	21e0      	movs	r1, #224	; 0xe0
 8005172:	6823      	ldr	r3, [r4, #0]
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	438a      	bics	r2, r1
 8005178:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800517a:	2282      	movs	r2, #130	; 0x82
 800517c:	6861      	ldr	r1, [r4, #4]
 800517e:	0052      	lsls	r2, r2, #1
 8005180:	4291      	cmp	r1, r2
 8005182:	d10c      	bne.n	800519e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
 8005184:	2180      	movs	r1, #128	; 0x80
 8005186:	68a2      	ldr	r2, [r4, #8]
 8005188:	0209      	lsls	r1, r1, #8
 800518a:	428a      	cmp	r2, r1
 800518c:	d003      	beq.n	8005196 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800518e:	2180      	movs	r1, #128	; 0x80
 8005190:	00c9      	lsls	r1, r1, #3
 8005192:	428a      	cmp	r2, r1
 8005194:	d103      	bne.n	800519e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
          __HAL_SPI_DISABLE(hspi);
 8005196:	2140      	movs	r1, #64	; 0x40
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	438a      	bics	r2, r1
 800519c:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800519e:	2180      	movs	r1, #128	; 0x80
 80051a0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80051a2:	0189      	lsls	r1, r1, #6
 80051a4:	428a      	cmp	r2, r1
 80051a6:	d106      	bne.n	80051b6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xaa>
          SPI_RESET_CRC(hspi);
 80051a8:	6819      	ldr	r1, [r3, #0]
 80051aa:	480d      	ldr	r0, [pc, #52]	; (80051e0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd4>)
 80051ac:	4001      	ands	r1, r0
 80051ae:	6019      	str	r1, [r3, #0]
 80051b0:	6819      	ldr	r1, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80051b6:	0023      	movs	r3, r4
 80051b8:	2201      	movs	r2, #1
 80051ba:	335d      	adds	r3, #93	; 0x5d
 80051bc:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 80051be:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80051c0:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 80051c2:	345c      	adds	r4, #92	; 0x5c
 80051c4:	7023      	strb	r3, [r4, #0]
    }
  }

  return HAL_OK;
}
 80051c6:	b005      	add	sp, #20
 80051c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 80051ca:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 80051cc:	1e5a      	subs	r2, r3, #1
 80051ce:	4193      	sbcs	r3, r2
 80051d0:	425b      	negs	r3, r3
 80051d2:	401d      	ands	r5, r3
      count--;
 80051d4:	9b03      	ldr	r3, [sp, #12]
 80051d6:	3b01      	subs	r3, #1
 80051d8:	e7b0      	b.n	800513c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x30>
 80051da:	46c0      	nop			; (mov r8, r8)
 80051dc:	20000004 	.word	0x20000004
 80051e0:	ffffdfff 	.word	0xffffdfff

080051e4 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80051e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051e6:	000e      	movs	r6, r1
 80051e8:	b085      	sub	sp, #20
 80051ea:	0015      	movs	r5, r2
 80051ec:	0004      	movs	r4, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80051ee:	f7fe f845 	bl	800327c <HAL_GetTick>
 80051f2:	19ad      	adds	r5, r5, r6
 80051f4:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 80051f6:	f7fe f841 	bl	800327c <HAL_GetTick>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051fa:	2780      	movs	r7, #128	; 0x80
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80051fc:	4b25      	ldr	r3, [pc, #148]	; (8005294 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 80051fe:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	015b      	lsls	r3, r3, #5
 8005204:	0d1b      	lsrs	r3, r3, #20
 8005206:	436b      	muls	r3, r5
 8005208:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800520a:	6822      	ldr	r2, [r4, #0]
 800520c:	6893      	ldr	r3, [r2, #8]
 800520e:	0018      	movs	r0, r3
 8005210:	4038      	ands	r0, r7
 8005212:	423b      	tst	r3, r7
 8005214:	d032      	beq.n	800527c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
    if (Timeout != HAL_MAX_DELAY)
 8005216:	1c73      	adds	r3, r6, #1
 8005218:	d0f8      	beq.n	800520c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800521a:	f7fe f82f 	bl	800327c <HAL_GetTick>
 800521e:	9b01      	ldr	r3, [sp, #4]
 8005220:	1ac0      	subs	r0, r0, r3
 8005222:	42a8      	cmp	r0, r5
 8005224:	d32c      	bcc.n	8005280 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9c>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005226:	21e0      	movs	r1, #224	; 0xe0
 8005228:	6823      	ldr	r3, [r4, #0]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	438a      	bics	r2, r1
 800522e:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005230:	2282      	movs	r2, #130	; 0x82
 8005232:	6861      	ldr	r1, [r4, #4]
 8005234:	0052      	lsls	r2, r2, #1
 8005236:	4291      	cmp	r1, r2
 8005238:	d10c      	bne.n	8005254 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
 800523a:	2180      	movs	r1, #128	; 0x80
 800523c:	68a2      	ldr	r2, [r4, #8]
 800523e:	0209      	lsls	r1, r1, #8
 8005240:	428a      	cmp	r2, r1
 8005242:	d003      	beq.n	800524c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x68>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005244:	2180      	movs	r1, #128	; 0x80
 8005246:	00c9      	lsls	r1, r1, #3
 8005248:	428a      	cmp	r2, r1
 800524a:	d103      	bne.n	8005254 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
          __HAL_SPI_DISABLE(hspi);
 800524c:	2140      	movs	r1, #64	; 0x40
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	438a      	bics	r2, r1
 8005252:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005254:	2180      	movs	r1, #128	; 0x80
 8005256:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005258:	0189      	lsls	r1, r1, #6
 800525a:	428a      	cmp	r2, r1
 800525c:	d106      	bne.n	800526c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x88>
          SPI_RESET_CRC(hspi);
 800525e:	6819      	ldr	r1, [r3, #0]
 8005260:	480d      	ldr	r0, [pc, #52]	; (8005298 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 8005262:	4001      	ands	r1, r0
 8005264:	6019      	str	r1, [r3, #0]
 8005266:	6819      	ldr	r1, [r3, #0]
 8005268:	430a      	orrs	r2, r1
 800526a:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800526c:	0023      	movs	r3, r4
 800526e:	2201      	movs	r2, #1
 8005270:	335d      	adds	r3, #93	; 0x5d
 8005272:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8005274:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8005276:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8005278:	345c      	adds	r4, #92	; 0x5c
 800527a:	7023      	strb	r3, [r4, #0]
}
 800527c:	b005      	add	sp, #20
 800527e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8005280:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8005282:	1e5a      	subs	r2, r3, #1
 8005284:	4193      	sbcs	r3, r2
 8005286:	425b      	negs	r3, r3
 8005288:	401d      	ands	r5, r3
      count--;
 800528a:	9b03      	ldr	r3, [sp, #12]
 800528c:	3b01      	subs	r3, #1
 800528e:	9303      	str	r3, [sp, #12]
 8005290:	e7bb      	b.n	800520a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
 8005292:	46c0      	nop			; (mov r8, r8)
 8005294:	20000004 	.word	0x20000004
 8005298:	ffffdfff 	.word	0xffffdfff

0800529c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800529c:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800529e:	0013      	movs	r3, r2
{
 80052a0:	000d      	movs	r5, r1
 80052a2:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80052a4:	000a      	movs	r2, r1
 80052a6:	21c0      	movs	r1, #192	; 0xc0
 80052a8:	0149      	lsls	r1, r1, #5
{
 80052aa:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80052ac:	f7ff ff2e 	bl	800510c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 80052b0:	2800      	cmp	r0, #0
 80052b2:	d005      	beq.n	80052c0 <SPI_EndRxTxTransaction+0x24>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052b4:	2320      	movs	r3, #32
 80052b6:	6e22      	ldr	r2, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80052b8:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052ba:	4313      	orrs	r3, r2
 80052bc:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80052be:	e00f      	b.n	80052e0 <SPI_EndRxTxTransaction+0x44>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052c0:	0032      	movs	r2, r6
 80052c2:	0029      	movs	r1, r5
 80052c4:	0020      	movs	r0, r4
 80052c6:	f7ff ff8d 	bl	80051e4 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80052ca:	2800      	cmp	r0, #0
 80052cc:	d1f2      	bne.n	80052b4 <SPI_EndRxTxTransaction+0x18>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80052ce:	21c0      	movs	r1, #192	; 0xc0
 80052d0:	0033      	movs	r3, r6
 80052d2:	002a      	movs	r2, r5
 80052d4:	0020      	movs	r0, r4
 80052d6:	00c9      	lsls	r1, r1, #3
 80052d8:	f7ff ff18 	bl	800510c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 80052dc:	2800      	cmp	r0, #0
 80052de:	d1e9      	bne.n	80052b4 <SPI_EndRxTxTransaction+0x18>
  }

  return HAL_OK;
}
 80052e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080052e4 <HAL_SPI_Init>:
{
 80052e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052e6:	0004      	movs	r4, r0
    return HAL_ERROR;
 80052e8:	2001      	movs	r0, #1
  if (hspi == NULL)
 80052ea:	2c00      	cmp	r4, #0
 80052ec:	d066      	beq.n	80053bc <HAL_SPI_Init+0xd8>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d164      	bne.n	80053be <HAL_SPI_Init+0xda>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052f4:	2282      	movs	r2, #130	; 0x82
 80052f6:	6861      	ldr	r1, [r4, #4]
 80052f8:	0052      	lsls	r2, r2, #1
 80052fa:	4291      	cmp	r1, r2
 80052fc:	d000      	beq.n	8005300 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052fe:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005300:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005302:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005304:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005306:	355d      	adds	r5, #93	; 0x5d
 8005308:	782b      	ldrb	r3, [r5, #0]
 800530a:	b2da      	uxtb	r2, r3
 800530c:	2b00      	cmp	r3, #0
 800530e:	d105      	bne.n	800531c <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 8005310:	0023      	movs	r3, r4
 8005312:	335c      	adds	r3, #92	; 0x5c
    HAL_SPI_MspInit(hspi);
 8005314:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8005316:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 8005318:	f7fd fdb0 	bl	8002e7c <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 800531c:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800531e:	2140      	movs	r1, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8005320:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8005322:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005324:	68e6      	ldr	r6, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8005326:	6813      	ldr	r3, [r2, #0]
 8005328:	438b      	bics	r3, r1
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800532a:	21e0      	movs	r1, #224	; 0xe0
  __HAL_SPI_DISABLE(hspi);
 800532c:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800532e:	00c9      	lsls	r1, r1, #3
 8005330:	2300      	movs	r3, #0
 8005332:	428e      	cmp	r6, r1
 8005334:	d847      	bhi.n	80053c6 <HAL_SPI_Init+0xe2>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005336:	2080      	movs	r0, #128	; 0x80
 8005338:	0140      	lsls	r0, r0, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800533a:	428e      	cmp	r6, r1
 800533c:	d000      	beq.n	8005340 <HAL_SPI_Init+0x5c>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800533e:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005340:	2182      	movs	r1, #130	; 0x82
 8005342:	2784      	movs	r7, #132	; 0x84
 8005344:	6863      	ldr	r3, [r4, #4]
 8005346:	0049      	lsls	r1, r1, #1
 8005348:	400b      	ands	r3, r1
 800534a:	68a1      	ldr	r1, [r4, #8]
 800534c:	023f      	lsls	r7, r7, #8
 800534e:	4039      	ands	r1, r7
 8005350:	2702      	movs	r7, #2
 8005352:	430b      	orrs	r3, r1
 8005354:	6921      	ldr	r1, [r4, #16]
 8005356:	69a5      	ldr	r5, [r4, #24]
 8005358:	4039      	ands	r1, r7
 800535a:	430b      	orrs	r3, r1
 800535c:	2101      	movs	r1, #1
 800535e:	6967      	ldr	r7, [r4, #20]
 8005360:	400f      	ands	r7, r1
 8005362:	433b      	orrs	r3, r7
 8005364:	2780      	movs	r7, #128	; 0x80
 8005366:	00bf      	lsls	r7, r7, #2
 8005368:	402f      	ands	r7, r5
 800536a:	433b      	orrs	r3, r7
 800536c:	69e7      	ldr	r7, [r4, #28]
 800536e:	3137      	adds	r1, #55	; 0x37
 8005370:	400f      	ands	r7, r1
 8005372:	433b      	orrs	r3, r7
 8005374:	6a27      	ldr	r7, [r4, #32]
 8005376:	3148      	adds	r1, #72	; 0x48
 8005378:	400f      	ands	r7, r1
 800537a:	2180      	movs	r1, #128	; 0x80
 800537c:	433b      	orrs	r3, r7
 800537e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8005380:	0189      	lsls	r1, r1, #6
 8005382:	400f      	ands	r7, r1
 8005384:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005386:	2710      	movs	r7, #16
 8005388:	2108      	movs	r1, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800538a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800538c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800538e:	0c2d      	lsrs	r5, r5, #16
 8005390:	403b      	ands	r3, r7
 8005392:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8005394:	400f      	ands	r7, r1
 8005396:	433b      	orrs	r3, r7
 8005398:	27f0      	movs	r7, #240	; 0xf0
 800539a:	013f      	lsls	r7, r7, #4
 800539c:	403e      	ands	r6, r7
 800539e:	4333      	orrs	r3, r6
 80053a0:	2604      	movs	r6, #4
 80053a2:	4035      	ands	r5, r6
 80053a4:	432b      	orrs	r3, r5
 80053a6:	4303      	orrs	r3, r0
 80053a8:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053aa:	69d3      	ldr	r3, [r2, #28]
 80053ac:	4808      	ldr	r0, [pc, #32]	; (80053d0 <HAL_SPI_Init+0xec>)
 80053ae:	4003      	ands	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053b0:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053b2:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80053b4:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053b6:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80053b8:	345d      	adds	r4, #93	; 0x5d
 80053ba:	7023      	strb	r3, [r4, #0]
}
 80053bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053be:	2300      	movs	r3, #0
 80053c0:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053c2:	6163      	str	r3, [r4, #20]
 80053c4:	e79c      	b.n	8005300 <HAL_SPI_Init+0x1c>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80053c6:	21f0      	movs	r1, #240	; 0xf0
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80053c8:	0018      	movs	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80053ca:	0109      	lsls	r1, r1, #4
 80053cc:	e7b5      	b.n	800533a <HAL_SPI_Init+0x56>
 80053ce:	46c0      	nop			; (mov r8, r8)
 80053d0:	fffff7ff 	.word	0xfffff7ff

080053d4 <HAL_SPI_Transmit>:
{
 80053d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053d6:	001d      	movs	r5, r3
  __HAL_LOCK(hspi);
 80053d8:	0003      	movs	r3, r0
{
 80053da:	b085      	sub	sp, #20
 80053dc:	9100      	str	r1, [sp, #0]
  __HAL_LOCK(hspi);
 80053de:	335c      	adds	r3, #92	; 0x5c
{
 80053e0:	0016      	movs	r6, r2
  __HAL_LOCK(hspi);
 80053e2:	781a      	ldrb	r2, [r3, #0]
{
 80053e4:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 80053e6:	2702      	movs	r7, #2
 80053e8:	2a01      	cmp	r2, #1
 80053ea:	d100      	bne.n	80053ee <HAL_SPI_Transmit+0x1a>
 80053ec:	e085      	b.n	80054fa <HAL_SPI_Transmit+0x126>
 80053ee:	2201      	movs	r2, #1
 80053f0:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80053f2:	f7fd ff43 	bl	800327c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80053f6:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 80053f8:	9001      	str	r0, [sp, #4]
  if (hspi->State != HAL_SPI_STATE_READY)
 80053fa:	335d      	adds	r3, #93	; 0x5d
 80053fc:	781a      	ldrb	r2, [r3, #0]
 80053fe:	b2d7      	uxtb	r7, r2
 8005400:	2a01      	cmp	r2, #1
 8005402:	d000      	beq.n	8005406 <HAL_SPI_Transmit+0x32>
 8005404:	e0a9      	b.n	800555a <HAL_SPI_Transmit+0x186>
  if ((pData == NULL) || (Size == 0U))
 8005406:	9a00      	ldr	r2, [sp, #0]
 8005408:	2a00      	cmp	r2, #0
 800540a:	d073      	beq.n	80054f4 <HAL_SPI_Transmit+0x120>
 800540c:	2e00      	cmp	r6, #0
 800540e:	d071      	beq.n	80054f4 <HAL_SPI_Transmit+0x120>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005410:	2203      	movs	r2, #3
 8005412:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005414:	2300      	movs	r3, #0
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005416:	9a00      	ldr	r2, [sp, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005418:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800541a:	63a2      	str	r2, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800541c:	1da2      	adds	r2, r4, #6
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800541e:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxXferSize  = Size;
 8005420:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005422:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->RxXferCount = 0U;
 8005424:	3202      	adds	r2, #2
  hspi->RxXferSize  = 0U;
 8005426:	8793      	strh	r3, [r2, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005428:	87d3      	strh	r3, [r2, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800542a:	2280      	movs	r2, #128	; 0x80
 800542c:	68a1      	ldr	r1, [r4, #8]
  hspi->TxISR       = NULL;
 800542e:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005430:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005432:	0212      	lsls	r2, r2, #8
    __HAL_SPI_DISABLE(hspi);
 8005434:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005436:	4291      	cmp	r1, r2
 8005438:	d108      	bne.n	800544c <HAL_SPI_Transmit+0x78>
    __HAL_SPI_DISABLE(hspi);
 800543a:	2140      	movs	r1, #64	; 0x40
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	438a      	bics	r2, r1
 8005440:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005442:	2280      	movs	r2, #128	; 0x80
 8005444:	6819      	ldr	r1, [r3, #0]
 8005446:	01d2      	lsls	r2, r2, #7
 8005448:	430a      	orrs	r2, r1
 800544a:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800544c:	2240      	movs	r2, #64	; 0x40
 800544e:	6819      	ldr	r1, [r3, #0]
 8005450:	4211      	tst	r1, r2
 8005452:	d102      	bne.n	800545a <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 8005454:	6819      	ldr	r1, [r3, #0]
 8005456:	430a      	orrs	r2, r1
 8005458:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800545a:	21e0      	movs	r1, #224	; 0xe0
 800545c:	68e0      	ldr	r0, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800545e:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005460:	00c9      	lsls	r1, r1, #3
 8005462:	4288      	cmp	r0, r1
 8005464:	d94c      	bls.n	8005500 <HAL_SPI_Transmit+0x12c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005466:	2a00      	cmp	r2, #0
 8005468:	d001      	beq.n	800546e <HAL_SPI_Transmit+0x9a>
 800546a:	2e01      	cmp	r6, #1
 800546c:	d109      	bne.n	8005482 <HAL_SPI_Transmit+0xae>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800546e:	9a00      	ldr	r2, [sp, #0]
 8005470:	8812      	ldrh	r2, [r2, #0]
 8005472:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005474:	9b00      	ldr	r3, [sp, #0]
 8005476:	3302      	adds	r3, #2
 8005478:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800547a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800547c:	3b01      	subs	r3, #1
 800547e:	b29b      	uxth	r3, r3
 8005480:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005482:	2602      	movs	r6, #2
    while (hspi->TxXferCount > 0U)
 8005484:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005486:	2b00      	cmp	r3, #0
 8005488:	d119      	bne.n	80054be <HAL_SPI_Transmit+0xea>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800548a:	0029      	movs	r1, r5
 800548c:	0020      	movs	r0, r4
 800548e:	9a01      	ldr	r2, [sp, #4]
 8005490:	f7ff ff04 	bl	800529c <SPI_EndRxTxTransaction>
 8005494:	2800      	cmp	r0, #0
 8005496:	d15d      	bne.n	8005554 <HAL_SPI_Transmit+0x180>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005498:	68a3      	ldr	r3, [r4, #8]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d106      	bne.n	80054ac <HAL_SPI_Transmit+0xd8>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800549e:	9303      	str	r3, [sp, #12]
 80054a0:	6823      	ldr	r3, [r4, #0]
 80054a2:	68da      	ldr	r2, [r3, #12]
 80054a4:	9203      	str	r2, [sp, #12]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	9303      	str	r3, [sp, #12]
 80054aa:	9b03      	ldr	r3, [sp, #12]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054ac:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80054ae:	2a00      	cmp	r2, #0
 80054b0:	d120      	bne.n	80054f4 <HAL_SPI_Transmit+0x120>
    hspi->State = HAL_SPI_STATE_READY;
 80054b2:	0023      	movs	r3, r4
 80054b4:	2101      	movs	r1, #1
 80054b6:	335d      	adds	r3, #93	; 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054b8:	0017      	movs	r7, r2
    hspi->State = HAL_SPI_STATE_READY;
 80054ba:	7019      	strb	r1, [r3, #0]
 80054bc:	e01a      	b.n	80054f4 <HAL_SPI_Transmit+0x120>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054be:	6822      	ldr	r2, [r4, #0]
 80054c0:	6893      	ldr	r3, [r2, #8]
 80054c2:	4233      	tst	r3, r6
 80054c4:	d009      	beq.n	80054da <HAL_SPI_Transmit+0x106>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80054c8:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054ca:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054cc:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054ce:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80054d0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80054d2:	3b01      	subs	r3, #1
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80054d8:	e7d4      	b.n	8005484 <HAL_SPI_Transmit+0xb0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054da:	f7fd fecf 	bl	800327c <HAL_GetTick>
 80054de:	9b01      	ldr	r3, [sp, #4]
 80054e0:	1ac0      	subs	r0, r0, r3
 80054e2:	42a8      	cmp	r0, r5
 80054e4:	d3ce      	bcc.n	8005484 <HAL_SPI_Transmit+0xb0>
 80054e6:	1c6b      	adds	r3, r5, #1
 80054e8:	d0cc      	beq.n	8005484 <HAL_SPI_Transmit+0xb0>
          hspi->State = HAL_SPI_STATE_READY;
 80054ea:	0023      	movs	r3, r4
 80054ec:	2201      	movs	r2, #1
          errorcode = HAL_TIMEOUT;
 80054ee:	2703      	movs	r7, #3
          hspi->State = HAL_SPI_STATE_READY;
 80054f0:	335d      	adds	r3, #93	; 0x5d
 80054f2:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 80054f4:	2300      	movs	r3, #0
 80054f6:	345c      	adds	r4, #92	; 0x5c
 80054f8:	7023      	strb	r3, [r4, #0]
}
 80054fa:	0038      	movs	r0, r7
 80054fc:	b005      	add	sp, #20
 80054fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005500:	2a00      	cmp	r2, #0
 8005502:	d001      	beq.n	8005508 <HAL_SPI_Transmit+0x134>
 8005504:	2e01      	cmp	r6, #1
 8005506:	d109      	bne.n	800551c <HAL_SPI_Transmit+0x148>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005508:	9a00      	ldr	r2, [sp, #0]
 800550a:	7812      	ldrb	r2, [r2, #0]
 800550c:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800550e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005510:	3301      	adds	r3, #1
 8005512:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8005514:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005516:	3b01      	subs	r3, #1
 8005518:	b29b      	uxth	r3, r3
 800551a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800551c:	2602      	movs	r6, #2
    while (hspi->TxXferCount > 0U)
 800551e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005520:	2b00      	cmp	r3, #0
 8005522:	d0b2      	beq.n	800548a <HAL_SPI_Transmit+0xb6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005524:	6823      	ldr	r3, [r4, #0]
 8005526:	689a      	ldr	r2, [r3, #8]
 8005528:	4232      	tst	r2, r6
 800552a:	d00a      	beq.n	8005542 <HAL_SPI_Transmit+0x16e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800552c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800552e:	7812      	ldrb	r2, [r2, #0]
 8005530:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005532:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005534:	3301      	adds	r3, #1
 8005536:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005538:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800553a:	3b01      	subs	r3, #1
 800553c:	b29b      	uxth	r3, r3
 800553e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005540:	e7ed      	b.n	800551e <HAL_SPI_Transmit+0x14a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005542:	f7fd fe9b 	bl	800327c <HAL_GetTick>
 8005546:	9b01      	ldr	r3, [sp, #4]
 8005548:	1ac0      	subs	r0, r0, r3
 800554a:	42a8      	cmp	r0, r5
 800554c:	d3e7      	bcc.n	800551e <HAL_SPI_Transmit+0x14a>
 800554e:	1c6b      	adds	r3, r5, #1
 8005550:	d0e5      	beq.n	800551e <HAL_SPI_Transmit+0x14a>
 8005552:	e7ca      	b.n	80054ea <HAL_SPI_Transmit+0x116>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005554:	2320      	movs	r3, #32
 8005556:	6623      	str	r3, [r4, #96]	; 0x60
 8005558:	e79e      	b.n	8005498 <HAL_SPI_Transmit+0xc4>
    errorcode = HAL_BUSY;
 800555a:	2702      	movs	r7, #2
 800555c:	e7ca      	b.n	80054f4 <HAL_SPI_Transmit+0x120>
	...

08005560 <HAL_SPI_Transmit_DMA>:
{
 8005560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 8005562:	0006      	movs	r6, r0
 8005564:	365c      	adds	r6, #92	; 0x5c
 8005566:	7833      	ldrb	r3, [r6, #0]
{
 8005568:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 800556a:	2502      	movs	r5, #2
 800556c:	2b01      	cmp	r3, #1
 800556e:	d057      	beq.n	8005620 <HAL_SPI_Transmit_DMA+0xc0>
 8005570:	2301      	movs	r3, #1
 8005572:	7033      	strb	r3, [r6, #0]
  if (hspi->State != HAL_SPI_STATE_READY)
 8005574:	0003      	movs	r3, r0
 8005576:	335d      	adds	r3, #93	; 0x5d
 8005578:	7818      	ldrb	r0, [r3, #0]
 800557a:	b2c5      	uxtb	r5, r0
 800557c:	2801      	cmp	r0, #1
 800557e:	d000      	beq.n	8005582 <HAL_SPI_Transmit_DMA+0x22>
 8005580:	e06b      	b.n	800565a <HAL_SPI_Transmit_DMA+0xfa>
  if ((pData == NULL) || (Size == 0U))
 8005582:	2900      	cmp	r1, #0
 8005584:	d04a      	beq.n	800561c <HAL_SPI_Transmit_DMA+0xbc>
 8005586:	2a00      	cmp	r2, #0
 8005588:	d048      	beq.n	800561c <HAL_SPI_Transmit_DMA+0xbc>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800558a:	3002      	adds	r0, #2
 800558c:	7018      	strb	r0, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800558e:	2300      	movs	r3, #0
  hspi->TxXferSize  = Size;
 8005590:	87a2      	strh	r2, [r4, #60]	; 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005592:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxXferCount = Size;
 8005594:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 8005596:	1da2      	adds	r2, r4, #6
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005598:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800559a:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 800559c:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800559e:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->RxXferCount = 0U;
 80055a0:	3202      	adds	r2, #2
  hspi->RxXferSize  = 0U;
 80055a2:	8793      	strh	r3, [r2, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80055a4:	87d3      	strh	r3, [r2, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055a6:	2380      	movs	r3, #128	; 0x80
 80055a8:	68a0      	ldr	r0, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 80055aa:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055ac:	021b      	lsls	r3, r3, #8
 80055ae:	4298      	cmp	r0, r3
 80055b0:	d108      	bne.n	80055c4 <HAL_SPI_Transmit_DMA+0x64>
    __HAL_SPI_DISABLE(hspi);
 80055b2:	2040      	movs	r0, #64	; 0x40
 80055b4:	6813      	ldr	r3, [r2, #0]
 80055b6:	4383      	bics	r3, r0
 80055b8:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 80055ba:	2380      	movs	r3, #128	; 0x80
 80055bc:	6810      	ldr	r0, [r2, #0]
 80055be:	01db      	lsls	r3, r3, #7
 80055c0:	4303      	orrs	r3, r0
 80055c2:	6013      	str	r3, [r2, #0]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80055c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80055c6:	4b26      	ldr	r3, [pc, #152]	; (8005660 <HAL_SPI_Transmit_DMA+0x100>)
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80055c8:	4f26      	ldr	r7, [pc, #152]	; (8005664 <HAL_SPI_Transmit_DMA+0x104>)
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80055ca:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80055cc:	4b26      	ldr	r3, [pc, #152]	; (8005668 <HAL_SPI_Transmit_DMA+0x108>)
 80055ce:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80055d0:	4b26      	ldr	r3, [pc, #152]	; (800566c <HAL_SPI_Transmit_DMA+0x10c>)
 80055d2:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback = NULL;
 80055d4:	2300      	movs	r3, #0
 80055d6:	6383      	str	r3, [r0, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80055d8:	6853      	ldr	r3, [r2, #4]
 80055da:	403b      	ands	r3, r7
 80055dc:	6053      	str	r3, [r2, #4]
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80055de:	23e0      	movs	r3, #224	; 0xe0
 80055e0:	68e7      	ldr	r7, [r4, #12]
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	429f      	cmp	r7, r3
 80055e6:	d80e      	bhi.n	8005606 <HAL_SPI_Transmit_DMA+0xa6>
 80055e8:	2380      	movs	r3, #128	; 0x80
 80055ea:	6987      	ldr	r7, [r0, #24]
 80055ec:	00db      	lsls	r3, r3, #3
 80055ee:	429f      	cmp	r7, r3
 80055f0:	d109      	bne.n	8005606 <HAL_SPI_Transmit_DMA+0xa6>
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80055f2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80055f4:	07db      	lsls	r3, r3, #31
 80055f6:	d415      	bmi.n	8005624 <HAL_SPI_Transmit_DMA+0xc4>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80055f8:	6853      	ldr	r3, [r2, #4]
 80055fa:	4f1a      	ldr	r7, [pc, #104]	; (8005664 <HAL_SPI_Transmit_DMA+0x104>)
 80055fc:	403b      	ands	r3, r7
 80055fe:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8005600:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005602:	085b      	lsrs	r3, r3, #1
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005604:	87e3      	strh	r3, [r4, #62]	; 0x3e
                                 hspi->TxXferCount))
 8005606:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005608:	320c      	adds	r2, #12
                                 hspi->TxXferCount))
 800560a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800560c:	f7fe fade 	bl	8003bcc <HAL_DMA_Start_IT>
 8005610:	2800      	cmp	r0, #0
 8005612:	d010      	beq.n	8005636 <HAL_SPI_Transmit_DMA+0xd6>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005614:	2310      	movs	r3, #16
 8005616:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005618:	4313      	orrs	r3, r2
 800561a:	6623      	str	r3, [r4, #96]	; 0x60
  __HAL_UNLOCK(hspi);
 800561c:	2300      	movs	r3, #0
 800561e:	7033      	strb	r3, [r6, #0]
}
 8005620:	0028      	movs	r0, r5
 8005622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005624:	2380      	movs	r3, #128	; 0x80
 8005626:	6857      	ldr	r7, [r2, #4]
 8005628:	01db      	lsls	r3, r3, #7
 800562a:	433b      	orrs	r3, r7
 800562c:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800562e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005630:	085b      	lsrs	r3, r3, #1
 8005632:	3301      	adds	r3, #1
 8005634:	e7e6      	b.n	8005604 <HAL_SPI_Transmit_DMA+0xa4>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005636:	2240      	movs	r2, #64	; 0x40
 8005638:	6823      	ldr	r3, [r4, #0]
 800563a:	6819      	ldr	r1, [r3, #0]
 800563c:	4211      	tst	r1, r2
 800563e:	d102      	bne.n	8005646 <HAL_SPI_Transmit_DMA+0xe6>
    __HAL_SPI_ENABLE(hspi);
 8005640:	6819      	ldr	r1, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005646:	2220      	movs	r2, #32
 8005648:	6859      	ldr	r1, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800564a:	2500      	movs	r5, #0
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800564c:	430a      	orrs	r2, r1
 800564e:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005650:	2202      	movs	r2, #2
 8005652:	6859      	ldr	r1, [r3, #4]
 8005654:	430a      	orrs	r2, r1
 8005656:	605a      	str	r2, [r3, #4]
 8005658:	e7e0      	b.n	800561c <HAL_SPI_Transmit_DMA+0xbc>
    errorcode = HAL_BUSY;
 800565a:	2502      	movs	r5, #2
 800565c:	e7de      	b.n	800561c <HAL_SPI_Transmit_DMA+0xbc>
 800565e:	46c0      	nop			; (mov r8, r8)
 8005660:	08005675 	.word	0x08005675
 8005664:	ffffbfff 	.word	0xffffbfff
 8005668:	080056a5 	.word	0x080056a5
 800566c:	08005681 	.word	0x08005681

08005670 <HAL_SPI_TxCpltCallback>:
 8005670:	4770      	bx	lr

08005672 <HAL_SPI_TxHalfCpltCallback>:
 8005672:	4770      	bx	lr

08005674 <SPI_DMAHalfTransmitCplt>:
{
 8005674:	b510      	push	{r4, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005676:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005678:	f7ff fffb 	bl	8005672 <HAL_SPI_TxHalfCpltCallback>
}
 800567c:	bd10      	pop	{r4, pc}

0800567e <HAL_SPI_ErrorCallback>:
 800567e:	4770      	bx	lr

08005680 <SPI_DMAError>:
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005680:	2103      	movs	r1, #3
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005682:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8005684:	b510      	push	{r4, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005686:	6802      	ldr	r2, [r0, #0]
 8005688:	6853      	ldr	r3, [r2, #4]
 800568a:	438b      	bics	r3, r1
 800568c:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800568e:	2310      	movs	r3, #16
 8005690:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8005692:	4313      	orrs	r3, r2
 8005694:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8005696:	0003      	movs	r3, r0
 8005698:	2201      	movs	r2, #1
 800569a:	335d      	adds	r3, #93	; 0x5d
 800569c:	701a      	strb	r2, [r3, #0]
  HAL_SPI_ErrorCallback(hspi);
 800569e:	f7ff ffee 	bl	800567e <HAL_SPI_ErrorCallback>
}
 80056a2:	bd10      	pop	{r4, pc}

080056a4 <SPI_DMATransmitCplt>:
{
 80056a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056a6:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80056a8:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 80056aa:	f7fd fde7 	bl	800327c <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80056ae:	682b      	ldr	r3, [r5, #0]
 80056b0:	2520      	movs	r5, #32
 80056b2:	681b      	ldr	r3, [r3, #0]
  tickstart = HAL_GetTick();
 80056b4:	0002      	movs	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80056b6:	422b      	tst	r3, r5
 80056b8:	d127      	bne.n	800570a <SPI_DMATransmitCplt+0x66>
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80056ba:	2002      	movs	r0, #2
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80056bc:	6823      	ldr	r3, [r4, #0]
 80056be:	6859      	ldr	r1, [r3, #4]
 80056c0:	43a9      	bics	r1, r5
 80056c2:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80056c4:	6859      	ldr	r1, [r3, #4]
 80056c6:	4381      	bics	r1, r0
 80056c8:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80056ca:	0020      	movs	r0, r4
 80056cc:	2164      	movs	r1, #100	; 0x64
 80056ce:	f7ff fde5 	bl	800529c <SPI_EndRxTxTransaction>
 80056d2:	2800      	cmp	r0, #0
 80056d4:	d002      	beq.n	80056dc <SPI_DMATransmitCplt+0x38>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056d6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80056d8:	431d      	orrs	r5, r3
 80056da:	6625      	str	r5, [r4, #96]	; 0x60
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80056dc:	68a3      	ldr	r3, [r4, #8]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d106      	bne.n	80056f0 <SPI_DMATransmitCplt+0x4c>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056e2:	9301      	str	r3, [sp, #4]
 80056e4:	6823      	ldr	r3, [r4, #0]
 80056e6:	68da      	ldr	r2, [r3, #12]
 80056e8:	9201      	str	r2, [sp, #4]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	9301      	str	r3, [sp, #4]
 80056ee:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 80056f0:	2300      	movs	r3, #0
 80056f2:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80056f4:	0023      	movs	r3, r4
 80056f6:	2201      	movs	r2, #1
 80056f8:	335d      	adds	r3, #93	; 0x5d
 80056fa:	701a      	strb	r2, [r3, #0]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056fc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d003      	beq.n	800570a <SPI_DMATransmitCplt+0x66>
      HAL_SPI_ErrorCallback(hspi);
 8005702:	0020      	movs	r0, r4
 8005704:	f7ff ffbb 	bl	800567e <HAL_SPI_ErrorCallback>
}
 8005708:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
  HAL_SPI_TxCpltCallback(hspi);
 800570a:	0020      	movs	r0, r4
 800570c:	f7ff ffb0 	bl	8005670 <HAL_SPI_TxCpltCallback>
 8005710:	e7fa      	b.n	8005708 <SPI_DMATransmitCplt+0x64>
	...

08005714 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005714:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005716:	2401      	movs	r4, #1
  tmpccer = TIMx->CCER;
 8005718:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800571a:	6a02      	ldr	r2, [r0, #32]
 800571c:	43a2      	bics	r2, r4
 800571e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005720:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005722:	4a16      	ldr	r2, [pc, #88]	; (800577c <TIM_OC1_SetConfig+0x68>)
  tmpccmrx = TIMx->CCMR1;
 8005724:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005726:	4015      	ands	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005728:	680a      	ldr	r2, [r1, #0]
 800572a:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800572c:	2202      	movs	r2, #2
 800572e:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005730:	688a      	ldr	r2, [r1, #8]
 8005732:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005734:	4a12      	ldr	r2, [pc, #72]	; (8005780 <TIM_OC1_SetConfig+0x6c>)
 8005736:	4290      	cmp	r0, r2
 8005738:	d005      	beq.n	8005746 <TIM_OC1_SetConfig+0x32>
 800573a:	4e12      	ldr	r6, [pc, #72]	; (8005784 <TIM_OC1_SetConfig+0x70>)
 800573c:	42b0      	cmp	r0, r6
 800573e:	d002      	beq.n	8005746 <TIM_OC1_SetConfig+0x32>
 8005740:	4e11      	ldr	r6, [pc, #68]	; (8005788 <TIM_OC1_SetConfig+0x74>)
 8005742:	42b0      	cmp	r0, r6
 8005744:	d113      	bne.n	800576e <TIM_OC1_SetConfig+0x5a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005746:	2608      	movs	r6, #8
 8005748:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800574a:	68ce      	ldr	r6, [r1, #12]
 800574c:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800574e:	2604      	movs	r6, #4
 8005750:	43b3      	bics	r3, r6
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005752:	4290      	cmp	r0, r2
 8005754:	d005      	beq.n	8005762 <TIM_OC1_SetConfig+0x4e>
 8005756:	4a0b      	ldr	r2, [pc, #44]	; (8005784 <TIM_OC1_SetConfig+0x70>)
 8005758:	4290      	cmp	r0, r2
 800575a:	d002      	beq.n	8005762 <TIM_OC1_SetConfig+0x4e>
 800575c:	4a0a      	ldr	r2, [pc, #40]	; (8005788 <TIM_OC1_SetConfig+0x74>)
 800575e:	4290      	cmp	r0, r2
 8005760:	d105      	bne.n	800576e <TIM_OC1_SetConfig+0x5a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005762:	4a0a      	ldr	r2, [pc, #40]	; (800578c <TIM_OC1_SetConfig+0x78>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005764:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005766:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8005768:	694c      	ldr	r4, [r1, #20]
 800576a:	4334      	orrs	r4, r6
 800576c:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800576e:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005770:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005772:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8005774:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005776:	6203      	str	r3, [r0, #32]
}
 8005778:	bd70      	pop	{r4, r5, r6, pc}
 800577a:	46c0      	nop			; (mov r8, r8)
 800577c:	fffeff8c 	.word	0xfffeff8c
 8005780:	40012c00 	.word	0x40012c00
 8005784:	40014400 	.word	0x40014400
 8005788:	40014800 	.word	0x40014800
 800578c:	fffffcff 	.word	0xfffffcff

08005790 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005790:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005792:	4a17      	ldr	r2, [pc, #92]	; (80057f0 <TIM_OC3_SetConfig+0x60>)
  tmpccer = TIMx->CCER;
 8005794:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005796:	6a03      	ldr	r3, [r0, #32]
 8005798:	4013      	ands	r3, r2
 800579a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800579c:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800579e:	4b15      	ldr	r3, [pc, #84]	; (80057f4 <TIM_OC3_SetConfig+0x64>)
  tmpccmrx = TIMx->CCMR2;
 80057a0:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057a2:	401c      	ands	r4, r3
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057a4:	680b      	ldr	r3, [r1, #0]
 80057a6:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057a8:	4b13      	ldr	r3, [pc, #76]	; (80057f8 <TIM_OC3_SetConfig+0x68>)
 80057aa:	401d      	ands	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057ac:	688b      	ldr	r3, [r1, #8]
 80057ae:	021b      	lsls	r3, r3, #8
 80057b0:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057b2:	4d12      	ldr	r5, [pc, #72]	; (80057fc <TIM_OC3_SetConfig+0x6c>)
 80057b4:	42a8      	cmp	r0, r5
 80057b6:	d10e      	bne.n	80057d6 <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057b8:	4d11      	ldr	r5, [pc, #68]	; (8005800 <TIM_OC3_SetConfig+0x70>)
 80057ba:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057bc:	68cb      	ldr	r3, [r1, #12]
 80057be:	021b      	lsls	r3, r3, #8
 80057c0:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057c2:	4d10      	ldr	r5, [pc, #64]	; (8005804 <TIM_OC3_SetConfig+0x74>)
 80057c4:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057c6:	4d10      	ldr	r5, [pc, #64]	; (8005808 <TIM_OC3_SetConfig+0x78>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057c8:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057ca:	4015      	ands	r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057cc:	698a      	ldr	r2, [r1, #24]
 80057ce:	4332      	orrs	r2, r6
 80057d0:	0112      	lsls	r2, r2, #4
 80057d2:	432a      	orrs	r2, r5
 80057d4:	e005      	b.n	80057e2 <TIM_OC3_SetConfig+0x52>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057d6:	4d0d      	ldr	r5, [pc, #52]	; (800580c <TIM_OC3_SetConfig+0x7c>)
 80057d8:	42a8      	cmp	r0, r5
 80057da:	d0f4      	beq.n	80057c6 <TIM_OC3_SetConfig+0x36>
 80057dc:	4d0c      	ldr	r5, [pc, #48]	; (8005810 <TIM_OC3_SetConfig+0x80>)
 80057de:	42a8      	cmp	r0, r5
 80057e0:	d0f1      	beq.n	80057c6 <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057e2:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057e4:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80057e6:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80057e8:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057ea:	6203      	str	r3, [r0, #32]
}
 80057ec:	bd70      	pop	{r4, r5, r6, pc}
 80057ee:	46c0      	nop			; (mov r8, r8)
 80057f0:	fffffeff 	.word	0xfffffeff
 80057f4:	fffeff8c 	.word	0xfffeff8c
 80057f8:	fffffdff 	.word	0xfffffdff
 80057fc:	40012c00 	.word	0x40012c00
 8005800:	fffff7ff 	.word	0xfffff7ff
 8005804:	fffffbff 	.word	0xfffffbff
 8005808:	ffffcfff 	.word	0xffffcfff
 800580c:	40014400 	.word	0x40014400
 8005810:	40014800 	.word	0x40014800

08005814 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005814:	b530      	push	{r4, r5, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005816:	4a12      	ldr	r2, [pc, #72]	; (8005860 <TIM_OC4_SetConfig+0x4c>)
  tmpccer = TIMx->CCER;
 8005818:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800581a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800581c:	4d11      	ldr	r5, [pc, #68]	; (8005864 <TIM_OC4_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800581e:	4013      	ands	r3, r2
 8005820:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8005822:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8005824:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005826:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005828:	680d      	ldr	r5, [r1, #0]
 800582a:	022d      	lsls	r5, r5, #8
 800582c:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800582e:	4a0e      	ldr	r2, [pc, #56]	; (8005868 <TIM_OC4_SetConfig+0x54>)
 8005830:	4014      	ands	r4, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005832:	688a      	ldr	r2, [r1, #8]
 8005834:	0312      	lsls	r2, r2, #12
 8005836:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005838:	4c0c      	ldr	r4, [pc, #48]	; (800586c <TIM_OC4_SetConfig+0x58>)
 800583a:	42a0      	cmp	r0, r4
 800583c:	d005      	beq.n	800584a <TIM_OC4_SetConfig+0x36>
 800583e:	4c0c      	ldr	r4, [pc, #48]	; (8005870 <TIM_OC4_SetConfig+0x5c>)
 8005840:	42a0      	cmp	r0, r4
 8005842:	d002      	beq.n	800584a <TIM_OC4_SetConfig+0x36>
 8005844:	4c0b      	ldr	r4, [pc, #44]	; (8005874 <TIM_OC4_SetConfig+0x60>)
 8005846:	42a0      	cmp	r0, r4
 8005848:	d104      	bne.n	8005854 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800584a:	4c0b      	ldr	r4, [pc, #44]	; (8005878 <TIM_OC4_SetConfig+0x64>)
 800584c:	401c      	ands	r4, r3

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800584e:	694b      	ldr	r3, [r1, #20]
 8005850:	019b      	lsls	r3, r3, #6
 8005852:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005854:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005856:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005858:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800585a:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800585c:	6202      	str	r2, [r0, #32]
}
 800585e:	bd30      	pop	{r4, r5, pc}
 8005860:	ffffefff 	.word	0xffffefff
 8005864:	feff8cff 	.word	0xfeff8cff
 8005868:	ffffdfff 	.word	0xffffdfff
 800586c:	40012c00 	.word	0x40012c00
 8005870:	40014400 	.word	0x40014400
 8005874:	40014800 	.word	0x40014800
 8005878:	ffffbfff 	.word	0xffffbfff

0800587c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800587c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800587e:	6a06      	ldr	r6, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005880:	4c10      	ldr	r4, [pc, #64]	; (80058c4 <TIM_OC5_SetConfig+0x48>)
 8005882:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005884:	4a10      	ldr	r2, [pc, #64]	; (80058c8 <TIM_OC5_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005886:	4023      	ands	r3, r4
 8005888:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800588a:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 800588c:	6d45      	ldr	r5, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800588e:	4015      	ands	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005890:	680a      	ldr	r2, [r1, #0]
 8005892:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005894:	4a0d      	ldr	r2, [pc, #52]	; (80058cc <TIM_OC5_SetConfig+0x50>)
 8005896:	4016      	ands	r6, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005898:	688a      	ldr	r2, [r1, #8]
 800589a:	0412      	lsls	r2, r2, #16
 800589c:	4332      	orrs	r2, r6

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800589e:	4e0c      	ldr	r6, [pc, #48]	; (80058d0 <TIM_OC5_SetConfig+0x54>)
 80058a0:	42b0      	cmp	r0, r6
 80058a2:	d005      	beq.n	80058b0 <TIM_OC5_SetConfig+0x34>
 80058a4:	4e0b      	ldr	r6, [pc, #44]	; (80058d4 <TIM_OC5_SetConfig+0x58>)
 80058a6:	42b0      	cmp	r0, r6
 80058a8:	d002      	beq.n	80058b0 <TIM_OC5_SetConfig+0x34>
 80058aa:	4e0b      	ldr	r6, [pc, #44]	; (80058d8 <TIM_OC5_SetConfig+0x5c>)
 80058ac:	42b0      	cmp	r0, r6
 80058ae:	d103      	bne.n	80058b8 <TIM_OC5_SetConfig+0x3c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80058b0:	401c      	ands	r4, r3
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80058b2:	694b      	ldr	r3, [r1, #20]
 80058b4:	021b      	lsls	r3, r3, #8
 80058b6:	4323      	orrs	r3, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058b8:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80058ba:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR3 = tmpccmrx;
 80058bc:	6545      	str	r5, [r0, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 80058be:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058c0:	6202      	str	r2, [r0, #32]
}
 80058c2:	bd70      	pop	{r4, r5, r6, pc}
 80058c4:	fffeffff 	.word	0xfffeffff
 80058c8:	fffeff8f 	.word	0xfffeff8f
 80058cc:	fffdffff 	.word	0xfffdffff
 80058d0:	40012c00 	.word	0x40012c00
 80058d4:	40014400 	.word	0x40014400
 80058d8:	40014800 	.word	0x40014800

080058dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80058dc:	b530      	push	{r4, r5, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80058de:	4a12      	ldr	r2, [pc, #72]	; (8005928 <TIM_OC6_SetConfig+0x4c>)
  tmpccer = TIMx->CCER;
 80058e0:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80058e2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80058e4:	4d11      	ldr	r5, [pc, #68]	; (800592c <TIM_OC6_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80058e6:	4013      	ands	r3, r2
 80058e8:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80058ea:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 80058ec:	6d42      	ldr	r2, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80058ee:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058f0:	680d      	ldr	r5, [r1, #0]
 80058f2:	022d      	lsls	r5, r5, #8
 80058f4:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80058f6:	4a0e      	ldr	r2, [pc, #56]	; (8005930 <TIM_OC6_SetConfig+0x54>)
 80058f8:	4014      	ands	r4, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80058fa:	688a      	ldr	r2, [r1, #8]
 80058fc:	0512      	lsls	r2, r2, #20
 80058fe:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005900:	4c0c      	ldr	r4, [pc, #48]	; (8005934 <TIM_OC6_SetConfig+0x58>)
 8005902:	42a0      	cmp	r0, r4
 8005904:	d005      	beq.n	8005912 <TIM_OC6_SetConfig+0x36>
 8005906:	4c0c      	ldr	r4, [pc, #48]	; (8005938 <TIM_OC6_SetConfig+0x5c>)
 8005908:	42a0      	cmp	r0, r4
 800590a:	d002      	beq.n	8005912 <TIM_OC6_SetConfig+0x36>
 800590c:	4c0b      	ldr	r4, [pc, #44]	; (800593c <TIM_OC6_SetConfig+0x60>)
 800590e:	42a0      	cmp	r0, r4
 8005910:	d104      	bne.n	800591c <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005912:	4c0b      	ldr	r4, [pc, #44]	; (8005940 <TIM_OC6_SetConfig+0x64>)
 8005914:	401c      	ands	r4, r3
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005916:	694b      	ldr	r3, [r1, #20]
 8005918:	029b      	lsls	r3, r3, #10
 800591a:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800591c:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800591e:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR3 = tmpccmrx;
 8005920:	6545      	str	r5, [r0, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8005922:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005924:	6202      	str	r2, [r0, #32]
}
 8005926:	bd30      	pop	{r4, r5, pc}
 8005928:	ffefffff 	.word	0xffefffff
 800592c:	feff8fff 	.word	0xfeff8fff
 8005930:	ffdfffff 	.word	0xffdfffff
 8005934:	40012c00 	.word	0x40012c00
 8005938:	40014400 	.word	0x40014400
 800593c:	40014800 	.word	0x40014800
 8005940:	fffbffff 	.word	0xfffbffff

08005944 <HAL_TIM_PWM_MspInit>:
 8005944:	4770      	bx	lr
	...

08005948 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005948:	4a1c      	ldr	r2, [pc, #112]	; (80059bc <TIM_Base_SetConfig+0x74>)
{
 800594a:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 800594c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800594e:	4290      	cmp	r0, r2
 8005950:	d002      	beq.n	8005958 <TIM_Base_SetConfig+0x10>
 8005952:	4c1b      	ldr	r4, [pc, #108]	; (80059c0 <TIM_Base_SetConfig+0x78>)
 8005954:	42a0      	cmp	r0, r4
 8005956:	d108      	bne.n	800596a <TIM_Base_SetConfig+0x22>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005958:	2470      	movs	r4, #112	; 0x70
 800595a:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 800595c:	684c      	ldr	r4, [r1, #4]
 800595e:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005960:	4290      	cmp	r0, r2
 8005962:	d00b      	beq.n	800597c <TIM_Base_SetConfig+0x34>
 8005964:	4c16      	ldr	r4, [pc, #88]	; (80059c0 <TIM_Base_SetConfig+0x78>)
 8005966:	42a0      	cmp	r0, r4
 8005968:	d008      	beq.n	800597c <TIM_Base_SetConfig+0x34>
 800596a:	4c16      	ldr	r4, [pc, #88]	; (80059c4 <TIM_Base_SetConfig+0x7c>)
 800596c:	42a0      	cmp	r0, r4
 800596e:	d005      	beq.n	800597c <TIM_Base_SetConfig+0x34>
 8005970:	4c15      	ldr	r4, [pc, #84]	; (80059c8 <TIM_Base_SetConfig+0x80>)
 8005972:	42a0      	cmp	r0, r4
 8005974:	d002      	beq.n	800597c <TIM_Base_SetConfig+0x34>
 8005976:	4c15      	ldr	r4, [pc, #84]	; (80059cc <TIM_Base_SetConfig+0x84>)
 8005978:	42a0      	cmp	r0, r4
 800597a:	d103      	bne.n	8005984 <TIM_Base_SetConfig+0x3c>
    tmpcr1 &= ~TIM_CR1_CKD;
 800597c:	4c14      	ldr	r4, [pc, #80]	; (80059d0 <TIM_Base_SetConfig+0x88>)
 800597e:	401c      	ands	r4, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005980:	68cb      	ldr	r3, [r1, #12]
 8005982:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005984:	2480      	movs	r4, #128	; 0x80
 8005986:	43a3      	bics	r3, r4
 8005988:	694c      	ldr	r4, [r1, #20]
 800598a:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 800598c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800598e:	688b      	ldr	r3, [r1, #8]
 8005990:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005992:	680b      	ldr	r3, [r1, #0]
 8005994:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005996:	4290      	cmp	r0, r2
 8005998:	d005      	beq.n	80059a6 <TIM_Base_SetConfig+0x5e>
 800599a:	4b0b      	ldr	r3, [pc, #44]	; (80059c8 <TIM_Base_SetConfig+0x80>)
 800599c:	4298      	cmp	r0, r3
 800599e:	d002      	beq.n	80059a6 <TIM_Base_SetConfig+0x5e>
 80059a0:	4b0a      	ldr	r3, [pc, #40]	; (80059cc <TIM_Base_SetConfig+0x84>)
 80059a2:	4298      	cmp	r0, r3
 80059a4:	d101      	bne.n	80059aa <TIM_Base_SetConfig+0x62>
    TIMx->RCR = Structure->RepetitionCounter;
 80059a6:	690b      	ldr	r3, [r1, #16]
 80059a8:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80059aa:	2201      	movs	r2, #1
 80059ac:	6142      	str	r2, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80059ae:	6903      	ldr	r3, [r0, #16]
 80059b0:	4213      	tst	r3, r2
 80059b2:	d002      	beq.n	80059ba <TIM_Base_SetConfig+0x72>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80059b4:	6903      	ldr	r3, [r0, #16]
 80059b6:	4393      	bics	r3, r2
 80059b8:	6103      	str	r3, [r0, #16]
}
 80059ba:	bd10      	pop	{r4, pc}
 80059bc:	40012c00 	.word	0x40012c00
 80059c0:	40000400 	.word	0x40000400
 80059c4:	40002000 	.word	0x40002000
 80059c8:	40014400 	.word	0x40014400
 80059cc:	40014800 	.word	0x40014800
 80059d0:	fffffcff 	.word	0xfffffcff

080059d4 <HAL_TIM_Base_Init>:
{
 80059d4:	b570      	push	{r4, r5, r6, lr}
 80059d6:	0004      	movs	r4, r0
    return HAL_ERROR;
 80059d8:	2001      	movs	r0, #1
  if (htim == NULL)
 80059da:	2c00      	cmp	r4, #0
 80059dc:	d023      	beq.n	8005a26 <HAL_TIM_Base_Init+0x52>
  if (htim->State == HAL_TIM_STATE_RESET)
 80059de:	0025      	movs	r5, r4
 80059e0:	353d      	adds	r5, #61	; 0x3d
 80059e2:	782b      	ldrb	r3, [r5, #0]
 80059e4:	b2da      	uxtb	r2, r3
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d105      	bne.n	80059f6 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80059ea:	0023      	movs	r3, r4
 80059ec:	333c      	adds	r3, #60	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80059ee:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80059f0:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 80059f2:	f7fd fa8d 	bl	8002f10 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80059f6:	2302      	movs	r3, #2
 80059f8:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059fa:	6820      	ldr	r0, [r4, #0]
 80059fc:	1d21      	adds	r1, r4, #4
 80059fe:	f7ff ffa3 	bl	8005948 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a02:	0022      	movs	r2, r4
 8005a04:	2301      	movs	r3, #1
  return HAL_OK;
 8005a06:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a08:	3248      	adds	r2, #72	; 0x48
 8005a0a:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a0c:	3447      	adds	r4, #71	; 0x47
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a0e:	3a0a      	subs	r2, #10
 8005a10:	7013      	strb	r3, [r2, #0]
 8005a12:	7053      	strb	r3, [r2, #1]
 8005a14:	7093      	strb	r3, [r2, #2]
 8005a16:	70d3      	strb	r3, [r2, #3]
 8005a18:	7113      	strb	r3, [r2, #4]
 8005a1a:	7153      	strb	r3, [r2, #5]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a1c:	7193      	strb	r3, [r2, #6]
 8005a1e:	71d3      	strb	r3, [r2, #7]
 8005a20:	7213      	strb	r3, [r2, #8]
 8005a22:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8005a24:	702b      	strb	r3, [r5, #0]
}
 8005a26:	bd70      	pop	{r4, r5, r6, pc}

08005a28 <HAL_TIM_PWM_Init>:
{
 8005a28:	b570      	push	{r4, r5, r6, lr}
 8005a2a:	0004      	movs	r4, r0
    return HAL_ERROR;
 8005a2c:	2001      	movs	r0, #1
  if (htim == NULL)
 8005a2e:	2c00      	cmp	r4, #0
 8005a30:	d023      	beq.n	8005a7a <HAL_TIM_PWM_Init+0x52>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005a32:	0025      	movs	r5, r4
 8005a34:	353d      	adds	r5, #61	; 0x3d
 8005a36:	782b      	ldrb	r3, [r5, #0]
 8005a38:	b2da      	uxtb	r2, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d105      	bne.n	8005a4a <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8005a3e:	0023      	movs	r3, r4
 8005a40:	333c      	adds	r3, #60	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005a42:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8005a44:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_MspInit(htim);
 8005a46:	f7ff ff7d 	bl	8005944 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005a4a:	2302      	movs	r3, #2
 8005a4c:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a4e:	6820      	ldr	r0, [r4, #0]
 8005a50:	1d21      	adds	r1, r4, #4
 8005a52:	f7ff ff79 	bl	8005948 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a56:	0022      	movs	r2, r4
 8005a58:	2301      	movs	r3, #1
  return HAL_OK;
 8005a5a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a5c:	3248      	adds	r2, #72	; 0x48
 8005a5e:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a60:	3447      	adds	r4, #71	; 0x47
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a62:	3a0a      	subs	r2, #10
 8005a64:	7013      	strb	r3, [r2, #0]
 8005a66:	7053      	strb	r3, [r2, #1]
 8005a68:	7093      	strb	r3, [r2, #2]
 8005a6a:	70d3      	strb	r3, [r2, #3]
 8005a6c:	7113      	strb	r3, [r2, #4]
 8005a6e:	7153      	strb	r3, [r2, #5]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a70:	7193      	strb	r3, [r2, #6]
 8005a72:	71d3      	strb	r3, [r2, #7]
 8005a74:	7213      	strb	r3, [r2, #8]
 8005a76:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8005a78:	702b      	strb	r3, [r5, #0]
}
 8005a7a:	bd70      	pop	{r4, r5, r6, pc}

08005a7c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a7c:	2210      	movs	r2, #16
{
 8005a7e:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
 8005a80:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a82:	6a03      	ldr	r3, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a84:	4c16      	ldr	r4, [pc, #88]	; (8005ae0 <TIM_OC2_SetConfig+0x64>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a86:	4393      	bics	r3, r2
 8005a88:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8005a8a:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005a8c:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a8e:	4022      	ands	r2, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a90:	680c      	ldr	r4, [r1, #0]
 8005a92:	0224      	lsls	r4, r4, #8
 8005a94:	4314      	orrs	r4, r2
  tmpccer &= ~TIM_CCER_CC2P;
 8005a96:	2220      	movs	r2, #32
 8005a98:	4395      	bics	r5, r2
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a9a:	688a      	ldr	r2, [r1, #8]
 8005a9c:	0112      	lsls	r2, r2, #4
 8005a9e:	432a      	orrs	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005aa0:	4d10      	ldr	r5, [pc, #64]	; (8005ae4 <TIM_OC2_SetConfig+0x68>)
 8005aa2:	42a8      	cmp	r0, r5
 8005aa4:	d10f      	bne.n	8005ac6 <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 8005aa6:	2580      	movs	r5, #128	; 0x80
 8005aa8:	43aa      	bics	r2, r5
 8005aaa:	0016      	movs	r6, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005aac:	68ca      	ldr	r2, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NE;
 8005aae:	3d40      	subs	r5, #64	; 0x40
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ab0:	0112      	lsls	r2, r2, #4
 8005ab2:	4332      	orrs	r2, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ab4:	43aa      	bics	r2, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ab6:	4d0c      	ldr	r5, [pc, #48]	; (8005ae8 <TIM_OC2_SetConfig+0x6c>)
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ab8:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005aba:	401d      	ands	r5, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005abc:	698b      	ldr	r3, [r1, #24]
 8005abe:	4333      	orrs	r3, r6
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	432b      	orrs	r3, r5
 8005ac4:	e005      	b.n	8005ad2 <TIM_OC2_SetConfig+0x56>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac6:	4d09      	ldr	r5, [pc, #36]	; (8005aec <TIM_OC2_SetConfig+0x70>)
 8005ac8:	42a8      	cmp	r0, r5
 8005aca:	d0f4      	beq.n	8005ab6 <TIM_OC2_SetConfig+0x3a>
 8005acc:	4d08      	ldr	r5, [pc, #32]	; (8005af0 <TIM_OC2_SetConfig+0x74>)
 8005ace:	42a8      	cmp	r0, r5
 8005ad0:	d0f1      	beq.n	8005ab6 <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 8005ad2:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8005ad4:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005ad6:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005ad8:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005ada:	6202      	str	r2, [r0, #32]
}
 8005adc:	bd70      	pop	{r4, r5, r6, pc}
 8005ade:	46c0      	nop			; (mov r8, r8)
 8005ae0:	feff8cff 	.word	0xfeff8cff
 8005ae4:	40012c00 	.word	0x40012c00
 8005ae8:	fffff3ff 	.word	0xfffff3ff
 8005aec:	40014400 	.word	0x40014400
 8005af0:	40014800 	.word	0x40014800

08005af4 <HAL_TIM_PWM_ConfigChannel>:
{
 8005af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8005af6:	0006      	movs	r6, r0
 8005af8:	363c      	adds	r6, #60	; 0x3c
{
 8005afa:	0015      	movs	r5, r2
  __HAL_LOCK(htim);
 8005afc:	7832      	ldrb	r2, [r6, #0]
{
 8005afe:	0003      	movs	r3, r0
 8005b00:	000c      	movs	r4, r1
  __HAL_LOCK(htim);
 8005b02:	2002      	movs	r0, #2
 8005b04:	2a01      	cmp	r2, #1
 8005b06:	d00c      	beq.n	8005b22 <HAL_TIM_PWM_ConfigChannel+0x2e>
 8005b08:	3801      	subs	r0, #1
 8005b0a:	7030      	strb	r0, [r6, #0]
  switch (Channel)
 8005b0c:	2d0c      	cmp	r5, #12
 8005b0e:	d053      	beq.n	8005bb8 <HAL_TIM_PWM_ConfigChannel+0xc4>
 8005b10:	d808      	bhi.n	8005b24 <HAL_TIM_PWM_ConfigChannel+0x30>
 8005b12:	2d04      	cmp	r5, #4
 8005b14:	d02d      	beq.n	8005b72 <HAL_TIM_PWM_ConfigChannel+0x7e>
 8005b16:	2d08      	cmp	r5, #8
 8005b18:	d03e      	beq.n	8005b98 <HAL_TIM_PWM_ConfigChannel+0xa4>
 8005b1a:	2d00      	cmp	r5, #0
 8005b1c:	d017      	beq.n	8005b4e <HAL_TIM_PWM_ConfigChannel+0x5a>
  __HAL_UNLOCK(htim);
 8005b1e:	2300      	movs	r3, #0
 8005b20:	7033      	strb	r3, [r6, #0]
}
 8005b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (Channel)
 8005b24:	2d10      	cmp	r5, #16
 8005b26:	d05a      	beq.n	8005bde <HAL_TIM_PWM_ConfigChannel+0xea>
 8005b28:	2d14      	cmp	r5, #20
 8005b2a:	d1f8      	bne.n	8005b1e <HAL_TIM_PWM_ConfigChannel+0x2a>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005b2c:	681d      	ldr	r5, [r3, #0]
 8005b2e:	0028      	movs	r0, r5
 8005b30:	f7ff fed4 	bl	80058dc <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005b34:	2380      	movs	r3, #128	; 0x80
 8005b36:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8005b38:	011b      	lsls	r3, r3, #4
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	656b      	str	r3, [r5, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005b3e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8005b40:	4a2f      	ldr	r2, [pc, #188]	; (8005c00 <HAL_TIM_PWM_ConfigChannel+0x10c>)
 8005b42:	4013      	ands	r3, r2
 8005b44:	656b      	str	r3, [r5, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005b46:	6923      	ldr	r3, [r4, #16]
 8005b48:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8005b4a:	021b      	lsls	r3, r3, #8
 8005b4c:	e055      	b.n	8005bfa <HAL_TIM_PWM_ConfigChannel+0x106>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b4e:	681f      	ldr	r7, [r3, #0]
 8005b50:	0038      	movs	r0, r7
 8005b52:	f7ff fddf 	bl	8005714 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b56:	2308      	movs	r3, #8
 8005b58:	69ba      	ldr	r2, [r7, #24]
 8005b5a:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b5c:	2204      	movs	r2, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b5e:	61bb      	str	r3, [r7, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	4393      	bics	r3, r2
 8005b64:	61bb      	str	r3, [r7, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	6922      	ldr	r2, [r4, #16]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8005b6e:	2000      	movs	r0, #0
      break;
 8005b70:	e7d5      	b.n	8005b1e <HAL_TIM_PWM_ConfigChannel+0x2a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b72:	681d      	ldr	r5, [r3, #0]
 8005b74:	0028      	movs	r0, r5
 8005b76:	f7ff ff81 	bl	8005a7c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b7a:	2380      	movs	r3, #128	; 0x80
 8005b7c:	69aa      	ldr	r2, [r5, #24]
 8005b7e:	011b      	lsls	r3, r3, #4
 8005b80:	4313      	orrs	r3, r2
 8005b82:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b84:	69ab      	ldr	r3, [r5, #24]
 8005b86:	4a1e      	ldr	r2, [pc, #120]	; (8005c00 <HAL_TIM_PWM_ConfigChannel+0x10c>)
 8005b88:	4013      	ands	r3, r2
 8005b8a:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b8c:	6923      	ldr	r3, [r4, #16]
 8005b8e:	69aa      	ldr	r2, [r5, #24]
 8005b90:	021b      	lsls	r3, r3, #8
 8005b92:	4313      	orrs	r3, r2
 8005b94:	61ab      	str	r3, [r5, #24]
      break;
 8005b96:	e7ea      	b.n	8005b6e <HAL_TIM_PWM_ConfigChannel+0x7a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b98:	681f      	ldr	r7, [r3, #0]
 8005b9a:	0038      	movs	r0, r7
 8005b9c:	f7ff fdf8 	bl	8005790 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ba0:	2204      	movs	r2, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	431d      	orrs	r5, r3
 8005ba6:	61fd      	str	r5, [r7, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	4393      	bics	r3, r2
 8005bac:	61fb      	str	r3, [r7, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	6922      	ldr	r2, [r4, #16]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	61fb      	str	r3, [r7, #28]
      break;
 8005bb6:	e7da      	b.n	8005b6e <HAL_TIM_PWM_ConfigChannel+0x7a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bb8:	681d      	ldr	r5, [r3, #0]
 8005bba:	0028      	movs	r0, r5
 8005bbc:	f7ff fe2a 	bl	8005814 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bc0:	2380      	movs	r3, #128	; 0x80
 8005bc2:	69ea      	ldr	r2, [r5, #28]
 8005bc4:	011b      	lsls	r3, r3, #4
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	61eb      	str	r3, [r5, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005bca:	69eb      	ldr	r3, [r5, #28]
 8005bcc:	4a0c      	ldr	r2, [pc, #48]	; (8005c00 <HAL_TIM_PWM_ConfigChannel+0x10c>)
 8005bce:	4013      	ands	r3, r2
 8005bd0:	61eb      	str	r3, [r5, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005bd2:	6923      	ldr	r3, [r4, #16]
 8005bd4:	69ea      	ldr	r2, [r5, #28]
 8005bd6:	021b      	lsls	r3, r3, #8
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	61eb      	str	r3, [r5, #28]
      break;
 8005bdc:	e7c7      	b.n	8005b6e <HAL_TIM_PWM_ConfigChannel+0x7a>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005bde:	681d      	ldr	r5, [r3, #0]
 8005be0:	0028      	movs	r0, r5
 8005be2:	f7ff fe4b 	bl	800587c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005be6:	2308      	movs	r3, #8
 8005be8:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8005bea:	4313      	orrs	r3, r2
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005bec:	2204      	movs	r2, #4
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005bee:	656b      	str	r3, [r5, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005bf0:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8005bf2:	4393      	bics	r3, r2
 8005bf4:	656b      	str	r3, [r5, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005bf6:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8005bf8:	6922      	ldr	r2, [r4, #16]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	656b      	str	r3, [r5, #84]	; 0x54
 8005bfe:	e7b6      	b.n	8005b6e <HAL_TIM_PWM_ConfigChannel+0x7a>
 8005c00:	fffffbff 	.word	0xfffffbff

08005c04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c04:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c06:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c08:	4d03      	ldr	r5, [pc, #12]	; (8005c18 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c0e:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c10:	4313      	orrs	r3, r2
 8005c12:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c14:	6083      	str	r3, [r0, #8]
}
 8005c16:	bd30      	pop	{r4, r5, pc}
 8005c18:	ffff00ff 	.word	0xffff00ff

08005c1c <HAL_TIM_ConfigClockSource>:
{
 8005c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8005c1e:	0005      	movs	r5, r0
 8005c20:	2402      	movs	r4, #2
 8005c22:	353c      	adds	r5, #60	; 0x3c
 8005c24:	782a      	ldrb	r2, [r5, #0]
{
 8005c26:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8005c28:	0020      	movs	r0, r4
 8005c2a:	2a01      	cmp	r2, #1
 8005c2c:	d01c      	beq.n	8005c68 <HAL_TIM_ConfigClockSource+0x4c>
  htim->State = HAL_TIM_STATE_BUSY;
 8005c2e:	001e      	movs	r6, r3
  __HAL_LOCK(htim);
 8005c30:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8005c32:	363d      	adds	r6, #61	; 0x3d
  __HAL_LOCK(htim);
 8005c34:	702a      	strb	r2, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005c36:	7034      	strb	r4, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8005c38:	681c      	ldr	r4, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c3a:	4843      	ldr	r0, [pc, #268]	; (8005d48 <HAL_TIM_ConfigClockSource+0x12c>)
  tmpsmcr = htim->Instance->SMCR;
 8005c3c:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c3e:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8005c40:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8005c42:	680b      	ldr	r3, [r1, #0]
 8005c44:	2b60      	cmp	r3, #96	; 0x60
 8005c46:	d052      	beq.n	8005cee <HAL_TIM_ConfigClockSource+0xd2>
 8005c48:	d82f      	bhi.n	8005caa <HAL_TIM_ConfigClockSource+0x8e>
 8005c4a:	2b40      	cmp	r3, #64	; 0x40
 8005c4c:	d066      	beq.n	8005d1c <HAL_TIM_ConfigClockSource+0x100>
 8005c4e:	d814      	bhi.n	8005c7a <HAL_TIM_ConfigClockSource+0x5e>
 8005c50:	2b20      	cmp	r3, #32
 8005c52:	d00c      	beq.n	8005c6e <HAL_TIM_ConfigClockSource+0x52>
 8005c54:	d809      	bhi.n	8005c6a <HAL_TIM_ConfigClockSource+0x4e>
 8005c56:	2110      	movs	r1, #16
 8005c58:	0018      	movs	r0, r3
 8005c5a:	4388      	bics	r0, r1
 8005c5c:	d007      	beq.n	8005c6e <HAL_TIM_ConfigClockSource+0x52>
 8005c5e:	0010      	movs	r0, r2
  htim->State = HAL_TIM_STATE_READY;
 8005c60:	2301      	movs	r3, #1
 8005c62:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8005c64:	2300      	movs	r3, #0
 8005c66:	702b      	strb	r3, [r5, #0]
}
 8005c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8005c6a:	2b30      	cmp	r3, #48	; 0x30
 8005c6c:	d1f7      	bne.n	8005c5e <HAL_TIM_ConfigClockSource+0x42>
  tmpsmcr = TIMx->SMCR;
 8005c6e:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c70:	4936      	ldr	r1, [pc, #216]	; (8005d4c <HAL_TIM_ConfigClockSource+0x130>)
 8005c72:	400a      	ands	r2, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c74:	4313      	orrs	r3, r2
 8005c76:	2207      	movs	r2, #7
 8005c78:	e02b      	b.n	8005cd2 <HAL_TIM_ConfigClockSource+0xb6>
  switch (sClockSourceConfig->ClockSource)
 8005c7a:	2b50      	cmp	r3, #80	; 0x50
 8005c7c:	d1ef      	bne.n	8005c5e <HAL_TIM_ConfigClockSource+0x42>
                               sClockSourceConfig->ClockPolarity,
 8005c7e:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005c80:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8005c82:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c84:	6a27      	ldr	r7, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c86:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c88:	4397      	bics	r7, r2
 8005c8a:	6227      	str	r7, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c8c:	27f0      	movs	r7, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8005c8e:	69a2      	ldr	r2, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c90:	43ba      	bics	r2, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c92:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c94:	220a      	movs	r2, #10
 8005c96:	4391      	bics	r1, r2
 8005c98:	000a      	movs	r2, r1
  tmpccer |= TIM_ICPolarity;
 8005c9a:	4302      	orrs	r2, r0
  TIMx->CCMR1 = tmpccmr1;
 8005c9c:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8005c9e:	6222      	str	r2, [r4, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ca0:	4b2a      	ldr	r3, [pc, #168]	; (8005d4c <HAL_TIM_ConfigClockSource+0x130>)
  tmpsmcr = TIMx->SMCR;
 8005ca2:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ca4:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ca6:	2357      	movs	r3, #87	; 0x57
 8005ca8:	e013      	b.n	8005cd2 <HAL_TIM_ConfigClockSource+0xb6>
  switch (sClockSourceConfig->ClockSource)
 8005caa:	2780      	movs	r7, #128	; 0x80
  HAL_StatusTypeDef status = HAL_OK;
 8005cac:	2000      	movs	r0, #0
  switch (sClockSourceConfig->ClockSource)
 8005cae:	017f      	lsls	r7, r7, #5
 8005cb0:	42bb      	cmp	r3, r7
 8005cb2:	d0d5      	beq.n	8005c60 <HAL_TIM_ConfigClockSource+0x44>
 8005cb4:	2080      	movs	r0, #128	; 0x80
 8005cb6:	0180      	lsls	r0, r0, #6
 8005cb8:	4283      	cmp	r3, r0
 8005cba:	d00e      	beq.n	8005cda <HAL_TIM_ConfigClockSource+0xbe>
 8005cbc:	0010      	movs	r0, r2
 8005cbe:	2b70      	cmp	r3, #112	; 0x70
 8005cc0:	d1ce      	bne.n	8005c60 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8005cc2:	68cb      	ldr	r3, [r1, #12]
 8005cc4:	684a      	ldr	r2, [r1, #4]
 8005cc6:	0020      	movs	r0, r4
 8005cc8:	6889      	ldr	r1, [r1, #8]
 8005cca:	f7ff ff9b 	bl	8005c04 <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cce:	2377      	movs	r3, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8005cd0:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cd2:	4313      	orrs	r3, r2
  HAL_StatusTypeDef status = HAL_OK;
 8005cd4:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8005cd6:	60a3      	str	r3, [r4, #8]
}
 8005cd8:	e7c2      	b.n	8005c60 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8005cda:	68cb      	ldr	r3, [r1, #12]
 8005cdc:	684a      	ldr	r2, [r1, #4]
 8005cde:	0020      	movs	r0, r4
 8005ce0:	6889      	ldr	r1, [r1, #8]
 8005ce2:	f7ff ff8f 	bl	8005c04 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ce6:	2380      	movs	r3, #128	; 0x80
 8005ce8:	68a2      	ldr	r2, [r4, #8]
 8005cea:	01db      	lsls	r3, r3, #7
 8005cec:	e7f1      	b.n	8005cd2 <HAL_TIM_ConfigClockSource+0xb6>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cee:	2710      	movs	r7, #16
                               sClockSourceConfig->ClockPolarity,
 8005cf0:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005cf2:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8005cf4:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cf6:	6a20      	ldr	r0, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cf8:	0312      	lsls	r2, r2, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cfa:	43b8      	bics	r0, r7
 8005cfc:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cfe:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d00:	4f13      	ldr	r7, [pc, #76]	; (8005d50 <HAL_TIM_ConfigClockSource+0x134>)
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d02:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d04:	4038      	ands	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d06:	4302      	orrs	r2, r0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d08:	20a0      	movs	r0, #160	; 0xa0
 8005d0a:	4381      	bics	r1, r0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d0c:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 8005d0e:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 8005d10:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8005d12:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d14:	4b0d      	ldr	r3, [pc, #52]	; (8005d4c <HAL_TIM_ConfigClockSource+0x130>)
 8005d16:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d18:	2367      	movs	r3, #103	; 0x67
 8005d1a:	e7da      	b.n	8005cd2 <HAL_TIM_ConfigClockSource+0xb6>
                               sClockSourceConfig->ClockPolarity,
 8005d1c:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005d1e:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8005d20:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d22:	6a27      	ldr	r7, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d24:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d26:	4397      	bics	r7, r2
 8005d28:	6227      	str	r7, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d2a:	27f0      	movs	r7, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8005d2c:	69a2      	ldr	r2, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d2e:	43ba      	bics	r2, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d30:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d32:	220a      	movs	r2, #10
 8005d34:	4391      	bics	r1, r2
 8005d36:	000a      	movs	r2, r1
  tmpccer |= TIM_ICPolarity;
 8005d38:	4302      	orrs	r2, r0
  TIMx->CCMR1 = tmpccmr1;
 8005d3a:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8005d3c:	6222      	str	r2, [r4, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d3e:	4b03      	ldr	r3, [pc, #12]	; (8005d4c <HAL_TIM_ConfigClockSource+0x130>)
  tmpsmcr = TIMx->SMCR;
 8005d40:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d42:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d44:	2347      	movs	r3, #71	; 0x47
 8005d46:	e7c4      	b.n	8005cd2 <HAL_TIM_ConfigClockSource+0xb6>
 8005d48:	ffce0088 	.word	0xffce0088
 8005d4c:	ffcfff8f 	.word	0xffcfff8f
 8005d50:	ffff0fff 	.word	0xffff0fff

08005d54 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d54:	231f      	movs	r3, #31
{
 8005d56:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d58:	2401      	movs	r4, #1
 8005d5a:	4019      	ands	r1, r3
 8005d5c:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d5e:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8005d60:	6a03      	ldr	r3, [r0, #32]
 8005d62:	43a3      	bics	r3, r4
 8005d64:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d66:	6a03      	ldr	r3, [r0, #32]
 8005d68:	431a      	orrs	r2, r3
 8005d6a:	6202      	str	r2, [r0, #32]
}
 8005d6c:	bd10      	pop	{r4, pc}
	...

08005d70 <HAL_TIM_OC_Start>:
{
 8005d70:	0002      	movs	r2, r0
 8005d72:	b510      	push	{r4, lr}
 8005d74:	2908      	cmp	r1, #8
 8005d76:	d02a      	beq.n	8005dce <HAL_TIM_OC_Start+0x5e>
 8005d78:	d814      	bhi.n	8005da4 <HAL_TIM_OC_Start+0x34>
 8005d7a:	2900      	cmp	r1, #0
 8005d7c:	d019      	beq.n	8005db2 <HAL_TIM_OC_Start+0x42>
 8005d7e:	2904      	cmp	r1, #4
 8005d80:	d022      	beq.n	8005dc8 <HAL_TIM_OC_Start+0x58>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d82:	0013      	movs	r3, r2
    return HAL_ERROR;
 8005d84:	2001      	movs	r0, #1
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d86:	3343      	adds	r3, #67	; 0x43
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	4283      	cmp	r3, r0
 8005d8c:	d11b      	bne.n	8005dc6 <HAL_TIM_OC_Start+0x56>
 8005d8e:	2908      	cmp	r1, #8
 8005d90:	d831      	bhi.n	8005df6 <HAL_TIM_OC_Start+0x86>
 8005d92:	2302      	movs	r3, #2
 8005d94:	2900      	cmp	r1, #0
 8005d96:	d036      	beq.n	8005e06 <HAL_TIM_OC_Start+0x96>
 8005d98:	2904      	cmp	r1, #4
 8005d9a:	d056      	beq.n	8005e4a <HAL_TIM_OC_Start+0xda>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d9c:	0013      	movs	r3, r2
 8005d9e:	2002      	movs	r0, #2
 8005da0:	3343      	adds	r3, #67	; 0x43
 8005da2:	e023      	b.n	8005dec <HAL_TIM_OC_Start+0x7c>
 8005da4:	290c      	cmp	r1, #12
 8005da6:	d023      	beq.n	8005df0 <HAL_TIM_OC_Start+0x80>
 8005da8:	2910      	cmp	r1, #16
 8005daa:	d1ea      	bne.n	8005d82 <HAL_TIM_OC_Start+0x12>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005dac:	0003      	movs	r3, r0
 8005dae:	3342      	adds	r3, #66	; 0x42
 8005db0:	e00f      	b.n	8005dd2 <HAL_TIM_OC_Start+0x62>
 8005db2:	0003      	movs	r3, r0
 8005db4:	333e      	adds	r3, #62	; 0x3e
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	3b01      	subs	r3, #1
 8005dba:	1e58      	subs	r0, r3, #1
 8005dbc:	4183      	sbcs	r3, r0
 8005dbe:	b2db      	uxtb	r3, r3
    return HAL_ERROR;
 8005dc0:	2001      	movs	r0, #1
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d0e5      	beq.n	8005d92 <HAL_TIM_OC_Start+0x22>
}
 8005dc6:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005dc8:	0003      	movs	r3, r0
 8005dca:	333f      	adds	r3, #63	; 0x3f
 8005dcc:	e7f3      	b.n	8005db6 <HAL_TIM_OC_Start+0x46>
 8005dce:	0003      	movs	r3, r0
 8005dd0:	3340      	adds	r3, #64	; 0x40
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	1e58      	subs	r0, r3, #1
 8005dd8:	4183      	sbcs	r3, r0
 8005dda:	b2db      	uxtb	r3, r3
    return HAL_ERROR;
 8005ddc:	2001      	movs	r0, #1
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1f1      	bne.n	8005dc6 <HAL_TIM_OC_Start+0x56>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005de2:	2908      	cmp	r1, #8
 8005de4:	d1d3      	bne.n	8005d8e <HAL_TIM_OC_Start+0x1e>
 8005de6:	0013      	movs	r3, r2
 8005de8:	2002      	movs	r0, #2
 8005dea:	3340      	adds	r3, #64	; 0x40
 8005dec:	7018      	strb	r0, [r3, #0]
 8005dee:	e00d      	b.n	8005e0c <HAL_TIM_OC_Start+0x9c>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005df0:	0003      	movs	r3, r0
 8005df2:	3341      	adds	r3, #65	; 0x41
 8005df4:	e7ed      	b.n	8005dd2 <HAL_TIM_OC_Start+0x62>
 8005df6:	2302      	movs	r3, #2
 8005df8:	290c      	cmp	r1, #12
 8005dfa:	d029      	beq.n	8005e50 <HAL_TIM_OC_Start+0xe0>
 8005dfc:	2910      	cmp	r1, #16
 8005dfe:	d1cd      	bne.n	8005d9c <HAL_TIM_OC_Start+0x2c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e00:	0010      	movs	r0, r2
 8005e02:	3042      	adds	r0, #66	; 0x42
 8005e04:	e001      	b.n	8005e0a <HAL_TIM_OC_Start+0x9a>
 8005e06:	0010      	movs	r0, r2
 8005e08:	303e      	adds	r0, #62	; 0x3e
 8005e0a:	7003      	strb	r3, [r0, #0]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e0c:	6814      	ldr	r4, [r2, #0]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	0020      	movs	r0, r4
 8005e12:	f7ff ff9f 	bl	8005d54 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e16:	4a17      	ldr	r2, [pc, #92]	; (8005e74 <HAL_TIM_OC_Start+0x104>)
 8005e18:	4294      	cmp	r4, r2
 8005e1a:	d01c      	beq.n	8005e56 <HAL_TIM_OC_Start+0xe6>
 8005e1c:	4b16      	ldr	r3, [pc, #88]	; (8005e78 <HAL_TIM_OC_Start+0x108>)
 8005e1e:	429c      	cmp	r4, r3
 8005e20:	d019      	beq.n	8005e56 <HAL_TIM_OC_Start+0xe6>
 8005e22:	4b16      	ldr	r3, [pc, #88]	; (8005e7c <HAL_TIM_OC_Start+0x10c>)
 8005e24:	429c      	cmp	r4, r3
 8005e26:	d016      	beq.n	8005e56 <HAL_TIM_OC_Start+0xe6>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e28:	4b15      	ldr	r3, [pc, #84]	; (8005e80 <HAL_TIM_OC_Start+0x110>)
 8005e2a:	429c      	cmp	r4, r3
 8005e2c:	d11b      	bne.n	8005e66 <HAL_TIM_OC_Start+0xf6>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e2e:	68a3      	ldr	r3, [r4, #8]
 8005e30:	4a14      	ldr	r2, [pc, #80]	; (8005e84 <HAL_TIM_OC_Start+0x114>)
  return HAL_OK;
 8005e32:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e34:	4013      	ands	r3, r2
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e36:	2b06      	cmp	r3, #6
 8005e38:	d0c5      	beq.n	8005dc6 <HAL_TIM_OC_Start+0x56>
 8005e3a:	3a07      	subs	r2, #7
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d0c2      	beq.n	8005dc6 <HAL_TIM_OC_Start+0x56>
      __HAL_TIM_ENABLE(htim);
 8005e40:	2301      	movs	r3, #1
 8005e42:	6822      	ldr	r2, [r4, #0]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	6023      	str	r3, [r4, #0]
 8005e48:	e7bd      	b.n	8005dc6 <HAL_TIM_OC_Start+0x56>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e4a:	0010      	movs	r0, r2
 8005e4c:	303f      	adds	r0, #63	; 0x3f
 8005e4e:	e7dc      	b.n	8005e0a <HAL_TIM_OC_Start+0x9a>
 8005e50:	0010      	movs	r0, r2
 8005e52:	3041      	adds	r0, #65	; 0x41
 8005e54:	e7d9      	b.n	8005e0a <HAL_TIM_OC_Start+0x9a>
    __HAL_TIM_MOE_ENABLE(htim);
 8005e56:	2380      	movs	r3, #128	; 0x80
 8005e58:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005e5a:	021b      	lsls	r3, r3, #8
 8005e5c:	430b      	orrs	r3, r1
 8005e5e:	6463      	str	r3, [r4, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e60:	4294      	cmp	r4, r2
 8005e62:	d1e1      	bne.n	8005e28 <HAL_TIM_OC_Start+0xb8>
 8005e64:	e7e3      	b.n	8005e2e <HAL_TIM_OC_Start+0xbe>
    __HAL_TIM_ENABLE(htim);
 8005e66:	2301      	movs	r3, #1
 8005e68:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
 8005e6a:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	6023      	str	r3, [r4, #0]
 8005e70:	e7a9      	b.n	8005dc6 <HAL_TIM_OC_Start+0x56>
 8005e72:	46c0      	nop			; (mov r8, r8)
 8005e74:	40012c00 	.word	0x40012c00
 8005e78:	40014400 	.word	0x40014400
 8005e7c:	40014800 	.word	0x40014800
 8005e80:	40000400 	.word	0x40000400
 8005e84:	00010007 	.word	0x00010007

08005e88 <HAL_TIM_PWM_Start>:
 8005e88:	b510      	push	{r4, lr}
 8005e8a:	f7ff ff71 	bl	8005d70 <HAL_TIM_OC_Start>
 8005e8e:	bd10      	pop	{r4, pc}

08005e90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e90:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e92:	0004      	movs	r4, r0
 8005e94:	2202      	movs	r2, #2
 8005e96:	343c      	adds	r4, #60	; 0x3c
 8005e98:	7825      	ldrb	r5, [r4, #0]
{
 8005e9a:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8005e9c:	0010      	movs	r0, r2
 8005e9e:	2d01      	cmp	r5, #1
 8005ea0:	d01f      	beq.n	8005ee2 <HAL_TIMEx_MasterConfigSynchronization+0x52>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ea2:	001d      	movs	r5, r3
 8005ea4:	353d      	adds	r5, #61	; 0x3d
 8005ea6:	702a      	strb	r2, [r5, #0]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ea8:	681a      	ldr	r2, [r3, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005eaa:	4e0e      	ldr	r6, [pc, #56]	; (8005ee4 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  tmpcr2 = htim->Instance->CR2;
 8005eac:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8005eae:	6890      	ldr	r0, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005eb0:	42b2      	cmp	r2, r6
 8005eb2:	d103      	bne.n	8005ebc <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005eb4:	4f0c      	ldr	r7, [pc, #48]	; (8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8005eb6:	403b      	ands	r3, r7
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005eb8:	684f      	ldr	r7, [r1, #4]
 8005eba:	433b      	orrs	r3, r7
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ebc:	2770      	movs	r7, #112	; 0x70
 8005ebe:	43bb      	bics	r3, r7
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ec0:	680f      	ldr	r7, [r1, #0]
 8005ec2:	433b      	orrs	r3, r7

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ec4:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ec6:	42b2      	cmp	r2, r6
 8005ec8:	d002      	beq.n	8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8005eca:	4b08      	ldr	r3, [pc, #32]	; (8005eec <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d104      	bne.n	8005eda <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ed0:	2380      	movs	r3, #128	; 0x80
 8005ed2:	4398      	bics	r0, r3
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ed4:	688b      	ldr	r3, [r1, #8]
 8005ed6:	4318      	orrs	r0, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ed8:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005eda:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8005edc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005ede:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8005ee0:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8005ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ee4:	40012c00 	.word	0x40012c00
 8005ee8:	ff0fffff 	.word	0xff0fffff
 8005eec:	40000400 	.word	0x40000400

08005ef0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ef0:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ef2:	0004      	movs	r4, r0
 8005ef4:	343c      	adds	r4, #60	; 0x3c
 8005ef6:	7823      	ldrb	r3, [r4, #0]
{
 8005ef8:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8005efa:	2002      	movs	r0, #2
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d039      	beq.n	8005f74 <HAL_TIMEx_ConfigBreakDeadTime+0x84>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f00:	481d      	ldr	r0, [pc, #116]	; (8005f78 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 8005f02:	68cb      	ldr	r3, [r1, #12]
 8005f04:	4003      	ands	r3, r0
 8005f06:	6888      	ldr	r0, [r1, #8]
 8005f08:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f0a:	481c      	ldr	r0, [pc, #112]	; (8005f7c <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 8005f0c:	4003      	ands	r3, r0
 8005f0e:	6848      	ldr	r0, [r1, #4]
 8005f10:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f12:	481b      	ldr	r0, [pc, #108]	; (8005f80 <HAL_TIMEx_ConfigBreakDeadTime+0x90>)
 8005f14:	4003      	ands	r3, r0
 8005f16:	6808      	ldr	r0, [r1, #0]
 8005f18:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f1a:	481a      	ldr	r0, [pc, #104]	; (8005f84 <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
 8005f1c:	4003      	ands	r3, r0
 8005f1e:	6908      	ldr	r0, [r1, #16]
 8005f20:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f22:	4819      	ldr	r0, [pc, #100]	; (8005f88 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8005f24:	4003      	ands	r3, r0
 8005f26:	6948      	ldr	r0, [r1, #20]
 8005f28:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f2a:	4818      	ldr	r0, [pc, #96]	; (8005f8c <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8005f2c:	4003      	ands	r3, r0
 8005f2e:	6b08      	ldr	r0, [r1, #48]	; 0x30
 8005f30:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005f32:	4817      	ldr	r0, [pc, #92]	; (8005f90 <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 8005f34:	4003      	ands	r3, r0
 8005f36:	6988      	ldr	r0, [r1, #24]
 8005f38:	0400      	lsls	r0, r0, #16
 8005f3a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005f3c:	4815      	ldr	r0, [pc, #84]	; (8005f94 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8005f3e:	4003      	ands	r3, r0
 8005f40:	69c8      	ldr	r0, [r1, #28]
 8005f42:	4303      	orrs	r3, r0

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005f44:	6810      	ldr	r0, [r2, #0]
 8005f46:	4a14      	ldr	r2, [pc, #80]	; (8005f98 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8005f48:	4290      	cmp	r0, r2
 8005f4a:	d110      	bne.n	8005f6e <HAL_TIMEx_ConfigBreakDeadTime+0x7e>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005f4c:	4a13      	ldr	r2, [pc, #76]	; (8005f9c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8005f4e:	4013      	ands	r3, r2
 8005f50:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8005f52:	0512      	lsls	r2, r2, #20
 8005f54:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005f56:	4b12      	ldr	r3, [pc, #72]	; (8005fa0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8005f58:	401a      	ands	r2, r3
 8005f5a:	6a0b      	ldr	r3, [r1, #32]
 8005f5c:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005f5e:	4b11      	ldr	r3, [pc, #68]	; (8005fa4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8005f60:	401a      	ands	r2, r3
 8005f62:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8005f64:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005f66:	4b10      	ldr	r3, [pc, #64]	; (8005fa8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8005f68:	401a      	ands	r2, r3
 8005f6a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8005f6c:	4313      	orrs	r3, r2
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f6e:	6443      	str	r3, [r0, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005f70:	2000      	movs	r0, #0
 8005f72:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8005f74:	bd10      	pop	{r4, pc}
 8005f76:	46c0      	nop			; (mov r8, r8)
 8005f78:	fffffcff 	.word	0xfffffcff
 8005f7c:	fffffbff 	.word	0xfffffbff
 8005f80:	fffff7ff 	.word	0xfffff7ff
 8005f84:	ffffefff 	.word	0xffffefff
 8005f88:	ffffdfff 	.word	0xffffdfff
 8005f8c:	ffffbfff 	.word	0xffffbfff
 8005f90:	fff0ffff 	.word	0xfff0ffff
 8005f94:	efffffff 	.word	0xefffffff
 8005f98:	40012c00 	.word	0x40012c00
 8005f9c:	ff0fffff 	.word	0xff0fffff
 8005fa0:	feffffff 	.word	0xfeffffff
 8005fa4:	fdffffff 	.word	0xfdffffff
 8005fa8:	dfffffff 	.word	0xdfffffff

08005fac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005fac:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fae:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f382 8810 	msr	PRIMASK, r2
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005fb8:	25c0      	movs	r5, #192	; 0xc0
 8005fba:	6801      	ldr	r1, [r0, #0]
 8005fbc:	680b      	ldr	r3, [r1, #0]
 8005fbe:	43ab      	bics	r3, r5
 8005fc0:	600b      	str	r3, [r1, #0]
 8005fc2:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fc6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fca:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005fce:	6802      	ldr	r2, [r0, #0]
 8005fd0:	4c04      	ldr	r4, [pc, #16]	; (8005fe4 <UART_EndTxTransfer+0x38>)
 8005fd2:	6893      	ldr	r3, [r2, #8]
 8005fd4:	4023      	ands	r3, r4
 8005fd6:	6093      	str	r3, [r2, #8]
 8005fd8:	f381 8810 	msr	PRIMASK, r1

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fdc:	2320      	movs	r3, #32
 8005fde:	3088      	adds	r0, #136	; 0x88
 8005fe0:	6003      	str	r3, [r0, #0]
}
 8005fe2:	bd30      	pop	{r4, r5, pc}
 8005fe4:	ff7fffff 	.word	0xff7fffff

08005fe8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fe8:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fea:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ff4:	6801      	ldr	r1, [r0, #0]
 8005ff6:	4d13      	ldr	r5, [pc, #76]	; (8006044 <UART_EndRxTransfer+0x5c>)
 8005ff8:	680b      	ldr	r3, [r1, #0]
 8005ffa:	402b      	ands	r3, r5
 8005ffc:	600b      	str	r3, [r1, #0]
 8005ffe:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006002:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006006:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800600a:	6802      	ldr	r2, [r0, #0]
 800600c:	4c0e      	ldr	r4, [pc, #56]	; (8006048 <UART_EndRxTransfer+0x60>)
 800600e:	6893      	ldr	r3, [r2, #8]
 8006010:	4023      	ands	r3, r4
 8006012:	6093      	str	r3, [r2, #8]
 8006014:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006018:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800601a:	2b01      	cmp	r3, #1
 800601c:	d10a      	bne.n	8006034 <UART_EndRxTransfer+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800601e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006022:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006026:	2410      	movs	r4, #16
 8006028:	6802      	ldr	r2, [r0, #0]
 800602a:	6813      	ldr	r3, [r2, #0]
 800602c:	43a3      	bics	r3, r4
 800602e:	6013      	str	r3, [r2, #0]
 8006030:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006034:	0003      	movs	r3, r0
 8006036:	2220      	movs	r2, #32
 8006038:	338c      	adds	r3, #140	; 0x8c
 800603a:	601a      	str	r2, [r3, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800603c:	2300      	movs	r3, #0
 800603e:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006040:	6743      	str	r3, [r0, #116]	; 0x74
}
 8006042:	bd30      	pop	{r4, r5, pc}
 8006044:	fffffedf 	.word	0xfffffedf
 8006048:	effffffe 	.word	0xeffffffe

0800604c <HAL_UART_TxCpltCallback>:
 800604c:	4770      	bx	lr

0800604e <HAL_UART_RxHalfCpltCallback>:
 800604e:	4770      	bx	lr

08006050 <HAL_UART_ErrorCallback>:
 8006050:	4770      	bx	lr

08006052 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006052:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006054:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006056:	0023      	movs	r3, r4
 8006058:	3388      	adds	r3, #136	; 0x88
 800605a:	681a      	ldr	r2, [r3, #0]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800605c:	685d      	ldr	r5, [r3, #4]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	061b      	lsls	r3, r3, #24
 8006064:	d508      	bpl.n	8006078 <UART_DMAError+0x26>
 8006066:	2a21      	cmp	r2, #33	; 0x21
 8006068:	d106      	bne.n	8006078 <UART_DMAError+0x26>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800606a:	0023      	movs	r3, r4
 800606c:	2200      	movs	r2, #0
 800606e:	3356      	adds	r3, #86	; 0x56
    UART_EndTxTransfer(huart);
 8006070:	0020      	movs	r0, r4
    huart->TxXferCount = 0U;
 8006072:	801a      	strh	r2, [r3, #0]
    UART_EndTxTransfer(huart);
 8006074:	f7ff ff9a 	bl	8005fac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006078:	6823      	ldr	r3, [r4, #0]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	065b      	lsls	r3, r3, #25
 800607e:	d508      	bpl.n	8006092 <UART_DMAError+0x40>
 8006080:	2d22      	cmp	r5, #34	; 0x22
 8006082:	d106      	bne.n	8006092 <UART_DMAError+0x40>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006084:	0023      	movs	r3, r4
 8006086:	2200      	movs	r2, #0
 8006088:	335e      	adds	r3, #94	; 0x5e
    UART_EndRxTransfer(huart);
 800608a:	0020      	movs	r0, r4
    huart->RxXferCount = 0U;
 800608c:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 800608e:	f7ff ffab 	bl	8005fe8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006092:	0022      	movs	r2, r4
 8006094:	2310      	movs	r3, #16
 8006096:	3290      	adds	r2, #144	; 0x90
 8006098:	6811      	ldr	r1, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800609a:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800609c:	430b      	orrs	r3, r1
 800609e:	6013      	str	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 80060a0:	f7ff ffd6 	bl	8006050 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060a4:	bd70      	pop	{r4, r5, r6, pc}

080060a6 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060a6:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80060a8:	2300      	movs	r3, #0
 80060aa:	0002      	movs	r2, r0
{
 80060ac:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 80060ae:	325e      	adds	r2, #94	; 0x5e
 80060b0:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 80060b2:	3a08      	subs	r2, #8
 80060b4:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060b6:	f7ff ffcb 	bl	8006050 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060ba:	bd10      	pop	{r4, pc}

080060bc <HAL_UARTEx_RxEventCallback>:
}
 80060bc:	4770      	bx	lr
	...

080060c0 <HAL_UART_IRQHandler>:
{
 80060c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80060c2:	6801      	ldr	r1, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80060c4:	4dc1      	ldr	r5, [pc, #772]	; (80063cc <HAL_UART_IRQHandler+0x30c>)
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80060c6:	69cb      	ldr	r3, [r1, #28]
{
 80060c8:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060ca:	680a      	ldr	r2, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060cc:	6888      	ldr	r0, [r1, #8]
  if (errorflags == 0U)
 80060ce:	422b      	tst	r3, r5
 80060d0:	d110      	bne.n	80060f4 <HAL_UART_IRQHandler+0x34>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80060d2:	2520      	movs	r5, #32
 80060d4:	422b      	tst	r3, r5
 80060d6:	d100      	bne.n	80060da <HAL_UART_IRQHandler+0x1a>
 80060d8:	e09b      	b.n	8006212 <HAL_UART_IRQHandler+0x152>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80060da:	2680      	movs	r6, #128	; 0x80
 80060dc:	0576      	lsls	r6, r6, #21
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80060de:	4015      	ands	r5, r2
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80060e0:	4006      	ands	r6, r0
 80060e2:	4335      	orrs	r5, r6
 80060e4:	d100      	bne.n	80060e8 <HAL_UART_IRQHandler+0x28>
 80060e6:	e094      	b.n	8006212 <HAL_UART_IRQHandler+0x152>
      if (huart->RxISR != NULL)
 80060e8:	6f63      	ldr	r3, [r4, #116]	; 0x74
      huart->TxISR(huart);
 80060ea:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d000      	beq.n	80060f2 <HAL_UART_IRQHandler+0x32>
 80060f0:	e085      	b.n	80061fe <HAL_UART_IRQHandler+0x13e>
 80060f2:	e085      	b.n	8006200 <HAL_UART_IRQHandler+0x140>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80060f4:	4db6      	ldr	r5, [pc, #728]	; (80063d0 <HAL_UART_IRQHandler+0x310>)
 80060f6:	4005      	ands	r5, r0
 80060f8:	9500      	str	r5, [sp, #0]
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80060fa:	4db6      	ldr	r5, [pc, #728]	; (80063d4 <HAL_UART_IRQHandler+0x314>)
 80060fc:	9e00      	ldr	r6, [sp, #0]
 80060fe:	4015      	ands	r5, r2
 8006100:	4335      	orrs	r5, r6
 8006102:	d100      	bne.n	8006106 <HAL_UART_IRQHandler+0x46>
 8006104:	e085      	b.n	8006212 <HAL_UART_IRQHandler+0x152>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006106:	0025      	movs	r5, r4
 8006108:	2601      	movs	r6, #1
 800610a:	3590      	adds	r5, #144	; 0x90
 800610c:	4233      	tst	r3, r6
 800610e:	d005      	beq.n	800611c <HAL_UART_IRQHandler+0x5c>
 8006110:	05d7      	lsls	r7, r2, #23
 8006112:	d503      	bpl.n	800611c <HAL_UART_IRQHandler+0x5c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006114:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006116:	682f      	ldr	r7, [r5, #0]
 8006118:	433e      	orrs	r6, r7
 800611a:	602e      	str	r6, [r5, #0]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800611c:	2602      	movs	r6, #2
 800611e:	4233      	tst	r3, r6
 8006120:	d00c      	beq.n	800613c <HAL_UART_IRQHandler+0x7c>
 8006122:	07c7      	lsls	r7, r0, #31
 8006124:	d50a      	bpl.n	800613c <HAL_UART_IRQHandler+0x7c>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006126:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006128:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800612a:	3790      	adds	r7, #144	; 0x90
 800612c:	683e      	ldr	r6, [r7, #0]
 800612e:	9701      	str	r7, [sp, #4]
 8006130:	46b4      	mov	ip, r6
 8006132:	2604      	movs	r6, #4
 8006134:	4667      	mov	r7, ip
 8006136:	433e      	orrs	r6, r7
 8006138:	9f01      	ldr	r7, [sp, #4]
 800613a:	603e      	str	r6, [r7, #0]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800613c:	2604      	movs	r6, #4
 800613e:	4233      	tst	r3, r6
 8006140:	d00c      	beq.n	800615c <HAL_UART_IRQHandler+0x9c>
 8006142:	07c7      	lsls	r7, r0, #31
 8006144:	d50a      	bpl.n	800615c <HAL_UART_IRQHandler+0x9c>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006146:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006148:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800614a:	3790      	adds	r7, #144	; 0x90
 800614c:	683e      	ldr	r6, [r7, #0]
 800614e:	9701      	str	r7, [sp, #4]
 8006150:	46b4      	mov	ip, r6
 8006152:	2602      	movs	r6, #2
 8006154:	4667      	mov	r7, ip
 8006156:	433e      	orrs	r6, r7
 8006158:	9f01      	ldr	r7, [sp, #4]
 800615a:	603e      	str	r6, [r7, #0]
    if (((isrflags & USART_ISR_ORE) != 0U)
 800615c:	2608      	movs	r6, #8
 800615e:	46b4      	mov	ip, r6
 8006160:	4233      	tst	r3, r6
 8006162:	d009      	beq.n	8006178 <HAL_UART_IRQHandler+0xb8>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006164:	2720      	movs	r7, #32
 8006166:	9e00      	ldr	r6, [sp, #0]
 8006168:	4017      	ands	r7, r2
 800616a:	4337      	orrs	r7, r6
 800616c:	d004      	beq.n	8006178 <HAL_UART_IRQHandler+0xb8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800616e:	4666      	mov	r6, ip
 8006170:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006172:	682f      	ldr	r7, [r5, #0]
 8006174:	433e      	orrs	r6, r7
 8006176:	602e      	str	r6, [r5, #0]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006178:	2680      	movs	r6, #128	; 0x80
 800617a:	0136      	lsls	r6, r6, #4
 800617c:	4233      	tst	r3, r6
 800617e:	d006      	beq.n	800618e <HAL_UART_IRQHandler+0xce>
 8006180:	0157      	lsls	r7, r2, #5
 8006182:	d504      	bpl.n	800618e <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006184:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006186:	2120      	movs	r1, #32
 8006188:	682e      	ldr	r6, [r5, #0]
 800618a:	4331      	orrs	r1, r6
 800618c:	6029      	str	r1, [r5, #0]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800618e:	6829      	ldr	r1, [r5, #0]
 8006190:	2900      	cmp	r1, #0
 8006192:	d035      	beq.n	8006200 <HAL_UART_IRQHandler+0x140>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006194:	2120      	movs	r1, #32
 8006196:	420b      	tst	r3, r1
 8006198:	d00a      	beq.n	80061b0 <HAL_UART_IRQHandler+0xf0>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800619a:	2380      	movs	r3, #128	; 0x80
 800619c:	055b      	lsls	r3, r3, #21
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800619e:	4011      	ands	r1, r2
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80061a0:	4003      	ands	r3, r0
 80061a2:	4319      	orrs	r1, r3
 80061a4:	d004      	beq.n	80061b0 <HAL_UART_IRQHandler+0xf0>
        if (huart->RxISR != NULL)
 80061a6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d001      	beq.n	80061b0 <HAL_UART_IRQHandler+0xf0>
          huart->RxISR(huart);
 80061ac:	0020      	movs	r0, r4
 80061ae:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061b0:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 80061b2:	682b      	ldr	r3, [r5, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061b4:	2740      	movs	r7, #64	; 0x40
 80061b6:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80061b8:	2228      	movs	r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061ba:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80061bc:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 80061be:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061c0:	431e      	orrs	r6, r3
 80061c2:	d022      	beq.n	800620a <HAL_UART_IRQHandler+0x14a>
        UART_EndRxTransfer(huart);
 80061c4:	f7ff ff10 	bl	8005fe8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061c8:	6823      	ldr	r3, [r4, #0]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	423b      	tst	r3, r7
 80061ce:	d018      	beq.n	8006202 <HAL_UART_IRQHandler+0x142>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061d0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061d4:	2301      	movs	r3, #1
 80061d6:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061da:	0025      	movs	r5, r4
 80061dc:	cd04      	ldmia	r5!, {r2}
 80061de:	6893      	ldr	r3, [r2, #8]
 80061e0:	43bb      	bics	r3, r7
 80061e2:	6093      	str	r3, [r2, #8]
 80061e4:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 80061e8:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 80061ea:	2800      	cmp	r0, #0
 80061ec:	d009      	beq.n	8006202 <HAL_UART_IRQHandler+0x142>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80061ee:	4b7a      	ldr	r3, [pc, #488]	; (80063d8 <HAL_UART_IRQHandler+0x318>)
 80061f0:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80061f2:	f7fd fd6f 	bl	8003cd4 <HAL_DMA_Abort_IT>
 80061f6:	2800      	cmp	r0, #0
 80061f8:	d002      	beq.n	8006200 <HAL_UART_IRQHandler+0x140>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80061fa:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 80061fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80061fe:	4798      	blx	r3
}
 8006200:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8006202:	0020      	movs	r0, r4
 8006204:	f7ff ff24 	bl	8006050 <HAL_UART_ErrorCallback>
 8006208:	e7fa      	b.n	8006200 <HAL_UART_IRQHandler+0x140>
        HAL_UART_ErrorCallback(huart);
 800620a:	f7ff ff21 	bl	8006050 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800620e:	602e      	str	r6, [r5, #0]
 8006210:	e7f6      	b.n	8006200 <HAL_UART_IRQHandler+0x140>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006212:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8006214:	2d01      	cmp	r5, #1
 8006216:	d000      	beq.n	800621a <HAL_UART_IRQHandler+0x15a>
 8006218:	e09f      	b.n	800635a <HAL_UART_IRQHandler+0x29a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800621a:	2610      	movs	r6, #16
 800621c:	4233      	tst	r3, r6
 800621e:	d100      	bne.n	8006222 <HAL_UART_IRQHandler+0x162>
 8006220:	e09b      	b.n	800635a <HAL_UART_IRQHandler+0x29a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006222:	4232      	tst	r2, r6
 8006224:	d100      	bne.n	8006228 <HAL_UART_IRQHandler+0x168>
 8006226:	e098      	b.n	800635a <HAL_UART_IRQHandler+0x29a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006228:	620e      	str	r6, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800622a:	6889      	ldr	r1, [r1, #8]
 800622c:	2340      	movs	r3, #64	; 0x40
 800622e:	000a      	movs	r2, r1
 8006230:	401a      	ands	r2, r3
 8006232:	4219      	tst	r1, r3
 8006234:	d057      	beq.n	80062e6 <HAL_UART_IRQHandler+0x226>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006236:	1d21      	adds	r1, r4, #4
 8006238:	6fca      	ldr	r2, [r1, #124]	; 0x7c
 800623a:	6810      	ldr	r0, [r2, #0]
 800623c:	6842      	ldr	r2, [r0, #4]
 800623e:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8006240:	2a00      	cmp	r2, #0
 8006242:	d0dd      	beq.n	8006200 <HAL_UART_IRQHandler+0x140>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006244:	0027      	movs	r7, r4
 8006246:	375c      	adds	r7, #92	; 0x5c
 8006248:	883f      	ldrh	r7, [r7, #0]
 800624a:	4297      	cmp	r7, r2
 800624c:	d9d8      	bls.n	8006200 <HAL_UART_IRQHandler+0x140>
        huart->RxXferCount = nb_remaining_rx_data;
 800624e:	0027      	movs	r7, r4
 8006250:	375e      	adds	r7, #94	; 0x5e
 8006252:	803a      	strh	r2, [r7, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006254:	6802      	ldr	r2, [r0, #0]
 8006256:	2020      	movs	r0, #32
 8006258:	4684      	mov	ip, r0
 800625a:	4010      	ands	r0, r2
 800625c:	9000      	str	r0, [sp, #0]
 800625e:	4660      	mov	r0, ip
 8006260:	4202      	tst	r2, r0
 8006262:	d132      	bne.n	80062ca <HAL_UART_IRQHandler+0x20a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006264:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006268:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800626c:	6820      	ldr	r0, [r4, #0]
 800626e:	4e5b      	ldr	r6, [pc, #364]	; (80063dc <HAL_UART_IRQHandler+0x31c>)
 8006270:	6802      	ldr	r2, [r0, #0]
 8006272:	4032      	ands	r2, r6
 8006274:	6002      	str	r2, [r0, #0]
 8006276:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800627a:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800627e:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006282:	6820      	ldr	r0, [r4, #0]
 8006284:	6882      	ldr	r2, [r0, #8]
 8006286:	43aa      	bics	r2, r5
 8006288:	6082      	str	r2, [r0, #8]
 800628a:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800628e:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006292:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006296:	6820      	ldr	r0, [r4, #0]
 8006298:	6882      	ldr	r2, [r0, #8]
 800629a:	439a      	bics	r2, r3
 800629c:	6082      	str	r2, [r0, #8]
 800629e:	f387 8810 	msr	PRIMASK, r7
          huart->RxState = HAL_UART_STATE_READY;
 80062a2:	0023      	movs	r3, r4
 80062a4:	4662      	mov	r2, ip
 80062a6:	338c      	adds	r3, #140	; 0x8c
 80062a8:	601a      	str	r2, [r3, #0]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062aa:	9b00      	ldr	r3, [sp, #0]
 80062ac:	66e3      	str	r3, [r4, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062ae:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062b2:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062b6:	6822      	ldr	r2, [r4, #0]
 80062b8:	350f      	adds	r5, #15
 80062ba:	6813      	ldr	r3, [r2, #0]
 80062bc:	43ab      	bics	r3, r5
 80062be:	6013      	str	r3, [r2, #0]
 80062c0:	f380 8810 	msr	PRIMASK, r0
          (void)HAL_DMA_Abort(huart->hdmarx);
 80062c4:	6fc8      	ldr	r0, [r1, #124]	; 0x7c
 80062c6:	f7fd fcc9 	bl	8003c5c <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062ca:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80062cc:	0022      	movs	r2, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062ce:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80062d0:	0023      	movs	r3, r4
 80062d2:	325c      	adds	r2, #92	; 0x5c
 80062d4:	335e      	adds	r3, #94	; 0x5e
 80062d6:	881b      	ldrh	r3, [r3, #0]
 80062d8:	8811      	ldrh	r1, [r2, #0]
 80062da:	1ac9      	subs	r1, r1, r3
 80062dc:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062de:	0020      	movs	r0, r4
 80062e0:	f7ff feec 	bl	80060bc <HAL_UARTEx_RxEventCallback>
 80062e4:	e78c      	b.n	8006200 <HAL_UART_IRQHandler+0x140>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062e6:	0023      	movs	r3, r4
 80062e8:	0020      	movs	r0, r4
 80062ea:	335c      	adds	r3, #92	; 0x5c
 80062ec:	305e      	adds	r0, #94	; 0x5e
 80062ee:	8819      	ldrh	r1, [r3, #0]
 80062f0:	8803      	ldrh	r3, [r0, #0]
      if ((huart->RxXferCount > 0U)
 80062f2:	8800      	ldrh	r0, [r0, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062f4:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 80062f6:	2800      	cmp	r0, #0
 80062f8:	d100      	bne.n	80062fc <HAL_UART_IRQHandler+0x23c>
 80062fa:	e781      	b.n	8006200 <HAL_UART_IRQHandler+0x140>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062fc:	1ac9      	subs	r1, r1, r3
 80062fe:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8006300:	2900      	cmp	r1, #0
 8006302:	d100      	bne.n	8006306 <HAL_UART_IRQHandler+0x246>
 8006304:	e77c      	b.n	8006200 <HAL_UART_IRQHandler+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006306:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800630a:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800630e:	6820      	ldr	r0, [r4, #0]
 8006310:	4e33      	ldr	r6, [pc, #204]	; (80063e0 <HAL_UART_IRQHandler+0x320>)
 8006312:	6803      	ldr	r3, [r0, #0]
 8006314:	4033      	ands	r3, r6
 8006316:	6003      	str	r3, [r0, #0]
 8006318:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800631c:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006320:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006324:	6820      	ldr	r0, [r4, #0]
 8006326:	4e2f      	ldr	r6, [pc, #188]	; (80063e4 <HAL_UART_IRQHandler+0x324>)
 8006328:	6883      	ldr	r3, [r0, #8]
 800632a:	4033      	ands	r3, r6
 800632c:	6083      	str	r3, [r0, #8]
 800632e:	f387 8810 	msr	PRIMASK, r7
        huart->RxState = HAL_UART_STATE_READY;
 8006332:	0023      	movs	r3, r4
 8006334:	2020      	movs	r0, #32
 8006336:	338c      	adds	r3, #140	; 0x8c
 8006338:	6018      	str	r0, [r3, #0]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800633a:	66e2      	str	r2, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 800633c:	6762      	str	r2, [r4, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800633e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006342:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006346:	2510      	movs	r5, #16
 8006348:	6822      	ldr	r2, [r4, #0]
 800634a:	6813      	ldr	r3, [r2, #0]
 800634c:	43ab      	bics	r3, r5
 800634e:	6013      	str	r3, [r2, #0]
 8006350:	f380 8810 	msr	PRIMASK, r0
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006354:	2302      	movs	r3, #2
 8006356:	6723      	str	r3, [r4, #112]	; 0x70
 8006358:	e7c1      	b.n	80062de <HAL_UART_IRQHandler+0x21e>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800635a:	2580      	movs	r5, #128	; 0x80
 800635c:	036d      	lsls	r5, r5, #13
 800635e:	422b      	tst	r3, r5
 8006360:	d006      	beq.n	8006370 <HAL_UART_IRQHandler+0x2b0>
 8006362:	0246      	lsls	r6, r0, #9
 8006364:	d504      	bpl.n	8006370 <HAL_UART_IRQHandler+0x2b0>
    HAL_UARTEx_WakeupCallback(huart);
 8006366:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006368:	620d      	str	r5, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800636a:	f000 fb51 	bl	8006a10 <HAL_UARTEx_WakeupCallback>
    return;
 800636e:	e747      	b.n	8006200 <HAL_UART_IRQHandler+0x140>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006370:	2180      	movs	r1, #128	; 0x80
 8006372:	420b      	tst	r3, r1
 8006374:	d007      	beq.n	8006386 <HAL_UART_IRQHandler+0x2c6>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006376:	2580      	movs	r5, #128	; 0x80
 8006378:	042d      	lsls	r5, r5, #16
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800637a:	4011      	ands	r1, r2
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800637c:	4028      	ands	r0, r5
 800637e:	4301      	orrs	r1, r0
 8006380:	d001      	beq.n	8006386 <HAL_UART_IRQHandler+0x2c6>
    if (huart->TxISR != NULL)
 8006382:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006384:	e6b1      	b.n	80060ea <HAL_UART_IRQHandler+0x2a>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006386:	2140      	movs	r1, #64	; 0x40
 8006388:	420b      	tst	r3, r1
 800638a:	d016      	beq.n	80063ba <HAL_UART_IRQHandler+0x2fa>
 800638c:	420a      	tst	r2, r1
 800638e:	d014      	beq.n	80063ba <HAL_UART_IRQHandler+0x2fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006390:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006394:	2301      	movs	r3, #1
 8006396:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800639a:	6822      	ldr	r2, [r4, #0]
 800639c:	6813      	ldr	r3, [r2, #0]
 800639e:	438b      	bics	r3, r1
 80063a0:	6013      	str	r3, [r2, #0]
 80063a2:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063a6:	0023      	movs	r3, r4
 80063a8:	2220      	movs	r2, #32
 80063aa:	3388      	adds	r3, #136	; 0x88
 80063ac:	601a      	str	r2, [r3, #0]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80063ae:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063b0:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 80063b2:	67a3      	str	r3, [r4, #120]	; 0x78
  HAL_UART_TxCpltCallback(huart);
 80063b4:	f7ff fe4a 	bl	800604c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063b8:	e722      	b.n	8006200 <HAL_UART_IRQHandler+0x140>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80063ba:	0219      	lsls	r1, r3, #8
 80063bc:	d514      	bpl.n	80063e8 <HAL_UART_IRQHandler+0x328>
 80063be:	0051      	lsls	r1, r2, #1
 80063c0:	d512      	bpl.n	80063e8 <HAL_UART_IRQHandler+0x328>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80063c2:	0020      	movs	r0, r4
 80063c4:	f000 fb26 	bl	8006a14 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 80063c8:	e71a      	b.n	8006200 <HAL_UART_IRQHandler+0x140>
 80063ca:	46c0      	nop			; (mov r8, r8)
 80063cc:	0000080f 	.word	0x0000080f
 80063d0:	10000001 	.word	0x10000001
 80063d4:	04000120 	.word	0x04000120
 80063d8:	080060a7 	.word	0x080060a7
 80063dc:	fffffeff 	.word	0xfffffeff
 80063e0:	fffffedf 	.word	0xfffffedf
 80063e4:	effffffe 	.word	0xeffffffe
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80063e8:	01db      	lsls	r3, r3, #7
 80063ea:	d400      	bmi.n	80063ee <HAL_UART_IRQHandler+0x32e>
 80063ec:	e708      	b.n	8006200 <HAL_UART_IRQHandler+0x140>
 80063ee:	2a00      	cmp	r2, #0
 80063f0:	db00      	blt.n	80063f4 <HAL_UART_IRQHandler+0x334>
 80063f2:	e705      	b.n	8006200 <HAL_UART_IRQHandler+0x140>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80063f4:	0020      	movs	r0, r4
 80063f6:	f000 fb0c 	bl	8006a12 <HAL_UARTEx_RxFifoFullCallback>
    return;
 80063fa:	e701      	b.n	8006200 <HAL_UART_IRQHandler+0x140>

080063fc <UART_DMARxHalfCplt>:
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80063fc:	2301      	movs	r3, #1
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063fe:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8006400:	b510      	push	{r4, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006402:	6703      	str	r3, [r0, #112]	; 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006404:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006406:	2b01      	cmp	r3, #1
 8006408:	d106      	bne.n	8006418 <UART_DMARxHalfCplt+0x1c>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800640a:	0003      	movs	r3, r0
 800640c:	335c      	adds	r3, #92	; 0x5c
 800640e:	8819      	ldrh	r1, [r3, #0]
 8006410:	0849      	lsrs	r1, r1, #1
 8006412:	f7ff fe53 	bl	80060bc <HAL_UARTEx_RxEventCallback>
}
 8006416:	bd10      	pop	{r4, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 8006418:	f7ff fe19 	bl	800604e <HAL_UART_RxHalfCpltCallback>
}
 800641c:	e7fb      	b.n	8006416 <UART_DMARxHalfCplt+0x1a>
	...

08006420 <UART_DMAReceiveCplt>:
{
 8006420:	0003      	movs	r3, r0
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2220      	movs	r2, #32
 8006426:	681b      	ldr	r3, [r3, #0]
{
 8006428:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800642a:	0019      	movs	r1, r3
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800642c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800642e:	4011      	ands	r1, r2
 8006430:	4213      	tst	r3, r2
 8006432:	d134      	bne.n	800649e <UART_DMAReceiveCplt+0x7e>
    huart->RxXferCount = 0U;
 8006434:	0003      	movs	r3, r0
 8006436:	335e      	adds	r3, #94	; 0x5e
 8006438:	8019      	strh	r1, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800643a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800643e:	2301      	movs	r3, #1
 8006440:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006444:	6804      	ldr	r4, [r0, #0]
 8006446:	4e1d      	ldr	r6, [pc, #116]	; (80064bc <UART_DMAReceiveCplt+0x9c>)
 8006448:	6821      	ldr	r1, [r4, #0]
 800644a:	4031      	ands	r1, r6
 800644c:	6021      	str	r1, [r4, #0]
 800644e:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006452:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006456:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800645a:	6804      	ldr	r4, [r0, #0]
 800645c:	68a1      	ldr	r1, [r4, #8]
 800645e:	4399      	bics	r1, r3
 8006460:	60a1      	str	r1, [r4, #8]
 8006462:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006466:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800646a:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800646e:	2540      	movs	r5, #64	; 0x40
 8006470:	6801      	ldr	r1, [r0, #0]
 8006472:	688b      	ldr	r3, [r1, #8]
 8006474:	43ab      	bics	r3, r5
 8006476:	608b      	str	r3, [r1, #8]
 8006478:	f384 8810 	msr	PRIMASK, r4
    huart->RxState = HAL_UART_STATE_READY;
 800647c:	0003      	movs	r3, r0
 800647e:	338c      	adds	r3, #140	; 0x8c
 8006480:	601a      	str	r2, [r3, #0]
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006482:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006484:	2b01      	cmp	r3, #1
 8006486:	d10a      	bne.n	800649e <UART_DMAReceiveCplt+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006488:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800648c:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006490:	2410      	movs	r4, #16
 8006492:	6802      	ldr	r2, [r0, #0]
 8006494:	6813      	ldr	r3, [r2, #0]
 8006496:	43a3      	bics	r3, r4
 8006498:	6013      	str	r3, [r2, #0]
 800649a:	f381 8810 	msr	PRIMASK, r1
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800649e:	2300      	movs	r3, #0
 80064a0:	6703      	str	r3, [r0, #112]	; 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064a2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d105      	bne.n	80064b4 <UART_DMAReceiveCplt+0x94>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064a8:	0003      	movs	r3, r0
 80064aa:	335c      	adds	r3, #92	; 0x5c
 80064ac:	8819      	ldrh	r1, [r3, #0]
 80064ae:	f7ff fe05 	bl	80060bc <HAL_UARTEx_RxEventCallback>
}
 80064b2:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UART_RxCpltCallback(huart);
 80064b4:	f7fc f9a0 	bl	80027f8 <HAL_UART_RxCpltCallback>
}
 80064b8:	e7fb      	b.n	80064b2 <UART_DMAReceiveCplt+0x92>
 80064ba:	46c0      	nop			; (mov r8, r8)
 80064bc:	fffffeff 	.word	0xfffffeff

080064c0 <UART_SetConfig>:
{
 80064c0:	b570      	push	{r4, r5, r6, lr}
 80064c2:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064c4:	6925      	ldr	r5, [r4, #16]
 80064c6:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064c8:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064ca:	4329      	orrs	r1, r5
 80064cc:	6965      	ldr	r5, [r4, #20]
 80064ce:	69c3      	ldr	r3, [r0, #28]
 80064d0:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064d2:	6810      	ldr	r0, [r2, #0]
 80064d4:	4d48      	ldr	r5, [pc, #288]	; (80065f8 <UART_SetConfig+0x138>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064d6:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064d8:	4028      	ands	r0, r5
 80064da:	4301      	orrs	r1, r0
 80064dc:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064de:	6851      	ldr	r1, [r2, #4]
 80064e0:	4846      	ldr	r0, [pc, #280]	; (80065fc <UART_SetConfig+0x13c>)
    tmpreg |= huart->Init.OneBitSampling;
 80064e2:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064e4:	4001      	ands	r1, r0
 80064e6:	68e0      	ldr	r0, [r4, #12]
 80064e8:	4301      	orrs	r1, r0
 80064ea:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064ec:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064ee:	6890      	ldr	r0, [r2, #8]
    tmpreg |= huart->Init.OneBitSampling;
 80064f0:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064f2:	4d43      	ldr	r5, [pc, #268]	; (8006600 <UART_SetConfig+0x140>)
 80064f4:	4028      	ands	r0, r5
 80064f6:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80064f8:	200f      	movs	r0, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064fa:	6091      	str	r1, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80064fc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80064fe:	4381      	bics	r1, r0
 8006500:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006502:	4301      	orrs	r1, r0
 8006504:	62d1      	str	r1, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006506:	493f      	ldr	r1, [pc, #252]	; (8006604 <UART_SetConfig+0x144>)
 8006508:	428a      	cmp	r2, r1
 800650a:	d115      	bne.n	8006538 <UART_SetConfig+0x78>
 800650c:	2103      	movs	r1, #3
 800650e:	4a3e      	ldr	r2, [pc, #248]	; (8006608 <UART_SetConfig+0x148>)
 8006510:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006512:	400a      	ands	r2, r1
 8006514:	2180      	movs	r1, #128	; 0x80
 8006516:	3a01      	subs	r2, #1
 8006518:	0209      	lsls	r1, r1, #8
 800651a:	2a02      	cmp	r2, #2
 800651c:	d85f      	bhi.n	80065de <UART_SetConfig+0x11e>
 800651e:	483b      	ldr	r0, [pc, #236]	; (800660c <UART_SetConfig+0x14c>)
 8006520:	5c80      	ldrb	r0, [r0, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006522:	428b      	cmp	r3, r1
 8006524:	d014      	beq.n	8006550 <UART_SetConfig+0x90>
    switch (clocksource)
 8006526:	2808      	cmp	r0, #8
 8006528:	d857      	bhi.n	80065da <UART_SetConfig+0x11a>
 800652a:	f7f9 fdf1 	bl	8000110 <__gnu_thumb1_case_uqi>
 800652e:	560c      	.short	0x560c
 8006530:	56515654 	.word	0x56515654
 8006534:	5656      	.short	0x5656
 8006536:	3b          	.byte	0x3b
 8006537:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006538:	4935      	ldr	r1, [pc, #212]	; (8006610 <UART_SetConfig+0x150>)
 800653a:	428a      	cmp	r2, r1
 800653c:	d14d      	bne.n	80065da <UART_SetConfig+0x11a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800653e:	2280      	movs	r2, #128	; 0x80
 8006540:	0212      	lsls	r2, r2, #8
 8006542:	4293      	cmp	r3, r2
 8006544:	d04d      	beq.n	80065e2 <UART_SetConfig+0x122>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006546:	f7fe fbf3 	bl	8004d30 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800654a:	2800      	cmp	r0, #0
 800654c:	d04d      	beq.n	80065ea <UART_SetConfig+0x12a>
 800654e:	e02b      	b.n	80065a8 <UART_SetConfig+0xe8>
    switch (clocksource)
 8006550:	2808      	cmp	r0, #8
 8006552:	d842      	bhi.n	80065da <UART_SetConfig+0x11a>
 8006554:	f7f9 fddc 	bl	8000110 <__gnu_thumb1_case_uqi>
 8006558:	41084145 	.word	0x41084145
 800655c:	41414105 	.word	0x41414105
 8006560:	09          	.byte	0x09
 8006561:	00          	.byte	0x00
        pclk = HAL_RCC_GetSysClockFreq();
 8006562:	f7fe faf3 	bl	8004b4c <HAL_RCC_GetSysClockFreq>
 8006566:	e03e      	b.n	80065e6 <UART_SetConfig+0x126>
    switch (clocksource)
 8006568:	4b2a      	ldr	r3, [pc, #168]	; (8006614 <UART_SetConfig+0x154>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800656a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800656c:	4a2a      	ldr	r2, [pc, #168]	; (8006618 <UART_SetConfig+0x158>)
 800656e:	0049      	lsls	r1, r1, #1
 8006570:	5a89      	ldrh	r1, [r1, r2]
 8006572:	0018      	movs	r0, r3
 8006574:	f7f9 fde0 	bl	8000138 <__udivsi3>
 8006578:	6865      	ldr	r5, [r4, #4]
 800657a:	0040      	lsls	r0, r0, #1
 800657c:	086b      	lsrs	r3, r5, #1
 800657e:	18c0      	adds	r0, r0, r3
 8006580:	0029      	movs	r1, r5
 8006582:	f7f9 fdd9 	bl	8000138 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006586:	0002      	movs	r2, r0
 8006588:	4b24      	ldr	r3, [pc, #144]	; (800661c <UART_SetConfig+0x15c>)
 800658a:	3a10      	subs	r2, #16
 800658c:	429a      	cmp	r2, r3
 800658e:	d824      	bhi.n	80065da <UART_SetConfig+0x11a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006590:	230f      	movs	r3, #15
 8006592:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006594:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006596:	439a      	bics	r2, r3
 8006598:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800659a:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 800659c:	6822      	ldr	r2, [r4, #0]
 800659e:	4303      	orrs	r3, r0
 80065a0:	60d3      	str	r3, [r2, #12]
 80065a2:	e022      	b.n	80065ea <UART_SetConfig+0x12a>
    switch (clocksource)
 80065a4:	2080      	movs	r0, #128	; 0x80
 80065a6:	0200      	lsls	r0, r0, #8
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80065aa:	4b1b      	ldr	r3, [pc, #108]	; (8006618 <UART_SetConfig+0x158>)
 80065ac:	0052      	lsls	r2, r2, #1
 80065ae:	5ad1      	ldrh	r1, [r2, r3]
 80065b0:	f7f9 fdc2 	bl	8000138 <__udivsi3>
 80065b4:	6865      	ldr	r5, [r4, #4]
 80065b6:	086b      	lsrs	r3, r5, #1
 80065b8:	18c0      	adds	r0, r0, r3
 80065ba:	0029      	movs	r1, r5
 80065bc:	f7f9 fdbc 	bl	8000138 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065c0:	0002      	movs	r2, r0
 80065c2:	4b16      	ldr	r3, [pc, #88]	; (800661c <UART_SetConfig+0x15c>)
 80065c4:	3a10      	subs	r2, #16
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d807      	bhi.n	80065da <UART_SetConfig+0x11a>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065ca:	6823      	ldr	r3, [r4, #0]
 80065cc:	60d8      	str	r0, [r3, #12]
 80065ce:	e00c      	b.n	80065ea <UART_SetConfig+0x12a>
        pclk = HAL_RCC_GetSysClockFreq();
 80065d0:	f7fe fabc 	bl	8004b4c <HAL_RCC_GetSysClockFreq>
        break;
 80065d4:	e7b9      	b.n	800654a <UART_SetConfig+0x8a>
        pclk = (uint32_t) HSI_VALUE;
 80065d6:	480f      	ldr	r0, [pc, #60]	; (8006614 <UART_SetConfig+0x154>)
 80065d8:	e7e6      	b.n	80065a8 <UART_SetConfig+0xe8>
    switch (clocksource)
 80065da:	2001      	movs	r0, #1
 80065dc:	e006      	b.n	80065ec <UART_SetConfig+0x12c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065de:	428b      	cmp	r3, r1
 80065e0:	d1b1      	bne.n	8006546 <UART_SetConfig+0x86>
        pclk = HAL_RCC_GetPCLK1Freq();
 80065e2:	f7fe fba5 	bl	8004d30 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 80065e6:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 80065e8:	d1bf      	bne.n	800656a <UART_SetConfig+0xaa>
 80065ea:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 80065ec:	4b0c      	ldr	r3, [pc, #48]	; (8006620 <UART_SetConfig+0x160>)
 80065ee:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 80065f0:	2300      	movs	r3, #0
 80065f2:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 80065f4:	67a3      	str	r3, [r4, #120]	; 0x78
}
 80065f6:	bd70      	pop	{r4, r5, r6, pc}
 80065f8:	cfff69f3 	.word	0xcfff69f3
 80065fc:	ffffcfff 	.word	0xffffcfff
 8006600:	11fff4ff 	.word	0x11fff4ff
 8006604:	40013800 	.word	0x40013800
 8006608:	40021000 	.word	0x40021000
 800660c:	0800b28c 	.word	0x0800b28c
 8006610:	40004400 	.word	0x40004400
 8006614:	00f42400 	.word	0x00f42400
 8006618:	0800b290 	.word	0x0800b290
 800661c:	0000ffef 	.word	0x0000ffef
 8006620:	00010001 	.word	0x00010001

08006624 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006624:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 8006626:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006628:	071a      	lsls	r2, r3, #28
 800662a:	d506      	bpl.n	800663a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800662c:	6801      	ldr	r1, [r0, #0]
 800662e:	4c28      	ldr	r4, [pc, #160]	; (80066d0 <UART_AdvFeatureConfig+0xac>)
 8006630:	684a      	ldr	r2, [r1, #4]
 8006632:	4022      	ands	r2, r4
 8006634:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006636:	4322      	orrs	r2, r4
 8006638:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800663a:	07da      	lsls	r2, r3, #31
 800663c:	d506      	bpl.n	800664c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800663e:	6801      	ldr	r1, [r0, #0]
 8006640:	4c24      	ldr	r4, [pc, #144]	; (80066d4 <UART_AdvFeatureConfig+0xb0>)
 8006642:	684a      	ldr	r2, [r1, #4]
 8006644:	4022      	ands	r2, r4
 8006646:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006648:	4322      	orrs	r2, r4
 800664a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800664c:	079a      	lsls	r2, r3, #30
 800664e:	d506      	bpl.n	800665e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006650:	6801      	ldr	r1, [r0, #0]
 8006652:	4c21      	ldr	r4, [pc, #132]	; (80066d8 <UART_AdvFeatureConfig+0xb4>)
 8006654:	684a      	ldr	r2, [r1, #4]
 8006656:	4022      	ands	r2, r4
 8006658:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800665a:	4322      	orrs	r2, r4
 800665c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800665e:	075a      	lsls	r2, r3, #29
 8006660:	d506      	bpl.n	8006670 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006662:	6801      	ldr	r1, [r0, #0]
 8006664:	4c1d      	ldr	r4, [pc, #116]	; (80066dc <UART_AdvFeatureConfig+0xb8>)
 8006666:	684a      	ldr	r2, [r1, #4]
 8006668:	4022      	ands	r2, r4
 800666a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800666c:	4322      	orrs	r2, r4
 800666e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006670:	06da      	lsls	r2, r3, #27
 8006672:	d506      	bpl.n	8006682 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006674:	6801      	ldr	r1, [r0, #0]
 8006676:	4c1a      	ldr	r4, [pc, #104]	; (80066e0 <UART_AdvFeatureConfig+0xbc>)
 8006678:	688a      	ldr	r2, [r1, #8]
 800667a:	4022      	ands	r2, r4
 800667c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800667e:	4322      	orrs	r2, r4
 8006680:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006682:	069a      	lsls	r2, r3, #26
 8006684:	d506      	bpl.n	8006694 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006686:	6801      	ldr	r1, [r0, #0]
 8006688:	4c16      	ldr	r4, [pc, #88]	; (80066e4 <UART_AdvFeatureConfig+0xc0>)
 800668a:	688a      	ldr	r2, [r1, #8]
 800668c:	4022      	ands	r2, r4
 800668e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8006690:	4322      	orrs	r2, r4
 8006692:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006694:	065a      	lsls	r2, r3, #25
 8006696:	d510      	bpl.n	80066ba <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006698:	6801      	ldr	r1, [r0, #0]
 800669a:	4d13      	ldr	r5, [pc, #76]	; (80066e8 <UART_AdvFeatureConfig+0xc4>)
 800669c:	684a      	ldr	r2, [r1, #4]
 800669e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80066a0:	402a      	ands	r2, r5
 80066a2:	4322      	orrs	r2, r4
 80066a4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066a6:	2280      	movs	r2, #128	; 0x80
 80066a8:	0352      	lsls	r2, r2, #13
 80066aa:	4294      	cmp	r4, r2
 80066ac:	d105      	bne.n	80066ba <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066ae:	684a      	ldr	r2, [r1, #4]
 80066b0:	4c0e      	ldr	r4, [pc, #56]	; (80066ec <UART_AdvFeatureConfig+0xc8>)
 80066b2:	4022      	ands	r2, r4
 80066b4:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80066b6:	4322      	orrs	r2, r4
 80066b8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066ba:	061b      	lsls	r3, r3, #24
 80066bc:	d506      	bpl.n	80066cc <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066be:	6802      	ldr	r2, [r0, #0]
 80066c0:	490b      	ldr	r1, [pc, #44]	; (80066f0 <UART_AdvFeatureConfig+0xcc>)
 80066c2:	6853      	ldr	r3, [r2, #4]
 80066c4:	400b      	ands	r3, r1
 80066c6:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80066c8:	430b      	orrs	r3, r1
 80066ca:	6053      	str	r3, [r2, #4]
}
 80066cc:	bd30      	pop	{r4, r5, pc}
 80066ce:	46c0      	nop			; (mov r8, r8)
 80066d0:	ffff7fff 	.word	0xffff7fff
 80066d4:	fffdffff 	.word	0xfffdffff
 80066d8:	fffeffff 	.word	0xfffeffff
 80066dc:	fffbffff 	.word	0xfffbffff
 80066e0:	ffffefff 	.word	0xffffefff
 80066e4:	ffffdfff 	.word	0xffffdfff
 80066e8:	ffefffff 	.word	0xffefffff
 80066ec:	ff9fffff 	.word	0xff9fffff
 80066f0:	fff7ffff 	.word	0xfff7ffff

080066f4 <UART_WaitOnFlagUntilTimeout>:
{
 80066f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066f6:	0004      	movs	r4, r0
 80066f8:	000d      	movs	r5, r1
 80066fa:	0017      	movs	r7, r2
 80066fc:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066fe:	6822      	ldr	r2, [r4, #0]
 8006700:	69d3      	ldr	r3, [r2, #28]
 8006702:	402b      	ands	r3, r5
 8006704:	1b5b      	subs	r3, r3, r5
 8006706:	4259      	negs	r1, r3
 8006708:	414b      	adcs	r3, r1
 800670a:	42bb      	cmp	r3, r7
 800670c:	d001      	beq.n	8006712 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 800670e:	2000      	movs	r0, #0
 8006710:	e027      	b.n	8006762 <UART_WaitOnFlagUntilTimeout+0x6e>
    if (Timeout != HAL_MAX_DELAY)
 8006712:	9b08      	ldr	r3, [sp, #32]
 8006714:	3301      	adds	r3, #1
 8006716:	d0f3      	beq.n	8006700 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006718:	f7fc fdb0 	bl	800327c <HAL_GetTick>
 800671c:	9b00      	ldr	r3, [sp, #0]
 800671e:	1ac0      	subs	r0, r0, r3
 8006720:	9b08      	ldr	r3, [sp, #32]
 8006722:	4298      	cmp	r0, r3
 8006724:	d82e      	bhi.n	8006784 <UART_WaitOnFlagUntilTimeout+0x90>
 8006726:	2b00      	cmp	r3, #0
 8006728:	d02c      	beq.n	8006784 <UART_WaitOnFlagUntilTimeout+0x90>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800672a:	2104      	movs	r1, #4
 800672c:	6823      	ldr	r3, [r4, #0]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	420a      	tst	r2, r1
 8006732:	d0e4      	beq.n	80066fe <UART_WaitOnFlagUntilTimeout+0xa>
 8006734:	002a      	movs	r2, r5
 8006736:	313c      	adds	r1, #60	; 0x3c
 8006738:	3a40      	subs	r2, #64	; 0x40
 800673a:	438a      	bics	r2, r1
 800673c:	d0df      	beq.n	80066fe <UART_WaitOnFlagUntilTimeout+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800673e:	69da      	ldr	r2, [r3, #28]
 8006740:	2608      	movs	r6, #8
 8006742:	0011      	movs	r1, r2
 8006744:	4031      	ands	r1, r6
 8006746:	9101      	str	r1, [sp, #4]
 8006748:	4232      	tst	r2, r6
 800674a:	d00b      	beq.n	8006764 <UART_WaitOnFlagUntilTimeout+0x70>
          UART_EndRxTransfer(huart);
 800674c:	0020      	movs	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800674e:	621e      	str	r6, [r3, #32]
          UART_EndRxTransfer(huart);
 8006750:	f7ff fc4a 	bl	8005fe8 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006754:	0023      	movs	r3, r4
 8006756:	3390      	adds	r3, #144	; 0x90
 8006758:	601e      	str	r6, [r3, #0]
          __HAL_UNLOCK(huart);
 800675a:	2300      	movs	r3, #0
          return HAL_ERROR;
 800675c:	2001      	movs	r0, #1
          __HAL_UNLOCK(huart);
 800675e:	3484      	adds	r4, #132	; 0x84
 8006760:	7023      	strb	r3, [r4, #0]
}
 8006762:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006764:	2280      	movs	r2, #128	; 0x80
 8006766:	69d9      	ldr	r1, [r3, #28]
 8006768:	0112      	lsls	r2, r2, #4
 800676a:	4211      	tst	r1, r2
 800676c:	d0c7      	beq.n	80066fe <UART_WaitOnFlagUntilTimeout+0xa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800676e:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8006770:	0020      	movs	r0, r4
 8006772:	f7ff fc39 	bl	8005fe8 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006776:	0023      	movs	r3, r4
 8006778:	2220      	movs	r2, #32
 800677a:	3390      	adds	r3, #144	; 0x90
 800677c:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(huart);
 800677e:	9b01      	ldr	r3, [sp, #4]
 8006780:	3484      	adds	r4, #132	; 0x84
 8006782:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8006784:	2003      	movs	r0, #3
 8006786:	e7ec      	b.n	8006762 <UART_WaitOnFlagUntilTimeout+0x6e>

08006788 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006788:	0003      	movs	r3, r0
{
 800678a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800678c:	2600      	movs	r6, #0
{
 800678e:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006790:	3390      	adds	r3, #144	; 0x90
 8006792:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 8006794:	f7fc fd72 	bl	800327c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006798:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800679a:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	071b      	lsls	r3, r3, #28
 80067a0:	d51f      	bpl.n	80067e2 <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067a2:	2180      	movs	r1, #128	; 0x80
 80067a4:	4b28      	ldr	r3, [pc, #160]	; (8006848 <UART_CheckIdleState+0xc0>)
 80067a6:	0032      	movs	r2, r6
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	0389      	lsls	r1, r1, #14
 80067ac:	0003      	movs	r3, r0
 80067ae:	0020      	movs	r0, r4
 80067b0:	f7ff ffa0 	bl	80066f4 <UART_WaitOnFlagUntilTimeout>
 80067b4:	42b0      	cmp	r0, r6
 80067b6:	d014      	beq.n	80067e2 <UART_CheckIdleState+0x5a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067b8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067bc:	2301      	movs	r3, #1
 80067be:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80067c2:	2080      	movs	r0, #128	; 0x80
 80067c4:	6822      	ldr	r2, [r4, #0]
 80067c6:	6813      	ldr	r3, [r2, #0]
 80067c8:	4383      	bics	r3, r0
 80067ca:	6013      	str	r3, [r2, #0]
 80067cc:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 80067d0:	0023      	movs	r3, r4
 80067d2:	2220      	movs	r2, #32
 80067d4:	3388      	adds	r3, #136	; 0x88
 80067d6:	601a      	str	r2, [r3, #0]
      return HAL_TIMEOUT;
 80067d8:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 80067da:	2300      	movs	r3, #0
 80067dc:	3484      	adds	r4, #132	; 0x84
 80067de:	7023      	strb	r3, [r4, #0]
}
 80067e0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067e2:	0026      	movs	r6, r4
 80067e4:	6823      	ldr	r3, [r4, #0]
 80067e6:	368c      	adds	r6, #140	; 0x8c
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	075b      	lsls	r3, r3, #29
 80067ec:	d523      	bpl.n	8006836 <UART_CheckIdleState+0xae>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067ee:	2180      	movs	r1, #128	; 0x80
 80067f0:	4b15      	ldr	r3, [pc, #84]	; (8006848 <UART_CheckIdleState+0xc0>)
 80067f2:	2200      	movs	r2, #0
 80067f4:	9300      	str	r3, [sp, #0]
 80067f6:	0020      	movs	r0, r4
 80067f8:	002b      	movs	r3, r5
 80067fa:	03c9      	lsls	r1, r1, #15
 80067fc:	f7ff ff7a 	bl	80066f4 <UART_WaitOnFlagUntilTimeout>
 8006800:	2800      	cmp	r0, #0
 8006802:	d018      	beq.n	8006836 <UART_CheckIdleState+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006804:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006808:	2201      	movs	r2, #1
 800680a:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800680e:	6821      	ldr	r1, [r4, #0]
 8006810:	4d0e      	ldr	r5, [pc, #56]	; (800684c <UART_CheckIdleState+0xc4>)
 8006812:	680b      	ldr	r3, [r1, #0]
 8006814:	402b      	ands	r3, r5
 8006816:	600b      	str	r3, [r1, #0]
 8006818:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800681c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006820:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006824:	6821      	ldr	r1, [r4, #0]
 8006826:	688b      	ldr	r3, [r1, #8]
 8006828:	4393      	bics	r3, r2
 800682a:	608b      	str	r3, [r1, #8]
 800682c:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8006830:	2320      	movs	r3, #32
 8006832:	6033      	str	r3, [r6, #0]
 8006834:	e7d0      	b.n	80067d8 <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 8006836:	0023      	movs	r3, r4
 8006838:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800683a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800683c:	3388      	adds	r3, #136	; 0x88
 800683e:	601a      	str	r2, [r3, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8006840:	6032      	str	r2, [r6, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006842:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006844:	6720      	str	r0, [r4, #112]	; 0x70
  return HAL_OK;
 8006846:	e7c8      	b.n	80067da <UART_CheckIdleState+0x52>
 8006848:	01ffffff 	.word	0x01ffffff
 800684c:	fffffedf 	.word	0xfffffedf

08006850 <HAL_UART_Init>:
{
 8006850:	b570      	push	{r4, r5, r6, lr}
 8006852:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8006854:	d101      	bne.n	800685a <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8006856:	2001      	movs	r0, #1
}
 8006858:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800685a:	0005      	movs	r5, r0
 800685c:	3588      	adds	r5, #136	; 0x88
 800685e:	682b      	ldr	r3, [r5, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d104      	bne.n	800686e <HAL_UART_Init+0x1e>
    huart->Lock = HAL_UNLOCKED;
 8006864:	0002      	movs	r2, r0
 8006866:	3284      	adds	r2, #132	; 0x84
 8006868:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800686a:	f7fc fbaf 	bl	8002fcc <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800686e:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8006870:	2101      	movs	r1, #1
 8006872:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006874:	602b      	str	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8006876:	6813      	ldr	r3, [r2, #0]
 8006878:	438b      	bics	r3, r1
 800687a:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800687c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800687e:	2b00      	cmp	r3, #0
 8006880:	d002      	beq.n	8006888 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 8006882:	0020      	movs	r0, r4
 8006884:	f7ff fece 	bl	8006624 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006888:	0020      	movs	r0, r4
 800688a:	f7ff fe19 	bl	80064c0 <UART_SetConfig>
 800688e:	2801      	cmp	r0, #1
 8006890:	d0e1      	beq.n	8006856 <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006892:	6823      	ldr	r3, [r4, #0]
 8006894:	4907      	ldr	r1, [pc, #28]	; (80068b4 <HAL_UART_Init+0x64>)
 8006896:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8006898:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800689a:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800689c:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800689e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068a0:	689a      	ldr	r2, [r3, #8]
 80068a2:	438a      	bics	r2, r1
 80068a4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80068a6:	2201      	movs	r2, #1
 80068a8:	6819      	ldr	r1, [r3, #0]
 80068aa:	430a      	orrs	r2, r1
 80068ac:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80068ae:	f7ff ff6b 	bl	8006788 <UART_CheckIdleState>
 80068b2:	e7d1      	b.n	8006858 <HAL_UART_Init+0x8>
 80068b4:	ffffb7ff 	.word	0xffffb7ff

080068b8 <UART_Start_Receive_DMA>:
{
 80068b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ba:	0013      	movs	r3, r2
  huart->RxXferSize = Size;
 80068bc:	0002      	movs	r2, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068be:	0006      	movs	r6, r0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068c0:	0005      	movs	r5, r0
  huart->RxXferSize = Size;
 80068c2:	325c      	adds	r2, #92	; 0x5c
  huart->pRxBuffPtr = pData;
 80068c4:	6581      	str	r1, [r0, #88]	; 0x58
{
 80068c6:	000f      	movs	r7, r1
  huart->RxXferSize = Size;
 80068c8:	8013      	strh	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068ca:	2122      	movs	r1, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068cc:	2200      	movs	r2, #0
 80068ce:	3690      	adds	r6, #144	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068d0:	358c      	adds	r5, #140	; 0x8c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068d2:	6032      	str	r2, [r6, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068d4:	6029      	str	r1, [r5, #0]
  if (huart->hdmarx != NULL)
 80068d6:	1d01      	adds	r1, r0, #4
{
 80068d8:	0004      	movs	r4, r0
  if (huart->hdmarx != NULL)
 80068da:	6fc8      	ldr	r0, [r1, #124]	; 0x7c
 80068dc:	4290      	cmp	r0, r2
 80068de:	d013      	beq.n	8006908 <UART_Start_Receive_DMA+0x50>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80068e0:	491d      	ldr	r1, [pc, #116]	; (8006958 <UART_Start_Receive_DMA+0xa0>)
    huart->hdmarx->XferAbortCallback = NULL;
 80068e2:	6382      	str	r2, [r0, #56]	; 0x38
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80068e4:	62c1      	str	r1, [r0, #44]	; 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80068e6:	491d      	ldr	r1, [pc, #116]	; (800695c <UART_Start_Receive_DMA+0xa4>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80068e8:	003a      	movs	r2, r7
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80068ea:	6301      	str	r1, [r0, #48]	; 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80068ec:	491c      	ldr	r1, [pc, #112]	; (8006960 <UART_Start_Receive_DMA+0xa8>)
 80068ee:	6341      	str	r1, [r0, #52]	; 0x34
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80068f0:	6821      	ldr	r1, [r4, #0]
 80068f2:	3124      	adds	r1, #36	; 0x24
 80068f4:	f7fd f96a 	bl	8003bcc <HAL_DMA_Start_IT>
 80068f8:	2800      	cmp	r0, #0
 80068fa:	d005      	beq.n	8006908 <UART_Start_Receive_DMA+0x50>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80068fc:	2310      	movs	r3, #16
      return HAL_ERROR;
 80068fe:	2001      	movs	r0, #1
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006900:	6033      	str	r3, [r6, #0]
      huart->RxState = HAL_UART_STATE_READY;
 8006902:	18db      	adds	r3, r3, r3
 8006904:	602b      	str	r3, [r5, #0]
}
 8006906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006908:	6923      	ldr	r3, [r4, #16]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00b      	beq.n	8006926 <UART_Start_Receive_DMA+0x6e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800690e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006912:	2301      	movs	r3, #1
 8006914:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006918:	6822      	ldr	r2, [r4, #0]
 800691a:	33ff      	adds	r3, #255	; 0xff
 800691c:	6810      	ldr	r0, [r2, #0]
 800691e:	4303      	orrs	r3, r0
 8006920:	6013      	str	r3, [r2, #0]
 8006922:	f381 8810 	msr	PRIMASK, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006926:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800692a:	2301      	movs	r3, #1
 800692c:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006930:	6821      	ldr	r1, [r4, #0]
 8006932:	688a      	ldr	r2, [r1, #8]
 8006934:	431a      	orrs	r2, r3
 8006936:	608a      	str	r2, [r1, #8]
 8006938:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800693c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006940:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006944:	6822      	ldr	r2, [r4, #0]
 8006946:	333f      	adds	r3, #63	; 0x3f
 8006948:	6890      	ldr	r0, [r2, #8]
 800694a:	4303      	orrs	r3, r0
 800694c:	6093      	str	r3, [r2, #8]
 800694e:	f381 8810 	msr	PRIMASK, r1
  return HAL_OK;
 8006952:	2000      	movs	r0, #0
 8006954:	e7d7      	b.n	8006906 <UART_Start_Receive_DMA+0x4e>
 8006956:	46c0      	nop			; (mov r8, r8)
 8006958:	08006421 	.word	0x08006421
 800695c:	080063fd 	.word	0x080063fd
 8006960:	08006053 	.word	0x08006053

08006964 <HAL_UART_Receive_DMA>:
{
 8006964:	0003      	movs	r3, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8006966:	308c      	adds	r0, #140	; 0x8c
{
 8006968:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800696a:	6804      	ldr	r4, [r0, #0]
    return HAL_BUSY;
 800696c:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 800696e:	2c20      	cmp	r4, #32
 8006970:	d125      	bne.n	80069be <HAL_UART_Receive_DMA+0x5a>
      return HAL_ERROR;
 8006972:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8006974:	2900      	cmp	r1, #0
 8006976:	d022      	beq.n	80069be <HAL_UART_Receive_DMA+0x5a>
 8006978:	2a00      	cmp	r2, #0
 800697a:	d020      	beq.n	80069be <HAL_UART_Receive_DMA+0x5a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800697c:	2080      	movs	r0, #128	; 0x80
 800697e:	689c      	ldr	r4, [r3, #8]
 8006980:	0140      	lsls	r0, r0, #5
 8006982:	4284      	cmp	r4, r0
 8006984:	d105      	bne.n	8006992 <HAL_UART_Receive_DMA+0x2e>
 8006986:	6918      	ldr	r0, [r3, #16]
 8006988:	2800      	cmp	r0, #0
 800698a:	d102      	bne.n	8006992 <HAL_UART_Receive_DMA+0x2e>
      return HAL_ERROR;
 800698c:	3001      	adds	r0, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 800698e:	4201      	tst	r1, r0
 8006990:	d115      	bne.n	80069be <HAL_UART_Receive_DMA+0x5a>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006992:	2000      	movs	r0, #0
 8006994:	66d8      	str	r0, [r3, #108]	; 0x6c
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006996:	6818      	ldr	r0, [r3, #0]
 8006998:	6840      	ldr	r0, [r0, #4]
 800699a:	0200      	lsls	r0, r0, #8
 800699c:	d50c      	bpl.n	80069b8 <HAL_UART_Receive_DMA+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800699e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069a2:	2001      	movs	r0, #1
 80069a4:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80069a8:	2080      	movs	r0, #128	; 0x80
 80069aa:	681c      	ldr	r4, [r3, #0]
 80069ac:	04c0      	lsls	r0, r0, #19
 80069ae:	6826      	ldr	r6, [r4, #0]
 80069b0:	4330      	orrs	r0, r6
 80069b2:	6020      	str	r0, [r4, #0]
 80069b4:	f385 8810 	msr	PRIMASK, r5
    return (UART_Start_Receive_DMA(huart, pData, Size));
 80069b8:	0018      	movs	r0, r3
 80069ba:	f7ff ff7d 	bl	80068b8 <UART_Start_Receive_DMA>
}
 80069be:	bd70      	pop	{r4, r5, r6, pc}

080069c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80069c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069c2:	0007      	movs	r7, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80069c4:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 80069c6:	0004      	movs	r4, r0
 80069c8:	376a      	adds	r7, #106	; 0x6a
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d104      	bne.n	80069d8 <UARTEx_SetNbDataToProcess+0x18>
  {
    huart->NbTxDataToProcess = 1U;
 80069ce:	2001      	movs	r0, #1
 80069d0:	8038      	strh	r0, [r7, #0]
    huart->NbRxDataToProcess = 1U;
 80069d2:	3468      	adds	r4, #104	; 0x68
 80069d4:	8020      	strh	r0, [r4, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80069d6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80069d8:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80069da:	4e0b      	ldr	r6, [pc, #44]	; (8006a08 <UARTEx_SetNbDataToProcess+0x48>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80069dc:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80069de:	689b      	ldr	r3, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 80069e0:	4d0a      	ldr	r5, [pc, #40]	; (8006a0c <UARTEx_SetNbDataToProcess+0x4c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80069e2:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80069e4:	5cf0      	ldrb	r0, [r6, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 80069e6:	5ce9      	ldrb	r1, [r5, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80069e8:	00c0      	lsls	r0, r0, #3
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80069ea:	9201      	str	r2, [sp, #4]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80069ec:	f7f9 fc2e 	bl	800024c <__divsi3>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80069f0:	9b01      	ldr	r3, [sp, #4]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80069f2:	8038      	strh	r0, [r7, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80069f4:	011b      	lsls	r3, r3, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80069f6:	0f5b      	lsrs	r3, r3, #29
 80069f8:	5cf0      	ldrb	r0, [r6, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 80069fa:	5ce9      	ldrb	r1, [r5, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80069fc:	00c0      	lsls	r0, r0, #3
 80069fe:	f7f9 fc25 	bl	800024c <__divsi3>
 8006a02:	b280      	uxth	r0, r0
}
 8006a04:	e7e5      	b.n	80069d2 <UARTEx_SetNbDataToProcess+0x12>
 8006a06:	46c0      	nop			; (mov r8, r8)
 8006a08:	0800b2b0 	.word	0x0800b2b0
 8006a0c:	0800b2a8 	.word	0x0800b2a8

08006a10 <HAL_UARTEx_WakeupCallback>:
}
 8006a10:	4770      	bx	lr

08006a12 <HAL_UARTEx_RxFifoFullCallback>:
 8006a12:	4770      	bx	lr

08006a14 <HAL_UARTEx_TxFifoEmptyCallback>:
 8006a14:	4770      	bx	lr
	...

08006a18 <HAL_UARTEx_DisableFifoMode>:
{
 8006a18:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8006a1a:	0004      	movs	r4, r0
 8006a1c:	3484      	adds	r4, #132	; 0x84
 8006a1e:	7822      	ldrb	r2, [r4, #0]
{
 8006a20:	0003      	movs	r3, r0
  __HAL_LOCK(huart);
 8006a22:	2002      	movs	r0, #2
 8006a24:	2a01      	cmp	r2, #1
 8006a26:	d011      	beq.n	8006a4c <HAL_UARTEx_DisableFifoMode+0x34>
  huart->gState = HAL_UART_STATE_BUSY;
 8006a28:	001d      	movs	r5, r3
 8006a2a:	2224      	movs	r2, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8006a2c:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8006a2e:	3588      	adds	r5, #136	; 0x88
 8006a30:	602a      	str	r2, [r5, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8006a36:	6810      	ldr	r0, [r2, #0]
 8006a38:	43b0      	bics	r0, r6
 8006a3a:	6010      	str	r0, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006a3c:	4804      	ldr	r0, [pc, #16]	; (8006a50 <HAL_UARTEx_DisableFifoMode+0x38>)
 8006a3e:	4001      	ands	r1, r0
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006a40:	2000      	movs	r0, #0
 8006a42:	6658      	str	r0, [r3, #100]	; 0x64
  huart->gState = HAL_UART_STATE_READY;
 8006a44:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a46:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006a48:	602b      	str	r3, [r5, #0]
  __HAL_UNLOCK(huart);
 8006a4a:	7020      	strb	r0, [r4, #0]
}
 8006a4c:	bd70      	pop	{r4, r5, r6, pc}
 8006a4e:	46c0      	nop			; (mov r8, r8)
 8006a50:	dfffffff 	.word	0xdfffffff

08006a54 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8006a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 8006a56:	0005      	movs	r5, r0
 8006a58:	3584      	adds	r5, #132	; 0x84
{
 8006a5a:	000b      	movs	r3, r1
  __HAL_LOCK(huart);
 8006a5c:	7829      	ldrb	r1, [r5, #0]
 8006a5e:	2202      	movs	r2, #2
 8006a60:	2901      	cmp	r1, #1
 8006a62:	d015      	beq.n	8006a90 <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  huart->gState = HAL_UART_STATE_BUSY;
 8006a64:	0006      	movs	r6, r0
  __HAL_UART_DISABLE(huart);
 8006a66:	2101      	movs	r1, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a68:	6804      	ldr	r4, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006a6a:	3688      	adds	r6, #136	; 0x88
 8006a6c:	3222      	adds	r2, #34	; 0x22
 8006a6e:	6032      	str	r2, [r6, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a70:	6827      	ldr	r7, [r4, #0]
  __HAL_UART_DISABLE(huart);
 8006a72:	6822      	ldr	r2, [r4, #0]
 8006a74:	438a      	bics	r2, r1
 8006a76:	6022      	str	r2, [r4, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006a78:	68a1      	ldr	r1, [r4, #8]
 8006a7a:	00c9      	lsls	r1, r1, #3
 8006a7c:	08c9      	lsrs	r1, r1, #3
 8006a7e:	4319      	orrs	r1, r3
 8006a80:	60a1      	str	r1, [r4, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006a82:	f7ff ff9d 	bl	80069c0 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8006a86:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8006a88:	2200      	movs	r2, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a8a:	6027      	str	r7, [r4, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006a8c:	6033      	str	r3, [r6, #0]
  __HAL_UNLOCK(huart);
 8006a8e:	702a      	strb	r2, [r5, #0]
}
 8006a90:	0010      	movs	r0, r2
 8006a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006a94 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8006a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 8006a96:	0005      	movs	r5, r0
 8006a98:	3584      	adds	r5, #132	; 0x84
{
 8006a9a:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8006a9c:	7829      	ldrb	r1, [r5, #0]
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	2901      	cmp	r1, #1
 8006aa2:	d015      	beq.n	8006ad0 <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  huart->gState = HAL_UART_STATE_BUSY;
 8006aa4:	0006      	movs	r6, r0
  __HAL_UART_DISABLE(huart);
 8006aa6:	2101      	movs	r1, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006aa8:	6804      	ldr	r4, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006aaa:	3688      	adds	r6, #136	; 0x88
 8006aac:	3322      	adds	r3, #34	; 0x22
 8006aae:	6033      	str	r3, [r6, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ab0:	6827      	ldr	r7, [r4, #0]
  __HAL_UART_DISABLE(huart);
 8006ab2:	6823      	ldr	r3, [r4, #0]
 8006ab4:	438b      	bics	r3, r1
 8006ab6:	6023      	str	r3, [r4, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006ab8:	68a1      	ldr	r1, [r4, #8]
 8006aba:	4b06      	ldr	r3, [pc, #24]	; (8006ad4 <HAL_UARTEx_SetRxFifoThreshold+0x40>)
 8006abc:	4019      	ands	r1, r3
 8006abe:	4311      	orrs	r1, r2
 8006ac0:	60a1      	str	r1, [r4, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006ac2:	f7ff ff7d 	bl	80069c0 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8006ac6:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ac8:	6027      	str	r7, [r4, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006aca:	6033      	str	r3, [r6, #0]
  __HAL_UNLOCK(huart);
 8006acc:	2300      	movs	r3, #0
 8006ace:	702b      	strb	r3, [r5, #0]
}
 8006ad0:	0018      	movs	r0, r3
 8006ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ad4:	f1ffffff 	.word	0xf1ffffff

08006ad8 <AHT20_Init>:
	I2C_HandleTypeDef *_aht20_ui2c;


/*  ----------------* Functions *-----------------  */
void AHT20_Init(I2C_HandleTypeDef *hi2c){
	_aht20_ui2c = hi2c;
 8006ad8:	4b01      	ldr	r3, [pc, #4]	; (8006ae0 <AHT20_Init+0x8>)
 8006ada:	6018      	str	r0, [r3, #0]
}
 8006adc:	4770      	bx	lr
 8006ade:	46c0      	nop			; (mov r8, r8)
 8006ae0:	20000550 	.word	0x20000550

08006ae4 <AHT20_Temp>:


uint32_t AHT20_Temp(void)
{
	uint32_t TEMP_CALC;
	TEMP_CALC= (((DATA_Temp/1024.0)/1024.0) * 200.0) -50.0;
 8006ae4:	4b0b      	ldr	r3, [pc, #44]	; (8006b14 <AHT20_Temp+0x30>)
{
 8006ae6:	b510      	push	{r4, lr}
	TEMP_CALC= (((DATA_Temp/1024.0)/1024.0) * 200.0) -50.0;
 8006ae8:	6818      	ldr	r0, [r3, #0]
 8006aea:	f7fb fcaf 	bl	800244c <__aeabi_ui2d>
 8006aee:	2200      	movs	r2, #0
 8006af0:	4b09      	ldr	r3, [pc, #36]	; (8006b18 <AHT20_Temp+0x34>)
 8006af2:	f7fa fde3 	bl	80016bc <__aeabi_dmul>
 8006af6:	2200      	movs	r2, #0
 8006af8:	4b07      	ldr	r3, [pc, #28]	; (8006b18 <AHT20_Temp+0x34>)
 8006afa:	f7fa fddf 	bl	80016bc <__aeabi_dmul>
 8006afe:	2200      	movs	r2, #0
 8006b00:	4b06      	ldr	r3, [pc, #24]	; (8006b1c <AHT20_Temp+0x38>)
 8006b02:	f7fa fddb 	bl	80016bc <__aeabi_dmul>
 8006b06:	2200      	movs	r2, #0
 8006b08:	4b05      	ldr	r3, [pc, #20]	; (8006b20 <AHT20_Temp+0x3c>)
 8006b0a:	f7fb f899 	bl	8001c40 <__aeabi_dsub>
 8006b0e:	f7f9 fcc7 	bl	80004a0 <__aeabi_d2uiz>
	return TEMP_CALC;
}
 8006b12:	bd10      	pop	{r4, pc}
 8006b14:	2000054c 	.word	0x2000054c
 8006b18:	3f500000 	.word	0x3f500000
 8006b1c:	40690000 	.word	0x40690000
 8006b20:	40490000 	.word	0x40490000

08006b24 <AHT20_Humid>:

uint32_t AHT20_Humid(void)
{
	uint32_t HUMID_CALC;
	HUMID_CALC = ((DATA_Humi/1024.0)/1024.0)*100;
 8006b24:	4b09      	ldr	r3, [pc, #36]	; (8006b4c <AHT20_Humid+0x28>)
{
 8006b26:	b510      	push	{r4, lr}
	HUMID_CALC = ((DATA_Humi/1024.0)/1024.0)*100;
 8006b28:	6818      	ldr	r0, [r3, #0]
 8006b2a:	f7fb fc8f 	bl	800244c <__aeabi_ui2d>
 8006b2e:	2200      	movs	r2, #0
 8006b30:	4b07      	ldr	r3, [pc, #28]	; (8006b50 <AHT20_Humid+0x2c>)
 8006b32:	f7fa fdc3 	bl	80016bc <__aeabi_dmul>
 8006b36:	2200      	movs	r2, #0
 8006b38:	4b05      	ldr	r3, [pc, #20]	; (8006b50 <AHT20_Humid+0x2c>)
 8006b3a:	f7fa fdbf 	bl	80016bc <__aeabi_dmul>
 8006b3e:	2200      	movs	r2, #0
 8006b40:	4b04      	ldr	r3, [pc, #16]	; (8006b54 <AHT20_Humid+0x30>)
 8006b42:	f7fa fdbb 	bl	80016bc <__aeabi_dmul>
 8006b46:	f7f9 fcab 	bl	80004a0 <__aeabi_d2uiz>
	return HUMID_CALC;
}
 8006b4a:	bd10      	pop	{r4, pc}
 8006b4c:	20000548 	.word	0x20000548
 8006b50:	3f500000 	.word	0x3f500000
 8006b54:	40590000 	.word	0x40590000

08006b58 <usb_cabledetect_statedetect>:
#define i2c_addr (0x60 << 1)



uint8_t usb_cabledetect_statedetect()
{
 8006b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b5a:	b087      	sub	sp, #28
	uint8_t wr_addr[3] = {0x08,0x09,0x0A};
 8006b5c:	ae04      	add	r6, sp, #16
 8006b5e:	2203      	movs	r2, #3
 8006b60:	0030      	movs	r0, r6
	  uint8_t cable_nd_state_detection[3];
	  uint8_t flag =2;

	 for(int i=0;i<3;i++)
		 {
			 HAL_I2C_Mem_Read(&hi2c2, 0x60<<1, wr_addr[i], 1, &cable_nd_state_detection[i], 1, 1000);
 8006b62:	27fa      	movs	r7, #250	; 0xfa
	uint8_t wr_addr[3] = {0x08,0x09,0x0A};
 8006b64:	491b      	ldr	r1, [pc, #108]	; (8006bd4 <usb_cabledetect_statedetect+0x7c>)
 8006b66:	f002 fabf 	bl	80090e8 <memcpy>
	 for(int i=0;i<3;i++)
 8006b6a:	2400      	movs	r4, #0
			 HAL_I2C_Mem_Read(&hi2c2, 0x60<<1, wr_addr[i], 1, &cable_nd_state_detection[i], 1, 1000);
 8006b6c:	00bf      	lsls	r7, r7, #2
 8006b6e:	2301      	movs	r3, #1
 8006b70:	ad05      	add	r5, sp, #20
 8006b72:	5d32      	ldrb	r2, [r6, r4]
 8006b74:	9301      	str	r3, [sp, #4]
 8006b76:	192b      	adds	r3, r5, r4
 8006b78:	9300      	str	r3, [sp, #0]
 8006b7a:	21c0      	movs	r1, #192	; 0xc0
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	4816      	ldr	r0, [pc, #88]	; (8006bd8 <usb_cabledetect_statedetect+0x80>)
 8006b80:	9702      	str	r7, [sp, #8]
	 for(int i=0;i<3;i++)
 8006b82:	3401      	adds	r4, #1
			 HAL_I2C_Mem_Read(&hi2c2, 0x60<<1, wr_addr[i], 1, &cable_nd_state_detection[i], 1, 1000);
 8006b84:	f7fd fc6c 	bl	8004460 <HAL_I2C_Mem_Read>
	 for(int i=0;i<3;i++)
 8006b88:	2c03      	cmp	r4, #3
 8006b8a:	d1f0      	bne.n	8006b6e <usb_cabledetect_statedetect+0x16>
		 }


		if(cable_nd_state_detection[1] & 0x40)
 8006b8c:	786b      	ldrb	r3, [r5, #1]
 8006b8e:	2240      	movs	r2, #64	; 0x40
 8006b90:	001c      	movs	r4, r3
 8006b92:	4014      	ands	r4, r2
 8006b94:	4213      	tst	r3, r2
 8006b96:	d00d      	beq.n	8006bb4 <usb_cabledetect_statedetect+0x5c>
		{
			  HAL_GPIO_WritePin(VBUS_OUT_EN_GPIO_Port, VBUS_OUT_EN_Pin, GPIO_PIN_RESET);
 8006b98:	2200      	movs	r2, #0
 8006b9a:	2108      	movs	r1, #8
 8006b9c:	480f      	ldr	r0, [pc, #60]	; (8006bdc <usb_cabledetect_statedetect+0x84>)
 8006b9e:	f7fd f9e5 	bl	8003f6c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(CHG_EN_GPIO_Port, CHG_EN_Pin, GPIO_PIN_SET);
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	2110      	movs	r1, #16
 8006ba6:	480e      	ldr	r0, [pc, #56]	; (8006be0 <usb_cabledetect_statedetect+0x88>)
 8006ba8:	f7fd f9e0 	bl	8003f6c <HAL_GPIO_WritePin>
			  flag =1;
 8006bac:	2401      	movs	r4, #1
		}


return flag;

}
 8006bae:	0020      	movs	r0, r4
 8006bb0:	b007      	add	sp, #28
 8006bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else if(cable_nd_state_detection[1] & 0x80)
 8006bb4:	b25b      	sxtb	r3, r3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	da0a      	bge.n	8006bd0 <usb_cabledetect_statedetect+0x78>
			  HAL_GPIO_WritePin(VBUS_OUT_EN_GPIO_Port, VBUS_OUT_EN_Pin, GPIO_PIN_SET);
 8006bba:	2201      	movs	r2, #1
 8006bbc:	2108      	movs	r1, #8
 8006bbe:	4807      	ldr	r0, [pc, #28]	; (8006bdc <usb_cabledetect_statedetect+0x84>)
 8006bc0:	f7fd f9d4 	bl	8003f6c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(CHG_EN_GPIO_Port, CHG_EN_Pin, GPIO_PIN_RESET);
 8006bc4:	0022      	movs	r2, r4
 8006bc6:	2110      	movs	r1, #16
 8006bc8:	4805      	ldr	r0, [pc, #20]	; (8006be0 <usb_cabledetect_statedetect+0x88>)
 8006bca:	f7fd f9cf 	bl	8003f6c <HAL_GPIO_WritePin>
			  flag = 0;
 8006bce:	e7ee      	b.n	8006bae <usb_cabledetect_statedetect+0x56>
	  uint8_t flag =2;
 8006bd0:	2402      	movs	r4, #2
 8006bd2:	e7ec      	b.n	8006bae <usb_cabledetect_statedetect+0x56>
 8006bd4:	0800b2b8 	.word	0x0800b2b8
 8006bd8:	20000330 	.word	0x20000330
 8006bdc:	50000c00 	.word	0x50000c00
 8006be0:	50000400 	.word	0x50000400

08006be4 <usb_currentselector>:

void usb_currentselector()
{
 8006be4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

	uint8_t data = 0x40;
 8006be6:	2217      	movs	r2, #23
 8006be8:	2340      	movs	r3, #64	; 0x40
 8006bea:	446a      	add	r2, sp
 8006bec:	7013      	strb	r3, [r2, #0]
	 HAL_I2C_Mem_Write(&hi2c2, (0x60<<1), 0x08, 1, &data, 1, 1000);
 8006bee:	23fa      	movs	r3, #250	; 0xfa
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	9302      	str	r3, [sp, #8]
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	9200      	str	r2, [sp, #0]
 8006bf8:	21c0      	movs	r1, #192	; 0xc0
 8006bfa:	2208      	movs	r2, #8
 8006bfc:	9301      	str	r3, [sp, #4]
 8006bfe:	4802      	ldr	r0, [pc, #8]	; (8006c08 <usb_currentselector+0x24>)
 8006c00:	f7fd fb4c 	bl	800429c <HAL_I2C_Mem_Write>
}
 8006c04:	b007      	add	sp, #28
 8006c06:	bd00      	pop	{pc}
 8006c08:	20000330 	.word	0x20000330

08006c0c <usb_deviceID>:
 * [5] : 0x55
 * [6] : 0x54
 * [7] : 0x00
 */
void usb_deviceID(uint8_t *id)
{
 8006c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c0e:	b089      	sub	sp, #36	; 0x24

uint8_t wr_addr[8] = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07};
 8006c10:	ad06      	add	r5, sp, #24
{
 8006c12:	9005      	str	r0, [sp, #20]
uint8_t wr_addr[8] = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07};
 8006c14:	2208      	movs	r2, #8
 8006c16:	0028      	movs	r0, r5

for(int i=0;i<8;i++)
{
	HAL_I2C_Mem_Read(&hi2c2, i2c_addr, wr_addr[i], 1, &id[i], 1, 1000);
 8006c18:	27fa      	movs	r7, #250	; 0xfa
uint8_t wr_addr[8] = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07};
 8006c1a:	490b      	ldr	r1, [pc, #44]	; (8006c48 <usb_deviceID+0x3c>)
 8006c1c:	f002 fa64 	bl	80090e8 <memcpy>
for(int i=0;i<8;i++)
 8006c20:	2400      	movs	r4, #0
	HAL_I2C_Mem_Read(&hi2c2, i2c_addr, wr_addr[i], 1, &id[i], 1, 1000);
 8006c22:	2601      	movs	r6, #1
 8006c24:	00bf      	lsls	r7, r7, #2
 8006c26:	9b05      	ldr	r3, [sp, #20]
 8006c28:	5d2a      	ldrb	r2, [r5, r4]
 8006c2a:	191b      	adds	r3, r3, r4
 8006c2c:	9300      	str	r3, [sp, #0]
 8006c2e:	21c0      	movs	r1, #192	; 0xc0
 8006c30:	2301      	movs	r3, #1
 8006c32:	4806      	ldr	r0, [pc, #24]	; (8006c4c <usb_deviceID+0x40>)
 8006c34:	9702      	str	r7, [sp, #8]
 8006c36:	9601      	str	r6, [sp, #4]
for(int i=0;i<8;i++)
 8006c38:	3401      	adds	r4, #1
	HAL_I2C_Mem_Read(&hi2c2, i2c_addr, wr_addr[i], 1, &id[i], 1, 1000);
 8006c3a:	f7fd fc11 	bl	8004460 <HAL_I2C_Mem_Read>
for(int i=0;i<8;i++)
 8006c3e:	2c08      	cmp	r4, #8
 8006c40:	d1f1      	bne.n	8006c26 <usb_deviceID+0x1a>
}


}
 8006c42:	b009      	add	sp, #36	; 0x24
 8006c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c46:	46c0      	nop			; (mov r8, r8)
 8006c48:	0800b160 	.word	0x0800b160
 8006c4c:	20000330 	.word	0x20000330

08006c50 <button_query>:
/**
 * Checks for button press and long press
 * also debounces the button
 */
 void button_query()
 {
 8006c50:	b510      	push	{r4, lr}
		if(hMenuButton.buttonFlag)
 8006c52:	4c31      	ldr	r4, [pc, #196]	; (8006d18 <button_query+0xc8>)
 8006c54:	79a3      	ldrb	r3, [r4, #6]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00f      	beq.n	8006c7a <button_query+0x2a>
				     {
					         if(HAL_GPIO_ReadPin(PWN_BTN_MCU_GPIO_Port, PWN_BTN_MCU_Pin))											//for applying debounce
 8006c5a:	2104      	movs	r1, #4
 8006c5c:	482f      	ldr	r0, [pc, #188]	; (8006d1c <button_query+0xcc>)
 8006c5e:	f7fd f97f 	bl	8003f60 <HAL_GPIO_ReadPin>
 8006c62:	2800      	cmp	r0, #0
 8006c64:	d009      	beq.n	8006c7a <button_query+0x2a>
							  {
								  hMenuButton.buttonFlag = RESET;						//Reset interrupt flag
 8006c66:	2300      	movs	r3, #0
 8006c68:	71a3      	strb	r3, [r4, #6]

								  if(hMenuButton.buttonTimerEnable != SET)						//Start timer when the menu button gets pressed for the first time
 8006c6a:	7923      	ldrb	r3, [r4, #4]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d004      	beq.n	8006c7a <button_query+0x2a>
								  {
									  hMenuButton.buttonTimerEnable = SET;						//Enable software timer
 8006c70:	2301      	movs	r3, #1
 8006c72:	80a3      	strh	r3, [r4, #4]
	*timer = HAL_GetTick();
 8006c74:	f7fc fb02 	bl	800327c <HAL_GetTick>
 8006c78:	6020      	str	r0, [r4, #0]
								  }
							  }
						  }


					  if((hMenuButton.buttonStatus == MenuButtonStatus_oneClick) || hMenuButton.buttonStatus == MenuButtonStatus_heldPressed )//(checkTimer(&hMenuButton.buttonTimer, 5 * hMenuButton.buttonHeldPressedCounter)) &&
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	7963      	ldrb	r3, [r4, #5]
 8006c7e:	4393      	bics	r3, r2
 8006c80:	d10d      	bne.n	8006c9e <button_query+0x4e>
						  {
							  if(HAL_GPIO_ReadPin(PWN_BTN_MCU_GPIO_Port, PWN_BTN_MCU_Pin))		//To check if the button is still pressed
 8006c82:	2104      	movs	r1, #4
 8006c84:	4825      	ldr	r0, [pc, #148]	; (8006d1c <button_query+0xcc>)
 8006c86:	f7fd f96b 	bl	8003f60 <HAL_GPIO_ReadPin>
 8006c8a:	2800      	cmp	r0, #0
 8006c8c:	d002      	beq.n	8006c94 <button_query+0x44>
							  {
								  ++hMenuButton.buttonHeldPressedCounter;						//Increment samples number
 8006c8e:	79e3      	ldrb	r3, [r4, #7]
 8006c90:	3301      	adds	r3, #1
 8006c92:	71e3      	strb	r3, [r4, #7]
							  }


							 if(hMenuButton.buttonHeldPressedCounter >= 60)
 8006c94:	79e3      	ldrb	r3, [r4, #7]
 8006c96:	2b3b      	cmp	r3, #59	; 0x3b
 8006c98:	d901      	bls.n	8006c9e <button_query+0x4e>
							 {
								  hMenuButton.buttonStatus = MenuButtonStatus_heldPressed;
 8006c9a:	2302      	movs	r3, #2
 8006c9c:	7163      	strb	r3, [r4, #5]
	ret = ((HAL_GetTick() - *timer) > msTime)  ? ENABLE : DISABLE;
 8006c9e:	f7fc faed 	bl	800327c <HAL_GetTick>
 8006ca2:	6823      	ldr	r3, [r4, #0]
 8006ca4:	1ac0      	subs	r0, r0, r3

						  }																		//If the button is held pressed change button status


					  //this if statement can be removed if double press feature is not being used.
					  if( (checkTimer(&hMenuButton.buttonTimer, 200)) && hMenuButton.buttonTimerEnable)//(checkTimer(&hMenuButton.buttonTimer, 40)) &&
 8006ca6:	28c8      	cmp	r0, #200	; 0xc8
 8006ca8:	d925      	bls.n	8006cf6 <button_query+0xa6>
 8006caa:	7923      	ldrb	r3, [r4, #4]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d022      	beq.n	8006cf6 <button_query+0xa6>
						  {
			              if((HAL_GPIO_ReadPin(PWN_BTN_MCU_GPIO_Port, PWN_BTN_MCU_Pin)) && (hMenuButton.buttonHeldPressedCounter >= 60) )
 8006cb0:	2104      	movs	r1, #4
 8006cb2:	481a      	ldr	r0, [pc, #104]	; (8006d1c <button_query+0xcc>)
 8006cb4:	f7fd f954 	bl	8003f60 <HAL_GPIO_ReadPin>
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	d009      	beq.n	8006cd0 <button_query+0x80>
 8006cbc:	79e3      	ldrb	r3, [r4, #7]
 8006cbe:	2b3b      	cmp	r3, #59	; 0x3b
 8006cc0:	d906      	bls.n	8006cd0 <button_query+0x80>
						     {
							  switch(hMenuButton.buttonStatus)
 8006cc2:	7963      	ldrb	r3, [r4, #5]
 8006cc4:	2b02      	cmp	r3, #2
 8006cc6:	d103      	bne.n	8006cd0 <button_query+0x80>
							 	{
							 		case MenuButtonStatus_heldPressed:
							 		{
							 			button_pressed = DPress;
 8006cc8:	4a15      	ldr	r2, [pc, #84]	; (8006d20 <button_query+0xd0>)
 8006cca:	7013      	strb	r3, [r2, #0]
							 			 hMenuButton.buttonHeldPressedCounter 	= RESET;					//Reset counter
 8006ccc:	2300      	movs	r3, #0
 8006cce:	71e3      	strb	r3, [r4, #7]


						     }


						  if(!HAL_GPIO_ReadPin(PWN_BTN_MCU_GPIO_Port, PWN_BTN_MCU_Pin))
 8006cd0:	2104      	movs	r1, #4
 8006cd2:	4812      	ldr	r0, [pc, #72]	; (8006d1c <button_query+0xcc>)
 8006cd4:	f7fd f944 	bl	8003f60 <HAL_GPIO_ReadPin>
 8006cd8:	2800      	cmp	r0, #0
 8006cda:	d10c      	bne.n	8006cf6 <button_query+0xa6>
						  {
							  switch(hMenuButton.buttonStatus)
 8006cdc:	7963      	ldrb	r3, [r4, #5]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d102      	bne.n	8006ce8 <button_query+0x98>
							 	 {
							 			  	  case	MenuButtonStatus_oneClick:
							 			  	  {
							 			  		button_pressed = SPress;
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	4b0e      	ldr	r3, [pc, #56]	; (8006d20 <button_query+0xd0>)
 8006ce6:	701a      	strb	r2, [r3, #0]
							 			  	  }
							 			  	  default:
							 			  		  break;

							 		}
							              hMenuButton.buttonFlag = SET;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	71a3      	strb	r3, [r4, #6]
							 			  hMenuButton.buttonTimerEnable 		= RESET;					//Disable software timer
							 			  hMenuButton.buttonHeldPressedCounter 	= RESET;					//Reset counter
 8006cec:	2300      	movs	r3, #0
 8006cee:	71e3      	strb	r3, [r4, #7]
							 			  hMenuButton.buttonTimerEnable 		= RESET;					//Disable software timer
 8006cf0:	23c0      	movs	r3, #192	; 0xc0
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	80a3      	strh	r3, [r4, #4]





					  if(!HAL_GPIO_ReadPin(PWN_BTN_MCU_GPIO_Port, PWN_BTN_MCU_Pin) && !hMenuButton.buttonTimerEnable )//resets everything when button is unpressed
 8006cf6:	2104      	movs	r1, #4
 8006cf8:	4808      	ldr	r0, [pc, #32]	; (8006d1c <button_query+0xcc>)
 8006cfa:	f7fd f931 	bl	8003f60 <HAL_GPIO_ReadPin>
 8006cfe:	7923      	ldrb	r3, [r4, #4]
 8006d00:	4318      	orrs	r0, r3
 8006d02:	b2c0      	uxtb	r0, r0
 8006d04:	2800      	cmp	r0, #0
 8006d06:	d105      	bne.n	8006d14 <button_query+0xc4>
					  {

						  hMenuButton.buttonFlag = SET;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	71a3      	strb	r3, [r4, #6]
						  hMenuButton.buttonTimerEnable 		= RESET;					//Disable software timer
 8006d0c:	23c0      	movs	r3, #192	; 0xc0
 8006d0e:	009b      	lsls	r3, r3, #2
							hMenuButton.buttonHeldPressedCounter 	= RESET;					//Reset counter
 8006d10:	71e0      	strb	r0, [r4, #7]
						  hMenuButton.buttonTimerEnable 		= RESET;					//Disable software timer
 8006d12:	80a3      	strh	r3, [r4, #4]
							 hMenuButton.buttonStatus 				= MenuButtonStatus_notPressed;
					  }
 }
 8006d14:	bd10      	pop	{r4, pc}
 8006d16:	46c0      	nop			; (mov r8, r8)
 8006d18:	20000558 	.word	0x20000558
 8006d1c:	50000400 	.word	0x50000400
 8006d20:	20000554 	.word	0x20000554

08006d24 <button_interrupt>:
{
 8006d24:	b510      	push	{r4, lr}
	ticks++;
 8006d26:	4a06      	ldr	r2, [pc, #24]	; (8006d40 <button_interrupt+0x1c>)
 8006d28:	7813      	ldrb	r3, [r2, #0]
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	7013      	strb	r3, [r2, #0]
	if(ticks>50)
 8006d30:	7813      	ldrb	r3, [r2, #0]
 8006d32:	2b32      	cmp	r3, #50	; 0x32
 8006d34:	d903      	bls.n	8006d3e <button_interrupt+0x1a>
		ticks =0; //reset the ticks
 8006d36:	2300      	movs	r3, #0
 8006d38:	7013      	strb	r3, [r2, #0]
		button_query();
 8006d3a:	f7ff ff89 	bl	8006c50 <button_query>
}
 8006d3e:	bd10      	pop	{r4, pc}
 8006d40:	20000560 	.word	0x20000560

08006d44 <BUZZER_Init>:
  * @brief Initialize timer with PWM-output
  * @note The timer handler and channel should be defined in .h file
  * @retval No
  */
void BUZZER_Init(void)
{
 8006d44:	b510      	push	{r4, lr}
#if(BUZZER_PASSIVE)
	  HAL_TIM_PWM_Start(TIM_BUZZER_HANDLER, TIM_BUZZER_CHANNEL);
 8006d46:	2100      	movs	r1, #0
 8006d48:	4801      	ldr	r0, [pc, #4]	; (8006d50 <BUZZER_Init+0xc>)
 8006d4a:	f7ff f89d 	bl	8005e88 <HAL_TIM_PWM_Start>
#endif
}
 8006d4e:	bd10      	pop	{r4, pc}
 8006d50:	20000414 	.word	0x20000414

08006d54 <BUZZER_PWM_SetPercent>:
	if(percent > 100){
		percent = 100;
	}
#if(BUZZER_PASSIVE)

	uint16_t tim_arr = __HAL_TIM_GET_AUTORELOAD(TIM_BUZZER_HANDLER);
 8006d54:	4b0a      	ldr	r3, [pc, #40]	; (8006d80 <BUZZER_PWM_SetPercent+0x2c>)
{
 8006d56:	b510      	push	{r4, lr}
	uint16_t tim_arr = __HAL_TIM_GET_AUTORELOAD(TIM_BUZZER_HANDLER);
 8006d58:	681c      	ldr	r4, [r3, #0]

	uint16_t tim_ccr_new = (percent*tim_arr*0.01);
 8006d5a:	1c02      	adds	r2, r0, #0
	uint16_t tim_arr = __HAL_TIM_GET_AUTORELOAD(TIM_BUZZER_HANDLER);
 8006d5c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint16_t tim_ccr_new = (percent*tim_arr*0.01);
 8006d5e:	2864      	cmp	r0, #100	; 0x64
 8006d60:	d900      	bls.n	8006d64 <BUZZER_PWM_SetPercent+0x10>
 8006d62:	2264      	movs	r2, #100	; 0x64
 8006d64:	b2d2      	uxtb	r2, r2
 8006d66:	b298      	uxth	r0, r3
 8006d68:	4350      	muls	r0, r2
 8006d6a:	f7fb fb3f 	bl	80023ec <__aeabi_i2d>
 8006d6e:	4a05      	ldr	r2, [pc, #20]	; (8006d84 <BUZZER_PWM_SetPercent+0x30>)
 8006d70:	4b05      	ldr	r3, [pc, #20]	; (8006d88 <BUZZER_PWM_SetPercent+0x34>)
 8006d72:	f7fa fca3 	bl	80016bc <__aeabi_dmul>
 8006d76:	f7f9 fb93 	bl	80004a0 <__aeabi_d2uiz>

	__HAL_TIM_SET_COMPARE(TIM_BUZZER_HANDLER, TIM_BUZZER_CHANNEL, tim_ccr_new);
 8006d7a:	b280      	uxth	r0, r0
 8006d7c:	6360      	str	r0, [r4, #52]	; 0x34
#endif

}
 8006d7e:	bd10      	pop	{r4, pc}
 8006d80:	20000414 	.word	0x20000414
 8006d84:	47ae147b 	.word	0x47ae147b
 8006d88:	3f847ae1 	.word	0x3f847ae1

08006d8c <BUZZER_On>:
  * @note No need init
  * @param No
  * @retval No
  */
void BUZZER_On(void)
{
 8006d8c:	b510      	push	{r4, lr}

#if(BUZZER_PASSIVE)

	BUZZER_PWM_SetPercent(50);
 8006d8e:	2032      	movs	r0, #50	; 0x32
 8006d90:	f7ff ffe0 	bl	8006d54 <BUZZER_PWM_SetPercent>
	/* For buzzer with generator,  Low Level = BuzzerOn */
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
#endif
#endif

}
 8006d94:	bd10      	pop	{r4, pc}
	...

08006d98 <BUZZER_Go>:
  * @note No need init
  * @param time between ticks in ms, ticks quantity
  * @retval No
  */
void BUZZER_Go(buztime_t period, buztick_t ticks)
{
 8006d98:	b570      	push	{r4, r5, r6, lr}
 8006d9a:	0004      	movs	r4, r0
 8006d9c:	000d      	movs	r5, r1
	BUZZER_On();
 8006d9e:	f7ff fff5 	bl	8006d8c <BUZZER_On>
	Buz.Help = 0;
 8006da2:	2200      	movs	r2, #0
 8006da4:	4b02      	ldr	r3, [pc, #8]	; (8006db0 <BUZZER_Go+0x18>)
	Buz.ToutSave = period;
	Buz.Tout = period;
	Buz.Tick = ticks;
 8006da6:	711d      	strb	r5, [r3, #4]
	Buz.Help = 0;
 8006da8:	715a      	strb	r2, [r3, #5]
	Buz.ToutSave = period;
 8006daa:	805c      	strh	r4, [r3, #2]
	Buz.Tout = period;
 8006dac:	801c      	strh	r4, [r3, #0]
}
 8006dae:	bd70      	pop	{r4, r5, r6, pc}
 8006db0:	20000562 	.word	0x20000562

08006db4 <adc_Measure>:
	return HAL_ADC_GetValue(&hadc1);

}

uint8_t adc_Measure (float *bat_volt)
{
 8006db4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	  ADC_ChannelConfTypeDef sConfig = {0};
 8006db6:	220c      	movs	r2, #12
{
 8006db8:	0005      	movs	r5, r0
	  ADC_ChannelConfTypeDef sConfig = {0};
 8006dba:	2100      	movs	r1, #0
 8006dbc:	a801      	add	r0, sp, #4
 8006dbe:	f002 f8e7 	bl	8008f90 <memset>
	  hadc1.Instance = ADC1;
 8006dc2:	4c56      	ldr	r4, [pc, #344]	; (8006f1c <adc_Measure+0x168>)
 8006dc4:	4b56      	ldr	r3, [pc, #344]	; (8006f20 <adc_Measure+0x16c>)
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006dc6:	2204      	movs	r2, #4
	  hadc1.Instance = ADC1;
 8006dc8:	6023      	str	r3, [r4, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006dca:	2380      	movs	r3, #128	; 0x80
	  hadc1.Init.NbrOfConversion = 1;
 8006dcc:	2601      	movs	r6, #1
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006dce:	061b      	lsls	r3, r3, #24
 8006dd0:	6063      	str	r3, [r4, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006dd2:	2300      	movs	r3, #0
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006dd4:	6162      	str	r2, [r4, #20]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006dd6:	19a2      	adds	r2, r4, r6
 8006dd8:	77d3      	strb	r3, [r2, #31]
	  hadc1.Init.DMAContinuousRequests = DISABLE;
 8006dda:	0022      	movs	r2, r4
 8006ddc:	322c      	adds	r2, #44	; 0x2c
 8006dde:	7013      	strb	r3, [r2, #0]
	  hadc1.Init.OversamplingMode = DISABLE;
 8006de0:	0022      	movs	r2, r4
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006de2:	0020      	movs	r0, r4
	  hadc1.Init.OversamplingMode = DISABLE;
 8006de4:	323c      	adds	r2, #60	; 0x3c
	  hadc1.Init.LowPowerAutoWait = DISABLE;
 8006de6:	8323      	strh	r3, [r4, #24]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006de8:	60a3      	str	r3, [r4, #8]
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006dea:	60e3      	str	r3, [r4, #12]
	  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006dec:	6123      	str	r3, [r4, #16]
	  hadc1.Init.ContinuousConvMode = DISABLE;
 8006dee:	76a3      	strb	r3, [r4, #26]
	  hadc1.Init.NbrOfConversion = 1;
 8006df0:	61e6      	str	r6, [r4, #28]
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006df2:	6263      	str	r3, [r4, #36]	; 0x24
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006df4:	62a3      	str	r3, [r4, #40]	; 0x28
	  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8006df6:	6323      	str	r3, [r4, #48]	; 0x30
	  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8006df8:	6363      	str	r3, [r4, #52]	; 0x34
	  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8006dfa:	63a3      	str	r3, [r4, #56]	; 0x38
	  hadc1.Init.OversamplingMode = DISABLE;
 8006dfc:	7013      	strb	r3, [r2, #0]
	  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8006dfe:	64e3      	str	r3, [r4, #76]	; 0x4c
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006e00:	f7fc fa58 	bl	80032b4 <HAL_ADC_Init>
 8006e04:	2800      	cmp	r0, #0
 8006e06:	d001      	beq.n	8006e0c <adc_Measure+0x58>
	    Error_Handler();
 8006e08:	f7fb ff8a 	bl	8002d20 <Error_Handler>
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006e0c:	2300      	movs	r3, #0
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006e0e:	0020      	movs	r0, r4
 8006e10:	a901      	add	r1, sp, #4
	  sConfig.Channel = ADC_CHANNEL_0;
 8006e12:	9601      	str	r6, [sp, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006e14:	9302      	str	r3, [sp, #8]
	  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8006e16:	9303      	str	r3, [sp, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006e18:	f7fc fbc6 	bl	80035a8 <HAL_ADC_ConfigChannel>
 8006e1c:	2800      	cmp	r0, #0
 8006e1e:	d001      	beq.n	8006e24 <adc_Measure+0x70>
	    Error_Handler();
 8006e20:	f7fb ff7e 	bl	8002d20 <Error_Handler>
	uint32_t val;
	adc_InitOneShotMode();
	HAL_Delay(1);
 8006e24:	2001      	movs	r0, #1
 8006e26:	f7fc fa2f 	bl	8003288 <HAL_Delay>
	adc_Start();
 8006e2a:	0020      	movs	r0, r4
 8006e2c:	f7fc fd60 	bl	80038f0 <HAL_ADC_Start>
	HAL_Delay(1);
 8006e30:	2001      	movs	r0, #1
 8006e32:	f7fc fa29 	bl	8003288 <HAL_Delay>

	if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8006e36:	21fa      	movs	r1, #250	; 0xfa
 8006e38:	0020      	movs	r0, r4
 8006e3a:	0089      	lsls	r1, r1, #2
 8006e3c:	f7fc fb4c 	bl	80034d8 <HAL_ADC_PollForConversion>
 8006e40:	2800      	cmp	r0, #0
 8006e42:	d132      	bne.n	8006eaa <adc_Measure+0xf6>
					return 0;
				}
			}
		}

	adc_Stop();
 8006e44:	0020      	movs	r0, r4
 8006e46:	f7fc fdbd 	bl	80039c4 <HAL_ADC_Stop>
	return HAL_ADC_GetValue(&hadc1);
 8006e4a:	0020      	movs	r0, r4
 8006e4c:	f7fc fba8 	bl	80035a0 <HAL_ADC_GetValue>
 8006e50:	0006      	movs	r6, r0

	val = adc_Getval();

	HAL_Delay(1);
 8006e52:	2001      	movs	r0, #1
 8006e54:	f7fc fa18 	bl	8003288 <HAL_Delay>
	adc_Start();
 8006e58:	0020      	movs	r0, r4
 8006e5a:	f7fc fd49 	bl	80038f0 <HAL_ADC_Start>
	HAL_Delay(1);
 8006e5e:	2001      	movs	r0, #1
 8006e60:	f7fc fa12 	bl	8003288 <HAL_Delay>

	if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8006e64:	21fa      	movs	r1, #250	; 0xfa
 8006e66:	0020      	movs	r0, r4
 8006e68:	0089      	lsls	r1, r1, #2
 8006e6a:	f7fc fb35 	bl	80034d8 <HAL_ADC_PollForConversion>
 8006e6e:	2800      	cmp	r0, #0
 8006e70:	d138      	bne.n	8006ee4 <adc_Measure+0x130>
					return 0;
				}
			}
		}

	adc_Stop();
 8006e72:	0020      	movs	r0, r4
 8006e74:	f7fc fda6 	bl	80039c4 <HAL_ADC_Stop>
	return HAL_ADC_GetValue(&hadc1);
 8006e78:	0020      	movs	r0, r4
 8006e7a:	f7fc fb91 	bl	80035a0 <HAL_ADC_GetValue>

	val =(uint32_t)((val + adc_Getval()) / 2);	//Read and average ADC
 8006e7e:	1830      	adds	r0, r6, r0
 8006e80:	0840      	lsrs	r0, r0, #1

	//value * (2.8/4095) * ((R1 + R2)/R2);
	// Max = 3.3Vref * 365k / 100k = 12.045V
	// MAx =2.8Vref * 22k / 10k = 6.16V (Because controller is working on 2.8V so Vref is 2.8V)
//	*bat_volt = (float) val * (6.16f / 4096.0f);	// 12 bit
	*bat_volt = (float)((( val * (2.8f / 4095.0f)) * ratio)-0.3); // 12 bit //0.3 for offset
 8006e82:	f7f9 fc79 	bl	8000778 <__aeabi_ui2f>
 8006e86:	4927      	ldr	r1, [pc, #156]	; (8006f24 <adc_Measure+0x170>)
 8006e88:	f7f9 fb28 	bl	80004dc <__aeabi_fmul>
 8006e8c:	f7fb fb04 	bl	8002498 <__aeabi_f2d>
 8006e90:	4a25      	ldr	r2, [pc, #148]	; (8006f28 <adc_Measure+0x174>)
 8006e92:	4b26      	ldr	r3, [pc, #152]	; (8006f2c <adc_Measure+0x178>)
 8006e94:	f7fa fc12 	bl	80016bc <__aeabi_dmul>
 8006e98:	4a25      	ldr	r2, [pc, #148]	; (8006f30 <adc_Measure+0x17c>)
 8006e9a:	4b26      	ldr	r3, [pc, #152]	; (8006f34 <adc_Measure+0x180>)
 8006e9c:	f7fa fed0 	bl	8001c40 <__aeabi_dsub>
 8006ea0:	f7fb fb42 	bl	8002528 <__aeabi_d2f>
 8006ea4:	6028      	str	r0, [r5, #0]
	return 1;
 8006ea6:	2001      	movs	r0, #1
 8006ea8:	e01a      	b.n	8006ee0 <adc_Measure+0x12c>
		   HAL_Delay(1);
 8006eaa:	2001      	movs	r0, #1
 8006eac:	f7fc f9ec 	bl	8003288 <HAL_Delay>
		   adc_Start();
 8006eb0:	0020      	movs	r0, r4
 8006eb2:	f7fc fd1d 	bl	80038f0 <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8006eb6:	21fa      	movs	r1, #250	; 0xfa
 8006eb8:	0020      	movs	r0, r4
 8006eba:	0089      	lsls	r1, r1, #2
 8006ebc:	f7fc fb0c 	bl	80034d8 <HAL_ADC_PollForConversion>
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	d0bf      	beq.n	8006e44 <adc_Measure+0x90>
				HAL_Delay(1);
 8006ec4:	2001      	movs	r0, #1
 8006ec6:	f7fc f9df 	bl	8003288 <HAL_Delay>
				adc_Start();
 8006eca:	0020      	movs	r0, r4
 8006ecc:	f7fc fd10 	bl	80038f0 <HAL_ADC_Start>
				if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8006ed0:	21fa      	movs	r1, #250	; 0xfa
 8006ed2:	0020      	movs	r0, r4
 8006ed4:	0089      	lsls	r1, r1, #2
 8006ed6:	f7fc faff 	bl	80034d8 <HAL_ADC_PollForConversion>
 8006eda:	2800      	cmp	r0, #0
 8006edc:	d0b2      	beq.n	8006e44 <adc_Measure+0x90>
					return 0;
 8006ede:	2000      	movs	r0, #0



}
 8006ee0:	b004      	add	sp, #16
 8006ee2:	bd70      	pop	{r4, r5, r6, pc}
		   HAL_Delay(1);
 8006ee4:	2001      	movs	r0, #1
 8006ee6:	f7fc f9cf 	bl	8003288 <HAL_Delay>
		   adc_Start();
 8006eea:	0020      	movs	r0, r4
 8006eec:	f7fc fd00 	bl	80038f0 <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8006ef0:	21fa      	movs	r1, #250	; 0xfa
 8006ef2:	0020      	movs	r0, r4
 8006ef4:	0089      	lsls	r1, r1, #2
 8006ef6:	f7fc faef 	bl	80034d8 <HAL_ADC_PollForConversion>
 8006efa:	2800      	cmp	r0, #0
 8006efc:	d0b9      	beq.n	8006e72 <adc_Measure+0xbe>
				HAL_Delay(1);
 8006efe:	2001      	movs	r0, #1
 8006f00:	f7fc f9c2 	bl	8003288 <HAL_Delay>
				adc_Start();
 8006f04:	0020      	movs	r0, r4
 8006f06:	f7fc fcf3 	bl	80038f0 <HAL_ADC_Start>
				if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8006f0a:	21fa      	movs	r1, #250	; 0xfa
 8006f0c:	0020      	movs	r0, r4
 8006f0e:	0089      	lsls	r1, r1, #2
 8006f10:	f7fc fae2 	bl	80034d8 <HAL_ADC_PollForConversion>
 8006f14:	2800      	cmp	r0, #0
 8006f16:	d0ac      	beq.n	8006e72 <adc_Measure+0xbe>
 8006f18:	e7e1      	b.n	8006ede <adc_Measure+0x12a>
 8006f1a:	46c0      	nop			; (mov r8, r8)
 8006f1c:	20000214 	.word	0x20000214
 8006f20:	40012400 	.word	0x40012400
 8006f24:	3a333e67 	.word	0x3a333e67
 8006f28:	9999999a 	.word	0x9999999a
 8006f2c:	40099999 	.word	0x40099999
 8006f30:	33333333 	.word	0x33333333
 8006f34:	3fd33333 	.word	0x3fd33333

08006f38 <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 8006f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LCD_PIN(LCD_DC,SET);
 8006f3a:	23a0      	movs	r3, #160	; 0xa0
 8006f3c:	2204      	movs	r2, #4
 8006f3e:	05db      	lsls	r3, r3, #23
 8006f40:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS,RESET);
 8006f42:	2280      	movs	r2, #128	; 0x80
{
 8006f44:	0004      	movs	r4, r0
 8006f46:	000d      	movs	r5, r1
  LCD_PIN(LCD_CS,RESET);
 8006f48:	0352      	lsls	r2, r2, #13
 8006f4a:	619a      	str	r2, [r3, #24]
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0) {
 8006f4c:	2d00      	cmp	r5, #0
 8006f4e:	d104      	bne.n	8006f5a <LCD_WriteData+0x22>
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
#endif
    buff_size -= chunk_size;
  }
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
 8006f50:	23a0      	movs	r3, #160	; 0xa0
 8006f52:	2210      	movs	r2, #16
 8006f54:	05db      	lsls	r3, r3, #23
 8006f56:	619a      	str	r2, [r3, #24]
#endif
}
 8006f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8006f5a:	2380      	movs	r3, #128	; 0x80
 8006f5c:	002e      	movs	r6, r5
 8006f5e:	025b      	lsls	r3, r3, #9
 8006f60:	429d      	cmp	r5, r3
 8006f62:	d300      	bcc.n	8006f66 <LCD_WriteData+0x2e>
 8006f64:	4e12      	ldr	r6, [pc, #72]	; (8006fb0 <LCD_WriteData+0x78>)
 8006f66:	4f13      	ldr	r7, [pc, #76]	; (8006fb4 <LCD_WriteData+0x7c>)
 8006f68:	b2b2      	uxth	r2, r6
    if(buff_size>DMA_Min_Pixels){
 8006f6a:	2d20      	cmp	r5, #32
 8006f6c:	d914      	bls.n	8006f98 <LCD_WriteData+0x60>
      HAL_SPI_Transmit_DMA(&LCD_HANDLE, buff, chunk_size);
 8006f6e:	0021      	movs	r1, r4
 8006f70:	0038      	movs	r0, r7
 8006f72:	f7fe faf5 	bl	8005560 <HAL_SPI_Transmit_DMA>
      while(HAL_DMA_GetState(LCD_HANDLE.hdmatx)!=HAL_DMA_STATE_READY);
 8006f76:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8006f78:	f7fc ff3c 	bl	8003df4 <HAL_DMA_GetState>
 8006f7c:	2801      	cmp	r0, #1
 8006f7e:	d1fa      	bne.n	8006f76 <LCD_WriteData+0x3e>
      if(config.dma_mem_inc==mem_increase){
 8006f80:	2202      	movs	r2, #2
 8006f82:	4b0d      	ldr	r3, [pc, #52]	; (8006fb8 <LCD_WriteData+0x80>)
 8006f84:	569a      	ldrsb	r2, [r3, r2]
 8006f86:	2a01      	cmp	r2, #1
 8006f88:	d104      	bne.n	8006f94 <LCD_WriteData+0x5c>
        if(config.dma_sz==mode_16bit)
 8006f8a:	785b      	ldrb	r3, [r3, #1]
      if(config.spi_sz==mode_16bit)
 8006f8c:	b25b      	sxtb	r3, r3
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d10b      	bne.n	8006faa <LCD_WriteData+0x72>
        buff += chunk_size;
 8006f92:	19a4      	adds	r4, r4, r6
    buff_size -= chunk_size;
 8006f94:	1bad      	subs	r5, r5, r6
 8006f96:	e7d9      	b.n	8006f4c <LCD_WriteData+0x14>
      HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 8006f98:	2301      	movs	r3, #1
 8006f9a:	0021      	movs	r1, r4
 8006f9c:	425b      	negs	r3, r3
 8006f9e:	0038      	movs	r0, r7
 8006fa0:	f7fe fa18 	bl	80053d4 <HAL_SPI_Transmit>
      if(config.spi_sz==mode_16bit)
 8006fa4:	4b04      	ldr	r3, [pc, #16]	; (8006fb8 <LCD_WriteData+0x80>)
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	e7f0      	b.n	8006f8c <LCD_WriteData+0x54>
        buff += chunk_size*2;
 8006faa:	0073      	lsls	r3, r6, #1
 8006fac:	18e4      	adds	r4, r4, r3
 8006fae:	e7f1      	b.n	8006f94 <LCD_WriteData+0x5c>
 8006fb0:	0000ffff 	.word	0x0000ffff
 8006fb4:	200003b0 	.word	0x200003b0
 8006fb8:	20000010 	.word	0x20000010

08006fbc <LCD_FillPixels>:

  fb[x+(y*LCD_WIDTH)] = color;
}
#endif

void LCD_FillPixels(uint32_t pixels, uint16_t color){
 8006fbc:	b570      	push	{r4, r5, r6, lr}
 8006fbe:	b092      	sub	sp, #72	; 0x48
 8006fc0:	466b      	mov	r3, sp
 8006fc2:	0004      	movs	r4, r0
 8006fc4:	80d9      	strh	r1, [r3, #6]
#ifdef USE_DMA
  if(pixels>DMA_Min_Pixels)
 8006fc6:	2820      	cmp	r0, #32
 8006fc8:	d811      	bhi.n	8006fee <LCD_FillPixels+0x32>
    LCD_WriteData((uint8_t*)&color, pixels);
  else{
#endif
    uint16_t fill[DMA_Min_Pixels];                                                                // Use a pixel buffer for faster filling, removes overhead.
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 8006fca:	2300      	movs	r3, #0
      fill[t]=color;
 8006fcc:	b28a      	uxth	r2, r1
 8006fce:	a902      	add	r1, sp, #8
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 8006fd0:	42a3      	cmp	r3, r4
 8006fd2:	d113      	bne.n	8006ffc <LCD_FillPixels+0x40>
    }
    while(pixels){                                                                                // Send 64 pixel blocks
      uint32_t sz = (pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);
 8006fd4:	2620      	movs	r6, #32
    while(pixels){                                                                                // Send 64 pixel blocks
 8006fd6:	2c00      	cmp	r4, #0
 8006fd8:	d00e      	beq.n	8006ff8 <LCD_FillPixels+0x3c>
      uint32_t sz = (pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);
 8006fda:	0025      	movs	r5, r4
 8006fdc:	2c20      	cmp	r4, #32
 8006fde:	d900      	bls.n	8006fe2 <LCD_FillPixels+0x26>
 8006fe0:	0035      	movs	r5, r6
      LCD_WriteData((uint8_t*)fill, sz);
 8006fe2:	0029      	movs	r1, r5
 8006fe4:	a802      	add	r0, sp, #8
 8006fe6:	f7ff ffa7 	bl	8006f38 <LCD_WriteData>
      pixels-=sz;
 8006fea:	1b64      	subs	r4, r4, r5
 8006fec:	e7f3      	b.n	8006fd6 <LCD_FillPixels+0x1a>
    LCD_WriteData((uint8_t*)&color, pixels);
 8006fee:	466b      	mov	r3, sp
 8006ff0:	0001      	movs	r1, r0
 8006ff2:	1d98      	adds	r0, r3, #6
 8006ff4:	f7ff ffa0 	bl	8006f38 <LCD_WriteData>
    }
#ifdef USE_DMA
  }
#endif
}
 8006ff8:	b012      	add	sp, #72	; 0x48
 8006ffa:	bd70      	pop	{r4, r5, r6, pc}
      fill[t]=color;
 8006ffc:	0058      	lsls	r0, r3, #1
 8006ffe:	5242      	strh	r2, [r0, r1]
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 8007000:	3301      	adds	r3, #1
 8007002:	e7e5      	b.n	8006fd0 <LCD_FillPixels+0x14>

08007004 <setSPI_Size.part.0>:
static void setSPI_Size(int8_t size){
 8007004:	b510      	push	{r4, lr}
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 8007006:	2440      	movs	r4, #64	; 0x40
 8007008:	490b      	ldr	r1, [pc, #44]	; (8007038 <setSPI_Size.part.0+0x34>)
 800700a:	680b      	ldr	r3, [r1, #0]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	43a2      	bics	r2, r4
 8007010:	601a      	str	r2, [r3, #0]
    config.spi_sz=size;
 8007012:	4a0a      	ldr	r2, [pc, #40]	; (800703c <setSPI_Size.part.0+0x38>)
 8007014:	7010      	strb	r0, [r2, #0]
    if(size==mode_16bit){
 8007016:	2801      	cmp	r0, #1
 8007018:	d106      	bne.n	8007028 <setSPI_Size.part.0+0x24>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 800701a:	22f0      	movs	r2, #240	; 0xf0
 800701c:	0112      	lsls	r2, r2, #4
 800701e:	60ca      	str	r2, [r1, #12]
      LCD_HANDLE.Instance->CR2 |= SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2 | SPI_CR2_DS_3;
 8007020:	6859      	ldr	r1, [r3, #4]
 8007022:	430a      	orrs	r2, r1
      LCD_HANDLE.Instance->CR2 &= ~(SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2 | SPI_CR2_DS_3);
 8007024:	605a      	str	r2, [r3, #4]
}
 8007026:	bd10      	pop	{r4, pc}
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 8007028:	22e0      	movs	r2, #224	; 0xe0
 800702a:	00d2      	lsls	r2, r2, #3
 800702c:	60ca      	str	r2, [r1, #12]
      LCD_HANDLE.Instance->CR2 &= ~(SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2 | SPI_CR2_DS_3);
 800702e:	685a      	ldr	r2, [r3, #4]
 8007030:	4903      	ldr	r1, [pc, #12]	; (8007040 <setSPI_Size.part.0+0x3c>)
 8007032:	400a      	ands	r2, r1
 8007034:	e7f6      	b.n	8007024 <setSPI_Size.part.0+0x20>
 8007036:	46c0      	nop			; (mov r8, r8)
 8007038:	200003b0 	.word	0x200003b0
 800703c:	20000010 	.word	0x20000010
 8007040:	fffff0ff 	.word	0xfffff0ff

08007044 <setDMAMemMode>:
{
 8007044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(config.spi_sz!=size){
 8007046:	2300      	movs	r3, #0
 8007048:	4e20      	ldr	r6, [pc, #128]	; (80070cc <setDMAMemMode+0x88>)
  setSPI_Size(size);
 800704a:	b24f      	sxtb	r7, r1
  if(config.spi_sz!=size){
 800704c:	56f3      	ldrsb	r3, [r6, r3]
{
 800704e:	0005      	movs	r5, r0
 8007050:	000c      	movs	r4, r1
  if(config.spi_sz!=size){
 8007052:	42bb      	cmp	r3, r7
 8007054:	d002      	beq.n	800705c <setDMAMemMode+0x18>
 8007056:	0038      	movs	r0, r7
 8007058:	f7ff ffd4 	bl	8007004 <setSPI_Size.part.0>
  if(config.dma_sz!=size || config.dma_mem_inc!=memInc){
 800705c:	2301      	movs	r3, #1
 800705e:	56f3      	ldrsb	r3, [r6, r3]
 8007060:	42a3      	cmp	r3, r4
 8007062:	d103      	bne.n	800706c <setDMAMemMode+0x28>
 8007064:	2302      	movs	r3, #2
 8007066:	56f3      	ldrsb	r3, [r6, r3]
 8007068:	42ab      	cmp	r3, r5
 800706a:	d023      	beq.n	80070b4 <setDMAMemMode+0x70>
    __HAL_DMA_DISABLE(LCD_HANDLE.hdmatx);;
 800706c:	2101      	movs	r1, #1
 800706e:	4b18      	ldr	r3, [pc, #96]	; (80070d0 <setDMAMemMode+0x8c>)
    config.dma_sz =size;
 8007070:	7077      	strb	r7, [r6, #1]
    __HAL_DMA_DISABLE(LCD_HANDLE.hdmatx);;
 8007072:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    config.dma_mem_inc = memInc;
 8007074:	70b5      	strb	r5, [r6, #2]
    __HAL_DMA_DISABLE(LCD_HANDLE.hdmatx);;
 8007076:	6813      	ldr	r3, [r2, #0]
 8007078:	6818      	ldr	r0, [r3, #0]
 800707a:	4388      	bics	r0, r1
 800707c:	6018      	str	r0, [r3, #0]
    while((LCD_HANDLE.hdmatx->Instance->CCR & DMA_CCR_EN) != RESET);
 800707e:	6818      	ldr	r0, [r3, #0]
 8007080:	0006      	movs	r6, r0
 8007082:	400e      	ands	r6, r1
 8007084:	4208      	tst	r0, r1
 8007086:	d1fa      	bne.n	800707e <setDMAMemMode+0x3a>
    if(memInc==mem_increase){
 8007088:	2180      	movs	r1, #128	; 0x80
 800708a:	2d01      	cmp	r5, #1
 800708c:	d113      	bne.n	80070b6 <setDMAMemMode+0x72>
      LCD_HANDLE.hdmatx->Instance->CCR |= DMA_CCR_MINC;
 800708e:	6818      	ldr	r0, [r3, #0]
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 8007090:	6111      	str	r1, [r2, #16]
      LCD_HANDLE.hdmatx->Instance->CCR |= DMA_CCR_MINC;
 8007092:	4301      	orrs	r1, r0
 8007094:	6019      	str	r1, [r3, #0]
    if(size==mode_16bit){
 8007096:	480f      	ldr	r0, [pc, #60]	; (80070d4 <setDMAMemMode+0x90>)
 8007098:	2c01      	cmp	r4, #1
 800709a:	d111      	bne.n	80070c0 <setDMAMemMode+0x7c>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800709c:	2180      	movs	r1, #128	; 0x80
 800709e:	0049      	lsls	r1, r1, #1
 80070a0:	6151      	str	r1, [r2, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80070a2:	2180      	movs	r1, #128	; 0x80
 80070a4:	00c9      	lsls	r1, r1, #3
 80070a6:	6191      	str	r1, [r2, #24]
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk)) |
 80070a8:	22a0      	movs	r2, #160	; 0xa0
 80070aa:	6819      	ldr	r1, [r3, #0]
 80070ac:	00d2      	lsls	r2, r2, #3
 80070ae:	4001      	ands	r1, r0
 80070b0:	430a      	orrs	r2, r1
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
 80070b2:	601a      	str	r2, [r3, #0]
}
 80070b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      LCD_HANDLE.hdmatx->Instance->CCR &= ~(DMA_CCR_MINC);
 80070b6:	6818      	ldr	r0, [r3, #0]
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_DISABLE;
 80070b8:	6116      	str	r6, [r2, #16]
      LCD_HANDLE.hdmatx->Instance->CCR &= ~(DMA_CCR_MINC);
 80070ba:	4388      	bics	r0, r1
 80070bc:	6018      	str	r0, [r3, #0]
 80070be:	e7ea      	b.n	8007096 <setDMAMemMode+0x52>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80070c0:	2100      	movs	r1, #0
 80070c2:	6151      	str	r1, [r2, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80070c4:	6191      	str	r1, [r2, #24]
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	4002      	ands	r2, r0
 80070ca:	e7f2      	b.n	80070b2 <setDMAMemMode+0x6e>
 80070cc:	20000010 	.word	0x20000010
 80070d0:	200003b0 	.word	0x200003b0
 80070d4:	fffff0ff 	.word	0xfffff0ff

080070d8 <LCD_Update>:
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
}

static void LCD_Update(void)
{
 80070d8:	b510      	push	{r4, lr}
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)fb, LCD_WIDTH*LCD_HEIGHT);
#endif
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 80070da:	2100      	movs	r1, #0
 80070dc:	2001      	movs	r0, #1
 80070de:	f7ff ffb1 	bl	8007044 <setDMAMemMode>
  #else
  setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
  #endif
}
 80070e2:	bd10      	pop	{r4, pc}

080070e4 <LCD_WriteCommand>:
{
 80070e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(config.spi_sz!=size){
 80070e6:	4b14      	ldr	r3, [pc, #80]	; (8007138 <LCD_WriteCommand+0x54>)
{
 80070e8:	0004      	movs	r4, r0
  if(config.spi_sz!=size){
 80070ea:	781b      	ldrb	r3, [r3, #0]
{
 80070ec:	000d      	movs	r5, r1
  if(config.spi_sz!=size){
 80070ee:	b25b      	sxtb	r3, r3
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d002      	beq.n	80070fa <LCD_WriteCommand+0x16>
 80070f4:	2000      	movs	r0, #0
 80070f6:	f7ff ff85 	bl	8007004 <setSPI_Size.part.0>
  LCD_PIN(LCD_DC,RESET);
 80070fa:	27a0      	movs	r7, #160	; 0xa0
 80070fc:	2380      	movs	r3, #128	; 0x80
 80070fe:	05ff      	lsls	r7, r7, #23
 8007100:	02db      	lsls	r3, r3, #11
 8007102:	61bb      	str	r3, [r7, #24]
  LCD_PIN(LCD_CS,RESET);
 8007104:	2380      	movs	r3, #128	; 0x80
 8007106:	035b      	lsls	r3, r3, #13
 8007108:	61bb      	str	r3, [r7, #24]
  HAL_SPI_Transmit(&LCD_HANDLE, cmd, 1, HAL_MAX_DELAY);
 800710a:	2301      	movs	r3, #1
 800710c:	4e0b      	ldr	r6, [pc, #44]	; (800713c <LCD_WriteCommand+0x58>)
 800710e:	2201      	movs	r2, #1
 8007110:	0021      	movs	r1, r4
 8007112:	0030      	movs	r0, r6
 8007114:	425b      	negs	r3, r3
 8007116:	f7fe f95d 	bl	80053d4 <HAL_SPI_Transmit>
  if(argc){
 800711a:	2d00      	cmp	r5, #0
 800711c:	d007      	beq.n	800712e <LCD_WriteCommand+0x4a>
    LCD_PIN(LCD_DC,SET);
 800711e:	2304      	movs	r3, #4
    HAL_SPI_Transmit(&LCD_HANDLE, (cmd+1), argc, HAL_MAX_DELAY);
 8007120:	0030      	movs	r0, r6
    LCD_PIN(LCD_DC,SET);
 8007122:	61bb      	str	r3, [r7, #24]
    HAL_SPI_Transmit(&LCD_HANDLE, (cmd+1), argc, HAL_MAX_DELAY);
 8007124:	b2aa      	uxth	r2, r5
 8007126:	1c61      	adds	r1, r4, #1
 8007128:	3b05      	subs	r3, #5
 800712a:	f7fe f953 	bl	80053d4 <HAL_SPI_Transmit>
  LCD_PIN(LCD_CS,SET);
 800712e:	23a0      	movs	r3, #160	; 0xa0
 8007130:	2210      	movs	r2, #16
 8007132:	05db      	lsls	r3, r3, #23
 8007134:	619a      	str	r2, [r3, #24]
}
 8007136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007138:	20000010 	.word	0x20000010
 800713c:	200003b0 	.word	0x200003b0

08007140 <LCD_SetAddressWindow>:
{
 8007140:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007142:	000d      	movs	r5, r1
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 8007144:	4669      	mov	r1, sp
{
 8007146:	001c      	movs	r4, r3
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 8007148:	232a      	movs	r3, #42	; 0x2a
 800714a:	700b      	strb	r3, [r1, #0]
 800714c:	1203      	asrs	r3, r0, #8
 800714e:	704b      	strb	r3, [r1, #1]
 8007150:	1213      	asrs	r3, r2, #8
 8007152:	7088      	strb	r0, [r1, #2]
 8007154:	70cb      	strb	r3, [r1, #3]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8007156:	4668      	mov	r0, sp
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 8007158:	710a      	strb	r2, [r1, #4]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800715a:	2104      	movs	r1, #4
 800715c:	f7ff ffc2 	bl	80070e4 <LCD_WriteCommand>
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 8007160:	466a      	mov	r2, sp
 8007162:	232b      	movs	r3, #43	; 0x2b
 8007164:	7013      	strb	r3, [r2, #0]
 8007166:	122b      	asrs	r3, r5, #8
 8007168:	7053      	strb	r3, [r2, #1]
 800716a:	1223      	asrs	r3, r4, #8
 800716c:	7095      	strb	r5, [r2, #2]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800716e:	4668      	mov	r0, sp
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 8007170:	70d3      	strb	r3, [r2, #3]
 8007172:	7114      	strb	r4, [r2, #4]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8007174:	2104      	movs	r1, #4
 8007176:	f7ff ffb5 	bl	80070e4 <LCD_WriteCommand>
    uint8_t cmd[] = { CMD_RAMWR };
 800717a:	466a      	mov	r2, sp
 800717c:	4b03      	ldr	r3, [pc, #12]	; (800718c <LCD_SetAddressWindow+0x4c>)
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800717e:	2100      	movs	r1, #0
    uint8_t cmd[] = { CMD_RAMWR };
 8007180:	781b      	ldrb	r3, [r3, #0]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8007182:	4668      	mov	r0, sp
    uint8_t cmd[] = { CMD_RAMWR };
 8007184:	7013      	strb	r3, [r2, #0]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8007186:	f7ff ffad 	bl	80070e4 <LCD_WriteCommand>
}
 800718a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800718c:	0800b2bc 	.word	0x0800b2bc

08007190 <LCD_FillArea>:
void(*LCD_FillArea(int16_t x0, int16_t y0, int16_t x1, int16_t y1))(uint32_t, uint16_t){
 8007190:	b510      	push	{r4, lr}
  if(x0==-1){
 8007192:	1c44      	adds	r4, r0, #1
 8007194:	d105      	bne.n	80071a2 <LCD_FillArea+0x12>
    setDMAMemMode(mem_increase, mode_8bit);
 8007196:	3002      	adds	r0, #2
 8007198:	2100      	movs	r1, #0
 800719a:	f7ff ff53 	bl	8007044 <setDMAMemMode>
 800719e:	2000      	movs	r0, #0
}
 80071a0:	bd10      	pop	{r4, pc}
  LCD_SetAddressWindow(x0,y0,x1,y1);
 80071a2:	f7ff ffcd 	bl	8007140 <LCD_SetAddressWindow>
    setDMAMemMode(mem_fixed, mode_16bit);
 80071a6:	2000      	movs	r0, #0
 80071a8:	2101      	movs	r1, #1
 80071aa:	f7ff ff4b 	bl	8007044 <setDMAMemMode>
  LCD_PIN(LCD_DC,SET);
 80071ae:	23a0      	movs	r3, #160	; 0xa0
 80071b0:	2204      	movs	r2, #4
 80071b2:	05db      	lsls	r3, r3, #23
  return LCD_FillPixels;
 80071b4:	4801      	ldr	r0, [pc, #4]	; (80071bc <LCD_FillArea+0x2c>)
  LCD_PIN(LCD_DC,SET);
 80071b6:	619a      	str	r2, [r3, #24]
  return LCD_FillPixels;
 80071b8:	e7f2      	b.n	80071a0 <LCD_FillArea+0x10>
 80071ba:	46c0      	nop			; (mov r8, r8)
 80071bc:	08006fbd 	.word	0x08006fbd

080071c0 <LCD_DrawPixel>:
  if ((x < 0) || (x > LCD_WIDTH-1) ||
 80071c0:	b283      	uxth	r3, r0
{
 80071c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((x < 0) || (x > LCD_WIDTH-1) ||
 80071c4:	2bef      	cmp	r3, #239	; 0xef
 80071c6:	d81b      	bhi.n	8007200 <LCD_DrawPixel+0x40>
     (y < 0) || (y > LCD_HEIGHT-1))
 80071c8:	2394      	movs	r3, #148	; 0x94
 80071ca:	b28c      	uxth	r4, r1
 80071cc:	005b      	lsls	r3, r3, #1
 80071ce:	429c      	cmp	r4, r3
 80071d0:	d216      	bcs.n	8007200 <LCD_DrawPixel+0x40>
  uint8_t data[2] = {color >> 8, color & 0xFF};
 80071d2:	ac01      	add	r4, sp, #4
 80071d4:	ba52      	rev16	r2, r2
  LCD_SetAddressWindow(x, y, x, y);
 80071d6:	000b      	movs	r3, r1
  uint8_t data[2] = {color >> 8, color & 0xFF};
 80071d8:	8022      	strh	r2, [r4, #0]
  LCD_PIN(LCD_DC,SET);
 80071da:	25a0      	movs	r5, #160	; 0xa0
  LCD_SetAddressWindow(x, y, x, y);
 80071dc:	0002      	movs	r2, r0
 80071de:	f7ff ffaf 	bl	8007140 <LCD_SetAddressWindow>
  LCD_PIN(LCD_DC,SET);
 80071e2:	2304      	movs	r3, #4
 80071e4:	05ed      	lsls	r5, r5, #23
 80071e6:	61ab      	str	r3, [r5, #24]
  LCD_PIN(LCD_CS,RESET);
 80071e8:	2380      	movs	r3, #128	; 0x80
 80071ea:	035b      	lsls	r3, r3, #13
 80071ec:	61ab      	str	r3, [r5, #24]
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 80071ee:	2301      	movs	r3, #1
 80071f0:	2202      	movs	r2, #2
 80071f2:	425b      	negs	r3, r3
 80071f4:	0021      	movs	r1, r4
 80071f6:	4803      	ldr	r0, [pc, #12]	; (8007204 <LCD_DrawPixel+0x44>)
 80071f8:	f7fe f8ec 	bl	80053d4 <HAL_SPI_Transmit>
  LCD_PIN(LCD_CS,SET);
 80071fc:	2310      	movs	r3, #16
 80071fe:	61ab      	str	r3, [r5, #24]
}
 8007200:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8007202:	46c0      	nop			; (mov r8, r8)
 8007204:	200003b0 	.word	0x200003b0

08007208 <LCD_Fill>:
{
 8007208:	b570      	push	{r4, r5, r6, lr}
 800720a:	0004      	movs	r4, r0
 800720c:	a804      	add	r0, sp, #16
 800720e:	8806      	ldrh	r6, [r0, #0]
  uint32_t pixels = (uint32_t)(xEnd-xSta+1)*(yEnd-ySta+1);
 8007210:	1a5d      	subs	r5, r3, r1
 8007212:	1b10      	subs	r0, r2, r4
 8007214:	3001      	adds	r0, #1
 8007216:	3501      	adds	r5, #1
 8007218:	4345      	muls	r5, r0
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 800721a:	b21b      	sxth	r3, r3
 800721c:	b212      	sxth	r2, r2
 800721e:	b220      	sxth	r0, r4
 8007220:	b209      	sxth	r1, r1
 8007222:	f7ff ff8d 	bl	8007140 <LCD_SetAddressWindow>
    setDMAMemMode(mem_fixed, mode_16bit);
 8007226:	2101      	movs	r1, #1
 8007228:	2000      	movs	r0, #0
 800722a:	f7ff ff0b 	bl	8007044 <setDMAMemMode>
  LCD_FillPixels(pixels, color);
 800722e:	0031      	movs	r1, r6
 8007230:	0028      	movs	r0, r5
 8007232:	f7ff fec3 	bl	8006fbc <LCD_FillPixels>
  setDMAMemMode(mem_increase, mode_8bit);
 8007236:	2100      	movs	r1, #0
 8007238:	2001      	movs	r0, #1
 800723a:	f7ff ff03 	bl	8007044 <setDMAMemMode>
}
 800723e:	2000      	movs	r0, #0
 8007240:	bd70      	pop	{r4, r5, r6, pc}

08007242 <LCD_DrawLine>:
int8_t LCD_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 8007242:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007244:	ac06      	add	r4, sp, #24
 8007246:	8824      	ldrh	r4, [r4, #0]
  if(x0==x1){                                   // If horizontal
 8007248:	4290      	cmp	r0, r2
 800724a:	d106      	bne.n	800725a <LCD_DrawLine+0x18>
    if(y0>y1) swap(y0,y1);
 800724c:	4299      	cmp	r1, r3
 800724e:	d80c      	bhi.n	800726a <LCD_DrawLine+0x28>
  LCD_Fill(x0,y0,x1,y1,color);               // Draw using acceleration
 8007250:	9400      	str	r4, [sp, #0]
 8007252:	f7ff ffd9 	bl	8007208 <LCD_Fill>
  return UG_RESULT_OK;
 8007256:	2000      	movs	r0, #0
}
 8007258:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
  else if(y0==y1){                              // If vertical
 800725a:	4299      	cmp	r1, r3
 800725c:	d109      	bne.n	8007272 <LCD_DrawLine+0x30>
    if(x0>x1) swap(x0,x1);
 800725e:	4290      	cmp	r0, r2
 8007260:	d9f6      	bls.n	8007250 <LCD_DrawLine+0xe>
 8007262:	0005      	movs	r5, r0
 8007264:	0010      	movs	r0, r2
 8007266:	002a      	movs	r2, r5
 8007268:	e7f2      	b.n	8007250 <LCD_DrawLine+0xe>
 800726a:	000d      	movs	r5, r1
 800726c:	0019      	movs	r1, r3
 800726e:	002b      	movs	r3, r5
 8007270:	e7ee      	b.n	8007250 <LCD_DrawLine+0xe>
    return UG_RESULT_FAIL;
 8007272:	2001      	movs	r0, #1
 8007274:	4240      	negs	r0, r0
 8007276:	e7ef      	b.n	8007258 <LCD_DrawLine+0x16>

08007278 <LCD_DrawImage>:
{
 8007278:	b570      	push	{r4, r5, r6, lr}
 800727a:	0014      	movs	r4, r2
  if ((x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 800727c:	28ef      	cmp	r0, #239	; 0xef
 800727e:	d825      	bhi.n	80072cc <LCD_DrawImage+0x54>
 8007280:	2394      	movs	r3, #148	; 0x94
 8007282:	005b      	lsls	r3, r3, #1
 8007284:	4299      	cmp	r1, r3
 8007286:	d221      	bcs.n	80072cc <LCD_DrawImage+0x54>
  uint16_t w = bmp->width;
 8007288:	8896      	ldrh	r6, [r2, #4]
  if ((x + w - 1) > LCD_WIDTH-1)
 800728a:	1982      	adds	r2, r0, r6
 800728c:	2af0      	cmp	r2, #240	; 0xf0
 800728e:	dc1d      	bgt.n	80072cc <LCD_DrawImage+0x54>
  uint16_t h = bmp->height;
 8007290:	88e5      	ldrh	r5, [r4, #6]
  if ((y + h - 1) > LCD_HEIGHT-1)
 8007292:	194a      	adds	r2, r1, r5
 8007294:	429a      	cmp	r2, r3
 8007296:	dc19      	bgt.n	80072cc <LCD_DrawImage+0x54>
  if(bmp->bpp!=BMP_BPP_16)
 8007298:	7a23      	ldrb	r3, [r4, #8]
 800729a:	2b10      	cmp	r3, #16
 800729c:	d116      	bne.n	80072cc <LCD_DrawImage+0x54>
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 800729e:	1e4b      	subs	r3, r1, #1
 80072a0:	1e42      	subs	r2, r0, #1
 80072a2:	18eb      	adds	r3, r5, r3
 80072a4:	18b2      	adds	r2, r6, r2
 80072a6:	b21b      	sxth	r3, r3
 80072a8:	b212      	sxth	r2, r2
 80072aa:	b209      	sxth	r1, r1
 80072ac:	b200      	sxth	r0, r0
 80072ae:	f7ff ff47 	bl	8007140 <LCD_SetAddressWindow>
  setDMAMemMode(mem_increase, mode_16bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 80072b2:	2101      	movs	r1, #1
 80072b4:	0008      	movs	r0, r1
 80072b6:	f7ff fec5 	bl	8007044 <setDMAMemMode>
  LCD_WriteData((uint8_t*)bmp->p, w*h);
 80072ba:	0029      	movs	r1, r5
 80072bc:	6820      	ldr	r0, [r4, #0]
 80072be:	4371      	muls	r1, r6
 80072c0:	f7ff fe3a 	bl	8006f38 <LCD_WriteData>
setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 80072c4:	2100      	movs	r1, #0
 80072c6:	2001      	movs	r0, #1
 80072c8:	f7ff febc 	bl	8007044 <setDMAMemMode>
  }
 80072cc:	bd70      	pop	{r4, r5, r6, pc}

080072ce <LCD_setPower>:
{
 80072ce:	b507      	push	{r0, r1, r2, lr}
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 80072d0:	1e43      	subs	r3, r0, #1
 80072d2:	4198      	sbcs	r0, r3
 80072d4:	0003      	movs	r3, r0
 80072d6:	a801      	add	r0, sp, #4
 80072d8:	3328      	adds	r3, #40	; 0x28
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80072da:	2100      	movs	r1, #0
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 80072dc:	7003      	strb	r3, [r0, #0]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80072de:	f7ff ff01 	bl	80070e4 <LCD_WriteCommand>
}
 80072e2:	bd07      	pop	{r0, r1, r2, pc}

080072e4 <LCD_init>:
 * @param none
 * @return none
 */

void LCD_init(void)
{
 80072e4:	b570      	push	{r4, r5, r6, lr}
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
 80072e6:	24a0      	movs	r4, #160	; 0xa0
 80072e8:	2310      	movs	r3, #16
 80072ea:	05e4      	lsls	r4, r4, #23
 80072ec:	61a3      	str	r3, [r4, #24]
#endif
#ifdef LCD_RST
  LCD_PIN(LCD_RST,RESET);
 80072ee:	2380      	movs	r3, #128	; 0x80
 80072f0:	03db      	lsls	r3, r3, #15
  HAL_Delay(1);
 80072f2:	2001      	movs	r0, #1
  LCD_PIN(LCD_RST,RESET);
 80072f4:	61a3      	str	r3, [r4, #24]
  HAL_Delay(1);
 80072f6:	f7fb ffc7 	bl	8003288 <HAL_Delay>
  LCD_PIN(LCD_RST,SET);
 80072fa:	2340      	movs	r3, #64	; 0x40
  HAL_Delay(200);
 80072fc:	20c8      	movs	r0, #200	; 0xc8
  LCD_PIN(LCD_RST,SET);
 80072fe:	61a3      	str	r3, [r4, #24]
  HAL_Delay(200);
 8007300:	f7fb ffc2 	bl	8003288 <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 8007304:	4917      	ldr	r1, [pc, #92]	; (8007364 <LCD_init+0x80>)
 8007306:	4818      	ldr	r0, [pc, #96]	; (8007368 <LCD_init+0x84>)
 8007308:	f000 fb16 	bl	8007938 <UG_Init>
#ifndef LCD_LOCAL_FB
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
 800730c:	2000      	movs	r0, #0
 800730e:	4917      	ldr	r1, [pc, #92]	; (800736c <LCD_init+0x88>)
 8007310:	f000 fe68 	bl	8007fe4 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 8007314:	2001      	movs	r0, #1
 8007316:	4916      	ldr	r1, [pc, #88]	; (8007370 <LCD_init+0x8c>)
 8007318:	f000 fe64 	bl	8007fe4 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 800731c:	2002      	movs	r0, #2
 800731e:	4915      	ldr	r1, [pc, #84]	; (8007374 <LCD_init+0x90>)
 8007320:	f000 fe60 	bl	8007fe4 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 8007324:	4914      	ldr	r1, [pc, #80]	; (8007378 <LCD_init+0x94>)
 8007326:	2003      	movs	r0, #3
 8007328:	f000 fe5c 	bl	8007fe4 <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 800732c:	2000      	movs	r0, #0
 800732e:	f000 fc8d 	bl	8007c4c <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 8007332:	2000      	movs	r0, #0
 8007334:	f000 fc92 	bl	8007c5c <UG_FontSetVSpace>
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8007338:	2500      	movs	r5, #0
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 800733a:	4810      	ldr	r0, [pc, #64]	; (800737c <LCD_init+0x98>)
 800733c:	1c6b      	adds	r3, r5, #1
 800733e:	5d44      	ldrb	r4, [r0, r5]
 8007340:	18c0      	adds	r0, r0, r3
 8007342:	0021      	movs	r1, r4
    i += init_cmd[i]+2;
 8007344:	3402      	adds	r4, #2
 8007346:	192d      	adds	r5, r5, r4
 8007348:	b2ad      	uxth	r5, r5
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 800734a:	f7ff fecb 	bl	80070e4 <LCD_WriteCommand>
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 800734e:	2d4b      	cmp	r5, #75	; 0x4b
 8007350:	d9f3      	bls.n	800733a <LCD_init+0x56>
  }
  UG_FillScreen(C_BLACK);               //  Clear screen
 8007352:	2000      	movs	r0, #0
 8007354:	f000 fb6c 	bl	8007a30 <UG_FillScreen>
  LCD_setPower(ENABLE);
 8007358:	2001      	movs	r0, #1
 800735a:	f7ff ffb8 	bl	80072ce <LCD_setPower>
  UG_Update();
 800735e:	f000 fe4f 	bl	8008000 <UG_Update>
}
 8007362:	bd70      	pop	{r4, r5, r6, pc}
 8007364:	20000014 	.word	0x20000014
 8007368:	20000568 	.word	0x20000568
 800736c:	08007243 	.word	0x08007243
 8007370:	08007209 	.word	0x08007209
 8007374:	08007191 	.word	0x08007191
 8007378:	08007279 	.word	0x08007279
 800737c:	0800b2be 	.word	0x0800b2be

08007380 <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 8007380:	b5f0      	push	{r4, r5, r6, r7, lr}
  UG_U16 skip=0;
  UG_U16 t=0;
  UG_U8 range=0;
  UG_U8 found=0;

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 8007382:	4b46      	ldr	r3, [pc, #280]	; (800749c <_UG_GetCharData+0x11c>)
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 8007384:	b085      	sub	sp, #20
  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 8007386:	681a      	ldr	r2, [r3, #0]
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 8007388:	9101      	str	r1, [sp, #4]
  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 800738a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800738c:	9302      	str	r3, [sp, #8]
 800738e:	4b44      	ldr	r3, [pc, #272]	; (80074a0 <_UG_GetCharData+0x120>)
 8007390:	9c02      	ldr	r4, [sp, #8]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	429c      	cmp	r4, r3
 8007396:	d10d      	bne.n	80073b4 <_UG_GetCharData+0x34>
 8007398:	4b42      	ldr	r3, [pc, #264]	; (80074a4 <_UG_GetCharData+0x124>)
 800739a:	881b      	ldrh	r3, [r3, #0]
 800739c:	4283      	cmp	r3, r0
 800739e:	d109      	bne.n	80073b4 <_UG_GetCharData+0x34>
    if(p){
 80073a0:	2900      	cmp	r1, #0
 80073a2:	d002      	beq.n	80073aa <_UG_GetCharData+0x2a>
      *p=last_p;                                                    // Load char bitmap address
 80073a4:	4b40      	ldr	r3, [pc, #256]	; (80074a8 <_UG_GetCharData+0x128>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	600b      	str	r3, [r1, #0]
    }
    return last_width;
 80073aa:	4b40      	ldr	r3, [pc, #256]	; (80074ac <_UG_GetCharData+0x12c>)
 80073ac:	2000      	movs	r0, #0
 80073ae:	5e18      	ldrsh	r0, [r3, r0]
      *p=last_p;                                                    // Load char bitmap address
    }
    return(last_width);                                             // Return char width
  }
  return -1;                                                        // -1 = char not found
}
 80073b0:	b005      	add	sp, #20
 80073b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 80073b4:	0013      	movs	r3, r2
 80073b6:	332d      	adds	r3, #45	; 0x2d
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d009      	beq.n	80073d2 <_UG_GetCharData+0x52>
    switch ( encoding )
 80073be:	28dc      	cmp	r0, #220	; 0xdc
 80073c0:	d05d      	beq.n	800747e <_UG_GetCharData+0xfe>
 80073c2:	d811      	bhi.n	80073e8 <_UG_GetCharData+0x68>
 80073c4:	28c4      	cmp	r0, #196	; 0xc4
 80073c6:	d05c      	beq.n	8007482 <_UG_GetCharData+0x102>
 80073c8:	d80a      	bhi.n	80073e0 <_UG_GetCharData+0x60>
 80073ca:	28b0      	cmp	r0, #176	; 0xb0
 80073cc:	d05b      	beq.n	8007486 <_UG_GetCharData+0x106>
 80073ce:	28b5      	cmp	r0, #181	; 0xb5
 80073d0:	d05b      	beq.n	800748a <_UG_GetCharData+0x10a>
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 80073d2:	2400      	movs	r4, #0
 80073d4:	8e93      	ldrh	r3, [r2, #52]	; 0x34
 80073d6:	46a4      	mov	ip, r4
 80073d8:	9303      	str	r3, [sp, #12]
 80073da:	0025      	movs	r5, r4
 80073dc:	0023      	movs	r3, r4
 80073de:	e01b      	b.n	8007418 <_UG_GetCharData+0x98>
    switch ( encoding )
 80073e0:	28d6      	cmp	r0, #214	; 0xd6
 80073e2:	d1f6      	bne.n	80073d2 <_UG_GetCharData+0x52>
 80073e4:	2099      	movs	r0, #153	; 0x99
 80073e6:	e7f4      	b.n	80073d2 <_UG_GetCharData+0x52>
 80073e8:	28f6      	cmp	r0, #246	; 0xf6
 80073ea:	d050      	beq.n	800748e <_UG_GetCharData+0x10e>
 80073ec:	28fc      	cmp	r0, #252	; 0xfc
 80073ee:	d050      	beq.n	8007492 <_UG_GetCharData+0x112>
 80073f0:	28e4      	cmp	r0, #228	; 0xe4
 80073f2:	d1ee      	bne.n	80073d2 <_UG_GetCharData+0x52>
       case 0xE4: encoding = 0x84; break; // ä
 80073f4:	2084      	movs	r0, #132	; 0x84
 80073f6:	e7ec      	b.n	80073d2 <_UG_GetCharData+0x52>
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 80073f8:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 80073fa:	0067      	lsls	r7, r4, #1
 80073fc:	5db9      	ldrb	r1, [r7, r6]
 80073fe:	19f6      	adds	r6, r6, r7
 8007400:	7876      	ldrb	r6, [r6, #1]
 8007402:	0236      	lsls	r6, r6, #8
 8007404:	430e      	orrs	r6, r1
 8007406:	ba76      	rev16	r6, r6
 8007408:	b2b7      	uxth	r7, r6
    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 800740a:	0436      	lsls	r6, r6, #16
 800740c:	d50b      	bpl.n	8007426 <_UG_GetCharData+0xa6>
      range=1;                                                      // Set flag
 800740e:	2101      	movs	r1, #1
      start=curr_offset&0x7FFF;                                     // Store range start
 8007410:	047f      	lsls	r7, r7, #17
 8007412:	0c7d      	lsrs	r5, r7, #17
      range=0;
 8007414:	468c      	mov	ip, r1
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 8007416:	3401      	adds	r4, #1
 8007418:	9903      	ldr	r1, [sp, #12]
 800741a:	b2a6      	uxth	r6, r4
 800741c:	42b1      	cmp	r1, r6
 800741e:	d8eb      	bhi.n	80073f8 <_UG_GetCharData+0x78>
  return -1;                                                        // -1 = char not found
 8007420:	2001      	movs	r0, #1
 8007422:	4240      	negs	r0, r0
 8007424:	e7c4      	b.n	80073b0 <_UG_GetCharData+0x30>
    else if(range)                                                  // If range previously set, this is the range end
 8007426:	4661      	mov	r1, ip
 8007428:	2900      	cmp	r1, #0
 800742a:	d022      	beq.n	8007472 <_UG_GetCharData+0xf2>
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 800742c:	4285      	cmp	r5, r0
 800742e:	d8f7      	bhi.n	8007420 <_UG_GetCharData+0xa0>
 8007430:	4287      	cmp	r7, r0
 8007432:	d318      	bcc.n	8007466 <_UG_GetCharData+0xe6>
        skip += (encoding-start);                             // Calculate the skip value
 8007434:	181b      	adds	r3, r3, r0
 8007436:	1b5b      	subs	r3, r3, r5
 8007438:	b29b      	uxth	r3, r3
    last_font =  gui->currentFont.font;                                     // Update cached data
 800743a:	4c19      	ldr	r4, [pc, #100]	; (80074a0 <_UG_GetCharData+0x120>)
 800743c:	9902      	ldr	r1, [sp, #8]
 800743e:	6021      	str	r1, [r4, #0]
    last_encoding = encoding;
 8007440:	4c18      	ldr	r4, [pc, #96]	; (80074a4 <_UG_GetCharData+0x124>)
 8007442:	8020      	strh	r0, [r4, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 8007444:	8e10      	ldrh	r0, [r2, #48]	; 0x30
 8007446:	6c14      	ldr	r4, [r2, #64]	; 0x40
 8007448:	4358      	muls	r0, r3
 800744a:	1824      	adds	r4, r4, r0
 800744c:	4816      	ldr	r0, [pc, #88]	; (80074a8 <_UG_GetCharData+0x128>)
 800744e:	6004      	str	r4, [r0, #0]
    if( gui->currentFont.widths){                                                // If width table available
 8007450:	6b90      	ldr	r0, [r2, #56]	; 0x38
 8007452:	2800      	cmp	r0, #0
 8007454:	d01f      	beq.n	8007496 <_UG_GetCharData+0x116>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 8007456:	5cc0      	ldrb	r0, [r0, r3]
 8007458:	4b14      	ldr	r3, [pc, #80]	; (80074ac <_UG_GetCharData+0x12c>)
 800745a:	8018      	strh	r0, [r3, #0]
    if(p){
 800745c:	9b01      	ldr	r3, [sp, #4]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d0a6      	beq.n	80073b0 <_UG_GetCharData+0x30>
      *p=last_p;                                                    // Load char bitmap address
 8007462:	601c      	str	r4, [r3, #0]
    return(last_width);                                             // Return char width
 8007464:	e7a4      	b.n	80073b0 <_UG_GetCharData+0x30>
      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 8007466:	3301      	adds	r3, #1
 8007468:	1b5b      	subs	r3, r3, r5
 800746a:	19db      	adds	r3, r3, r7
      range=0;
 800746c:	2100      	movs	r1, #0
      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 800746e:	b29b      	uxth	r3, r3
      range=0;
 8007470:	e7d0      	b.n	8007414 <_UG_GetCharData+0x94>
      if(encoding==curr_offset)                                     // If matching the current offset char
 8007472:	4287      	cmp	r7, r0
 8007474:	d0e1      	beq.n	800743a <_UG_GetCharData+0xba>
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 8007476:	d8d3      	bhi.n	8007420 <_UG_GetCharData+0xa0>
      skip++;                                                       // Else, increase skip and keep searching
 8007478:	3301      	adds	r3, #1
 800747a:	b29b      	uxth	r3, r3
 800747c:	e7cb      	b.n	8007416 <_UG_GetCharData+0x96>
       case 0xDC: encoding = 0x9A; break; // Ü
 800747e:	209a      	movs	r0, #154	; 0x9a
 8007480:	e7a7      	b.n	80073d2 <_UG_GetCharData+0x52>
       case 0xC4: encoding = 0x8E; break; // Ä
 8007482:	208e      	movs	r0, #142	; 0x8e
 8007484:	e7a5      	b.n	80073d2 <_UG_GetCharData+0x52>
       case 0xB0: encoding = 0xF8; break; // °
 8007486:	20f8      	movs	r0, #248	; 0xf8
 8007488:	e7a3      	b.n	80073d2 <_UG_GetCharData+0x52>
       case 0xB5: encoding = 0xE6; break; // µ
 800748a:	20e6      	movs	r0, #230	; 0xe6
 800748c:	e7a1      	b.n	80073d2 <_UG_GetCharData+0x52>
       case 0xF6: encoding = 0x94; break; // ö
 800748e:	2094      	movs	r0, #148	; 0x94
 8007490:	e79f      	b.n	80073d2 <_UG_GetCharData+0x52>
       case 0xFC: encoding = 0x81; break; // ü
 8007492:	2081      	movs	r0, #129	; 0x81
 8007494:	e79d      	b.n	80073d2 <_UG_GetCharData+0x52>
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 8007496:	322e      	adds	r2, #46	; 0x2e
 8007498:	7810      	ldrb	r0, [r2, #0]
 800749a:	e7dd      	b.n	8007458 <_UG_GetCharData+0xd8>
 800749c:	200005dc 	.word	0x200005dc
 80074a0:	200005e4 	.word	0x200005e4
 80074a4:	200005e0 	.word	0x200005e0
 80074a8:	200005e8 	.word	0x200005e8
 80074ac:	200005ec 	.word	0x200005ec

080074b0 <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
  if( gui->currentFont.font==font)
 80074b0:	4b1b      	ldr	r3, [pc, #108]	; (8007520 <_UG_FontSelect+0x70>)
void _UG_FontSelect( UG_FONT *font){
 80074b2:	b530      	push	{r4, r5, lr}
  if( gui->currentFont.font==font)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074b8:	4282      	cmp	r2, r0
 80074ba:	d030      	beq.n	800751e <_UG_FontSelect+0x6e>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 80074bc:	217f      	movs	r1, #127	; 0x7f
   gui->currentFont.font = font;                          // Save Font pointer
 80074be:	6458      	str	r0, [r3, #68]	; 0x44
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 80074c0:	7802      	ldrb	r2, [r0, #0]
 80074c2:	400a      	ands	r2, r1
 80074c4:	0019      	movs	r1, r3
 80074c6:	312c      	adds	r1, #44	; 0x2c
 80074c8:	700a      	strb	r2, [r1, #0]
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 80074ca:	7802      	ldrb	r2, [r0, #0]
 80074cc:	09d2      	lsrs	r2, r2, #7
 80074ce:	704a      	strb	r2, [r1, #1]
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 80074d0:	001a      	movs	r2, r3
 80074d2:	7841      	ldrb	r1, [r0, #1]
 80074d4:	322e      	adds	r2, #46	; 0x2e
 80074d6:	7011      	strb	r1, [r2, #0]
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 80074d8:	7881      	ldrb	r1, [r0, #2]
 80074da:	7051      	strb	r1, [r2, #1]
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 80074dc:	7902      	ldrb	r2, [r0, #4]
 80074de:	78c1      	ldrb	r1, [r0, #3]
 80074e0:	0212      	lsls	r2, r2, #8
 80074e2:	430a      	orrs	r2, r1
 80074e4:	ba52      	rev16	r2, r2
 80074e6:	865a      	strh	r2, [r3, #50]	; 0x32
 80074e8:	b291      	uxth	r1, r2
  font+=2;
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 80074ea:	7982      	ldrb	r2, [r0, #6]
 80074ec:	7944      	ldrb	r4, [r0, #5]
 80074ee:	0212      	lsls	r2, r2, #8
 80074f0:	4322      	orrs	r2, r4
 80074f2:	ba52      	rev16	r2, r2
 80074f4:	869a      	strh	r2, [r3, #52]	; 0x34
 80074f6:	b294      	uxth	r4, r2
  font+=2;
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 80074f8:	7a02      	ldrb	r2, [r0, #8]
 80074fa:	79c5      	ldrb	r5, [r0, #7]
 80074fc:	0212      	lsls	r2, r2, #8
 80074fe:	432a      	orrs	r2, r5
 8007500:	ba52      	rev16	r2, r2
 8007502:	861a      	strh	r2, [r3, #48]	; 0x30
  font+=2;
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 8007504:	7a45      	ldrb	r5, [r0, #9]
 8007506:	0002      	movs	r2, r0
     gui->currentFont.widths = font;                      // Save pointer to width table
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 8007508:	2000      	movs	r0, #0
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 800750a:	320a      	adds	r2, #10
 800750c:	4285      	cmp	r5, r0
 800750e:	d001      	beq.n	8007514 <_UG_FontSelect+0x64>
     gui->currentFont.widths = font;                      // Save pointer to width table
 8007510:	0010      	movs	r0, r2
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 8007512:	1852      	adds	r2, r2, r1
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 8007514:	0064      	lsls	r4, r4, #1
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 8007516:	63da      	str	r2, [r3, #60]	; 0x3c
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 8007518:	1912      	adds	r2, r2, r4
 800751a:	6398      	str	r0, [r3, #56]	; 0x38
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 800751c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800751e:	bd30      	pop	{r4, r5, pc}
 8007520:	200005dc 	.word	0x200005dc

08007524 <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 8007524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007526:	b099      	sub	sp, #100	; 0x64
 8007528:	9303      	str	r3, [sp, #12]
 800752a:	ab1e      	add	r3, sp, #120	; 0x78
 800752c:	881b      	ldrh	r3, [r3, #0]
 800752e:	9102      	str	r1, [sp, #8]
 8007530:	930a      	str	r3, [sp, #40]	; 0x28
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 8007532:	4bc6      	ldr	r3, [pc, #792]	; (800784c <_UG_PutChar+0x328>)
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_SIZE, UG_COLOR) = NULL;

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 8007534:	a917      	add	r1, sp, #92	; 0x5c
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 8007536:	681c      	ldr	r4, [r3, #0]
{
 8007538:	0017      	movs	r7, r2
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 800753a:	0023      	movs	r3, r4
 800753c:	3348      	adds	r3, #72	; 0x48
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	9305      	str	r3, [sp, #20]
 8007542:	0023      	movs	r3, r4
 8007544:	3368      	adds	r3, #104	; 0x68
 8007546:	781d      	ldrb	r5, [r3, #0]
   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 8007548:	f7ff ff1a 	bl	8007380 <_UG_GetCharData>
 800754c:	0003      	movs	r3, r0
 800754e:	900c      	str	r0, [sp, #48]	; 0x30
 8007550:	9004      	str	r0, [sp, #16]
   if(actual_char_width==-1)
 8007552:	3301      	adds	r3, #1
 8007554:	d04b      	beq.n	80075ee <_UG_PutChar+0xca>
        return -1;                                     // Char not presnt in the font

   bn =  gui->currentFont.char_width;
 8007556:	0023      	movs	r3, r4
 8007558:	332e      	adds	r3, #46	; 0x2e
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	b29a      	uxth	r2, r3
   if ( !bn ){
 800755e:	2b00      	cmp	r3, #0
 8007560:	d100      	bne.n	8007564 <_UG_PutChar+0x40>
 8007562:	e16d      	b.n	8007840 <_UG_PutChar+0x31c>
     return 0;
   }
   bn >>= 3;
 8007564:	08d2      	lsrs	r2, r2, #3
 8007566:	920f      	str	r2, [sp, #60]	; 0x3c
   if (  gui->currentFont.char_width % 8 ) bn++;
 8007568:	075b      	lsls	r3, r3, #29
 800756a:	d002      	beq.n	8007572 <_UG_PutChar+0x4e>
 800756c:	0013      	movs	r3, r2
 800756e:	3301      	adds	r3, #1
 8007570:	930f      	str	r3, [sp, #60]	; 0x3c
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 8007572:	2302      	movs	r3, #2
 8007574:	002a      	movs	r2, r5
 8007576:	401a      	ands	r2, r3
 8007578:	920b      	str	r2, [sp, #44]	; 0x2c
   void(*push_pixels)(UG_SIZE, UG_COLOR) = NULL;
 800757a:	2200      	movs	r2, #0
 800757c:	9201      	str	r2, [sp, #4]

   /* Is hardware acceleration available? */
   if (driver)
 800757e:	421d      	tst	r5, r3
 8007580:	d00f      	beq.n	80075a2 <_UG_PutChar+0x7e>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 8007582:	0023      	movs	r3, r4
 8007584:	332f      	adds	r3, #47	; 0x2f
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	9a02      	ldr	r2, [sp, #8]
 800758a:	9904      	ldr	r1, [sp, #16]
 800758c:	3b01      	subs	r3, #1
 800758e:	3a01      	subs	r2, #1
 8007590:	1852      	adds	r2, r2, r1
 8007592:	19db      	adds	r3, r3, r7
 8007594:	0039      	movs	r1, r7
 8007596:	6e64      	ldr	r4, [r4, #100]	; 0x64
 8007598:	9802      	ldr	r0, [sp, #8]
 800759a:	b21b      	sxth	r3, r3
 800759c:	b212      	sxth	r2, r2
 800759e:	47a0      	blx	r4
 80075a0:	9001      	str	r0, [sp, #4]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 80075a2:	4baa      	ldr	r3, [pc, #680]	; (800784c <_UG_PutChar+0x328>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	332c      	adds	r3, #44	; 0x2c
 80075a8:	781d      	ldrb	r5, [r3, #0]
 80075aa:	2d00      	cmp	r5, #0
 80075ac:	d000      	beq.n	80075b0 <_UG_PutChar+0x8c>
 80075ae:	e0fc      	b.n	80077aa <_UG_PutChar+0x286>
 80075b0:	b2bb      	uxth	r3, r7
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 80075b2:	002e      	movs	r6, r5
 80075b4:	002f      	movs	r7, r5
 80075b6:	9311      	str	r3, [sp, #68]	; 0x44
   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 80075b8:	9307      	str	r3, [sp, #28]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 80075ba:	9508      	str	r5, [sp, #32]
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 80075bc:	4ba3      	ldr	r3, [pc, #652]	; (800784c <_UG_PutChar+0x328>)
 80075be:	9911      	ldr	r1, [sp, #68]	; 0x44
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	9b07      	ldr	r3, [sp, #28]
 80075c4:	322f      	adds	r2, #47	; 0x2f
 80075c6:	1a5b      	subs	r3, r3, r1
 80075c8:	7812      	ldrb	r2, [r2, #0]
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d900      	bls.n	80075d2 <_UG_PutChar+0xae>
 80075d0:	e0cc      	b.n	800776c <_UG_PutChar+0x248>
           b >>= 1;
           c++;
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 80075d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d00a      	beq.n	80075ee <_UG_PutChar+0xca>
       if(bpixels && !trans)
 80075d8:	2d00      	cmp	r5, #0
 80075da:	d100      	bne.n	80075de <_UG_PutChar+0xba>
 80075dc:	e0c9      	b.n	8007772 <_UG_PutChar+0x24e>
 80075de:	9b05      	ldr	r3, [sp, #20]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d000      	beq.n	80075e6 <_UG_PutChar+0xc2>
 80075e4:	e134      	b.n	8007850 <_UG_PutChar+0x32c>
       {
         push_pixels(bpixels,bc);
 80075e6:	0028      	movs	r0, r5
 80075e8:	990a      	ldr	r1, [sp, #40]	; 0x28
       }
       else if(fpixels)
       {
         if(!trans)
         {
           push_pixels(fpixels,fc);
 80075ea:	9b01      	ldr	r3, [sp, #4]
 80075ec:	4798      	blx	r3
       data +=  gui->currentFont.char_width - actual_char_width;
     }
   }
   #endif
   return (actual_char_width);
}
 80075ee:	980c      	ldr	r0, [sp, #48]	; 0x30
 80075f0:	b019      	add	sp, #100	; 0x64
 80075f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
         b = *data++;
 80075f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80075f6:	1c5a      	adds	r2, r3, #1
 80075f8:	9217      	str	r2, [sp, #92]	; 0x5c
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	9310      	str	r3, [sp, #64]	; 0x40
         for( k=0;(k<8) && c<actual_char_width; k++ )
 80075fe:	9b06      	ldr	r3, [sp, #24]
 8007600:	3308      	adds	r3, #8
 8007602:	b29b      	uxth	r3, r3
 8007604:	9315      	str	r3, [sp, #84]	; 0x54
 8007606:	9b04      	ldr	r3, [sp, #16]
 8007608:	9a06      	ldr	r2, [sp, #24]
 800760a:	4293      	cmp	r3, r2
 800760c:	dd1e      	ble.n	800764c <_UG_PutChar+0x128>
           if(b & 0x01 )                    // Foreground pixel detected
 800760e:	2201      	movs	r2, #1
 8007610:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007612:	4213      	tst	r3, r2
 8007614:	d041      	beq.n	800769a <_UG_PutChar+0x176>
             if(driver)
 8007616:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007618:	2b00      	cmp	r3, #0
 800761a:	d030      	beq.n	800767e <_UG_PutChar+0x15a>
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 800761c:	2d00      	cmp	r5, #0
 800761e:	d022      	beq.n	8007666 <_UG_PutChar+0x142>
 8007620:	9b05      	ldr	r3, [sp, #20]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d000      	beq.n	8007628 <_UG_PutChar+0x104>
 8007626:	e10d      	b.n	8007844 <_UG_PutChar+0x320>
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 8007628:	0028      	movs	r0, r5
 800762a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800762c:	9b01      	ldr	r3, [sp, #4]
 800762e:	4798      	blx	r3
                 bpixels=0;
 8007630:	9d05      	ldr	r5, [sp, #20]
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 8007632:	3601      	adds	r6, #1
 8007634:	b2b6      	uxth	r6, r6
           b >>= 1;
 8007636:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007638:	085b      	lsrs	r3, r3, #1
 800763a:	9310      	str	r3, [sp, #64]	; 0x40
           c++;
 800763c:	9b06      	ldr	r3, [sp, #24]
 800763e:	3301      	adds	r3, #1
 8007640:	b29a      	uxth	r2, r3
 8007642:	b21b      	sxth	r3, r3
 8007644:	9306      	str	r3, [sp, #24]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8007646:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007648:	4293      	cmp	r3, r2
 800764a:	d1dc      	bne.n	8007606 <_UG_PutChar+0xe2>
       for( i=0;i<bn;i++ )
 800764c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800764e:	3301      	adds	r3, #1
 8007650:	b29b      	uxth	r3, r3
 8007652:	930e      	str	r3, [sp, #56]	; 0x38
 8007654:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007656:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007658:	4293      	cmp	r3, r2
 800765a:	d1cb      	bne.n	80075f4 <_UG_PutChar+0xd0>
     for( j=0;j< gui->currentFont.char_height;j++ )
 800765c:	9b07      	ldr	r3, [sp, #28]
 800765e:	3301      	adds	r3, #1
 8007660:	b29b      	uxth	r3, r3
 8007662:	9307      	str	r3, [sp, #28]
 8007664:	e7aa      	b.n	80075bc <_UG_PutChar+0x98>
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 8007666:	2e00      	cmp	r6, #0
 8007668:	d1e3      	bne.n	8007632 <_UG_PutChar+0x10e>
 800766a:	9b05      	ldr	r3, [sp, #20]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d0e0      	beq.n	8007632 <_UG_PutChar+0x10e>
                 x0=x+c;
 8007670:	9b02      	ldr	r3, [sp, #8]
 8007672:	9a06      	ldr	r2, [sp, #24]
                 y0=y+j;
 8007674:	9f07      	ldr	r7, [sp, #28]
 8007676:	189b      	adds	r3, r3, r2
 8007678:	b29b      	uxth	r3, r3
 800767a:	9308      	str	r3, [sp, #32]
 800767c:	e7d9      	b.n	8007632 <_UG_PutChar+0x10e>
               gui->device->pset(x+c,y+j,fc);
 800767e:	466b      	mov	r3, sp
 8007680:	9a06      	ldr	r2, [sp, #24]
 8007682:	211c      	movs	r1, #28
 8007684:	5e59      	ldrsh	r1, [r3, r1]
 8007686:	9b02      	ldr	r3, [sp, #8]
 8007688:	1898      	adds	r0, r3, r2
 800768a:	4b70      	ldr	r3, [pc, #448]	; (800784c <_UG_PutChar+0x328>)
 800768c:	9a03      	ldr	r2, [sp, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	b200      	sxth	r0, r0
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	685b      	ldr	r3, [r3, #4]
               gui->device->pset(x+c,y+j,bc);
 8007696:	4798      	blx	r3
 8007698:	e7cd      	b.n	8007636 <_UG_PutChar+0x112>
             if(driver)
 800769a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800769c:	2b00      	cmp	r3, #0
 800769e:	d054      	beq.n	800774a <_UG_PutChar+0x226>
               if(fpixels)                  // Draw accumulated foreground pixels
 80076a0:	2e00      	cmp	r6, #0
 80076a2:	d039      	beq.n	8007718 <_UG_PutChar+0x1f4>
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 80076a4:	9b05      	ldr	r3, [sp, #20]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d032      	beq.n	8007710 <_UG_PutChar+0x1ec>
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 80076aa:	466b      	mov	r3, sp
 80076ac:	9a04      	ldr	r2, [sp, #16]
 80076ae:	891b      	ldrh	r3, [r3, #8]
 80076b0:	9314      	str	r3, [sp, #80]	; 0x50
 80076b2:	189b      	adds	r3, r3, r2
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	930d      	str	r3, [sp, #52]	; 0x34
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 80076b8:	3b01      	subs	r3, #1
 80076ba:	b21b      	sxth	r3, r3
 80076bc:	9313      	str	r3, [sp, #76]	; 0x4c
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 80076be:	9b08      	ldr	r3, [sp, #32]
 80076c0:	9309      	str	r3, [sp, #36]	; 0x24
 80076c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 80076c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 80076c6:	9308      	str	r3, [sp, #32]
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 80076c8:	4b60      	ldr	r3, [pc, #384]	; (800784c <_UG_PutChar+0x328>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076ce:	9312      	str	r3, [sp, #72]	; 0x48
 80076d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076d2:	b21b      	sxth	r3, r3
 80076d4:	9301      	str	r3, [sp, #4]
 80076d6:	b23b      	sxth	r3, r7
 80076d8:	001c      	movs	r4, r3
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 80076da:	9b02      	ldr	r3, [sp, #8]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d004      	beq.n	80076ea <_UG_PutChar+0x1c6>
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 80076e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076e2:	1a9b      	subs	r3, r3, r2
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	42b3      	cmp	r3, r6
 80076e8:	d91a      	bls.n	8007720 <_UG_PutChar+0x1fc>
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 80076ea:	9904      	ldr	r1, [sp, #16]
 80076ec:	0030      	movs	r0, r6
 80076ee:	f7f8 fdad 	bl	800024c <__divsi3>
 80076f2:	1838      	adds	r0, r7, r0
 80076f4:	0021      	movs	r1, r4
 80076f6:	b203      	sxth	r3, r0
 80076f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80076fa:	9801      	ldr	r0, [sp, #4]
 80076fc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80076fe:	47a0      	blx	r4
 8007700:	9001      	str	r0, [sp, #4]
                       push_pixels(fpixels,fc);
 8007702:	9b01      	ldr	r3, [sp, #4]
 8007704:	0030      	movs	r0, r6
 8007706:	9903      	ldr	r1, [sp, #12]
 8007708:	4798      	blx	r3
 800770a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800770c:	9308      	str	r3, [sp, #32]
 800770e:	e003      	b.n	8007718 <_UG_PutChar+0x1f4>
                   push_pixels(fpixels,fc);
 8007710:	0030      	movs	r0, r6
 8007712:	9903      	ldr	r1, [sp, #12]
 8007714:	9b01      	ldr	r3, [sp, #4]
 8007716:	4798      	blx	r3
               bpixels++;
 8007718:	3501      	adds	r5, #1
 800771a:	2600      	movs	r6, #0
 800771c:	b2ad      	uxth	r5, r5
 800771e:	e78a      	b.n	8007636 <_UG_PutChar+0x112>
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8007720:	0023      	movs	r3, r4
 8007722:	0021      	movs	r1, r4
 8007724:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007726:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8007728:	9801      	ldr	r0, [sp, #4]
 800772a:	47a0      	blx	r4
 800772c:	9001      	str	r0, [sp, #4]
                       push_pixels(fpixels,fc);
 800772e:	9b01      	ldr	r3, [sp, #4]
 8007730:	0030      	movs	r0, r6
 8007732:	9903      	ldr	r1, [sp, #12]
 8007734:	4798      	blx	r3
                       fpixels -= width;
 8007736:	9b09      	ldr	r3, [sp, #36]	; 0x24
                       y0++;
 8007738:	3701      	adds	r7, #1
 800773a:	199c      	adds	r4, r3, r6
                       fpixels -= width;
 800773c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                       y0++;
 800773e:	b2bf      	uxth	r7, r7
                       fpixels -= width;
 8007740:	1ae4      	subs	r4, r4, r3
 8007742:	b2a6      	uxth	r6, r4
                   while(fpixels)
 8007744:	2e00      	cmp	r6, #0
 8007746:	d1ba      	bne.n	80076be <_UG_PutChar+0x19a>
 8007748:	e7e6      	b.n	8007718 <_UG_PutChar+0x1f4>
             else if(!trans)                           // Not accelerated output
 800774a:	9b05      	ldr	r3, [sp, #20]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d000      	beq.n	8007752 <_UG_PutChar+0x22e>
 8007750:	e771      	b.n	8007636 <_UG_PutChar+0x112>
               gui->device->pset(x+c,y+j,bc);
 8007752:	466b      	mov	r3, sp
 8007754:	9a06      	ldr	r2, [sp, #24]
 8007756:	211c      	movs	r1, #28
 8007758:	5e59      	ldrsh	r1, [r3, r1]
 800775a:	9b02      	ldr	r3, [sp, #8]
 800775c:	1898      	adds	r0, r3, r2
 800775e:	4b3b      	ldr	r3, [pc, #236]	; (800784c <_UG_PutChar+0x328>)
 8007760:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	b200      	sxth	r0, r0
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	e794      	b.n	8007696 <_UG_PutChar+0x172>
       c=0;
 800776c:	2300      	movs	r3, #0
 800776e:	9306      	str	r3, [sp, #24]
 8007770:	e76f      	b.n	8007652 <_UG_PutChar+0x12e>
       else if(fpixels)
 8007772:	2e00      	cmp	r6, #0
 8007774:	d100      	bne.n	8007778 <_UG_PutChar+0x254>
 8007776:	e73a      	b.n	80075ee <_UG_PutChar+0xca>
         if(!trans)
 8007778:	9b05      	ldr	r3, [sp, #20]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d16b      	bne.n	8007856 <_UG_PutChar+0x332>
           push_pixels(fpixels,fc);
 800777e:	0030      	movs	r0, r6
 8007780:	9903      	ldr	r1, [sp, #12]
 8007782:	e732      	b.n	80075ea <_UG_PutChar+0xc6>
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8007784:	002b      	movs	r3, r5
 8007786:	0029      	movs	r1, r5
 8007788:	9a05      	ldr	r2, [sp, #20]
 800778a:	9807      	ldr	r0, [sp, #28]
 800778c:	9d06      	ldr	r5, [sp, #24]
 800778e:	47a8      	blx	r5
               push_pixels(fpixels,fc);
 8007790:	9903      	ldr	r1, [sp, #12]
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8007792:	0003      	movs	r3, r0
               push_pixels(fpixels,fc);
 8007794:	0030      	movs	r0, r6
 8007796:	4798      	blx	r3
               fpixels -= width;
 8007798:	9b01      	ldr	r3, [sp, #4]
 800779a:	19a4      	adds	r4, r4, r6
 800779c:	1ae4      	subs	r4, r4, r3
               y0++;
 800779e:	3701      	adds	r7, #1
               fpixels -= width;
 80077a0:	b2a6      	uxth	r6, r4
               y0++;
 80077a2:	b2bf      	uxth	r7, r7
           while(fpixels)
 80077a4:	2e00      	cmp	r6, #0
 80077a6:	d160      	bne.n	800786a <_UG_PutChar+0x346>
 80077a8:	e721      	b.n	80075ee <_UG_PutChar+0xca>
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 80077aa:	2d01      	cmp	r5, #1
 80077ac:	d000      	beq.n	80077b0 <_UG_PutChar+0x28c>
 80077ae:	e71e      	b.n	80075ee <_UG_PutChar+0xca>
     for( j=0;j< gui->currentFont.char_height;j++ )
 80077b0:	2400      	movs	r4, #0
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 80077b2:	25ff      	movs	r5, #255	; 0xff
 80077b4:	e030      	b.n	8007818 <_UG_PutChar+0x2f4>
         b = *data++;
 80077b6:	1c5a      	adds	r2, r3, #1
 80077b8:	9217      	str	r2, [sp, #92]	; 0x5c
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 80077ba:	781a      	ldrb	r2, [r3, #0]
 80077bc:	2380      	movs	r3, #128	; 0x80
 80077be:	005b      	lsls	r3, r3, #1
 80077c0:	1a99      	subs	r1, r3, r2
 80077c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80077c4:	9b03      	ldr	r3, [sp, #12]
 80077c6:	4028      	ands	r0, r5
 80077c8:	402b      	ands	r3, r5
 80077ca:	4348      	muls	r0, r1
 80077cc:	4353      	muls	r3, r2
 80077ce:	181b      	adds	r3, r3, r0
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 80077d0:	9803      	ldr	r0, [sp, #12]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 80077d2:	121b      	asrs	r3, r3, #8
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 80077d4:	43a8      	bics	r0, r5
 80077d6:	4342      	muls	r2, r0
 80077d8:	980a      	ldr	r0, [sp, #40]	; 0x28
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 80077da:	402b      	ands	r3, r5
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 80077dc:	43a8      	bics	r0, r5
 80077de:	4341      	muls	r1, r0
 80077e0:	1852      	adds	r2, r2, r1
 80077e2:	1212      	asrs	r2, r2, #8
 80077e4:	43aa      	bics	r2, r5
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 80077e6:	431a      	orrs	r2, r3
         if(driver)
 80077e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 80077ea:	b292      	uxth	r2, r2
         if(driver)
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d01c      	beq.n	800782a <_UG_PutChar+0x306>
           push_pixels(1,color);                                                          // Accelerated output
 80077f0:	0011      	movs	r1, r2
 80077f2:	2001      	movs	r0, #1
 80077f4:	9b01      	ldr	r3, [sp, #4]
 80077f6:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 80077f8:	3601      	adds	r6, #1
 80077fa:	b2b6      	uxth	r6, r6
 80077fc:	9a04      	ldr	r2, [sp, #16]
         b = *data++;
 80077fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
       for( i=0;i<actual_char_width;i++ )
 8007800:	4296      	cmp	r6, r2
 8007802:	dbd8      	blt.n	80077b6 <_UG_PutChar+0x292>
       data +=  gui->currentFont.char_width - actual_char_width;
 8007804:	4a11      	ldr	r2, [pc, #68]	; (800784c <_UG_PutChar+0x328>)
 8007806:	9904      	ldr	r1, [sp, #16]
 8007808:	6812      	ldr	r2, [r2, #0]
     for( j=0;j< gui->currentFont.char_height;j++ )
 800780a:	3401      	adds	r4, #1
       data +=  gui->currentFont.char_width - actual_char_width;
 800780c:	322e      	adds	r2, #46	; 0x2e
 800780e:	7812      	ldrb	r2, [r2, #0]
     for( j=0;j< gui->currentFont.char_height;j++ )
 8007810:	b2a4      	uxth	r4, r4
       data +=  gui->currentFont.char_width - actual_char_width;
 8007812:	1a52      	subs	r2, r2, r1
 8007814:	189b      	adds	r3, r3, r2
 8007816:	9317      	str	r3, [sp, #92]	; 0x5c
     for( j=0;j< gui->currentFont.char_height;j++ )
 8007818:	4b0c      	ldr	r3, [pc, #48]	; (800784c <_UG_PutChar+0x328>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	332f      	adds	r3, #47	; 0x2f
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	42a3      	cmp	r3, r4
 8007822:	d800      	bhi.n	8007826 <_UG_PutChar+0x302>
 8007824:	e6e3      	b.n	80075ee <_UG_PutChar+0xca>
       for( i=0;i<actual_char_width;i++ )
 8007826:	2600      	movs	r6, #0
 8007828:	e7e8      	b.n	80077fc <_UG_PutChar+0x2d8>
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 800782a:	9b02      	ldr	r3, [sp, #8]
 800782c:	19e1      	adds	r1, r4, r7
 800782e:	18f0      	adds	r0, r6, r3
 8007830:	4b06      	ldr	r3, [pc, #24]	; (800784c <_UG_PutChar+0x328>)
 8007832:	b209      	sxth	r1, r1
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	b200      	sxth	r0, r0
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	4798      	blx	r3
 800783e:	e7db      	b.n	80077f8 <_UG_PutChar+0x2d4>
     return 0;
 8007840:	920c      	str	r2, [sp, #48]	; 0x30
 8007842:	e6d4      	b.n	80075ee <_UG_PutChar+0xca>
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 8007844:	2e00      	cmp	r6, #0
 8007846:	d100      	bne.n	800784a <_UG_PutChar+0x326>
 8007848:	e712      	b.n	8007670 <_UG_PutChar+0x14c>
 800784a:	e6f2      	b.n	8007632 <_UG_PutChar+0x10e>
 800784c:	200005dc 	.word	0x200005dc
       else if(fpixels)
 8007850:	2e00      	cmp	r6, #0
 8007852:	d100      	bne.n	8007856 <_UG_PutChar+0x332>
 8007854:	e6cb      	b.n	80075ee <_UG_PutChar+0xca>
             UG_U16 width = (x+actual_char_width)-x0;
 8007856:	466b      	mov	r3, sp
 8007858:	9a04      	ldr	r2, [sp, #16]
 800785a:	891b      	ldrh	r3, [r3, #8]
 800785c:	9309      	str	r3, [sp, #36]	; 0x24
 800785e:	189b      	adds	r3, r3, r2
 8007860:	b29b      	uxth	r3, r3
 8007862:	9301      	str	r3, [sp, #4]
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8007864:	3b01      	subs	r3, #1
 8007866:	b21b      	sxth	r3, r3
 8007868:	9305      	str	r3, [sp, #20]
             UG_U16 width = (x+actual_char_width)-x0;
 800786a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800786c:	9c08      	ldr	r4, [sp, #32]
 800786e:	9308      	str	r3, [sp, #32]
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8007870:	4b0f      	ldr	r3, [pc, #60]	; (80078b0 <_UG_PutChar+0x38c>)
 8007872:	b23d      	sxth	r5, r7
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007878:	9306      	str	r3, [sp, #24]
 800787a:	b223      	sxth	r3, r4
 800787c:	9307      	str	r3, [sp, #28]
             if(x0==x || fpixels<width)
 800787e:	9b02      	ldr	r3, [sp, #8]
 8007880:	429c      	cmp	r4, r3
 8007882:	d005      	beq.n	8007890 <_UG_PutChar+0x36c>
             UG_U16 width = (x+actual_char_width)-x0;
 8007884:	9b01      	ldr	r3, [sp, #4]
 8007886:	1b1b      	subs	r3, r3, r4
             if(x0==x || fpixels<width)
 8007888:	b29b      	uxth	r3, r3
 800788a:	42b3      	cmp	r3, r6
 800788c:	d800      	bhi.n	8007890 <_UG_PutChar+0x36c>
 800788e:	e779      	b.n	8007784 <_UG_PutChar+0x260>
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8007890:	9904      	ldr	r1, [sp, #16]
 8007892:	0030      	movs	r0, r6
 8007894:	f7f8 fcda 	bl	800024c <__divsi3>
 8007898:	1838      	adds	r0, r7, r0
 800789a:	b203      	sxth	r3, r0
 800789c:	0029      	movs	r1, r5
 800789e:	9a05      	ldr	r2, [sp, #20]
 80078a0:	9807      	ldr	r0, [sp, #28]
 80078a2:	9c06      	ldr	r4, [sp, #24]
 80078a4:	47a0      	blx	r4
               push_pixels(fpixels,fc);
 80078a6:	9903      	ldr	r1, [sp, #12]
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 80078a8:	0003      	movs	r3, r0
               push_pixels(fpixels,fc);
 80078aa:	0030      	movs	r0, r6
 80078ac:	e69e      	b.n	80075ec <_UG_PutChar+0xc8>
 80078ae:	46c0      	nop			; (mov r8, r8)
 80078b0:	200005dc 	.word	0x200005dc

080078b4 <_UG_DecodeUTF8>:
  if ( c < 0x80 )                 // Fast detection for simple ASCII
 80078b4:	2200      	movs	r2, #0
UG_CHAR _UG_DecodeUTF8(char **str) {
 80078b6:	b5f0      	push	{r4, r5, r6, r7, lr}
  char c=**str;
 80078b8:	6803      	ldr	r3, [r0, #0]
UG_CHAR _UG_DecodeUTF8(char **str) {
 80078ba:	0001      	movs	r1, r0
  if ( c < 0x80 )                 // Fast detection for simple ASCII
 80078bc:	569a      	ldrsb	r2, [r3, r2]
  char c=**str;
 80078be:	7818      	ldrb	r0, [r3, #0]
  if ( c < 0x80 )                 // Fast detection for simple ASCII
 80078c0:	2a00      	cmp	r2, #0
 80078c2:	db31      	blt.n	8007928 <_UG_DecodeUTF8+0x74>
    *str = *str+1;
 80078c4:	3301      	adds	r3, #1
 80078c6:	600b      	str	r3, [r1, #0]
    return c;
 80078c8:	b280      	uxth	r0, r0
}
 80078ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *str = *str+1;
 80078cc:	3301      	adds	r3, #1
 80078ce:	600b      	str	r3, [r1, #0]
    if ( bytes_left == 0 )
 80078d0:	2e00      	cmp	r6, #0
 80078d2:	d11f      	bne.n	8007914 <_UG_DecodeUTF8+0x60>
      if ( c < 0xe0 )             // 2 byte sequence
 80078d4:	2adf      	cmp	r2, #223	; 0xdf
 80078d6:	d808      	bhi.n	80078ea <_UG_DecodeUTF8+0x36>
        c &= 0x01f;
 80078d8:	201f      	movs	r0, #31
        bytes_left = 1;
 80078da:	0026      	movs	r6, r4
        c &= 0x01f;
 80078dc:	4010      	ands	r0, r2
      encoding = c;
 80078de:	b280      	uxth	r0, r0
  while(**str)
 80078e0:	680b      	ldr	r3, [r1, #0]
 80078e2:	781a      	ldrb	r2, [r3, #0]
 80078e4:	2a00      	cmp	r2, #0
 80078e6:	d1f1      	bne.n	80078cc <_UG_DecodeUTF8+0x18>
 80078e8:	e7ef      	b.n	80078ca <_UG_DecodeUTF8+0x16>
      else if ( c < 0xf0 )        // 3 byte sequence
 80078ea:	2aef      	cmp	r2, #239	; 0xef
 80078ec:	d803      	bhi.n	80078f6 <_UG_DecodeUTF8+0x42>
        c &= 15;
 80078ee:	200f      	movs	r0, #15
        bytes_left = 2;
 80078f0:	2602      	movs	r6, #2
        c &= 15;
 80078f2:	4010      	ands	r0, r2
 80078f4:	e7f3      	b.n	80078de <_UG_DecodeUTF8+0x2a>
      else if ( c < 0xf8 )        // 4 byte sequence
 80078f6:	2af7      	cmp	r2, #247	; 0xf7
 80078f8:	d803      	bhi.n	8007902 <_UG_DecodeUTF8+0x4e>
        c &= 7;
 80078fa:	2007      	movs	r0, #7
        bytes_left = 3;
 80078fc:	002e      	movs	r6, r5
        c &= 7;
 80078fe:	4010      	ands	r0, r2
 8007900:	e7ed      	b.n	80078de <_UG_DecodeUTF8+0x2a>
        c &= 1;
 8007902:	0010      	movs	r0, r2
        bytes_left = 5;
 8007904:	003e      	movs	r6, r7
        c &= 1;
 8007906:	4020      	ands	r0, r4
      else if ( c < 0xfc )        // 5 byte sequence
 8007908:	2afb      	cmp	r2, #251	; 0xfb
 800790a:	d8e8      	bhi.n	80078de <_UG_DecodeUTF8+0x2a>
        c &= 3;
 800790c:	402a      	ands	r2, r5
 800790e:	0010      	movs	r0, r2
        bytes_left = 4;
 8007910:	2604      	movs	r6, #4
 8007912:	e7e4      	b.n	80078de <_UG_DecodeUTF8+0x2a>
      encoding |= (c & 0x3F);
 8007914:	4663      	mov	r3, ip
      encoding<<=6;
 8007916:	0180      	lsls	r0, r0, #6
      if ( --bytes_left == 0 )
 8007918:	3e01      	subs	r6, #1
      encoding<<=6;
 800791a:	b280      	uxth	r0, r0
      encoding |= (c & 0x3F);
 800791c:	401a      	ands	r2, r3
      if ( --bytes_left == 0 )
 800791e:	b2f6      	uxtb	r6, r6
      encoding |= (c & 0x3F);
 8007920:	4310      	orrs	r0, r2
      if ( --bytes_left == 0 )
 8007922:	2e00      	cmp	r6, #0
 8007924:	d1dc      	bne.n	80078e0 <_UG_DecodeUTF8+0x2c>
 8007926:	e7d0      	b.n	80078ca <_UG_DecodeUTF8+0x16>
  UG_CHAR encoding=0;
 8007928:	2000      	movs	r0, #0
      encoding |= (c & 0x3F);
 800792a:	233f      	movs	r3, #63	; 0x3f
  UG_U8 bytes_left=0;
 800792c:	0006      	movs	r6, r0
      encoding |= (c & 0x3F);
 800792e:	469c      	mov	ip, r3
        c &= 1;
 8007930:	2401      	movs	r4, #1
        bytes_left = 5;
 8007932:	2705      	movs	r7, #5
        c &= 3;
 8007934:	2503      	movs	r5, #3
 8007936:	e7d3      	b.n	80078e0 <_UG_DecodeUTF8+0x2c>

08007938 <UG_Init>:
{
 8007938:	0003      	movs	r3, r0
   g->console.x_start = 4;
 800793a:	4a18      	ldr	r2, [pc, #96]	; (800799c <UG_Init+0x64>)
{
 800793c:	b510      	push	{r4, lr}
   g->console.x_start = 4;
 800793e:	61c2      	str	r2, [r0, #28]
   g->device = device;
 8007940:	6001      	str	r1, [r0, #0]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
 8007942:	8808      	ldrh	r0, [r1, #0]
   g->desktop_color = C_DESKTOP_COLOR;
 8007944:	4c16      	ldr	r4, [pc, #88]	; (80079a0 <UG_Init+0x68>)
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
 8007946:	3805      	subs	r0, #5
 8007948:	b200      	sxth	r0, r0
 800794a:	8418      	strh	r0, [r3, #32]
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
 800794c:	884a      	ldrh	r2, [r1, #2]
   g->console.x_pos = g->console.x_end;
 800794e:	8318      	strh	r0, [r3, #24]
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
 8007950:	3a05      	subs	r2, #5
 8007952:	b212      	sxth	r2, r2
 8007954:	845a      	strh	r2, [r3, #34]	; 0x22
   g->console.y_pos = g->console.y_end;
 8007956:	835a      	strh	r2, [r3, #26]
   g->char_h_space = 1;
 8007958:	001a      	movs	r2, r3
 800795a:	2001      	movs	r0, #1
   g->fore_color = C_WHITE;
 800795c:	4911      	ldr	r1, [pc, #68]	; (80079a4 <UG_Init+0x6c>)
   g->char_h_space = 1;
 800795e:	3249      	adds	r2, #73	; 0x49
 8007960:	7010      	strb	r0, [r2, #0]
   g->char_v_space = 1;
 8007962:	7050      	strb	r0, [r2, #1]
   g->fore_color = C_WHITE;
 8007964:	64d9      	str	r1, [r3, #76]	; 0x4c
   g->desktop_color = C_DESKTOP_COLOR;
 8007966:	0019      	movs	r1, r3
   g->font=NULL;
 8007968:	2200      	movs	r2, #0
   g->desktop_color = C_DESKTOP_COLOR;
 800796a:	3150      	adds	r1, #80	; 0x50
   g->font=NULL;
 800796c:	629a      	str	r2, [r3, #40]	; 0x28
   g->currentFont.char_width = 0;
 800796e:	85da      	strh	r2, [r3, #46]	; 0x2e
   g->currentFont.bytes_per_char = 0;
 8007970:	631a      	str	r2, [r3, #48]	; 0x30
   g->currentFont.number_of_offsets = 0;
 8007972:	869a      	strh	r2, [r3, #52]	; 0x34
   g->currentFont.widths = NULL;
 8007974:	639a      	str	r2, [r3, #56]	; 0x38
   g->currentFont.offsets = NULL;
 8007976:	63da      	str	r2, [r3, #60]	; 0x3c
   g->currentFont.data = NULL;
 8007978:	641a      	str	r2, [r3, #64]	; 0x40
   g->currentFont.font = NULL;
 800797a:	645a      	str	r2, [r3, #68]	; 0x44
   g->desktop_color = C_DESKTOP_COLOR;
 800797c:	800c      	strh	r4, [r1, #0]
   g->next_window = NULL;
 800797e:	60da      	str	r2, [r3, #12]
   g->active_window = NULL;
 8007980:	611a      	str	r2, [r3, #16]
   g->last_window = NULL;
 8007982:	615a      	str	r2, [r3, #20]
      g->driver[i].driver = NULL;
 8007984:	655a      	str	r2, [r3, #84]	; 0x54
      g->driver[i].state = 0;
 8007986:	3108      	adds	r1, #8
 8007988:	700a      	strb	r2, [r1, #0]
      g->driver[i].driver = NULL;
 800798a:	65da      	str	r2, [r3, #92]	; 0x5c
      g->driver[i].state = 0;
 800798c:	720a      	strb	r2, [r1, #8]
      g->driver[i].driver = NULL;
 800798e:	665a      	str	r2, [r3, #100]	; 0x64
      g->driver[i].state = 0;
 8007990:	740a      	strb	r2, [r1, #16]
      g->driver[i].driver = NULL;
 8007992:	66da      	str	r2, [r3, #108]	; 0x6c
      g->driver[i].state = 0;
 8007994:	760a      	strb	r2, [r1, #24]
   gui = g;
 8007996:	4a04      	ldr	r2, [pc, #16]	; (80079a8 <UG_Init+0x70>)
 8007998:	6013      	str	r3, [r2, #0]
}
 800799a:	bd10      	pop	{r4, pc}
 800799c:	00040004 	.word	0x00040004
 80079a0:	00005c5d 	.word	0x00005c5d
 80079a4:	0000ffff 	.word	0x0000ffff
 80079a8:	200005dc 	.word	0x200005dc

080079ac <UG_FontSelect>:
  gui->font = font;
 80079ac:	4b01      	ldr	r3, [pc, #4]	; (80079b4 <UG_FontSelect+0x8>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	6298      	str	r0, [r3, #40]	; 0x28
}
 80079b2:	4770      	bx	lr
 80079b4:	200005dc 	.word	0x200005dc

080079b8 <UG_FillFrame>:
{
 80079b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079ba:	b085      	sub	sp, #20
 80079bc:	9302      	str	r3, [sp, #8]
 80079be:	ab0a      	add	r3, sp, #40	; 0x28
 80079c0:	881b      	ldrh	r3, [r3, #0]
 80079c2:	0005      	movs	r5, r0
 80079c4:	000c      	movs	r4, r1
 80079c6:	0016      	movs	r6, r2
 80079c8:	9303      	str	r3, [sp, #12]
   if ( x2 < x1 )
 80079ca:	4282      	cmp	r2, r0
 80079cc:	da01      	bge.n	80079d2 <UG_FillFrame+0x1a>
 80079ce:	0015      	movs	r5, r2
 80079d0:	0006      	movs	r6, r0
   if ( y2 < y1 )
 80079d2:	9b02      	ldr	r3, [sp, #8]
 80079d4:	42a3      	cmp	r3, r4
 80079d6:	da02      	bge.n	80079de <UG_FillFrame+0x26>
 80079d8:	0023      	movs	r3, r4
 80079da:	9c02      	ldr	r4, [sp, #8]
 80079dc:	9302      	str	r3, [sp, #8]
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 80079de:	4b13      	ldr	r3, [pc, #76]	; (8007a2c <UG_FillFrame+0x74>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	001a      	movs	r2, r3
 80079e4:	3260      	adds	r2, #96	; 0x60
 80079e6:	7812      	ldrb	r2, [r2, #0]
 80079e8:	0792      	lsls	r2, r2, #30
 80079ea:	d519      	bpl.n	8007a20 <UG_FillFrame+0x68>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 80079ec:	9a03      	ldr	r2, [sp, #12]
 80079ee:	0021      	movs	r1, r4
 80079f0:	9200      	str	r2, [sp, #0]
 80079f2:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 80079f4:	0032      	movs	r2, r6
 80079f6:	0028      	movs	r0, r5
 80079f8:	9b02      	ldr	r3, [sp, #8]
 80079fa:	47b8      	blx	r7
 80079fc:	2800      	cmp	r0, #0
 80079fe:	d10f      	bne.n	8007a20 <UG_FillFrame+0x68>
}
 8007a00:	b005      	add	sp, #20
 8007a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
         gui->device->pset(n,m,c);
 8007a04:	4b09      	ldr	r3, [pc, #36]	; (8007a2c <UG_FillFrame+0x74>)
 8007a06:	0038      	movs	r0, r7
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	0021      	movs	r1, r4
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	9a03      	ldr	r2, [sp, #12]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 8007a14:	3701      	adds	r7, #1
 8007a16:	b23f      	sxth	r7, r7
 8007a18:	42be      	cmp	r6, r7
 8007a1a:	daf3      	bge.n	8007a04 <UG_FillFrame+0x4c>
   for( m=y1; m<=y2; m++ )
 8007a1c:	3401      	adds	r4, #1
 8007a1e:	b224      	sxth	r4, r4
 8007a20:	9b02      	ldr	r3, [sp, #8]
 8007a22:	42a3      	cmp	r3, r4
 8007a24:	dbec      	blt.n	8007a00 <UG_FillFrame+0x48>
      for( n=x1; n<=x2; n++ )
 8007a26:	002f      	movs	r7, r5
 8007a28:	e7f6      	b.n	8007a18 <UG_FillFrame+0x60>
 8007a2a:	46c0      	nop			; (mov r8, r8)
 8007a2c:	200005dc 	.word	0x200005dc

08007a30 <UG_FillScreen>:
{
 8007a30:	b507      	push	{r0, r1, r2, lr}
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 8007a32:	2100      	movs	r1, #0
 8007a34:	4b06      	ldr	r3, [pc, #24]	; (8007a50 <UG_FillScreen+0x20>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	8853      	ldrh	r3, [r2, #2]
 8007a3c:	8812      	ldrh	r2, [r2, #0]
 8007a3e:	3b01      	subs	r3, #1
 8007a40:	3a01      	subs	r2, #1
 8007a42:	9000      	str	r0, [sp, #0]
 8007a44:	b21b      	sxth	r3, r3
 8007a46:	0008      	movs	r0, r1
 8007a48:	b212      	sxth	r2, r2
 8007a4a:	f7ff ffb5 	bl	80079b8 <UG_FillFrame>
}
 8007a4e:	bd07      	pop	{r0, r1, r2, pc}
 8007a50:	200005dc 	.word	0x200005dc

08007a54 <UG_DrawLine>:
{
 8007a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a56:	b08b      	sub	sp, #44	; 0x2c
 8007a58:	001e      	movs	r6, r3
 8007a5a:	ab10      	add	r3, sp, #64	; 0x40
 8007a5c:	881b      	ldrh	r3, [r3, #0]
 8007a5e:	9203      	str	r2, [sp, #12]
 8007a60:	9305      	str	r3, [sp, #20]
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 8007a62:	4b40      	ldr	r3, [pc, #256]	; (8007b64 <UG_DrawLine+0x110>)
{
 8007a64:	0007      	movs	r7, r0
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 8007a66:	681b      	ldr	r3, [r3, #0]
{
 8007a68:	000c      	movs	r4, r1
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 8007a6a:	001a      	movs	r2, r3
 8007a6c:	3258      	adds	r2, #88	; 0x58
 8007a6e:	7812      	ldrb	r2, [r2, #0]
 8007a70:	0792      	lsls	r2, r2, #30
 8007a72:	d44a      	bmi.n	8007b0a <UG_DrawLine+0xb6>
   dx = x2 - x1;
 8007a74:	9b03      	ldr	r3, [sp, #12]
   dy = y2 - y1;
 8007a76:	1b36      	subs	r6, r6, r4
   dx = x2 - x1;
 8007a78:	1bdd      	subs	r5, r3, r7
 8007a7a:	b22d      	sxth	r5, r5
   dxabs = (dx>0)?dx:-dx;
 8007a7c:	17ea      	asrs	r2, r5, #31
 8007a7e:	18ab      	adds	r3, r5, r2
 8007a80:	4053      	eors	r3, r2
 8007a82:	b29a      	uxth	r2, r3
   dy = y2 - y1;
 8007a84:	b236      	sxth	r6, r6
   dxabs = (dx>0)?dx:-dx;
 8007a86:	b21b      	sxth	r3, r3
 8007a88:	9208      	str	r2, [sp, #32]
   dyabs = (dy>0)?dy:-dy;
 8007a8a:	17f2      	asrs	r2, r6, #31
   dxabs = (dx>0)?dx:-dx;
 8007a8c:	9303      	str	r3, [sp, #12]
   dyabs = (dy>0)?dy:-dy;
 8007a8e:	18b3      	adds	r3, r6, r2
 8007a90:	4053      	eors	r3, r2
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	b21b      	sxth	r3, r3
 8007a96:	9304      	str	r3, [sp, #16]
   sgndx = (dx>0)?1:-1;
 8007a98:	2301      	movs	r3, #1
   dyabs = (dy>0)?dy:-dy;
 8007a9a:	9209      	str	r2, [sp, #36]	; 0x24
   sgndx = (dx>0)?1:-1;
 8007a9c:	9306      	str	r3, [sp, #24]
 8007a9e:	2d00      	cmp	r5, #0
 8007aa0:	dc01      	bgt.n	8007aa6 <UG_DrawLine+0x52>
 8007aa2:	3b02      	subs	r3, #2
 8007aa4:	9306      	str	r3, [sp, #24]
   sgndy = (dy>0)?1:-1;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	9307      	str	r3, [sp, #28]
 8007aaa:	2e00      	cmp	r6, #0
 8007aac:	dc01      	bgt.n	8007ab2 <UG_DrawLine+0x5e>
 8007aae:	3b02      	subs	r3, #2
 8007ab0:	9307      	str	r3, [sp, #28]
   gui->device->pset(drawx, drawy,c);
 8007ab2:	4b2c      	ldr	r3, [pc, #176]	; (8007b64 <UG_DrawLine+0x110>)
 8007ab4:	9a05      	ldr	r2, [sp, #20]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	0021      	movs	r1, r4
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	0038      	movs	r0, r7
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	4798      	blx	r3
   if( dxabs >= dyabs )
 8007ac2:	9b03      	ldr	r3, [sp, #12]
 8007ac4:	9a04      	ldr	r2, [sp, #16]
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	da2a      	bge.n	8007b20 <UG_DrawLine+0xcc>
      for( n=0; n<dyabs; n++ )
 8007aca:	2600      	movs	r6, #0
   x = dyabs >> 1;
 8007acc:	1055      	asrs	r5, r2, #1
      for( n=0; n<dyabs; n++ )
 8007ace:	9b04      	ldr	r3, [sp, #16]
 8007ad0:	429e      	cmp	r6, r3
 8007ad2:	da23      	bge.n	8007b1c <UG_DrawLine+0xc8>
         x += dxabs;
 8007ad4:	9b08      	ldr	r3, [sp, #32]
         if( x >= dyabs )
 8007ad6:	9a04      	ldr	r2, [sp, #16]
         x += dxabs;
 8007ad8:	195d      	adds	r5, r3, r5
 8007ada:	b2ab      	uxth	r3, r5
 8007adc:	b22d      	sxth	r5, r5
         if( x >= dyabs )
 8007ade:	42aa      	cmp	r2, r5
 8007ae0:	dc05      	bgt.n	8007aee <UG_DrawLine+0x9a>
            x -= dyabs;
 8007ae2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ae4:	1a9b      	subs	r3, r3, r2
 8007ae6:	b21d      	sxth	r5, r3
            drawx += sgndx;
 8007ae8:	9b06      	ldr	r3, [sp, #24]
 8007aea:	18ff      	adds	r7, r7, r3
 8007aec:	b23f      	sxth	r7, r7
         drawy += sgndy;
 8007aee:	9b07      	ldr	r3, [sp, #28]
         gui->device->pset(drawx, drawy,c);
 8007af0:	0038      	movs	r0, r7
 8007af2:	191c      	adds	r4, r3, r4
 8007af4:	4b1b      	ldr	r3, [pc, #108]	; (8007b64 <UG_DrawLine+0x110>)
 8007af6:	b224      	sxth	r4, r4
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	0021      	movs	r1, r4
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	9a05      	ldr	r2, [sp, #20]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	3601      	adds	r6, #1
 8007b04:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 8007b06:	b236      	sxth	r6, r6
 8007b08:	e7e1      	b.n	8007ace <UG_DrawLine+0x7a>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8007b0a:	9a05      	ldr	r2, [sp, #20]
 8007b0c:	9200      	str	r2, [sp, #0]
 8007b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b10:	9a03      	ldr	r2, [sp, #12]
 8007b12:	001d      	movs	r5, r3
 8007b14:	0033      	movs	r3, r6
 8007b16:	47a8      	blx	r5
 8007b18:	2800      	cmp	r0, #0
 8007b1a:	d1ab      	bne.n	8007a74 <UG_DrawLine+0x20>
}
 8007b1c:	b00b      	add	sp, #44	; 0x2c
 8007b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      for( n=0; n<dxabs; n++ )
 8007b20:	2600      	movs	r6, #0
   y = dxabs >> 1;
 8007b22:	9b03      	ldr	r3, [sp, #12]
 8007b24:	105d      	asrs	r5, r3, #1
      for( n=0; n<dxabs; n++ )
 8007b26:	9b03      	ldr	r3, [sp, #12]
 8007b28:	429e      	cmp	r6, r3
 8007b2a:	daf7      	bge.n	8007b1c <UG_DrawLine+0xc8>
         y += dyabs;
 8007b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
         if( y >= dxabs )
 8007b2e:	9a03      	ldr	r2, [sp, #12]
         y += dyabs;
 8007b30:	195d      	adds	r5, r3, r5
 8007b32:	b2ab      	uxth	r3, r5
 8007b34:	b22d      	sxth	r5, r5
         if( y >= dxabs )
 8007b36:	42aa      	cmp	r2, r5
 8007b38:	dc05      	bgt.n	8007b46 <UG_DrawLine+0xf2>
            y -= dxabs;
 8007b3a:	9a08      	ldr	r2, [sp, #32]
 8007b3c:	1a9b      	subs	r3, r3, r2
 8007b3e:	b21d      	sxth	r5, r3
            drawy += sgndy;
 8007b40:	9b07      	ldr	r3, [sp, #28]
 8007b42:	18e4      	adds	r4, r4, r3
 8007b44:	b224      	sxth	r4, r4
         drawx += sgndx;
 8007b46:	9b06      	ldr	r3, [sp, #24]
         gui->device->pset(drawx, drawy,c);
 8007b48:	0021      	movs	r1, r4
 8007b4a:	19df      	adds	r7, r3, r7
 8007b4c:	4b05      	ldr	r3, [pc, #20]	; (8007b64 <UG_DrawLine+0x110>)
 8007b4e:	b23f      	sxth	r7, r7
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	0038      	movs	r0, r7
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	9a05      	ldr	r2, [sp, #20]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	3601      	adds	r6, #1
 8007b5c:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 8007b5e:	b236      	sxth	r6, r6
 8007b60:	e7e1      	b.n	8007b26 <UG_DrawLine+0xd2>
 8007b62:	46c0      	nop			; (mov r8, r8)
 8007b64:	200005dc 	.word	0x200005dc

08007b68 <UG_PutString>:
{
 8007b68:	b5f0      	push	{r4, r5, r6, r7, lr}
   _UG_FontSelect(gui->font);
 8007b6a:	4f2f      	ldr	r7, [pc, #188]	; (8007c28 <UG_PutString+0xc0>)
{
 8007b6c:	b087      	sub	sp, #28
   _UG_FontSelect(gui->font);
 8007b6e:	683b      	ldr	r3, [r7, #0]
{
 8007b70:	9004      	str	r0, [sp, #16]
   _UG_FontSelect(gui->font);
 8007b72:	6a98      	ldr	r0, [r3, #40]	; 0x28
{
 8007b74:	9102      	str	r1, [sp, #8]
 8007b76:	9205      	str	r2, [sp, #20]
   _UG_FontSelect(gui->font);
 8007b78:	f7ff fc9a 	bl	80074b0 <_UG_FontSelect>
   xp=x;
 8007b7c:	9d04      	ldr	r5, [sp, #16]
   while ( *str != 0 )
 8007b7e:	9b05      	ldr	r3, [sp, #20]
      if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8007b80:	683c      	ldr	r4, [r7, #0]
   while ( *str != 0 )
 8007b82:	781a      	ldrb	r2, [r3, #0]
 8007b84:	2a00      	cmp	r2, #0
 8007b86:	d10d      	bne.n	8007ba4 <UG_PutString+0x3c>
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 8007b88:	0023      	movs	r3, r4
 8007b8a:	3368      	adds	r3, #104	; 0x68
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	079b      	lsls	r3, r3, #30
 8007b90:	d506      	bpl.n	8007ba0 <UG_PutString+0x38>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 8007b92:	2301      	movs	r3, #1
 8007b94:	425b      	negs	r3, r3
 8007b96:	001a      	movs	r2, r3
 8007b98:	0019      	movs	r1, r3
 8007b9a:	0018      	movs	r0, r3
 8007b9c:	6e64      	ldr	r4, [r4, #100]	; 0x64
 8007b9e:	47a0      	blx	r4
}
 8007ba0:	b007      	add	sp, #28
 8007ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8007ba4:	0022      	movs	r2, r4
 8007ba6:	322d      	adds	r2, #45	; 0x2d
 8007ba8:	7812      	ldrb	r2, [r2, #0]
 8007baa:	2a00      	cmp	r2, #0
 8007bac:	d109      	bne.n	8007bc2 <UG_PutString+0x5a>
         chr = _UG_DecodeUTF8(&str);
 8007bae:	a805      	add	r0, sp, #20
 8007bb0:	f7ff fe80 	bl	80078b4 <_UG_DecodeUTF8>
 8007bb4:	0006      	movs	r6, r0
      if ( chr == '\n' )
 8007bb6:	2e0a      	cmp	r6, #10
 8007bb8:	d107      	bne.n	8007bca <UG_PutString+0x62>
         xp = gui->device->x_dim;
 8007bba:	6823      	ldr	r3, [r4, #0]
 8007bbc:	2500      	movs	r5, #0
 8007bbe:	5f5d      	ldrsh	r5, [r3, r5]
         continue;
 8007bc0:	e7dd      	b.n	8007b7e <UG_PutString+0x16>
         chr = *str++;
 8007bc2:	1c5a      	adds	r2, r3, #1
 8007bc4:	9205      	str	r2, [sp, #20]
 8007bc6:	781e      	ldrb	r6, [r3, #0]
 8007bc8:	e7f5      	b.n	8007bb6 <UG_PutString+0x4e>
      cw = _UG_GetCharData(chr,NULL);
 8007bca:	2100      	movs	r1, #0
 8007bcc:	0030      	movs	r0, r6
 8007bce:	f7ff fbd7 	bl	8007380 <_UG_GetCharData>
      if(cw==-1) continue;
 8007bd2:	0003      	movs	r3, r0
      cw = _UG_GetCharData(chr,NULL);
 8007bd4:	9003      	str	r0, [sp, #12]
      if(cw==-1) continue;
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	d0d1      	beq.n	8007b7e <UG_PutString+0x16>
      if ( xp + cw > gui->device->x_dim - 1 )
 8007bda:	6823      	ldr	r3, [r4, #0]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	5e9a      	ldrsh	r2, [r3, r2]
 8007be0:	182b      	adds	r3, r5, r0
 8007be2:	429a      	cmp	r2, r3
 8007be4:	dc0c      	bgt.n	8007c00 <UG_PutString+0x98>
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 8007be6:	0022      	movs	r2, r4
 8007be8:	0023      	movs	r3, r4
 8007bea:	324a      	adds	r2, #74	; 0x4a
 8007bec:	7812      	ldrb	r2, [r2, #0]
 8007bee:	332f      	adds	r3, #47	; 0x2f
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	b252      	sxtb	r2, r2
 8007bf4:	189b      	adds	r3, r3, r2
 8007bf6:	9a02      	ldr	r2, [sp, #8]
         xp = x;
 8007bf8:	9d04      	ldr	r5, [sp, #16]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 8007bfa:	189b      	adds	r3, r3, r2
 8007bfc:	b21b      	sxth	r3, r3
 8007bfe:	9302      	str	r3, [sp, #8]
      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 8007c00:	0023      	movs	r3, r4
 8007c02:	344e      	adds	r4, #78	; 0x4e
 8007c04:	8822      	ldrh	r2, [r4, #0]
 8007c06:	334c      	adds	r3, #76	; 0x4c
 8007c08:	881b      	ldrh	r3, [r3, #0]
 8007c0a:	0029      	movs	r1, r5
 8007c0c:	9200      	str	r2, [sp, #0]
 8007c0e:	0030      	movs	r0, r6
 8007c10:	9a02      	ldr	r2, [sp, #8]
 8007c12:	f7ff fc87 	bl	8007524 <_UG_PutChar>
      xp += cw + gui->char_h_space;
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	9a03      	ldr	r2, [sp, #12]
 8007c1a:	3349      	adds	r3, #73	; 0x49
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	b25b      	sxtb	r3, r3
 8007c20:	189b      	adds	r3, r3, r2
 8007c22:	195d      	adds	r5, r3, r5
 8007c24:	b22d      	sxth	r5, r5
 8007c26:	e7aa      	b.n	8007b7e <UG_PutString+0x16>
 8007c28:	200005dc 	.word	0x200005dc

08007c2c <UG_SetForecolor>:
   gui->fore_color = c;
 8007c2c:	4b02      	ldr	r3, [pc, #8]	; (8007c38 <UG_SetForecolor+0xc>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	334c      	adds	r3, #76	; 0x4c
 8007c32:	8018      	strh	r0, [r3, #0]
}
 8007c34:	4770      	bx	lr
 8007c36:	46c0      	nop			; (mov r8, r8)
 8007c38:	200005dc 	.word	0x200005dc

08007c3c <UG_SetBackcolor>:
   gui->back_color = c;
 8007c3c:	4b02      	ldr	r3, [pc, #8]	; (8007c48 <UG_SetBackcolor+0xc>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	334e      	adds	r3, #78	; 0x4e
 8007c42:	8018      	strh	r0, [r3, #0]
}
 8007c44:	4770      	bx	lr
 8007c46:	46c0      	nop			; (mov r8, r8)
 8007c48:	200005dc 	.word	0x200005dc

08007c4c <UG_FontSetHSpace>:
   gui->char_h_space = s;
 8007c4c:	4b02      	ldr	r3, [pc, #8]	; (8007c58 <UG_FontSetHSpace+0xc>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	3349      	adds	r3, #73	; 0x49
 8007c52:	7018      	strb	r0, [r3, #0]
}
 8007c54:	4770      	bx	lr
 8007c56:	46c0      	nop			; (mov r8, r8)
 8007c58:	200005dc 	.word	0x200005dc

08007c5c <UG_FontSetVSpace>:
   gui->char_v_space = s;
 8007c5c:	4b02      	ldr	r3, [pc, #8]	; (8007c68 <UG_FontSetVSpace+0xc>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	334a      	adds	r3, #74	; 0x4a
 8007c62:	7018      	strb	r0, [r3, #0]
}
 8007c64:	4770      	bx	lr
 8007c66:	46c0      	nop			; (mov r8, r8)
 8007c68:	200005dc 	.word	0x200005dc

08007c6c <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 8007c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c6e:	0004      	movs	r4, r0
   if(!txt->font || !txt->str){
 8007c70:	6840      	ldr	r0, [r0, #4]
{
 8007c72:	b08b      	sub	sp, #44	; 0x2c
   if(!txt->font || !txt->str){
 8007c74:	2800      	cmp	r0, #0
 8007c76:	d100      	bne.n	8007c7a <_UG_PutText+0xe>
 8007c78:	e0ad      	b.n	8007dd6 <_UG_PutText+0x16a>
 8007c7a:	6823      	ldr	r3, [r4, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d100      	bne.n	8007c82 <_UG_PutText+0x16>
 8007c80:	e0a9      	b.n	8007dd6 <_UG_PutText+0x16a>
     return;
   }

   UG_S16 ye=txt->a.ye;
 8007c82:	220e      	movs	r2, #14
 8007c84:	5ea5      	ldrsh	r5, [r4, r2]
   UG_S16 ys=txt->a.ys;
 8007c86:	220a      	movs	r2, #10
 8007c88:	5ea6      	ldrsh	r6, [r4, r2]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 8007c8a:	7882      	ldrb	r2, [r0, #2]
 8007c8c:	9203      	str	r2, [sp, #12]

   if ( (ye - ys) < char_height ){
 8007c8e:	9903      	ldr	r1, [sp, #12]
 8007c90:	1baa      	subs	r2, r5, r6
 8007c92:	428a      	cmp	r2, r1
 8007c94:	da00      	bge.n	8007c98 <_UG_PutText+0x2c>
 8007c96:	e09e      	b.n	8007dd6 <_UG_PutText+0x16a>
   char* str = txt->str;
   char* c = str;

   _UG_FontSelect(txt->font);

   rc=1;
 8007c98:	2701      	movs	r7, #1
   UG_S16 xs=txt->a.xs;
 8007c9a:	2108      	movs	r1, #8
 8007c9c:	5e62      	ldrsh	r2, [r4, r1]
   char* str = txt->str;
 8007c9e:	9308      	str	r3, [sp, #32]
   UG_S16 xs=txt->a.xs;
 8007ca0:	9204      	str	r2, [sp, #16]
   UG_S16 xe=txt->a.xe;
 8007ca2:	210c      	movs	r1, #12
 8007ca4:	5e62      	ldrsh	r2, [r4, r1]
   char* c = str;
 8007ca6:	9309      	str	r3, [sp, #36]	; 0x24
   UG_S16 xe=txt->a.xe;
 8007ca8:	9206      	str	r2, [sp, #24]
   UG_U8  align=txt->align;
 8007caa:	7d22      	ldrb	r2, [r4, #20]
 8007cac:	9202      	str	r2, [sp, #8]
   UG_S16 char_h_space=txt->h_space;
 8007cae:	2116      	movs	r1, #22
 8007cb0:	5e62      	ldrsh	r2, [r4, r1]
 8007cb2:	9207      	str	r2, [sp, #28]
   UG_S16 char_v_space=txt->v_space;
 8007cb4:	2118      	movs	r1, #24
 8007cb6:	5e62      	ldrsh	r2, [r4, r1]
 8007cb8:	9205      	str	r2, [sp, #20]
   _UG_FontSelect(txt->font);
 8007cba:	f7ff fbf9 	bl	80074b0 <_UG_FontSelect>
   c=str;
 8007cbe:	9b08      	ldr	r3, [sp, #32]
 8007cc0:	9309      	str	r3, [sp, #36]	; 0x24

   while (1)
   {
     #ifdef UGUI_USE_UTF8
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8007cc2:	4b46      	ldr	r3, [pc, #280]	; (8007ddc <_UG_PutText+0x170>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	332d      	adds	r3, #45	; 0x2d
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d109      	bne.n	8007ce2 <_UG_PutText+0x76>
       chr = _UG_DecodeUTF8(&c);
 8007cce:	a809      	add	r0, sp, #36	; 0x24
 8007cd0:	f7ff fdf0 	bl	80078b4 <_UG_DecodeUTF8>
       chr = *c++;
     }
     #else
     chr = *c++;
     #endif
     if(!chr) break;
 8007cd4:	2800      	cmp	r0, #0
 8007cd6:	d009      	beq.n	8007cec <_UG_PutText+0x80>
     if ( chr == '\n' ) rc++;
 8007cd8:	280a      	cmp	r0, #10
 8007cda:	d1f2      	bne.n	8007cc2 <_UG_PutText+0x56>
 8007cdc:	3701      	adds	r7, #1
 8007cde:	b2bf      	uxth	r7, r7
 8007ce0:	e7ef      	b.n	8007cc2 <_UG_PutText+0x56>
       chr = *c++;
 8007ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ce4:	1c5a      	adds	r2, r3, #1
 8007ce6:	9209      	str	r2, [sp, #36]	; 0x24
 8007ce8:	7818      	ldrb	r0, [r3, #0]
 8007cea:	e7f3      	b.n	8007cd4 <_UG_PutText+0x68>
   }

   yp = 0;
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 8007cec:	2330      	movs	r3, #48	; 0x30
 8007cee:	9a02      	ldr	r2, [sp, #8]
   {
      yp = ye - ys + 1;
 8007cf0:	b2b6      	uxth	r6, r6
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 8007cf2:	421a      	tst	r2, r3
 8007cf4:	d00b      	beq.n	8007d0e <_UG_PutText+0xa2>
      yp -= char_height*rc;
 8007cf6:	9b03      	ldr	r3, [sp, #12]
      yp = ye - ys + 1;
 8007cf8:	3501      	adds	r5, #1
      yp -= char_height*rc;
 8007cfa:	437b      	muls	r3, r7
      yp = ye - ys + 1;
 8007cfc:	1bad      	subs	r5, r5, r6
      yp -= char_height*rc;
 8007cfe:	1aed      	subs	r5, r5, r3
      yp -= char_v_space*(rc-1);
 8007d00:	9b05      	ldr	r3, [sp, #20]
 8007d02:	3f01      	subs	r7, #1
 8007d04:	435f      	muls	r7, r3
 8007d06:	1bef      	subs	r7, r5, r7
 8007d08:	b238      	sxth	r0, r7
      if ( yp < 0 ){
 8007d0a:	043f      	lsls	r7, r7, #16
 8007d0c:	d463      	bmi.n	8007dd6 <_UG_PutText+0x16a>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 8007d0e:	9b02      	ldr	r3, [sp, #8]
 8007d10:	06db      	lsls	r3, r3, #27
 8007d12:	d500      	bpl.n	8007d16 <_UG_PutText+0xaa>
 8007d14:	1040      	asrs	r0, r0, #1
         sl++;
         wl += w + char_h_space;
      }
      wl -= char_h_space;

      xp = xe - xs + 1;
 8007d16:	466b      	mov	r3, sp
 8007d18:	8a1b      	ldrh	r3, [r3, #16]
   yp += ys;
 8007d1a:	1836      	adds	r6, r6, r0
      xp = xe - xs + 1;
 8007d1c:	9304      	str	r3, [sp, #16]
      xp -= wl;
 8007d1e:	9b06      	ldr	r3, [sp, #24]
 8007d20:	9a04      	ldr	r2, [sp, #16]
 8007d22:	3301      	adds	r3, #1
 8007d24:	1a9b      	subs	r3, r3, r2
   yp += ys;
 8007d26:	b236      	sxth	r6, r6
      xp -= wl;
 8007d28:	9306      	str	r3, [sp, #24]
      wl = 0;
 8007d2a:	2500      	movs	r5, #0
      c=str;
 8007d2c:	9b08      	ldr	r3, [sp, #32]
 8007d2e:	9309      	str	r3, [sp, #36]	; 0x24
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8007d30:	4b2a      	ldr	r3, [pc, #168]	; (8007ddc <_UG_PutText+0x170>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	332d      	adds	r3, #45	; 0x2d
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d111      	bne.n	8007d60 <_UG_PutText+0xf4>
          chr = _UG_DecodeUTF8(&c);
 8007d3c:	a809      	add	r0, sp, #36	; 0x24
 8007d3e:	f7ff fdb9 	bl	80078b4 <_UG_DecodeUTF8>
         wl += w + char_h_space;
 8007d42:	466b      	mov	r3, sp
 8007d44:	8b9f      	ldrh	r7, [r3, #28]
        if( chr == 0 || chr == '\n'){
 8007d46:	2800      	cmp	r0, #0
 8007d48:	d00f      	beq.n	8007d6a <_UG_PutText+0xfe>
 8007d4a:	280a      	cmp	r0, #10
 8007d4c:	d00d      	beq.n	8007d6a <_UG_PutText+0xfe>
         w = _UG_GetCharData(chr, NULL);
 8007d4e:	2100      	movs	r1, #0
 8007d50:	f7ff fb16 	bl	8007380 <_UG_GetCharData>
         if (w == -1){continue;}
 8007d54:	1c43      	adds	r3, r0, #1
 8007d56:	d0eb      	beq.n	8007d30 <_UG_PutText+0xc4>
         wl += w + char_h_space;
 8007d58:	19ed      	adds	r5, r5, r7
 8007d5a:	182d      	adds	r5, r5, r0
 8007d5c:	b2ad      	uxth	r5, r5
 8007d5e:	e7e7      	b.n	8007d30 <_UG_PutText+0xc4>
          chr = *c++;
 8007d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d62:	1c5a      	adds	r2, r3, #1
 8007d64:	9209      	str	r2, [sp, #36]	; 0x24
 8007d66:	7818      	ldrb	r0, [r3, #0]
 8007d68:	e7eb      	b.n	8007d42 <_UG_PutText+0xd6>
      xp -= wl;
 8007d6a:	9b06      	ldr	r3, [sp, #24]
 8007d6c:	18fb      	adds	r3, r7, r3
 8007d6e:	1b5b      	subs	r3, r3, r5
 8007d70:	b21d      	sxth	r5, r3
      if ( xp < 0 ) break;
 8007d72:	041b      	lsls	r3, r3, #16
 8007d74:	d42f      	bmi.n	8007dd6 <_UG_PutText+0x16a>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 8007d76:	9b02      	ldr	r3, [sp, #8]
 8007d78:	07db      	lsls	r3, r3, #31
 8007d7a:	d41f      	bmi.n	8007dbc <_UG_PutText+0x150>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 8007d7c:	9b02      	ldr	r3, [sp, #8]
 8007d7e:	079b      	lsls	r3, r3, #30
 8007d80:	d500      	bpl.n	8007d84 <_UG_PutText+0x118>
 8007d82:	106d      	asrs	r5, r5, #1
      xp += xs;
 8007d84:	9b04      	ldr	r3, [sp, #16]
 8007d86:	195d      	adds	r5, r3, r5
 8007d88:	b22d      	sxth	r5, r5


      while(1){
         #ifdef UGUI_USE_UTF8
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8007d8a:	4b14      	ldr	r3, [pc, #80]	; (8007ddc <_UG_PutText+0x170>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	332d      	adds	r3, #45	; 0x2d
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d114      	bne.n	8007dc0 <_UG_PutText+0x154>
           chr = _UG_DecodeUTF8(&str);
 8007d96:	a808      	add	r0, sp, #32
 8007d98:	f7ff fd8c 	bl	80078b4 <_UG_DecodeUTF8>
           chr = *str++;
         }
         #else
         chr = *str++;
         #endif
         if ( chr == 0 ){
 8007d9c:	2800      	cmp	r0, #0
 8007d9e:	d01a      	beq.n	8007dd6 <_UG_PutText+0x16a>
           return;
         }
         else if(chr=='\n'){
 8007da0:	280a      	cmp	r0, #10
 8007da2:	d012      	beq.n	8007dca <_UG_PutText+0x15e>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 8007da4:	8a62      	ldrh	r2, [r4, #18]
 8007da6:	8a23      	ldrh	r3, [r4, #16]
 8007da8:	9200      	str	r2, [sp, #0]
 8007daa:	0029      	movs	r1, r5
 8007dac:	0032      	movs	r2, r6
 8007dae:	f7ff fbb9 	bl	8007524 <_UG_PutChar>
         if(w!=-1)
 8007db2:	1c43      	adds	r3, r0, #1
 8007db4:	d0e9      	beq.n	8007d8a <_UG_PutText+0x11e>
           xp += w + char_h_space;
 8007db6:	197d      	adds	r5, r7, r5
 8007db8:	182d      	adds	r5, r5, r0
 8007dba:	e7e5      	b.n	8007d88 <_UG_PutText+0x11c>
      if ( align & ALIGN_H_LEFT ) xp = 0;
 8007dbc:	2500      	movs	r5, #0
 8007dbe:	e7e1      	b.n	8007d84 <_UG_PutText+0x118>
           chr = *str++;
 8007dc0:	9b08      	ldr	r3, [sp, #32]
 8007dc2:	1c5a      	adds	r2, r3, #1
 8007dc4:	9208      	str	r2, [sp, #32]
 8007dc6:	7818      	ldrb	r0, [r3, #0]
 8007dc8:	e7e8      	b.n	8007d9c <_UG_PutText+0x130>
      }
      yp += char_height + char_v_space;
 8007dca:	9b03      	ldr	r3, [sp, #12]
 8007dcc:	9a05      	ldr	r2, [sp, #20]
 8007dce:	189b      	adds	r3, r3, r2
 8007dd0:	199e      	adds	r6, r3, r6
 8007dd2:	b236      	sxth	r6, r6
      sl=0;
 8007dd4:	e7a9      	b.n	8007d2a <_UG_PutText+0xbe>
   }
}
 8007dd6:	b00b      	add	sp, #44	; 0x2c
 8007dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dda:	46c0      	nop			; (mov r8, r8)
 8007ddc:	200005dc 	.word	0x200005dc

08007de0 <_UG_WindowDrawTitle.isra.0>:
      if ( h < 0 ) h = 0;
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
 8007de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007de2:	0004      	movs	r4, r0
 8007de4:	b08f      	sub	sp, #60	; 0x3c
{
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007de6:	2800      	cmp	r0, #0
 8007de8:	d059      	beq.n	8007e9e <_UG_WindowDrawTitle.isra.0+0xbe>
 8007dea:	7a03      	ldrb	r3, [r0, #8]
 8007dec:	079b      	lsls	r3, r3, #30
 8007dee:	d556      	bpl.n	8007e9e <_UG_WindowDrawTitle.isra.0+0xbe>
   {
      xs = wnd->xs;
 8007df0:	230e      	movs	r3, #14
 8007df2:	5ec6      	ldrsh	r6, [r0, r3]
      ys = wnd->ys;
 8007df4:	2210      	movs	r2, #16
 8007df6:	5e83      	ldrsh	r3, [r0, r2]
 8007df8:	9303      	str	r3, [sp, #12]
      xe = wnd->xe;
 8007dfa:	2312      	movs	r3, #18
 8007dfc:	5ec7      	ldrsh	r7, [r0, r3]
      ye = wnd->ye;

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 8007dfe:	7d83      	ldrb	r3, [r0, #22]
 8007e00:	07db      	lsls	r3, r3, #31
 8007e02:	d507      	bpl.n	8007e14 <_UG_WindowDrawTitle.isra.0+0x34>
      {
         xs+=3;
         ys+=3;
 8007e04:	9b03      	ldr	r3, [sp, #12]
         xs+=3;
 8007e06:	3603      	adds	r6, #3
         ys+=3;
 8007e08:	3303      	adds	r3, #3
 8007e0a:	b21b      	sxth	r3, r3
         xe-=3;
 8007e0c:	3f03      	subs	r7, #3
         xs+=3;
 8007e0e:	b236      	sxth	r6, r6
         ys+=3;
 8007e10:	9303      	str	r3, [sp, #12]
         xe-=3;
 8007e12:	b23f      	sxth	r7, r7
         ye-=3;
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 8007e14:	4b25      	ldr	r3, [pc, #148]	; (8007eac <_UG_WindowDrawTitle.isra.0+0xcc>)
 8007e16:	ad07      	add	r5, sp, #28
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	429c      	cmp	r4, r3
 8007e1e:	d140      	bne.n	8007ea2 <_UG_WindowDrawTitle.isra.0+0xc2>
      {
         txt.bc = wnd->title.bc;
 8007e20:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8007e22:	826b      	strh	r3, [r5, #18]
         txt.fc = wnd->title.fc;
 8007e24:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8007e26:	822b      	strh	r3, [r5, #16]
         txt.bc = wnd->title.ibc;
         txt.fc = wnd->title.ifc;
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 8007e28:	466b      	mov	r3, sp
 8007e2a:	899b      	ldrh	r3, [r3, #12]
 8007e2c:	9903      	ldr	r1, [sp, #12]
 8007e2e:	9304      	str	r3, [sp, #16]
 8007e30:	0023      	movs	r3, r4
 8007e32:	332c      	adds	r3, #44	; 0x2c
 8007e34:	9305      	str	r3, [sp, #20]
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	9a04      	ldr	r2, [sp, #16]
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	18d3      	adds	r3, r2, r3
 8007e3e:	8a6a      	ldrh	r2, [r5, #18]
 8007e40:	0030      	movs	r0, r6
 8007e42:	b21b      	sxth	r3, r3
 8007e44:	9200      	str	r2, [sp, #0]
 8007e46:	003a      	movs	r2, r7
 8007e48:	f7ff fdb6 	bl	80079b8 <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 8007e4c:	69a3      	ldr	r3, [r4, #24]
      txt.font = wnd->title.font;
      txt.a.xs = xs+3;
      txt.a.ys = ys;
      txt.a.xe = xe;
 8007e4e:	81af      	strh	r7, [r5, #12]
      txt.str = wnd->title.str;
 8007e50:	9307      	str	r3, [sp, #28]
      txt.font = wnd->title.font;
 8007e52:	69e3      	ldr	r3, [r4, #28]
      txt.a.ye = ys+wnd->title.height-1;
 8007e54:	9a04      	ldr	r2, [sp, #16]
      txt.font = wnd->title.font;
 8007e56:	606b      	str	r3, [r5, #4]
      txt.a.xs = xs+3;
 8007e58:	1cf3      	adds	r3, r6, #3
 8007e5a:	812b      	strh	r3, [r5, #8]
      txt.a.ys = ys;
 8007e5c:	9b03      	ldr	r3, [sp, #12]
      txt.align = wnd->title.align;
      txt.h_space = wnd->title.h_space;
      txt.v_space = wnd->title.v_space;
      _UG_PutText( &txt );
 8007e5e:	0028      	movs	r0, r5
      txt.a.ys = ys;
 8007e60:	816b      	strh	r3, [r5, #10]
      txt.a.ye = ys+wnd->title.height-1;
 8007e62:	9b05      	ldr	r3, [sp, #20]
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	3b01      	subs	r3, #1
 8007e68:	18d3      	adds	r3, r2, r3
 8007e6a:	81eb      	strh	r3, [r5, #14]
      txt.align = wnd->title.align;
 8007e6c:	1ce3      	adds	r3, r4, #3
 8007e6e:	7fdb      	ldrb	r3, [r3, #31]
 8007e70:	752b      	strb	r3, [r5, #20]
      txt.h_space = wnd->title.h_space;
 8007e72:	1c63      	adds	r3, r4, #1
 8007e74:	7fdb      	ldrb	r3, [r3, #31]
      txt.v_space = wnd->title.v_space;
 8007e76:	3402      	adds	r4, #2
      txt.h_space = wnd->title.h_space;
 8007e78:	b25b      	sxtb	r3, r3
 8007e7a:	82eb      	strh	r3, [r5, #22]
      txt.v_space = wnd->title.v_space;
 8007e7c:	231f      	movs	r3, #31
 8007e7e:	56e3      	ldrsb	r3, [r4, r3]
 8007e80:	832b      	strh	r3, [r5, #24]
      _UG_PutText( &txt );
 8007e82:	f7ff fef3 	bl	8007c6c <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 8007e86:	9b05      	ldr	r3, [sp, #20]
 8007e88:	9a04      	ldr	r2, [sp, #16]
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	0030      	movs	r0, r6
 8007e8e:	18d3      	adds	r3, r2, r3
 8007e90:	b219      	sxth	r1, r3
 8007e92:	4b07      	ldr	r3, [pc, #28]	; (8007eb0 <_UG_WindowDrawTitle.isra.0+0xd0>)
 8007e94:	003a      	movs	r2, r7
 8007e96:	9300      	str	r3, [sp, #0]
 8007e98:	000b      	movs	r3, r1
 8007e9a:	f7ff fddb 	bl	8007a54 <UG_DrawLine>
      return UG_RESULT_OK;
   }
   return UG_RESULT_FAIL;
}
 8007e9e:	b00f      	add	sp, #60	; 0x3c
 8007ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
         txt.bc = wnd->title.ibc;
 8007ea2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007ea4:	826b      	strh	r3, [r5, #18]
         txt.fc = wnd->title.ifc;
 8007ea6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007ea8:	e7bd      	b.n	8007e26 <_UG_WindowDrawTitle.isra.0+0x46>
 8007eaa:	46c0      	nop			; (mov r8, r8)
 8007eac:	200005dc 	.word	0x200005dc
 8007eb0:	00009d13 	.word	0x00009d13

08007eb4 <_UG_DrawObjectFrame>:
{
 8007eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007eb6:	000e      	movs	r6, r1
 8007eb8:	001f      	movs	r7, r3
 8007eba:	0004      	movs	r4, r0
 8007ebc:	0015      	movs	r5, r2
 8007ebe:	b08b      	sub	sp, #44	; 0x2c
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 8007ec0:	b293      	uxth	r3, r2
 8007ec2:	9307      	str	r3, [sp, #28]
 8007ec4:	3b01      	subs	r3, #1
 8007ec6:	b21b      	sxth	r3, r3
 8007ec8:	9303      	str	r3, [sp, #12]
 8007eca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ecc:	9a03      	ldr	r2, [sp, #12]
 8007ece:	881b      	ldrh	r3, [r3, #0]
 8007ed0:	9300      	str	r3, [sp, #0]
 8007ed2:	000b      	movs	r3, r1
 8007ed4:	f7ff fdbe 	bl	8007a54 <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 8007ed8:	b2b3      	uxth	r3, r6
 8007eda:	9308      	str	r3, [sp, #32]
 8007edc:	3301      	adds	r3, #1
 8007ede:	b21b      	sxth	r3, r3
 8007ee0:	9304      	str	r3, [sp, #16]
 8007ee2:	b2bb      	uxth	r3, r7
 8007ee4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ee6:	3b01      	subs	r3, #1
 8007ee8:	b21b      	sxth	r3, r3
 8007eea:	9305      	str	r3, [sp, #20]
 8007eec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007eee:	0022      	movs	r2, r4
 8007ef0:	885b      	ldrh	r3, [r3, #2]
 8007ef2:	0020      	movs	r0, r4
 8007ef4:	9904      	ldr	r1, [sp, #16]
 8007ef6:	9300      	str	r3, [sp, #0]
 8007ef8:	9b05      	ldr	r3, [sp, #20]
 8007efa:	f7ff fdab 	bl	8007a54 <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 8007efe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f00:	002a      	movs	r2, r5
 8007f02:	889b      	ldrh	r3, [r3, #4]
 8007f04:	0039      	movs	r1, r7
 8007f06:	0020      	movs	r0, r4
 8007f08:	9300      	str	r3, [sp, #0]
 8007f0a:	003b      	movs	r3, r7
 8007f0c:	f7ff fda2 	bl	8007a54 <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 8007f10:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f12:	002a      	movs	r2, r5
 8007f14:	88db      	ldrh	r3, [r3, #6]
 8007f16:	0031      	movs	r1, r6
 8007f18:	0028      	movs	r0, r5
 8007f1a:	9300      	str	r3, [sp, #0]
 8007f1c:	9b05      	ldr	r3, [sp, #20]
 8007f1e:	f7ff fd99 	bl	8007a54 <UG_DrawLine>
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 8007f22:	9b07      	ldr	r3, [sp, #28]
 8007f24:	b2a5      	uxth	r5, r4
 8007f26:	3b02      	subs	r3, #2
 8007f28:	b21b      	sxth	r3, r3
 8007f2a:	9306      	str	r3, [sp, #24]
 8007f2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f2e:	1c6c      	adds	r4, r5, #1
 8007f30:	891b      	ldrh	r3, [r3, #8]
 8007f32:	b224      	sxth	r4, r4
 8007f34:	9300      	str	r3, [sp, #0]
 8007f36:	9b04      	ldr	r3, [sp, #16]
 8007f38:	0020      	movs	r0, r4
 8007f3a:	0019      	movs	r1, r3
 8007f3c:	9a06      	ldr	r2, [sp, #24]
 8007f3e:	f7ff fd89 	bl	8007a54 <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 8007f42:	9b08      	ldr	r3, [sp, #32]
 8007f44:	0022      	movs	r2, r4
 8007f46:	1c9e      	adds	r6, r3, #2
 8007f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f4a:	b236      	sxth	r6, r6
 8007f4c:	1e9f      	subs	r7, r3, #2
 8007f4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f50:	b23f      	sxth	r7, r7
 8007f52:	895b      	ldrh	r3, [r3, #10]
 8007f54:	0031      	movs	r1, r6
 8007f56:	0020      	movs	r0, r4
 8007f58:	9300      	str	r3, [sp, #0]
 8007f5a:	003b      	movs	r3, r7
 8007f5c:	f7ff fd7a 	bl	8007a54 <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 8007f60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f62:	0020      	movs	r0, r4
 8007f64:	899b      	ldrh	r3, [r3, #12]
 8007f66:	9a03      	ldr	r2, [sp, #12]
 8007f68:	9300      	str	r3, [sp, #0]
 8007f6a:	9b05      	ldr	r3, [sp, #20]
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 8007f6c:	3502      	adds	r5, #2
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 8007f6e:	0019      	movs	r1, r3
 8007f70:	f7ff fd70 	bl	8007a54 <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 8007f74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f76:	9a03      	ldr	r2, [sp, #12]
 8007f78:	89db      	ldrh	r3, [r3, #14]
 8007f7a:	0010      	movs	r0, r2
 8007f7c:	9904      	ldr	r1, [sp, #16]
 8007f7e:	9300      	str	r3, [sp, #0]
 8007f80:	003b      	movs	r3, r7
 8007f82:	f7ff fd67 	bl	8007a54 <UG_DrawLine>
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 8007f86:	9b07      	ldr	r3, [sp, #28]
 8007f88:	b22c      	sxth	r4, r5
 8007f8a:	1eda      	subs	r2, r3, #3
 8007f8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f8e:	0031      	movs	r1, r6
 8007f90:	8a1b      	ldrh	r3, [r3, #16]
 8007f92:	0020      	movs	r0, r4
 8007f94:	9300      	str	r3, [sp, #0]
 8007f96:	b212      	sxth	r2, r2
 8007f98:	0033      	movs	r3, r6
 8007f9a:	f7ff fd5b 	bl	8007a54 <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 8007f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fa0:	0022      	movs	r2, r4
 8007fa2:	1edd      	subs	r5, r3, #3
 8007fa4:	9b08      	ldr	r3, [sp, #32]
 8007fa6:	b22d      	sxth	r5, r5
 8007fa8:	1cd9      	adds	r1, r3, #3
 8007faa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fac:	0020      	movs	r0, r4
 8007fae:	8a5b      	ldrh	r3, [r3, #18]
 8007fb0:	b209      	sxth	r1, r1
 8007fb2:	9300      	str	r3, [sp, #0]
 8007fb4:	002b      	movs	r3, r5
 8007fb6:	f7ff fd4d 	bl	8007a54 <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 8007fba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fbc:	0039      	movs	r1, r7
 8007fbe:	8a9b      	ldrh	r3, [r3, #20]
 8007fc0:	0020      	movs	r0, r4
 8007fc2:	9a06      	ldr	r2, [sp, #24]
 8007fc4:	9300      	str	r3, [sp, #0]
 8007fc6:	003b      	movs	r3, r7
 8007fc8:	f7ff fd44 	bl	8007a54 <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 8007fcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fce:	9a06      	ldr	r2, [sp, #24]
 8007fd0:	8adb      	ldrh	r3, [r3, #22]
 8007fd2:	0031      	movs	r1, r6
 8007fd4:	9300      	str	r3, [sp, #0]
 8007fd6:	0010      	movs	r0, r2
 8007fd8:	002b      	movs	r3, r5
 8007fda:	f7ff fd3b 	bl	8007a54 <UG_DrawLine>
}
 8007fde:	b00b      	add	sp, #44	; 0x2c
 8007fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007fe4 <UG_DriverRegister>:
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8007fe4:	2803      	cmp	r0, #3
 8007fe6:	d807      	bhi.n	8007ff8 <UG_DriverRegister+0x14>
   gui->driver[type].driver = driver;
 8007fe8:	4a04      	ldr	r2, [pc, #16]	; (8007ffc <UG_DriverRegister+0x18>)
 8007fea:	00c3      	lsls	r3, r0, #3
 8007fec:	6810      	ldr	r0, [r2, #0]
 8007fee:	18c0      	adds	r0, r0, r3
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 8007ff0:	2303      	movs	r3, #3
   gui->driver[type].driver = driver;
 8007ff2:	6541      	str	r1, [r0, #84]	; 0x54
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 8007ff4:	3058      	adds	r0, #88	; 0x58
 8007ff6:	7003      	strb	r3, [r0, #0]
}
 8007ff8:	4770      	bx	lr
 8007ffa:	46c0      	nop			; (mov r8, r8)
 8007ffc:	200005dc 	.word	0x200005dc

08008000 <UG_Update>:
{
 8008000:	b5f0      	push	{r4, r5, r6, r7, lr}
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 8008002:	4caa      	ldr	r4, [pc, #680]	; (80082ac <UG_Update+0x2ac>)
 8008004:	2001      	movs	r0, #1
 8008006:	6822      	ldr	r2, [r4, #0]
{
 8008008:	b087      	sub	sp, #28
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 800800a:	0011      	movs	r1, r2
 800800c:	3152      	adds	r1, #82	; 0x52
 800800e:	780b      	ldrb	r3, [r1, #0]
 8008010:	4203      	tst	r3, r0
 8008012:	d001      	beq.n	8008018 <UG_Update+0x18>
 8008014:	4383      	bics	r3, r0
 8008016:	700b      	strb	r3, [r1, #0]
   if ( gui->next_window != gui->active_window )
 8008018:	68d3      	ldr	r3, [r2, #12]
 800801a:	6910      	ldr	r0, [r2, #16]
 800801c:	4283      	cmp	r3, r0
 800801e:	d025      	beq.n	800806c <UG_Update+0x6c>
      if ( gui->next_window != NULL )
 8008020:	2b00      	cmp	r3, #0
 8008022:	d023      	beq.n	800806c <UG_Update+0x6c>
         gui->last_window = gui->active_window;
 8008024:	6150      	str	r0, [r2, #20]
         gui->active_window = gui->next_window;
 8008026:	6113      	str	r3, [r2, #16]
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 8008028:	2800      	cmp	r0, #0
 800802a:	d017      	beq.n	800805c <UG_Update+0x5c>
 800802c:	7d82      	ldrb	r2, [r0, #22]
 800802e:	0792      	lsls	r2, r2, #30
 8008030:	d514      	bpl.n	800805c <UG_Update+0x5c>
 8008032:	7a02      	ldrb	r2, [r0, #8]
 8008034:	0712      	lsls	r2, r2, #28
 8008036:	d511      	bpl.n	800805c <UG_Update+0x5c>
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 8008038:	220e      	movs	r2, #14
 800803a:	5e81      	ldrsh	r1, [r0, r2]
 800803c:	250e      	movs	r5, #14
 800803e:	5f5a      	ldrsh	r2, [r3, r5]
 8008040:	4291      	cmp	r1, r2
 8008042:	d109      	bne.n	8008058 <UG_Update+0x58>
 8008044:	6901      	ldr	r1, [r0, #16]
 8008046:	691a      	ldr	r2, [r3, #16]
 8008048:	4291      	cmp	r1, r2
 800804a:	d105      	bne.n	8008058 <UG_Update+0x58>
 800804c:	2114      	movs	r1, #20
 800804e:	5e42      	ldrsh	r2, [r0, r1]
 8008050:	2114      	movs	r1, #20
 8008052:	5e5b      	ldrsh	r3, [r3, r1]
 8008054:	429a      	cmp	r2, r3
 8008056:	d001      	beq.n	800805c <UG_Update+0x5c>
               _UG_WindowDrawTitle( gui->last_window );
 8008058:	f7ff fec2 	bl	8007de0 <_UG_WindowDrawTitle.isra.0>
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 800805c:	6823      	ldr	r3, [r4, #0]
 800805e:	6919      	ldr	r1, [r3, #16]
 8008060:	2340      	movs	r3, #64	; 0x40
 8008062:	7a0a      	ldrb	r2, [r1, #8]
 8008064:	439a      	bics	r2, r3
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 8008066:	3b18      	subs	r3, #24
 8008068:	4313      	orrs	r3, r2
 800806a:	720b      	strb	r3, [r1, #8]
   if ( gui->active_window != NULL )
 800806c:	6822      	ldr	r2, [r4, #0]
 800806e:	6916      	ldr	r6, [r2, #16]
 8008070:	2e00      	cmp	r6, #0
 8008072:	d108      	bne.n	8008086 <UG_Update+0x86>
   if(gui->device->flush){
 8008074:	4b8d      	ldr	r3, [pc, #564]	; (80082ac <UG_Update+0x2ac>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d000      	beq.n	8008082 <UG_Update+0x82>
 8008080:	e111      	b.n	80082a6 <UG_Update+0x2a6>
}
 8008082:	b007      	add	sp, #28
 8008084:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ( wnd->state & WND_STATE_UPDATE )
 8008086:	2120      	movs	r1, #32
 8008088:	7a33      	ldrb	r3, [r6, #8]
 800808a:	420b      	tst	r3, r1
 800808c:	d057      	beq.n	800813e <UG_Update+0x13e>
{
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 800808e:	200e      	movs	r0, #14
 8008090:	5e34      	ldrsh	r4, [r6, r0]
   ys = wnd->ys;
 8008092:	2010      	movs	r0, #16
 8008094:	5e35      	ldrsh	r5, [r6, r0]
   xe = wnd->xe;
 8008096:	2712      	movs	r7, #18
 8008098:	5ff0      	ldrsh	r0, [r6, r7]
 800809a:	9003      	str	r0, [sp, #12]
   ye = wnd->ye;
 800809c:	2014      	movs	r0, #20
 800809e:	5e37      	ldrsh	r7, [r6, r0]

   wnd->state &= ~WND_STATE_UPDATE;
 80080a0:	0018      	movs	r0, r3
 80080a2:	4388      	bics	r0, r1
 80080a4:	7230      	strb	r0, [r6, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 80080a6:	0719      	lsls	r1, r3, #28
 80080a8:	d400      	bmi.n	80080ac <UG_Update+0xac>
 80080aa:	e086      	b.n	80081ba <UG_Update+0x1ba>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 80080ac:	7db2      	ldrb	r2, [r6, #22]
 80080ae:	07d2      	lsls	r2, r2, #31
 80080b0:	d513      	bpl.n	80080da <UG_Update+0xda>
 80080b2:	065b      	lsls	r3, r3, #25
 80080b4:	d411      	bmi.n	80080da <UG_Update+0xda>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 80080b6:	4b7e      	ldr	r3, [pc, #504]	; (80082b0 <UG_Update+0x2b0>)
 80080b8:	0029      	movs	r1, r5
 80080ba:	0020      	movs	r0, r4
 80080bc:	9300      	str	r3, [sp, #0]
 80080be:	9a03      	ldr	r2, [sp, #12]
 80080c0:	003b      	movs	r3, r7
 80080c2:	f7ff fef7 	bl	8007eb4 <_UG_DrawObjectFrame>
         xs+=3;
         ys+=3;
         xe-=3;
 80080c6:	9b03      	ldr	r3, [sp, #12]
         xs+=3;
 80080c8:	3403      	adds	r4, #3
         xe-=3;
 80080ca:	3b03      	subs	r3, #3
         ys+=3;
 80080cc:	3503      	adds	r5, #3
         xe-=3;
 80080ce:	b21b      	sxth	r3, r3
         ye-=3;
 80080d0:	3f03      	subs	r7, #3
         xs+=3;
 80080d2:	b224      	sxth	r4, r4
         ys+=3;
 80080d4:	b22d      	sxth	r5, r5
         xe-=3;
 80080d6:	9303      	str	r3, [sp, #12]
         ye-=3;
 80080d8:	b23f      	sxth	r7, r7
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 80080da:	7db3      	ldrb	r3, [r6, #22]
 80080dc:	079b      	lsls	r3, r3, #30
 80080de:	d50c      	bpl.n	80080fa <UG_Update+0xfa>
      {
         _UG_WindowDrawTitle( wnd );
 80080e0:	0030      	movs	r0, r6
 80080e2:	f7ff fe7d 	bl	8007de0 <_UG_WindowDrawTitle.isra.0>
         ys += wnd->title.height+1;
 80080e6:	0033      	movs	r3, r6
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 80080e8:	2140      	movs	r1, #64	; 0x40
 80080ea:	7a32      	ldrb	r2, [r6, #8]
         ys += wnd->title.height+1;
 80080ec:	332c      	adds	r3, #44	; 0x2c
 80080ee:	781b      	ldrb	r3, [r3, #0]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 80080f0:	420a      	tst	r2, r1
 80080f2:	d122      	bne.n	800813a <UG_Update+0x13a>
         ys += wnd->title.height+1;
 80080f4:	3301      	adds	r3, #1
 80080f6:	195d      	adds	r5, r3, r5
 80080f8:	b22d      	sxth	r5, r5
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
            return;
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 80080fa:	89b3      	ldrh	r3, [r6, #12]
 80080fc:	0029      	movs	r1, r5
 80080fe:	0020      	movs	r0, r4
 8008100:	9a03      	ldr	r2, [sp, #12]
 8008102:	9300      	str	r3, [sp, #0]
 8008104:	003b      	movs	r3, r7
 8008106:	f7ff fc57 	bl	80079b8 <UG_FillFrame>
      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
      for(i=0; i<objcnt; i++)
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 800810a:	2408      	movs	r4, #8
      for(i=0; i<objcnt; i++)
 800810c:	2200      	movs	r2, #0
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 800810e:	2560      	movs	r5, #96	; 0x60
      objcnt = wnd->objcnt;
 8008110:	7831      	ldrb	r1, [r6, #0]
      for(i=0; i<objcnt; i++)
 8008112:	b293      	uxth	r3, r2
 8008114:	4299      	cmp	r1, r3
 8008116:	d912      	bls.n	800813e <UG_Update+0x13e>
         obj = (UG_OBJECT*)&wnd->objlst[i];
 8008118:	6877      	ldr	r7, [r6, #4]
 800811a:	0153      	lsls	r3, r2, #5
 800811c:	18f8      	adds	r0, r7, r3
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 800811e:	5cfb      	ldrb	r3, [r7, r3]
         obj = (UG_OBJECT*)&wnd->objlst[i];
 8008120:	4684      	mov	ip, r0
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 8008122:	001f      	movs	r7, r3
 8008124:	2003      	movs	r0, #3
 8008126:	4007      	ands	r7, r0
 8008128:	2f02      	cmp	r7, #2
 800812a:	d104      	bne.n	8008136 <UG_Update+0x136>
 800812c:	4223      	tst	r3, r4
 800812e:	d002      	beq.n	8008136 <UG_Update+0x136>
 8008130:	4660      	mov	r0, ip
 8008132:	432b      	orrs	r3, r5
 8008134:	7003      	strb	r3, [r0, #0]
      for(i=0; i<objcnt; i++)
 8008136:	3201      	adds	r2, #1
 8008138:	e7eb      	b.n	8008112 <UG_Update+0x112>
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 800813a:	438a      	bics	r2, r1
 800813c:	7232      	strb	r2, [r6, #8]
      if ( wnd->state & WND_STATE_VISIBLE )
 800813e:	7a33      	ldrb	r3, [r6, #8]
 8008140:	071b      	lsls	r3, r3, #28
 8008142:	d597      	bpl.n	8008074 <UG_Update+0x74>
   xp = gui->touch.xp;
 8008144:	4b59      	ldr	r3, [pc, #356]	; (80082ac <UG_Update+0x2ac>)
   for(i=0; i<objcnt; i++)
 8008146:	2000      	movs	r0, #0
   xp = gui->touch.xp;
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2206      	movs	r2, #6
 800814c:	5e9c      	ldrsh	r4, [r3, r2]
   yp = gui->touch.yp;
 800814e:	2108      	movs	r1, #8
 8008150:	5e5a      	ldrsh	r2, [r3, r1]
 8008152:	9203      	str	r2, [sp, #12]
   tchstate = gui->touch.state;
 8008154:	791b      	ldrb	r3, [r3, #4]
 8008156:	9305      	str	r3, [sp, #20]
   objcnt = wnd->objcnt;
 8008158:	7833      	ldrb	r3, [r6, #0]
 800815a:	9304      	str	r3, [sp, #16]
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT )
 800815c:	2320      	movs	r3, #32
 800815e:	469c      	mov	ip, r3
   for(i=0; i<objcnt; i++)
 8008160:	9a04      	ldr	r2, [sp, #16]
 8008162:	b283      	uxth	r3, r0
 8008164:	429a      	cmp	r2, r3
 8008166:	d832      	bhi.n	80081ce <UG_Update+0x1ce>
 8008168:	2700      	movs	r7, #0
   for(i=0; i<objcnt; i++)
 800816a:	9a04      	ldr	r2, [sp, #16]
 800816c:	b2bb      	uxth	r3, r7
 800816e:	429a      	cmp	r2, r3
 8008170:	d879      	bhi.n	8008266 <UG_Update+0x266>
   msg.type = MSG_TYPE_OBJECT;
 8008172:	2302      	movs	r3, #2
   msg.src = NULL;
 8008174:	2400      	movs	r4, #0
 8008176:	4d4f      	ldr	r5, [pc, #316]	; (80082b4 <UG_Update+0x2b4>)
   msg.type = MSG_TYPE_OBJECT;
 8008178:	702b      	strb	r3, [r5, #0]
   objcnt = wnd->objcnt;
 800817a:	7833      	ldrb	r3, [r6, #0]
   msg.src = NULL;
 800817c:	606c      	str	r4, [r5, #4]
   objcnt = wnd->objcnt;
 800817e:	9303      	str	r3, [sp, #12]
   for(i=0; i<objcnt; i++)
 8008180:	9a03      	ldr	r2, [sp, #12]
 8008182:	b2a3      	uxth	r3, r4
 8008184:	429a      	cmp	r2, r3
 8008186:	d800      	bhi.n	800818a <UG_Update+0x18a>
 8008188:	e774      	b.n	8008074 <UG_Update+0x74>
      obj = (UG_OBJECT*)&wnd->objlst[i];
 800818a:	6872      	ldr	r2, [r6, #4]
 800818c:	0163      	lsls	r3, r4, #5
 800818e:	18d7      	adds	r7, r2, r3
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8008190:	5cd3      	ldrb	r3, [r2, r3]
 8008192:	2203      	movs	r2, #3
 8008194:	4013      	ands	r3, r2
 8008196:	2b02      	cmp	r3, #2
 8008198:	d10d      	bne.n	80081b6 <UG_Update+0x1b6>
         if ( obj->event != OBJ_EVENT_NONE )
 800819a:	7ebb      	ldrb	r3, [r7, #26]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d00a      	beq.n	80081b6 <UG_Update+0x1b6>
            msg.src = obj;
 80081a0:	606f      	str	r7, [r5, #4]
            msg.id = obj->type;
 80081a2:	7e3a      	ldrb	r2, [r7, #24]
            wnd->cb( &msg );
 80081a4:	0028      	movs	r0, r5
            msg.id = obj->type;
 80081a6:	706a      	strb	r2, [r5, #1]
            msg.sub_id = obj->id;
 80081a8:	7e7a      	ldrb	r2, [r7, #25]
            msg.event = obj->event;
 80081aa:	70eb      	strb	r3, [r5, #3]
            msg.sub_id = obj->id;
 80081ac:	70aa      	strb	r2, [r5, #2]
            wnd->cb( &msg );
 80081ae:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80081b0:	4798      	blx	r3
            obj->event = OBJ_EVENT_NONE;
 80081b2:	2300      	movs	r3, #0
 80081b4:	76bb      	strb	r3, [r7, #26]
   for(i=0; i<objcnt; i++)
 80081b6:	3401      	adds	r4, #1
 80081b8:	e7e2      	b.n	8008180 <UG_Update+0x180>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 80081ba:	3250      	adds	r2, #80	; 0x50
 80081bc:	8813      	ldrh	r3, [r2, #0]
 80081be:	0021      	movs	r1, r4
 80081c0:	9300      	str	r3, [sp, #0]
 80081c2:	0020      	movs	r0, r4
 80081c4:	003b      	movs	r3, r7
 80081c6:	9a03      	ldr	r2, [sp, #12]
 80081c8:	f7ff fbf6 	bl	80079b8 <UG_FillFrame>
 80081cc:	e7b7      	b.n	800813e <UG_Update+0x13e>
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 80081ce:	274b      	movs	r7, #75	; 0x4b
      obj = (UG_OBJECT*)&wnd->objlst[i];
 80081d0:	6871      	ldr	r1, [r6, #4]
 80081d2:	0143      	lsls	r3, r0, #5
 80081d4:	18c9      	adds	r1, r1, r3
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 80081d6:	780a      	ldrb	r2, [r1, #0]
      objtouch = obj->touch_state;
 80081d8:	784b      	ldrb	r3, [r1, #1]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 80081da:	403a      	ands	r2, r7
 80081dc:	2a0a      	cmp	r2, #10
 80081de:	d12b      	bne.n	8008238 <UG_Update+0x238>
         if ( (tchstate) && xp != -1 )
 80081e0:	001a      	movs	r2, r3
 80081e2:	2540      	movs	r5, #64	; 0x40
 80081e4:	9f05      	ldr	r7, [sp, #20]
 80081e6:	402a      	ands	r2, r5
 80081e8:	2f00      	cmp	r7, #0
 80081ea:	d02e      	beq.n	800824a <UG_Update+0x24a>
 80081ec:	1c67      	adds	r7, r4, #1
 80081ee:	d02c      	beq.n	800824a <UG_Update+0x24a>
            if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 80081f0:	2a00      	cmp	r2, #0
 80081f2:	d103      	bne.n	80081fc <UG_Update+0x1fc>
               objtouch &= ~(OBJ_TOUCH_STATE_RELEASED_ON_OBJECT | OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT);
 80081f4:	3218      	adds	r2, #24
 80081f6:	4393      	bics	r3, r2
 80081f8:	3a13      	subs	r2, #19
 80081fa:	4313      	orrs	r3, r2
            objtouch &= ~OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 80081fc:	4667      	mov	r7, ip
 80081fe:	001a      	movs	r2, r3
 8008200:	43ba      	bics	r2, r7
            if ( xp >= obj->a_abs.xs )
 8008202:	2508      	movs	r5, #8
 8008204:	5f4f      	ldrsh	r7, [r1, r5]
 8008206:	42a7      	cmp	r7, r4
 8008208:	dc13      	bgt.n	8008232 <UG_Update+0x232>
               if ( xp <= obj->a_abs.xe )
 800820a:	250c      	movs	r5, #12
 800820c:	5f4f      	ldrsh	r7, [r1, r5]
 800820e:	42a7      	cmp	r7, r4
 8008210:	db0f      	blt.n	8008232 <UG_Update+0x232>
                  if ( yp >= obj->a_abs.ys )
 8008212:	250a      	movs	r5, #10
 8008214:	5f4f      	ldrsh	r7, [r1, r5]
 8008216:	9d03      	ldr	r5, [sp, #12]
 8008218:	42af      	cmp	r7, r5
 800821a:	dc0a      	bgt.n	8008232 <UG_Update+0x232>
                     if ( yp <= obj->a_abs.ye )
 800821c:	250e      	movs	r5, #14
 800821e:	5f4f      	ldrsh	r7, [r1, r5]
 8008220:	9d03      	ldr	r5, [sp, #12]
 8008222:	42af      	cmp	r7, r5
 8008224:	db05      	blt.n	8008232 <UG_Update+0x232>
                        if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8008226:	2540      	movs	r5, #64	; 0x40
 8008228:	422b      	tst	r3, r5
 800822a:	d008      	beq.n	800823e <UG_Update+0x23e>
                        objtouch |= OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 800822c:	4663      	mov	r3, ip
 800822e:	431a      	orrs	r2, r3
 8008230:	b2d2      	uxtb	r2, r2
            objtouch |= OBJ_TOUCH_STATE_IS_PRESSED;
 8008232:	2340      	movs	r3, #64	; 0x40
 8008234:	431a      	orrs	r2, r3
 8008236:	b2d3      	uxtb	r3, r2
      obj->touch_state = objtouch;
 8008238:	704b      	strb	r3, [r1, #1]
   for(i=0; i<objcnt; i++)
 800823a:	3001      	adds	r0, #1
 800823c:	e790      	b.n	8008160 <UG_Update+0x160>
                           objtouch |= OBJ_TOUCH_STATE_PRESSED_ON_OBJECT;
 800823e:	2224      	movs	r2, #36	; 0x24
 8008240:	4393      	bics	r3, r2
 8008242:	001a      	movs	r2, r3
 8008244:	2322      	movs	r3, #34	; 0x22
 8008246:	431a      	orrs	r2, r3
 8008248:	e7f3      	b.n	8008232 <UG_Update+0x232>
         else if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 800824a:	2a00      	cmp	r2, #0
 800824c:	d0f4      	beq.n	8008238 <UG_Update+0x238>
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT )
 800824e:	4662      	mov	r2, ip
 8008250:	4213      	tst	r3, r2
 8008252:	d006      	beq.n	8008262 <UG_Update+0x262>
               objtouch |= OBJ_TOUCH_STATE_RELEASED_ON_OBJECT;
 8008254:	2208      	movs	r2, #8
               objtouch |= OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT;
 8008256:	431a      	orrs	r2, r3
            objtouch &= ~(OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_PRESSED_ON_OBJECT | OBJ_TOUCH_STATE_IS_PRESSED);
 8008258:	2346      	movs	r3, #70	; 0x46
 800825a:	439a      	bics	r2, r3
 800825c:	3b45      	subs	r3, #69	; 0x45
 800825e:	4313      	orrs	r3, r2
 8008260:	e7ea      	b.n	8008238 <UG_Update+0x238>
               objtouch |= OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT;
 8008262:	2210      	movs	r2, #16
 8008264:	e7f7      	b.n	8008256 <UG_Update+0x256>
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8008266:	6872      	ldr	r2, [r6, #4]
 8008268:	017b      	lsls	r3, r7, #5
 800826a:	18d5      	adds	r5, r2, r3
      objstate = obj->state;
 800826c:	5cd4      	ldrb	r4, [r2, r3]
      objtouch = obj->touch_state;
 800826e:	786b      	ldrb	r3, [r5, #1]
 8008270:	9303      	str	r3, [sp, #12]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8008272:	2303      	movs	r3, #3
 8008274:	4023      	ands	r3, r4
 8008276:	2b02      	cmp	r3, #2
 8008278:	d113      	bne.n	80082a2 <UG_Update+0x2a2>
         if ( objstate & OBJ_STATE_UPDATE )
 800827a:	331e      	adds	r3, #30
 800827c:	421c      	tst	r4, r3
 800827e:	d003      	beq.n	8008288 <UG_Update+0x288>
            obj->update(wnd,obj);
 8008280:	0029      	movs	r1, r5
 8008282:	0030      	movs	r0, r6
 8008284:	686b      	ldr	r3, [r5, #4]
 8008286:	4798      	blx	r3
         if ( (objstate & OBJ_STATE_VISIBLE) && (objstate & OBJ_STATE_TOUCH_ENABLE) )
 8008288:	0723      	lsls	r3, r4, #28
 800828a:	d50a      	bpl.n	80082a2 <UG_Update+0x2a2>
 800828c:	b264      	sxtb	r4, r4
 800828e:	2c00      	cmp	r4, #0
 8008290:	da07      	bge.n	80082a2 <UG_Update+0x2a2>
            if ( (objtouch & (OBJ_TOUCH_STATE_CHANGED | OBJ_TOUCH_STATE_IS_PRESSED)) )
 8008292:	2341      	movs	r3, #65	; 0x41
 8008294:	9a03      	ldr	r2, [sp, #12]
 8008296:	421a      	tst	r2, r3
 8008298:	d003      	beq.n	80082a2 <UG_Update+0x2a2>
               obj->update(wnd,obj);
 800829a:	0029      	movs	r1, r5
 800829c:	0030      	movs	r0, r6
 800829e:	686b      	ldr	r3, [r5, #4]
 80082a0:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 80082a2:	3701      	adds	r7, #1
 80082a4:	e761      	b.n	800816a <UG_Update+0x16a>
     gui->device->flush();
 80082a6:	4798      	blx	r3
}
 80082a8:	e6eb      	b.n	8008082 <UG_Update+0x82>
 80082aa:	46c0      	nop			; (mov r8, r8)
 80082ac:	200005dc 	.word	0x200005dc
 80082b0:	0800db18 	.word	0x0800db18
 80082b4:	200005f0 	.word	0x200005f0

080082b8 <malloc>:
 80082b8:	b510      	push	{r4, lr}
 80082ba:	4b03      	ldr	r3, [pc, #12]	; (80082c8 <malloc+0x10>)
 80082bc:	0001      	movs	r1, r0
 80082be:	6818      	ldr	r0, [r3, #0]
 80082c0:	f000 f826 	bl	8008310 <_malloc_r>
 80082c4:	bd10      	pop	{r4, pc}
 80082c6:	46c0      	nop			; (mov r8, r8)
 80082c8:	20000078 	.word	0x20000078

080082cc <sbrk_aligned>:
 80082cc:	b570      	push	{r4, r5, r6, lr}
 80082ce:	4e0f      	ldr	r6, [pc, #60]	; (800830c <sbrk_aligned+0x40>)
 80082d0:	000d      	movs	r5, r1
 80082d2:	6831      	ldr	r1, [r6, #0]
 80082d4:	0004      	movs	r4, r0
 80082d6:	2900      	cmp	r1, #0
 80082d8:	d102      	bne.n	80082e0 <sbrk_aligned+0x14>
 80082da:	f000 fe9f 	bl	800901c <_sbrk_r>
 80082de:	6030      	str	r0, [r6, #0]
 80082e0:	0029      	movs	r1, r5
 80082e2:	0020      	movs	r0, r4
 80082e4:	f000 fe9a 	bl	800901c <_sbrk_r>
 80082e8:	1c43      	adds	r3, r0, #1
 80082ea:	d00a      	beq.n	8008302 <sbrk_aligned+0x36>
 80082ec:	2303      	movs	r3, #3
 80082ee:	1cc5      	adds	r5, r0, #3
 80082f0:	439d      	bics	r5, r3
 80082f2:	42a8      	cmp	r0, r5
 80082f4:	d007      	beq.n	8008306 <sbrk_aligned+0x3a>
 80082f6:	1a29      	subs	r1, r5, r0
 80082f8:	0020      	movs	r0, r4
 80082fa:	f000 fe8f 	bl	800901c <_sbrk_r>
 80082fe:	3001      	adds	r0, #1
 8008300:	d101      	bne.n	8008306 <sbrk_aligned+0x3a>
 8008302:	2501      	movs	r5, #1
 8008304:	426d      	negs	r5, r5
 8008306:	0028      	movs	r0, r5
 8008308:	bd70      	pop	{r4, r5, r6, pc}
 800830a:	46c0      	nop			; (mov r8, r8)
 800830c:	200005fc 	.word	0x200005fc

08008310 <_malloc_r>:
 8008310:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008312:	2203      	movs	r2, #3
 8008314:	1ccb      	adds	r3, r1, #3
 8008316:	4393      	bics	r3, r2
 8008318:	3308      	adds	r3, #8
 800831a:	0006      	movs	r6, r0
 800831c:	001f      	movs	r7, r3
 800831e:	2b0c      	cmp	r3, #12
 8008320:	d238      	bcs.n	8008394 <_malloc_r+0x84>
 8008322:	270c      	movs	r7, #12
 8008324:	42b9      	cmp	r1, r7
 8008326:	d837      	bhi.n	8008398 <_malloc_r+0x88>
 8008328:	0030      	movs	r0, r6
 800832a:	f000 f873 	bl	8008414 <__malloc_lock>
 800832e:	4b38      	ldr	r3, [pc, #224]	; (8008410 <_malloc_r+0x100>)
 8008330:	9300      	str	r3, [sp, #0]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	001c      	movs	r4, r3
 8008336:	2c00      	cmp	r4, #0
 8008338:	d133      	bne.n	80083a2 <_malloc_r+0x92>
 800833a:	0039      	movs	r1, r7
 800833c:	0030      	movs	r0, r6
 800833e:	f7ff ffc5 	bl	80082cc <sbrk_aligned>
 8008342:	0004      	movs	r4, r0
 8008344:	1c43      	adds	r3, r0, #1
 8008346:	d15e      	bne.n	8008406 <_malloc_r+0xf6>
 8008348:	9b00      	ldr	r3, [sp, #0]
 800834a:	681c      	ldr	r4, [r3, #0]
 800834c:	0025      	movs	r5, r4
 800834e:	2d00      	cmp	r5, #0
 8008350:	d14e      	bne.n	80083f0 <_malloc_r+0xe0>
 8008352:	2c00      	cmp	r4, #0
 8008354:	d051      	beq.n	80083fa <_malloc_r+0xea>
 8008356:	6823      	ldr	r3, [r4, #0]
 8008358:	0029      	movs	r1, r5
 800835a:	18e3      	adds	r3, r4, r3
 800835c:	0030      	movs	r0, r6
 800835e:	9301      	str	r3, [sp, #4]
 8008360:	f000 fe5c 	bl	800901c <_sbrk_r>
 8008364:	9b01      	ldr	r3, [sp, #4]
 8008366:	4283      	cmp	r3, r0
 8008368:	d147      	bne.n	80083fa <_malloc_r+0xea>
 800836a:	6823      	ldr	r3, [r4, #0]
 800836c:	0030      	movs	r0, r6
 800836e:	1aff      	subs	r7, r7, r3
 8008370:	0039      	movs	r1, r7
 8008372:	f7ff ffab 	bl	80082cc <sbrk_aligned>
 8008376:	3001      	adds	r0, #1
 8008378:	d03f      	beq.n	80083fa <_malloc_r+0xea>
 800837a:	6823      	ldr	r3, [r4, #0]
 800837c:	19db      	adds	r3, r3, r7
 800837e:	6023      	str	r3, [r4, #0]
 8008380:	9b00      	ldr	r3, [sp, #0]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d040      	beq.n	800840a <_malloc_r+0xfa>
 8008388:	685a      	ldr	r2, [r3, #4]
 800838a:	42a2      	cmp	r2, r4
 800838c:	d133      	bne.n	80083f6 <_malloc_r+0xe6>
 800838e:	2200      	movs	r2, #0
 8008390:	605a      	str	r2, [r3, #4]
 8008392:	e014      	b.n	80083be <_malloc_r+0xae>
 8008394:	2b00      	cmp	r3, #0
 8008396:	dac5      	bge.n	8008324 <_malloc_r+0x14>
 8008398:	230c      	movs	r3, #12
 800839a:	2500      	movs	r5, #0
 800839c:	6033      	str	r3, [r6, #0]
 800839e:	0028      	movs	r0, r5
 80083a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80083a2:	6821      	ldr	r1, [r4, #0]
 80083a4:	1bc9      	subs	r1, r1, r7
 80083a6:	d420      	bmi.n	80083ea <_malloc_r+0xda>
 80083a8:	290b      	cmp	r1, #11
 80083aa:	d918      	bls.n	80083de <_malloc_r+0xce>
 80083ac:	19e2      	adds	r2, r4, r7
 80083ae:	6027      	str	r7, [r4, #0]
 80083b0:	42a3      	cmp	r3, r4
 80083b2:	d112      	bne.n	80083da <_malloc_r+0xca>
 80083b4:	9b00      	ldr	r3, [sp, #0]
 80083b6:	601a      	str	r2, [r3, #0]
 80083b8:	6863      	ldr	r3, [r4, #4]
 80083ba:	6011      	str	r1, [r2, #0]
 80083bc:	6053      	str	r3, [r2, #4]
 80083be:	0030      	movs	r0, r6
 80083c0:	0025      	movs	r5, r4
 80083c2:	f000 f82f 	bl	8008424 <__malloc_unlock>
 80083c6:	2207      	movs	r2, #7
 80083c8:	350b      	adds	r5, #11
 80083ca:	1d23      	adds	r3, r4, #4
 80083cc:	4395      	bics	r5, r2
 80083ce:	1aea      	subs	r2, r5, r3
 80083d0:	429d      	cmp	r5, r3
 80083d2:	d0e4      	beq.n	800839e <_malloc_r+0x8e>
 80083d4:	1b5b      	subs	r3, r3, r5
 80083d6:	50a3      	str	r3, [r4, r2]
 80083d8:	e7e1      	b.n	800839e <_malloc_r+0x8e>
 80083da:	605a      	str	r2, [r3, #4]
 80083dc:	e7ec      	b.n	80083b8 <_malloc_r+0xa8>
 80083de:	6862      	ldr	r2, [r4, #4]
 80083e0:	42a3      	cmp	r3, r4
 80083e2:	d1d5      	bne.n	8008390 <_malloc_r+0x80>
 80083e4:	9b00      	ldr	r3, [sp, #0]
 80083e6:	601a      	str	r2, [r3, #0]
 80083e8:	e7e9      	b.n	80083be <_malloc_r+0xae>
 80083ea:	0023      	movs	r3, r4
 80083ec:	6864      	ldr	r4, [r4, #4]
 80083ee:	e7a2      	b.n	8008336 <_malloc_r+0x26>
 80083f0:	002c      	movs	r4, r5
 80083f2:	686d      	ldr	r5, [r5, #4]
 80083f4:	e7ab      	b.n	800834e <_malloc_r+0x3e>
 80083f6:	0013      	movs	r3, r2
 80083f8:	e7c4      	b.n	8008384 <_malloc_r+0x74>
 80083fa:	230c      	movs	r3, #12
 80083fc:	0030      	movs	r0, r6
 80083fe:	6033      	str	r3, [r6, #0]
 8008400:	f000 f810 	bl	8008424 <__malloc_unlock>
 8008404:	e7cb      	b.n	800839e <_malloc_r+0x8e>
 8008406:	6027      	str	r7, [r4, #0]
 8008408:	e7d9      	b.n	80083be <_malloc_r+0xae>
 800840a:	605b      	str	r3, [r3, #4]
 800840c:	deff      	udf	#255	; 0xff
 800840e:	46c0      	nop			; (mov r8, r8)
 8008410:	200005f8 	.word	0x200005f8

08008414 <__malloc_lock>:
 8008414:	b510      	push	{r4, lr}
 8008416:	4802      	ldr	r0, [pc, #8]	; (8008420 <__malloc_lock+0xc>)
 8008418:	f000 fe51 	bl	80090be <__retarget_lock_acquire_recursive>
 800841c:	bd10      	pop	{r4, pc}
 800841e:	46c0      	nop			; (mov r8, r8)
 8008420:	20000740 	.word	0x20000740

08008424 <__malloc_unlock>:
 8008424:	b510      	push	{r4, lr}
 8008426:	4802      	ldr	r0, [pc, #8]	; (8008430 <__malloc_unlock+0xc>)
 8008428:	f000 fe4a 	bl	80090c0 <__retarget_lock_release_recursive>
 800842c:	bd10      	pop	{r4, pc}
 800842e:	46c0      	nop			; (mov r8, r8)
 8008430:	20000740 	.word	0x20000740

08008434 <__cvt>:
 8008434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008436:	001e      	movs	r6, r3
 8008438:	2300      	movs	r3, #0
 800843a:	0014      	movs	r4, r2
 800843c:	b08b      	sub	sp, #44	; 0x2c
 800843e:	429e      	cmp	r6, r3
 8008440:	da04      	bge.n	800844c <__cvt+0x18>
 8008442:	2180      	movs	r1, #128	; 0x80
 8008444:	0609      	lsls	r1, r1, #24
 8008446:	1873      	adds	r3, r6, r1
 8008448:	001e      	movs	r6, r3
 800844a:	232d      	movs	r3, #45	; 0x2d
 800844c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800844e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008450:	7013      	strb	r3, [r2, #0]
 8008452:	2320      	movs	r3, #32
 8008454:	2203      	movs	r2, #3
 8008456:	439f      	bics	r7, r3
 8008458:	2f46      	cmp	r7, #70	; 0x46
 800845a:	d007      	beq.n	800846c <__cvt+0x38>
 800845c:	003b      	movs	r3, r7
 800845e:	3b45      	subs	r3, #69	; 0x45
 8008460:	4259      	negs	r1, r3
 8008462:	414b      	adcs	r3, r1
 8008464:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008466:	3a01      	subs	r2, #1
 8008468:	18cb      	adds	r3, r1, r3
 800846a:	9310      	str	r3, [sp, #64]	; 0x40
 800846c:	ab09      	add	r3, sp, #36	; 0x24
 800846e:	9304      	str	r3, [sp, #16]
 8008470:	ab08      	add	r3, sp, #32
 8008472:	9303      	str	r3, [sp, #12]
 8008474:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008476:	9200      	str	r2, [sp, #0]
 8008478:	9302      	str	r3, [sp, #8]
 800847a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800847c:	0022      	movs	r2, r4
 800847e:	9301      	str	r3, [sp, #4]
 8008480:	0033      	movs	r3, r6
 8008482:	f000 fec9 	bl	8009218 <_dtoa_r>
 8008486:	0005      	movs	r5, r0
 8008488:	2f47      	cmp	r7, #71	; 0x47
 800848a:	d102      	bne.n	8008492 <__cvt+0x5e>
 800848c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800848e:	07db      	lsls	r3, r3, #31
 8008490:	d528      	bpl.n	80084e4 <__cvt+0xb0>
 8008492:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008494:	18eb      	adds	r3, r5, r3
 8008496:	9307      	str	r3, [sp, #28]
 8008498:	2f46      	cmp	r7, #70	; 0x46
 800849a:	d114      	bne.n	80084c6 <__cvt+0x92>
 800849c:	782b      	ldrb	r3, [r5, #0]
 800849e:	2b30      	cmp	r3, #48	; 0x30
 80084a0:	d10c      	bne.n	80084bc <__cvt+0x88>
 80084a2:	2200      	movs	r2, #0
 80084a4:	2300      	movs	r3, #0
 80084a6:	0020      	movs	r0, r4
 80084a8:	0031      	movs	r1, r6
 80084aa:	f7f7 ffcb 	bl	8000444 <__aeabi_dcmpeq>
 80084ae:	2800      	cmp	r0, #0
 80084b0:	d104      	bne.n	80084bc <__cvt+0x88>
 80084b2:	2301      	movs	r3, #1
 80084b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80084b6:	1a9b      	subs	r3, r3, r2
 80084b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80084ba:	6013      	str	r3, [r2, #0]
 80084bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80084be:	9a07      	ldr	r2, [sp, #28]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	18d3      	adds	r3, r2, r3
 80084c4:	9307      	str	r3, [sp, #28]
 80084c6:	2200      	movs	r2, #0
 80084c8:	2300      	movs	r3, #0
 80084ca:	0020      	movs	r0, r4
 80084cc:	0031      	movs	r1, r6
 80084ce:	f7f7 ffb9 	bl	8000444 <__aeabi_dcmpeq>
 80084d2:	2800      	cmp	r0, #0
 80084d4:	d001      	beq.n	80084da <__cvt+0xa6>
 80084d6:	9b07      	ldr	r3, [sp, #28]
 80084d8:	9309      	str	r3, [sp, #36]	; 0x24
 80084da:	2230      	movs	r2, #48	; 0x30
 80084dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084de:	9907      	ldr	r1, [sp, #28]
 80084e0:	428b      	cmp	r3, r1
 80084e2:	d306      	bcc.n	80084f2 <__cvt+0xbe>
 80084e4:	0028      	movs	r0, r5
 80084e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084e8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80084ea:	1b5b      	subs	r3, r3, r5
 80084ec:	6013      	str	r3, [r2, #0]
 80084ee:	b00b      	add	sp, #44	; 0x2c
 80084f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084f2:	1c59      	adds	r1, r3, #1
 80084f4:	9109      	str	r1, [sp, #36]	; 0x24
 80084f6:	701a      	strb	r2, [r3, #0]
 80084f8:	e7f0      	b.n	80084dc <__cvt+0xa8>

080084fa <__exponent>:
 80084fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084fc:	1c83      	adds	r3, r0, #2
 80084fe:	b087      	sub	sp, #28
 8008500:	9303      	str	r3, [sp, #12]
 8008502:	0005      	movs	r5, r0
 8008504:	000c      	movs	r4, r1
 8008506:	232b      	movs	r3, #43	; 0x2b
 8008508:	7002      	strb	r2, [r0, #0]
 800850a:	2900      	cmp	r1, #0
 800850c:	da01      	bge.n	8008512 <__exponent+0x18>
 800850e:	424c      	negs	r4, r1
 8008510:	3302      	adds	r3, #2
 8008512:	706b      	strb	r3, [r5, #1]
 8008514:	2c09      	cmp	r4, #9
 8008516:	dd2f      	ble.n	8008578 <__exponent+0x7e>
 8008518:	270a      	movs	r7, #10
 800851a:	ab04      	add	r3, sp, #16
 800851c:	1dde      	adds	r6, r3, #7
 800851e:	0020      	movs	r0, r4
 8008520:	0039      	movs	r1, r7
 8008522:	9601      	str	r6, [sp, #4]
 8008524:	f7f7 ff78 	bl	8000418 <__aeabi_idivmod>
 8008528:	3e01      	subs	r6, #1
 800852a:	3130      	adds	r1, #48	; 0x30
 800852c:	0020      	movs	r0, r4
 800852e:	7031      	strb	r1, [r6, #0]
 8008530:	0039      	movs	r1, r7
 8008532:	9402      	str	r4, [sp, #8]
 8008534:	f7f7 fe8a 	bl	800024c <__divsi3>
 8008538:	9b02      	ldr	r3, [sp, #8]
 800853a:	0004      	movs	r4, r0
 800853c:	2b63      	cmp	r3, #99	; 0x63
 800853e:	dcee      	bgt.n	800851e <__exponent+0x24>
 8008540:	9b01      	ldr	r3, [sp, #4]
 8008542:	3430      	adds	r4, #48	; 0x30
 8008544:	1e9a      	subs	r2, r3, #2
 8008546:	0013      	movs	r3, r2
 8008548:	9903      	ldr	r1, [sp, #12]
 800854a:	7014      	strb	r4, [r2, #0]
 800854c:	a804      	add	r0, sp, #16
 800854e:	3007      	adds	r0, #7
 8008550:	4298      	cmp	r0, r3
 8008552:	d80c      	bhi.n	800856e <__exponent+0x74>
 8008554:	2300      	movs	r3, #0
 8008556:	4282      	cmp	r2, r0
 8008558:	d804      	bhi.n	8008564 <__exponent+0x6a>
 800855a:	aa04      	add	r2, sp, #16
 800855c:	3309      	adds	r3, #9
 800855e:	189b      	adds	r3, r3, r2
 8008560:	9a01      	ldr	r2, [sp, #4]
 8008562:	1a9b      	subs	r3, r3, r2
 8008564:	9a03      	ldr	r2, [sp, #12]
 8008566:	18d3      	adds	r3, r2, r3
 8008568:	1b58      	subs	r0, r3, r5
 800856a:	b007      	add	sp, #28
 800856c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800856e:	7818      	ldrb	r0, [r3, #0]
 8008570:	3301      	adds	r3, #1
 8008572:	7008      	strb	r0, [r1, #0]
 8008574:	3101      	adds	r1, #1
 8008576:	e7e9      	b.n	800854c <__exponent+0x52>
 8008578:	2330      	movs	r3, #48	; 0x30
 800857a:	3430      	adds	r4, #48	; 0x30
 800857c:	70ab      	strb	r3, [r5, #2]
 800857e:	70ec      	strb	r4, [r5, #3]
 8008580:	1d2b      	adds	r3, r5, #4
 8008582:	e7f1      	b.n	8008568 <__exponent+0x6e>

08008584 <_printf_float>:
 8008584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008586:	b095      	sub	sp, #84	; 0x54
 8008588:	000c      	movs	r4, r1
 800858a:	9208      	str	r2, [sp, #32]
 800858c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800858e:	9309      	str	r3, [sp, #36]	; 0x24
 8008590:	0007      	movs	r7, r0
 8008592:	f000 fd05 	bl	8008fa0 <_localeconv_r>
 8008596:	6803      	ldr	r3, [r0, #0]
 8008598:	0018      	movs	r0, r3
 800859a:	930c      	str	r3, [sp, #48]	; 0x30
 800859c:	f7f7 fdb0 	bl	8000100 <strlen>
 80085a0:	2300      	movs	r3, #0
 80085a2:	9312      	str	r3, [sp, #72]	; 0x48
 80085a4:	7e23      	ldrb	r3, [r4, #24]
 80085a6:	2207      	movs	r2, #7
 80085a8:	930a      	str	r3, [sp, #40]	; 0x28
 80085aa:	6823      	ldr	r3, [r4, #0]
 80085ac:	900d      	str	r0, [sp, #52]	; 0x34
 80085ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80085b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80085b2:	682b      	ldr	r3, [r5, #0]
 80085b4:	05c9      	lsls	r1, r1, #23
 80085b6:	d547      	bpl.n	8008648 <_printf_float+0xc4>
 80085b8:	189b      	adds	r3, r3, r2
 80085ba:	4393      	bics	r3, r2
 80085bc:	001a      	movs	r2, r3
 80085be:	3208      	adds	r2, #8
 80085c0:	602a      	str	r2, [r5, #0]
 80085c2:	681e      	ldr	r6, [r3, #0]
 80085c4:	685d      	ldr	r5, [r3, #4]
 80085c6:	0032      	movs	r2, r6
 80085c8:	002b      	movs	r3, r5
 80085ca:	64a2      	str	r2, [r4, #72]	; 0x48
 80085cc:	64e3      	str	r3, [r4, #76]	; 0x4c
 80085ce:	2201      	movs	r2, #1
 80085d0:	006b      	lsls	r3, r5, #1
 80085d2:	085b      	lsrs	r3, r3, #1
 80085d4:	930e      	str	r3, [sp, #56]	; 0x38
 80085d6:	0030      	movs	r0, r6
 80085d8:	4bab      	ldr	r3, [pc, #684]	; (8008888 <_printf_float+0x304>)
 80085da:	990e      	ldr	r1, [sp, #56]	; 0x38
 80085dc:	4252      	negs	r2, r2
 80085de:	f7f9 feb1 	bl	8002344 <__aeabi_dcmpun>
 80085e2:	2800      	cmp	r0, #0
 80085e4:	d132      	bne.n	800864c <_printf_float+0xc8>
 80085e6:	2201      	movs	r2, #1
 80085e8:	0030      	movs	r0, r6
 80085ea:	4ba7      	ldr	r3, [pc, #668]	; (8008888 <_printf_float+0x304>)
 80085ec:	990e      	ldr	r1, [sp, #56]	; 0x38
 80085ee:	4252      	negs	r2, r2
 80085f0:	f7f7 ff38 	bl	8000464 <__aeabi_dcmple>
 80085f4:	2800      	cmp	r0, #0
 80085f6:	d129      	bne.n	800864c <_printf_float+0xc8>
 80085f8:	2200      	movs	r2, #0
 80085fa:	2300      	movs	r3, #0
 80085fc:	0030      	movs	r0, r6
 80085fe:	0029      	movs	r1, r5
 8008600:	f7f7 ff26 	bl	8000450 <__aeabi_dcmplt>
 8008604:	2800      	cmp	r0, #0
 8008606:	d003      	beq.n	8008610 <_printf_float+0x8c>
 8008608:	0023      	movs	r3, r4
 800860a:	222d      	movs	r2, #45	; 0x2d
 800860c:	3343      	adds	r3, #67	; 0x43
 800860e:	701a      	strb	r2, [r3, #0]
 8008610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008612:	4d9e      	ldr	r5, [pc, #632]	; (800888c <_printf_float+0x308>)
 8008614:	2b47      	cmp	r3, #71	; 0x47
 8008616:	d900      	bls.n	800861a <_printf_float+0x96>
 8008618:	4d9d      	ldr	r5, [pc, #628]	; (8008890 <_printf_float+0x30c>)
 800861a:	2303      	movs	r3, #3
 800861c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800861e:	6123      	str	r3, [r4, #16]
 8008620:	3301      	adds	r3, #1
 8008622:	439a      	bics	r2, r3
 8008624:	2300      	movs	r3, #0
 8008626:	6022      	str	r2, [r4, #0]
 8008628:	930b      	str	r3, [sp, #44]	; 0x2c
 800862a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800862c:	0021      	movs	r1, r4
 800862e:	9300      	str	r3, [sp, #0]
 8008630:	0038      	movs	r0, r7
 8008632:	9b08      	ldr	r3, [sp, #32]
 8008634:	aa13      	add	r2, sp, #76	; 0x4c
 8008636:	f000 f9fb 	bl	8008a30 <_printf_common>
 800863a:	3001      	adds	r0, #1
 800863c:	d000      	beq.n	8008640 <_printf_float+0xbc>
 800863e:	e0a3      	b.n	8008788 <_printf_float+0x204>
 8008640:	2001      	movs	r0, #1
 8008642:	4240      	negs	r0, r0
 8008644:	b015      	add	sp, #84	; 0x54
 8008646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008648:	3307      	adds	r3, #7
 800864a:	e7b6      	b.n	80085ba <_printf_float+0x36>
 800864c:	0032      	movs	r2, r6
 800864e:	002b      	movs	r3, r5
 8008650:	0030      	movs	r0, r6
 8008652:	0029      	movs	r1, r5
 8008654:	f7f9 fe76 	bl	8002344 <__aeabi_dcmpun>
 8008658:	2800      	cmp	r0, #0
 800865a:	d00b      	beq.n	8008674 <_printf_float+0xf0>
 800865c:	2d00      	cmp	r5, #0
 800865e:	da03      	bge.n	8008668 <_printf_float+0xe4>
 8008660:	0023      	movs	r3, r4
 8008662:	222d      	movs	r2, #45	; 0x2d
 8008664:	3343      	adds	r3, #67	; 0x43
 8008666:	701a      	strb	r2, [r3, #0]
 8008668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800866a:	4d8a      	ldr	r5, [pc, #552]	; (8008894 <_printf_float+0x310>)
 800866c:	2b47      	cmp	r3, #71	; 0x47
 800866e:	d9d4      	bls.n	800861a <_printf_float+0x96>
 8008670:	4d89      	ldr	r5, [pc, #548]	; (8008898 <_printf_float+0x314>)
 8008672:	e7d2      	b.n	800861a <_printf_float+0x96>
 8008674:	2220      	movs	r2, #32
 8008676:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008678:	6863      	ldr	r3, [r4, #4]
 800867a:	4391      	bics	r1, r2
 800867c:	910e      	str	r1, [sp, #56]	; 0x38
 800867e:	1c5a      	adds	r2, r3, #1
 8008680:	d14a      	bne.n	8008718 <_printf_float+0x194>
 8008682:	3307      	adds	r3, #7
 8008684:	6063      	str	r3, [r4, #4]
 8008686:	2380      	movs	r3, #128	; 0x80
 8008688:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800868a:	00db      	lsls	r3, r3, #3
 800868c:	4313      	orrs	r3, r2
 800868e:	2200      	movs	r2, #0
 8008690:	9206      	str	r2, [sp, #24]
 8008692:	aa12      	add	r2, sp, #72	; 0x48
 8008694:	9205      	str	r2, [sp, #20]
 8008696:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008698:	6023      	str	r3, [r4, #0]
 800869a:	9204      	str	r2, [sp, #16]
 800869c:	aa11      	add	r2, sp, #68	; 0x44
 800869e:	9203      	str	r2, [sp, #12]
 80086a0:	2223      	movs	r2, #35	; 0x23
 80086a2:	a908      	add	r1, sp, #32
 80086a4:	9301      	str	r3, [sp, #4]
 80086a6:	6863      	ldr	r3, [r4, #4]
 80086a8:	1852      	adds	r2, r2, r1
 80086aa:	9202      	str	r2, [sp, #8]
 80086ac:	9300      	str	r3, [sp, #0]
 80086ae:	0032      	movs	r2, r6
 80086b0:	002b      	movs	r3, r5
 80086b2:	0038      	movs	r0, r7
 80086b4:	f7ff febe 	bl	8008434 <__cvt>
 80086b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086ba:	0005      	movs	r5, r0
 80086bc:	2b47      	cmp	r3, #71	; 0x47
 80086be:	d109      	bne.n	80086d4 <_printf_float+0x150>
 80086c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086c2:	1cda      	adds	r2, r3, #3
 80086c4:	db02      	blt.n	80086cc <_printf_float+0x148>
 80086c6:	6862      	ldr	r2, [r4, #4]
 80086c8:	4293      	cmp	r3, r2
 80086ca:	dd49      	ble.n	8008760 <_printf_float+0x1dc>
 80086cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086ce:	3b02      	subs	r3, #2
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	930a      	str	r3, [sp, #40]	; 0x28
 80086d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086d6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80086d8:	2b65      	cmp	r3, #101	; 0x65
 80086da:	d824      	bhi.n	8008726 <_printf_float+0x1a2>
 80086dc:	0020      	movs	r0, r4
 80086de:	001a      	movs	r2, r3
 80086e0:	3901      	subs	r1, #1
 80086e2:	3050      	adds	r0, #80	; 0x50
 80086e4:	9111      	str	r1, [sp, #68]	; 0x44
 80086e6:	f7ff ff08 	bl	80084fa <__exponent>
 80086ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80086ec:	900b      	str	r0, [sp, #44]	; 0x2c
 80086ee:	1813      	adds	r3, r2, r0
 80086f0:	6123      	str	r3, [r4, #16]
 80086f2:	2a01      	cmp	r2, #1
 80086f4:	dc02      	bgt.n	80086fc <_printf_float+0x178>
 80086f6:	6822      	ldr	r2, [r4, #0]
 80086f8:	07d2      	lsls	r2, r2, #31
 80086fa:	d501      	bpl.n	8008700 <_printf_float+0x17c>
 80086fc:	3301      	adds	r3, #1
 80086fe:	6123      	str	r3, [r4, #16]
 8008700:	2323      	movs	r3, #35	; 0x23
 8008702:	aa08      	add	r2, sp, #32
 8008704:	189b      	adds	r3, r3, r2
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d100      	bne.n	800870e <_printf_float+0x18a>
 800870c:	e78d      	b.n	800862a <_printf_float+0xa6>
 800870e:	0023      	movs	r3, r4
 8008710:	222d      	movs	r2, #45	; 0x2d
 8008712:	3343      	adds	r3, #67	; 0x43
 8008714:	701a      	strb	r2, [r3, #0]
 8008716:	e788      	b.n	800862a <_printf_float+0xa6>
 8008718:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800871a:	2a47      	cmp	r2, #71	; 0x47
 800871c:	d1b3      	bne.n	8008686 <_printf_float+0x102>
 800871e:	2b00      	cmp	r3, #0
 8008720:	d1b1      	bne.n	8008686 <_printf_float+0x102>
 8008722:	3301      	adds	r3, #1
 8008724:	e7ae      	b.n	8008684 <_printf_float+0x100>
 8008726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008728:	2b66      	cmp	r3, #102	; 0x66
 800872a:	d11b      	bne.n	8008764 <_printf_float+0x1e0>
 800872c:	6863      	ldr	r3, [r4, #4]
 800872e:	2900      	cmp	r1, #0
 8008730:	dd09      	ble.n	8008746 <_printf_float+0x1c2>
 8008732:	6121      	str	r1, [r4, #16]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d102      	bne.n	800873e <_printf_float+0x1ba>
 8008738:	6822      	ldr	r2, [r4, #0]
 800873a:	07d2      	lsls	r2, r2, #31
 800873c:	d50b      	bpl.n	8008756 <_printf_float+0x1d2>
 800873e:	3301      	adds	r3, #1
 8008740:	185b      	adds	r3, r3, r1
 8008742:	6123      	str	r3, [r4, #16]
 8008744:	e007      	b.n	8008756 <_printf_float+0x1d2>
 8008746:	2b00      	cmp	r3, #0
 8008748:	d103      	bne.n	8008752 <_printf_float+0x1ce>
 800874a:	2201      	movs	r2, #1
 800874c:	6821      	ldr	r1, [r4, #0]
 800874e:	4211      	tst	r1, r2
 8008750:	d000      	beq.n	8008754 <_printf_float+0x1d0>
 8008752:	1c9a      	adds	r2, r3, #2
 8008754:	6122      	str	r2, [r4, #16]
 8008756:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008758:	65a3      	str	r3, [r4, #88]	; 0x58
 800875a:	2300      	movs	r3, #0
 800875c:	930b      	str	r3, [sp, #44]	; 0x2c
 800875e:	e7cf      	b.n	8008700 <_printf_float+0x17c>
 8008760:	2367      	movs	r3, #103	; 0x67
 8008762:	930a      	str	r3, [sp, #40]	; 0x28
 8008764:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008766:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008768:	4299      	cmp	r1, r3
 800876a:	db06      	blt.n	800877a <_printf_float+0x1f6>
 800876c:	6823      	ldr	r3, [r4, #0]
 800876e:	6121      	str	r1, [r4, #16]
 8008770:	07db      	lsls	r3, r3, #31
 8008772:	d5f0      	bpl.n	8008756 <_printf_float+0x1d2>
 8008774:	3101      	adds	r1, #1
 8008776:	6121      	str	r1, [r4, #16]
 8008778:	e7ed      	b.n	8008756 <_printf_float+0x1d2>
 800877a:	2201      	movs	r2, #1
 800877c:	2900      	cmp	r1, #0
 800877e:	dc01      	bgt.n	8008784 <_printf_float+0x200>
 8008780:	1892      	adds	r2, r2, r2
 8008782:	1a52      	subs	r2, r2, r1
 8008784:	189b      	adds	r3, r3, r2
 8008786:	e7dc      	b.n	8008742 <_printf_float+0x1be>
 8008788:	6822      	ldr	r2, [r4, #0]
 800878a:	0553      	lsls	r3, r2, #21
 800878c:	d408      	bmi.n	80087a0 <_printf_float+0x21c>
 800878e:	6923      	ldr	r3, [r4, #16]
 8008790:	002a      	movs	r2, r5
 8008792:	0038      	movs	r0, r7
 8008794:	9908      	ldr	r1, [sp, #32]
 8008796:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008798:	47a8      	blx	r5
 800879a:	3001      	adds	r0, #1
 800879c:	d12a      	bne.n	80087f4 <_printf_float+0x270>
 800879e:	e74f      	b.n	8008640 <_printf_float+0xbc>
 80087a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087a2:	2b65      	cmp	r3, #101	; 0x65
 80087a4:	d800      	bhi.n	80087a8 <_printf_float+0x224>
 80087a6:	e0ec      	b.n	8008982 <_printf_float+0x3fe>
 80087a8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80087aa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80087ac:	2200      	movs	r2, #0
 80087ae:	2300      	movs	r3, #0
 80087b0:	f7f7 fe48 	bl	8000444 <__aeabi_dcmpeq>
 80087b4:	2800      	cmp	r0, #0
 80087b6:	d034      	beq.n	8008822 <_printf_float+0x29e>
 80087b8:	2301      	movs	r3, #1
 80087ba:	0038      	movs	r0, r7
 80087bc:	4a37      	ldr	r2, [pc, #220]	; (800889c <_printf_float+0x318>)
 80087be:	9908      	ldr	r1, [sp, #32]
 80087c0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80087c2:	47a8      	blx	r5
 80087c4:	3001      	adds	r0, #1
 80087c6:	d100      	bne.n	80087ca <_printf_float+0x246>
 80087c8:	e73a      	b.n	8008640 <_printf_float+0xbc>
 80087ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80087cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80087ce:	429a      	cmp	r2, r3
 80087d0:	db02      	blt.n	80087d8 <_printf_float+0x254>
 80087d2:	6823      	ldr	r3, [r4, #0]
 80087d4:	07db      	lsls	r3, r3, #31
 80087d6:	d50d      	bpl.n	80087f4 <_printf_float+0x270>
 80087d8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80087da:	0038      	movs	r0, r7
 80087dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087e0:	9908      	ldr	r1, [sp, #32]
 80087e2:	47a8      	blx	r5
 80087e4:	2500      	movs	r5, #0
 80087e6:	3001      	adds	r0, #1
 80087e8:	d100      	bne.n	80087ec <_printf_float+0x268>
 80087ea:	e729      	b.n	8008640 <_printf_float+0xbc>
 80087ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80087ee:	3b01      	subs	r3, #1
 80087f0:	42ab      	cmp	r3, r5
 80087f2:	dc0a      	bgt.n	800880a <_printf_float+0x286>
 80087f4:	6823      	ldr	r3, [r4, #0]
 80087f6:	079b      	lsls	r3, r3, #30
 80087f8:	d500      	bpl.n	80087fc <_printf_float+0x278>
 80087fa:	e116      	b.n	8008a2a <_printf_float+0x4a6>
 80087fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80087fe:	68e0      	ldr	r0, [r4, #12]
 8008800:	4298      	cmp	r0, r3
 8008802:	db00      	blt.n	8008806 <_printf_float+0x282>
 8008804:	e71e      	b.n	8008644 <_printf_float+0xc0>
 8008806:	0018      	movs	r0, r3
 8008808:	e71c      	b.n	8008644 <_printf_float+0xc0>
 800880a:	0022      	movs	r2, r4
 800880c:	2301      	movs	r3, #1
 800880e:	0038      	movs	r0, r7
 8008810:	9908      	ldr	r1, [sp, #32]
 8008812:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008814:	321a      	adds	r2, #26
 8008816:	47b0      	blx	r6
 8008818:	3001      	adds	r0, #1
 800881a:	d100      	bne.n	800881e <_printf_float+0x29a>
 800881c:	e710      	b.n	8008640 <_printf_float+0xbc>
 800881e:	3501      	adds	r5, #1
 8008820:	e7e4      	b.n	80087ec <_printf_float+0x268>
 8008822:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008824:	2b00      	cmp	r3, #0
 8008826:	dc3b      	bgt.n	80088a0 <_printf_float+0x31c>
 8008828:	2301      	movs	r3, #1
 800882a:	0038      	movs	r0, r7
 800882c:	4a1b      	ldr	r2, [pc, #108]	; (800889c <_printf_float+0x318>)
 800882e:	9908      	ldr	r1, [sp, #32]
 8008830:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008832:	47b0      	blx	r6
 8008834:	3001      	adds	r0, #1
 8008836:	d100      	bne.n	800883a <_printf_float+0x2b6>
 8008838:	e702      	b.n	8008640 <_printf_float+0xbc>
 800883a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800883c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800883e:	4313      	orrs	r3, r2
 8008840:	d102      	bne.n	8008848 <_printf_float+0x2c4>
 8008842:	6823      	ldr	r3, [r4, #0]
 8008844:	07db      	lsls	r3, r3, #31
 8008846:	d5d5      	bpl.n	80087f4 <_printf_float+0x270>
 8008848:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800884a:	0038      	movs	r0, r7
 800884c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800884e:	9908      	ldr	r1, [sp, #32]
 8008850:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008852:	47b0      	blx	r6
 8008854:	2300      	movs	r3, #0
 8008856:	3001      	adds	r0, #1
 8008858:	d100      	bne.n	800885c <_printf_float+0x2d8>
 800885a:	e6f1      	b.n	8008640 <_printf_float+0xbc>
 800885c:	930a      	str	r3, [sp, #40]	; 0x28
 800885e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008860:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008862:	425b      	negs	r3, r3
 8008864:	4293      	cmp	r3, r2
 8008866:	dc01      	bgt.n	800886c <_printf_float+0x2e8>
 8008868:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800886a:	e791      	b.n	8008790 <_printf_float+0x20c>
 800886c:	0022      	movs	r2, r4
 800886e:	2301      	movs	r3, #1
 8008870:	0038      	movs	r0, r7
 8008872:	9908      	ldr	r1, [sp, #32]
 8008874:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008876:	321a      	adds	r2, #26
 8008878:	47b0      	blx	r6
 800887a:	3001      	adds	r0, #1
 800887c:	d100      	bne.n	8008880 <_printf_float+0x2fc>
 800887e:	e6df      	b.n	8008640 <_printf_float+0xbc>
 8008880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008882:	3301      	adds	r3, #1
 8008884:	e7ea      	b.n	800885c <_printf_float+0x2d8>
 8008886:	46c0      	nop			; (mov r8, r8)
 8008888:	7fefffff 	.word	0x7fefffff
 800888c:	0800db30 	.word	0x0800db30
 8008890:	0800db34 	.word	0x0800db34
 8008894:	0800db38 	.word	0x0800db38
 8008898:	0800db3c 	.word	0x0800db3c
 800889c:	0800db40 	.word	0x0800db40
 80088a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80088a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80088a4:	920a      	str	r2, [sp, #40]	; 0x28
 80088a6:	429a      	cmp	r2, r3
 80088a8:	dd00      	ble.n	80088ac <_printf_float+0x328>
 80088aa:	930a      	str	r3, [sp, #40]	; 0x28
 80088ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	dc3d      	bgt.n	800892e <_printf_float+0x3aa>
 80088b2:	2300      	movs	r3, #0
 80088b4:	930e      	str	r3, [sp, #56]	; 0x38
 80088b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088b8:	43db      	mvns	r3, r3
 80088ba:	17db      	asrs	r3, r3, #31
 80088bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80088be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80088c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80088c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088c6:	4013      	ands	r3, r2
 80088c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80088ca:	1ad3      	subs	r3, r2, r3
 80088cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80088ce:	4293      	cmp	r3, r2
 80088d0:	dc36      	bgt.n	8008940 <_printf_float+0x3bc>
 80088d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80088d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80088d6:	429a      	cmp	r2, r3
 80088d8:	db40      	blt.n	800895c <_printf_float+0x3d8>
 80088da:	6823      	ldr	r3, [r4, #0]
 80088dc:	07db      	lsls	r3, r3, #31
 80088de:	d43d      	bmi.n	800895c <_printf_float+0x3d8>
 80088e0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80088e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80088e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088e6:	1af3      	subs	r3, r6, r3
 80088e8:	1ab6      	subs	r6, r6, r2
 80088ea:	429e      	cmp	r6, r3
 80088ec:	dd00      	ble.n	80088f0 <_printf_float+0x36c>
 80088ee:	001e      	movs	r6, r3
 80088f0:	2e00      	cmp	r6, #0
 80088f2:	dc3c      	bgt.n	800896e <_printf_float+0x3ea>
 80088f4:	2300      	movs	r3, #0
 80088f6:	930a      	str	r3, [sp, #40]	; 0x28
 80088f8:	43f3      	mvns	r3, r6
 80088fa:	17db      	asrs	r3, r3, #31
 80088fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80088fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008900:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008902:	1a9b      	subs	r3, r3, r2
 8008904:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008906:	4032      	ands	r2, r6
 8008908:	1a9b      	subs	r3, r3, r2
 800890a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800890c:	4293      	cmp	r3, r2
 800890e:	dc00      	bgt.n	8008912 <_printf_float+0x38e>
 8008910:	e770      	b.n	80087f4 <_printf_float+0x270>
 8008912:	0022      	movs	r2, r4
 8008914:	2301      	movs	r3, #1
 8008916:	0038      	movs	r0, r7
 8008918:	9908      	ldr	r1, [sp, #32]
 800891a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800891c:	321a      	adds	r2, #26
 800891e:	47a8      	blx	r5
 8008920:	3001      	adds	r0, #1
 8008922:	d100      	bne.n	8008926 <_printf_float+0x3a2>
 8008924:	e68c      	b.n	8008640 <_printf_float+0xbc>
 8008926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008928:	3301      	adds	r3, #1
 800892a:	930a      	str	r3, [sp, #40]	; 0x28
 800892c:	e7e7      	b.n	80088fe <_printf_float+0x37a>
 800892e:	002a      	movs	r2, r5
 8008930:	0038      	movs	r0, r7
 8008932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008934:	9908      	ldr	r1, [sp, #32]
 8008936:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008938:	47b0      	blx	r6
 800893a:	3001      	adds	r0, #1
 800893c:	d1b9      	bne.n	80088b2 <_printf_float+0x32e>
 800893e:	e67f      	b.n	8008640 <_printf_float+0xbc>
 8008940:	0022      	movs	r2, r4
 8008942:	2301      	movs	r3, #1
 8008944:	0038      	movs	r0, r7
 8008946:	9908      	ldr	r1, [sp, #32]
 8008948:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800894a:	321a      	adds	r2, #26
 800894c:	47b0      	blx	r6
 800894e:	3001      	adds	r0, #1
 8008950:	d100      	bne.n	8008954 <_printf_float+0x3d0>
 8008952:	e675      	b.n	8008640 <_printf_float+0xbc>
 8008954:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008956:	3301      	adds	r3, #1
 8008958:	930e      	str	r3, [sp, #56]	; 0x38
 800895a:	e7b0      	b.n	80088be <_printf_float+0x33a>
 800895c:	0038      	movs	r0, r7
 800895e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008960:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008962:	9908      	ldr	r1, [sp, #32]
 8008964:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008966:	47b0      	blx	r6
 8008968:	3001      	adds	r0, #1
 800896a:	d1b9      	bne.n	80088e0 <_printf_float+0x35c>
 800896c:	e668      	b.n	8008640 <_printf_float+0xbc>
 800896e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008970:	0038      	movs	r0, r7
 8008972:	18ea      	adds	r2, r5, r3
 8008974:	9908      	ldr	r1, [sp, #32]
 8008976:	0033      	movs	r3, r6
 8008978:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800897a:	47a8      	blx	r5
 800897c:	3001      	adds	r0, #1
 800897e:	d1b9      	bne.n	80088f4 <_printf_float+0x370>
 8008980:	e65e      	b.n	8008640 <_printf_float+0xbc>
 8008982:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008984:	2b01      	cmp	r3, #1
 8008986:	dc02      	bgt.n	800898e <_printf_float+0x40a>
 8008988:	2301      	movs	r3, #1
 800898a:	421a      	tst	r2, r3
 800898c:	d03a      	beq.n	8008a04 <_printf_float+0x480>
 800898e:	2301      	movs	r3, #1
 8008990:	002a      	movs	r2, r5
 8008992:	0038      	movs	r0, r7
 8008994:	9908      	ldr	r1, [sp, #32]
 8008996:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008998:	47b0      	blx	r6
 800899a:	3001      	adds	r0, #1
 800899c:	d100      	bne.n	80089a0 <_printf_float+0x41c>
 800899e:	e64f      	b.n	8008640 <_printf_float+0xbc>
 80089a0:	0038      	movs	r0, r7
 80089a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089a6:	9908      	ldr	r1, [sp, #32]
 80089a8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80089aa:	47b0      	blx	r6
 80089ac:	3001      	adds	r0, #1
 80089ae:	d100      	bne.n	80089b2 <_printf_float+0x42e>
 80089b0:	e646      	b.n	8008640 <_printf_float+0xbc>
 80089b2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80089b4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80089b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089b8:	2200      	movs	r2, #0
 80089ba:	001e      	movs	r6, r3
 80089bc:	2300      	movs	r3, #0
 80089be:	f7f7 fd41 	bl	8000444 <__aeabi_dcmpeq>
 80089c2:	2800      	cmp	r0, #0
 80089c4:	d11c      	bne.n	8008a00 <_printf_float+0x47c>
 80089c6:	0033      	movs	r3, r6
 80089c8:	1c6a      	adds	r2, r5, #1
 80089ca:	3b01      	subs	r3, #1
 80089cc:	0038      	movs	r0, r7
 80089ce:	9908      	ldr	r1, [sp, #32]
 80089d0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80089d2:	47a8      	blx	r5
 80089d4:	3001      	adds	r0, #1
 80089d6:	d10f      	bne.n	80089f8 <_printf_float+0x474>
 80089d8:	e632      	b.n	8008640 <_printf_float+0xbc>
 80089da:	0022      	movs	r2, r4
 80089dc:	2301      	movs	r3, #1
 80089de:	0038      	movs	r0, r7
 80089e0:	9908      	ldr	r1, [sp, #32]
 80089e2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80089e4:	321a      	adds	r2, #26
 80089e6:	47b0      	blx	r6
 80089e8:	3001      	adds	r0, #1
 80089ea:	d100      	bne.n	80089ee <_printf_float+0x46a>
 80089ec:	e628      	b.n	8008640 <_printf_float+0xbc>
 80089ee:	3501      	adds	r5, #1
 80089f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089f2:	3b01      	subs	r3, #1
 80089f4:	42ab      	cmp	r3, r5
 80089f6:	dcf0      	bgt.n	80089da <_printf_float+0x456>
 80089f8:	0022      	movs	r2, r4
 80089fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089fc:	3250      	adds	r2, #80	; 0x50
 80089fe:	e6c8      	b.n	8008792 <_printf_float+0x20e>
 8008a00:	2500      	movs	r5, #0
 8008a02:	e7f5      	b.n	80089f0 <_printf_float+0x46c>
 8008a04:	002a      	movs	r2, r5
 8008a06:	e7e1      	b.n	80089cc <_printf_float+0x448>
 8008a08:	0022      	movs	r2, r4
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	0038      	movs	r0, r7
 8008a0e:	9908      	ldr	r1, [sp, #32]
 8008a10:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008a12:	3219      	adds	r2, #25
 8008a14:	47b0      	blx	r6
 8008a16:	3001      	adds	r0, #1
 8008a18:	d100      	bne.n	8008a1c <_printf_float+0x498>
 8008a1a:	e611      	b.n	8008640 <_printf_float+0xbc>
 8008a1c:	3501      	adds	r5, #1
 8008a1e:	68e3      	ldr	r3, [r4, #12]
 8008a20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008a22:	1a9b      	subs	r3, r3, r2
 8008a24:	42ab      	cmp	r3, r5
 8008a26:	dcef      	bgt.n	8008a08 <_printf_float+0x484>
 8008a28:	e6e8      	b.n	80087fc <_printf_float+0x278>
 8008a2a:	2500      	movs	r5, #0
 8008a2c:	e7f7      	b.n	8008a1e <_printf_float+0x49a>
 8008a2e:	46c0      	nop			; (mov r8, r8)

08008a30 <_printf_common>:
 8008a30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a32:	0016      	movs	r6, r2
 8008a34:	9301      	str	r3, [sp, #4]
 8008a36:	688a      	ldr	r2, [r1, #8]
 8008a38:	690b      	ldr	r3, [r1, #16]
 8008a3a:	000c      	movs	r4, r1
 8008a3c:	9000      	str	r0, [sp, #0]
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	da00      	bge.n	8008a44 <_printf_common+0x14>
 8008a42:	0013      	movs	r3, r2
 8008a44:	0022      	movs	r2, r4
 8008a46:	6033      	str	r3, [r6, #0]
 8008a48:	3243      	adds	r2, #67	; 0x43
 8008a4a:	7812      	ldrb	r2, [r2, #0]
 8008a4c:	2a00      	cmp	r2, #0
 8008a4e:	d001      	beq.n	8008a54 <_printf_common+0x24>
 8008a50:	3301      	adds	r3, #1
 8008a52:	6033      	str	r3, [r6, #0]
 8008a54:	6823      	ldr	r3, [r4, #0]
 8008a56:	069b      	lsls	r3, r3, #26
 8008a58:	d502      	bpl.n	8008a60 <_printf_common+0x30>
 8008a5a:	6833      	ldr	r3, [r6, #0]
 8008a5c:	3302      	adds	r3, #2
 8008a5e:	6033      	str	r3, [r6, #0]
 8008a60:	6822      	ldr	r2, [r4, #0]
 8008a62:	2306      	movs	r3, #6
 8008a64:	0015      	movs	r5, r2
 8008a66:	401d      	ands	r5, r3
 8008a68:	421a      	tst	r2, r3
 8008a6a:	d027      	beq.n	8008abc <_printf_common+0x8c>
 8008a6c:	0023      	movs	r3, r4
 8008a6e:	3343      	adds	r3, #67	; 0x43
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	1e5a      	subs	r2, r3, #1
 8008a74:	4193      	sbcs	r3, r2
 8008a76:	6822      	ldr	r2, [r4, #0]
 8008a78:	0692      	lsls	r2, r2, #26
 8008a7a:	d430      	bmi.n	8008ade <_printf_common+0xae>
 8008a7c:	0022      	movs	r2, r4
 8008a7e:	9901      	ldr	r1, [sp, #4]
 8008a80:	9800      	ldr	r0, [sp, #0]
 8008a82:	9d08      	ldr	r5, [sp, #32]
 8008a84:	3243      	adds	r2, #67	; 0x43
 8008a86:	47a8      	blx	r5
 8008a88:	3001      	adds	r0, #1
 8008a8a:	d025      	beq.n	8008ad8 <_printf_common+0xa8>
 8008a8c:	2206      	movs	r2, #6
 8008a8e:	6823      	ldr	r3, [r4, #0]
 8008a90:	2500      	movs	r5, #0
 8008a92:	4013      	ands	r3, r2
 8008a94:	2b04      	cmp	r3, #4
 8008a96:	d105      	bne.n	8008aa4 <_printf_common+0x74>
 8008a98:	6833      	ldr	r3, [r6, #0]
 8008a9a:	68e5      	ldr	r5, [r4, #12]
 8008a9c:	1aed      	subs	r5, r5, r3
 8008a9e:	43eb      	mvns	r3, r5
 8008aa0:	17db      	asrs	r3, r3, #31
 8008aa2:	401d      	ands	r5, r3
 8008aa4:	68a3      	ldr	r3, [r4, #8]
 8008aa6:	6922      	ldr	r2, [r4, #16]
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	dd01      	ble.n	8008ab0 <_printf_common+0x80>
 8008aac:	1a9b      	subs	r3, r3, r2
 8008aae:	18ed      	adds	r5, r5, r3
 8008ab0:	2600      	movs	r6, #0
 8008ab2:	42b5      	cmp	r5, r6
 8008ab4:	d120      	bne.n	8008af8 <_printf_common+0xc8>
 8008ab6:	2000      	movs	r0, #0
 8008ab8:	e010      	b.n	8008adc <_printf_common+0xac>
 8008aba:	3501      	adds	r5, #1
 8008abc:	68e3      	ldr	r3, [r4, #12]
 8008abe:	6832      	ldr	r2, [r6, #0]
 8008ac0:	1a9b      	subs	r3, r3, r2
 8008ac2:	42ab      	cmp	r3, r5
 8008ac4:	ddd2      	ble.n	8008a6c <_printf_common+0x3c>
 8008ac6:	0022      	movs	r2, r4
 8008ac8:	2301      	movs	r3, #1
 8008aca:	9901      	ldr	r1, [sp, #4]
 8008acc:	9800      	ldr	r0, [sp, #0]
 8008ace:	9f08      	ldr	r7, [sp, #32]
 8008ad0:	3219      	adds	r2, #25
 8008ad2:	47b8      	blx	r7
 8008ad4:	3001      	adds	r0, #1
 8008ad6:	d1f0      	bne.n	8008aba <_printf_common+0x8a>
 8008ad8:	2001      	movs	r0, #1
 8008ada:	4240      	negs	r0, r0
 8008adc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008ade:	2030      	movs	r0, #48	; 0x30
 8008ae0:	18e1      	adds	r1, r4, r3
 8008ae2:	3143      	adds	r1, #67	; 0x43
 8008ae4:	7008      	strb	r0, [r1, #0]
 8008ae6:	0021      	movs	r1, r4
 8008ae8:	1c5a      	adds	r2, r3, #1
 8008aea:	3145      	adds	r1, #69	; 0x45
 8008aec:	7809      	ldrb	r1, [r1, #0]
 8008aee:	18a2      	adds	r2, r4, r2
 8008af0:	3243      	adds	r2, #67	; 0x43
 8008af2:	3302      	adds	r3, #2
 8008af4:	7011      	strb	r1, [r2, #0]
 8008af6:	e7c1      	b.n	8008a7c <_printf_common+0x4c>
 8008af8:	0022      	movs	r2, r4
 8008afa:	2301      	movs	r3, #1
 8008afc:	9901      	ldr	r1, [sp, #4]
 8008afe:	9800      	ldr	r0, [sp, #0]
 8008b00:	9f08      	ldr	r7, [sp, #32]
 8008b02:	321a      	adds	r2, #26
 8008b04:	47b8      	blx	r7
 8008b06:	3001      	adds	r0, #1
 8008b08:	d0e6      	beq.n	8008ad8 <_printf_common+0xa8>
 8008b0a:	3601      	adds	r6, #1
 8008b0c:	e7d1      	b.n	8008ab2 <_printf_common+0x82>
	...

08008b10 <_printf_i>:
 8008b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b12:	b08b      	sub	sp, #44	; 0x2c
 8008b14:	9206      	str	r2, [sp, #24]
 8008b16:	000a      	movs	r2, r1
 8008b18:	3243      	adds	r2, #67	; 0x43
 8008b1a:	9307      	str	r3, [sp, #28]
 8008b1c:	9005      	str	r0, [sp, #20]
 8008b1e:	9204      	str	r2, [sp, #16]
 8008b20:	7e0a      	ldrb	r2, [r1, #24]
 8008b22:	000c      	movs	r4, r1
 8008b24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b26:	2a78      	cmp	r2, #120	; 0x78
 8008b28:	d809      	bhi.n	8008b3e <_printf_i+0x2e>
 8008b2a:	2a62      	cmp	r2, #98	; 0x62
 8008b2c:	d80b      	bhi.n	8008b46 <_printf_i+0x36>
 8008b2e:	2a00      	cmp	r2, #0
 8008b30:	d100      	bne.n	8008b34 <_printf_i+0x24>
 8008b32:	e0be      	b.n	8008cb2 <_printf_i+0x1a2>
 8008b34:	497c      	ldr	r1, [pc, #496]	; (8008d28 <_printf_i+0x218>)
 8008b36:	9103      	str	r1, [sp, #12]
 8008b38:	2a58      	cmp	r2, #88	; 0x58
 8008b3a:	d100      	bne.n	8008b3e <_printf_i+0x2e>
 8008b3c:	e093      	b.n	8008c66 <_printf_i+0x156>
 8008b3e:	0026      	movs	r6, r4
 8008b40:	3642      	adds	r6, #66	; 0x42
 8008b42:	7032      	strb	r2, [r6, #0]
 8008b44:	e022      	b.n	8008b8c <_printf_i+0x7c>
 8008b46:	0010      	movs	r0, r2
 8008b48:	3863      	subs	r0, #99	; 0x63
 8008b4a:	2815      	cmp	r0, #21
 8008b4c:	d8f7      	bhi.n	8008b3e <_printf_i+0x2e>
 8008b4e:	f7f7 fae9 	bl	8000124 <__gnu_thumb1_case_shi>
 8008b52:	0016      	.short	0x0016
 8008b54:	fff6001f 	.word	0xfff6001f
 8008b58:	fff6fff6 	.word	0xfff6fff6
 8008b5c:	001ffff6 	.word	0x001ffff6
 8008b60:	fff6fff6 	.word	0xfff6fff6
 8008b64:	fff6fff6 	.word	0xfff6fff6
 8008b68:	003600a3 	.word	0x003600a3
 8008b6c:	fff60083 	.word	0xfff60083
 8008b70:	00b4fff6 	.word	0x00b4fff6
 8008b74:	0036fff6 	.word	0x0036fff6
 8008b78:	fff6fff6 	.word	0xfff6fff6
 8008b7c:	0087      	.short	0x0087
 8008b7e:	0026      	movs	r6, r4
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	3642      	adds	r6, #66	; 0x42
 8008b84:	1d11      	adds	r1, r2, #4
 8008b86:	6019      	str	r1, [r3, #0]
 8008b88:	6813      	ldr	r3, [r2, #0]
 8008b8a:	7033      	strb	r3, [r6, #0]
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	e0a2      	b.n	8008cd6 <_printf_i+0x1c6>
 8008b90:	6818      	ldr	r0, [r3, #0]
 8008b92:	6809      	ldr	r1, [r1, #0]
 8008b94:	1d02      	adds	r2, r0, #4
 8008b96:	060d      	lsls	r5, r1, #24
 8008b98:	d50b      	bpl.n	8008bb2 <_printf_i+0xa2>
 8008b9a:	6805      	ldr	r5, [r0, #0]
 8008b9c:	601a      	str	r2, [r3, #0]
 8008b9e:	2d00      	cmp	r5, #0
 8008ba0:	da03      	bge.n	8008baa <_printf_i+0x9a>
 8008ba2:	232d      	movs	r3, #45	; 0x2d
 8008ba4:	9a04      	ldr	r2, [sp, #16]
 8008ba6:	426d      	negs	r5, r5
 8008ba8:	7013      	strb	r3, [r2, #0]
 8008baa:	4b5f      	ldr	r3, [pc, #380]	; (8008d28 <_printf_i+0x218>)
 8008bac:	270a      	movs	r7, #10
 8008bae:	9303      	str	r3, [sp, #12]
 8008bb0:	e01b      	b.n	8008bea <_printf_i+0xda>
 8008bb2:	6805      	ldr	r5, [r0, #0]
 8008bb4:	601a      	str	r2, [r3, #0]
 8008bb6:	0649      	lsls	r1, r1, #25
 8008bb8:	d5f1      	bpl.n	8008b9e <_printf_i+0x8e>
 8008bba:	b22d      	sxth	r5, r5
 8008bbc:	e7ef      	b.n	8008b9e <_printf_i+0x8e>
 8008bbe:	680d      	ldr	r5, [r1, #0]
 8008bc0:	6819      	ldr	r1, [r3, #0]
 8008bc2:	1d08      	adds	r0, r1, #4
 8008bc4:	6018      	str	r0, [r3, #0]
 8008bc6:	062e      	lsls	r6, r5, #24
 8008bc8:	d501      	bpl.n	8008bce <_printf_i+0xbe>
 8008bca:	680d      	ldr	r5, [r1, #0]
 8008bcc:	e003      	b.n	8008bd6 <_printf_i+0xc6>
 8008bce:	066d      	lsls	r5, r5, #25
 8008bd0:	d5fb      	bpl.n	8008bca <_printf_i+0xba>
 8008bd2:	680d      	ldr	r5, [r1, #0]
 8008bd4:	b2ad      	uxth	r5, r5
 8008bd6:	4b54      	ldr	r3, [pc, #336]	; (8008d28 <_printf_i+0x218>)
 8008bd8:	2708      	movs	r7, #8
 8008bda:	9303      	str	r3, [sp, #12]
 8008bdc:	2a6f      	cmp	r2, #111	; 0x6f
 8008bde:	d000      	beq.n	8008be2 <_printf_i+0xd2>
 8008be0:	3702      	adds	r7, #2
 8008be2:	0023      	movs	r3, r4
 8008be4:	2200      	movs	r2, #0
 8008be6:	3343      	adds	r3, #67	; 0x43
 8008be8:	701a      	strb	r2, [r3, #0]
 8008bea:	6863      	ldr	r3, [r4, #4]
 8008bec:	60a3      	str	r3, [r4, #8]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	db03      	blt.n	8008bfa <_printf_i+0xea>
 8008bf2:	2104      	movs	r1, #4
 8008bf4:	6822      	ldr	r2, [r4, #0]
 8008bf6:	438a      	bics	r2, r1
 8008bf8:	6022      	str	r2, [r4, #0]
 8008bfa:	2d00      	cmp	r5, #0
 8008bfc:	d102      	bne.n	8008c04 <_printf_i+0xf4>
 8008bfe:	9e04      	ldr	r6, [sp, #16]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d00c      	beq.n	8008c1e <_printf_i+0x10e>
 8008c04:	9e04      	ldr	r6, [sp, #16]
 8008c06:	0028      	movs	r0, r5
 8008c08:	0039      	movs	r1, r7
 8008c0a:	f7f7 fb1b 	bl	8000244 <__aeabi_uidivmod>
 8008c0e:	9b03      	ldr	r3, [sp, #12]
 8008c10:	3e01      	subs	r6, #1
 8008c12:	5c5b      	ldrb	r3, [r3, r1]
 8008c14:	7033      	strb	r3, [r6, #0]
 8008c16:	002b      	movs	r3, r5
 8008c18:	0005      	movs	r5, r0
 8008c1a:	429f      	cmp	r7, r3
 8008c1c:	d9f3      	bls.n	8008c06 <_printf_i+0xf6>
 8008c1e:	2f08      	cmp	r7, #8
 8008c20:	d109      	bne.n	8008c36 <_printf_i+0x126>
 8008c22:	6823      	ldr	r3, [r4, #0]
 8008c24:	07db      	lsls	r3, r3, #31
 8008c26:	d506      	bpl.n	8008c36 <_printf_i+0x126>
 8008c28:	6862      	ldr	r2, [r4, #4]
 8008c2a:	6923      	ldr	r3, [r4, #16]
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	dc02      	bgt.n	8008c36 <_printf_i+0x126>
 8008c30:	2330      	movs	r3, #48	; 0x30
 8008c32:	3e01      	subs	r6, #1
 8008c34:	7033      	strb	r3, [r6, #0]
 8008c36:	9b04      	ldr	r3, [sp, #16]
 8008c38:	1b9b      	subs	r3, r3, r6
 8008c3a:	6123      	str	r3, [r4, #16]
 8008c3c:	9b07      	ldr	r3, [sp, #28]
 8008c3e:	0021      	movs	r1, r4
 8008c40:	9300      	str	r3, [sp, #0]
 8008c42:	9805      	ldr	r0, [sp, #20]
 8008c44:	9b06      	ldr	r3, [sp, #24]
 8008c46:	aa09      	add	r2, sp, #36	; 0x24
 8008c48:	f7ff fef2 	bl	8008a30 <_printf_common>
 8008c4c:	3001      	adds	r0, #1
 8008c4e:	d147      	bne.n	8008ce0 <_printf_i+0x1d0>
 8008c50:	2001      	movs	r0, #1
 8008c52:	4240      	negs	r0, r0
 8008c54:	b00b      	add	sp, #44	; 0x2c
 8008c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c58:	2220      	movs	r2, #32
 8008c5a:	6809      	ldr	r1, [r1, #0]
 8008c5c:	430a      	orrs	r2, r1
 8008c5e:	6022      	str	r2, [r4, #0]
 8008c60:	2278      	movs	r2, #120	; 0x78
 8008c62:	4932      	ldr	r1, [pc, #200]	; (8008d2c <_printf_i+0x21c>)
 8008c64:	9103      	str	r1, [sp, #12]
 8008c66:	0021      	movs	r1, r4
 8008c68:	3145      	adds	r1, #69	; 0x45
 8008c6a:	700a      	strb	r2, [r1, #0]
 8008c6c:	6819      	ldr	r1, [r3, #0]
 8008c6e:	6822      	ldr	r2, [r4, #0]
 8008c70:	c920      	ldmia	r1!, {r5}
 8008c72:	0610      	lsls	r0, r2, #24
 8008c74:	d402      	bmi.n	8008c7c <_printf_i+0x16c>
 8008c76:	0650      	lsls	r0, r2, #25
 8008c78:	d500      	bpl.n	8008c7c <_printf_i+0x16c>
 8008c7a:	b2ad      	uxth	r5, r5
 8008c7c:	6019      	str	r1, [r3, #0]
 8008c7e:	07d3      	lsls	r3, r2, #31
 8008c80:	d502      	bpl.n	8008c88 <_printf_i+0x178>
 8008c82:	2320      	movs	r3, #32
 8008c84:	4313      	orrs	r3, r2
 8008c86:	6023      	str	r3, [r4, #0]
 8008c88:	2710      	movs	r7, #16
 8008c8a:	2d00      	cmp	r5, #0
 8008c8c:	d1a9      	bne.n	8008be2 <_printf_i+0xd2>
 8008c8e:	2220      	movs	r2, #32
 8008c90:	6823      	ldr	r3, [r4, #0]
 8008c92:	4393      	bics	r3, r2
 8008c94:	6023      	str	r3, [r4, #0]
 8008c96:	e7a4      	b.n	8008be2 <_printf_i+0xd2>
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	680d      	ldr	r5, [r1, #0]
 8008c9c:	1d10      	adds	r0, r2, #4
 8008c9e:	6949      	ldr	r1, [r1, #20]
 8008ca0:	6018      	str	r0, [r3, #0]
 8008ca2:	6813      	ldr	r3, [r2, #0]
 8008ca4:	062e      	lsls	r6, r5, #24
 8008ca6:	d501      	bpl.n	8008cac <_printf_i+0x19c>
 8008ca8:	6019      	str	r1, [r3, #0]
 8008caa:	e002      	b.n	8008cb2 <_printf_i+0x1a2>
 8008cac:	066d      	lsls	r5, r5, #25
 8008cae:	d5fb      	bpl.n	8008ca8 <_printf_i+0x198>
 8008cb0:	8019      	strh	r1, [r3, #0]
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	9e04      	ldr	r6, [sp, #16]
 8008cb6:	6123      	str	r3, [r4, #16]
 8008cb8:	e7c0      	b.n	8008c3c <_printf_i+0x12c>
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	1d11      	adds	r1, r2, #4
 8008cbe:	6019      	str	r1, [r3, #0]
 8008cc0:	6816      	ldr	r6, [r2, #0]
 8008cc2:	2100      	movs	r1, #0
 8008cc4:	0030      	movs	r0, r6
 8008cc6:	6862      	ldr	r2, [r4, #4]
 8008cc8:	f000 fa03 	bl	80090d2 <memchr>
 8008ccc:	2800      	cmp	r0, #0
 8008cce:	d001      	beq.n	8008cd4 <_printf_i+0x1c4>
 8008cd0:	1b80      	subs	r0, r0, r6
 8008cd2:	6060      	str	r0, [r4, #4]
 8008cd4:	6863      	ldr	r3, [r4, #4]
 8008cd6:	6123      	str	r3, [r4, #16]
 8008cd8:	2300      	movs	r3, #0
 8008cda:	9a04      	ldr	r2, [sp, #16]
 8008cdc:	7013      	strb	r3, [r2, #0]
 8008cde:	e7ad      	b.n	8008c3c <_printf_i+0x12c>
 8008ce0:	0032      	movs	r2, r6
 8008ce2:	6923      	ldr	r3, [r4, #16]
 8008ce4:	9906      	ldr	r1, [sp, #24]
 8008ce6:	9805      	ldr	r0, [sp, #20]
 8008ce8:	9d07      	ldr	r5, [sp, #28]
 8008cea:	47a8      	blx	r5
 8008cec:	3001      	adds	r0, #1
 8008cee:	d0af      	beq.n	8008c50 <_printf_i+0x140>
 8008cf0:	6823      	ldr	r3, [r4, #0]
 8008cf2:	079b      	lsls	r3, r3, #30
 8008cf4:	d415      	bmi.n	8008d22 <_printf_i+0x212>
 8008cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cf8:	68e0      	ldr	r0, [r4, #12]
 8008cfa:	4298      	cmp	r0, r3
 8008cfc:	daaa      	bge.n	8008c54 <_printf_i+0x144>
 8008cfe:	0018      	movs	r0, r3
 8008d00:	e7a8      	b.n	8008c54 <_printf_i+0x144>
 8008d02:	0022      	movs	r2, r4
 8008d04:	2301      	movs	r3, #1
 8008d06:	9906      	ldr	r1, [sp, #24]
 8008d08:	9805      	ldr	r0, [sp, #20]
 8008d0a:	9e07      	ldr	r6, [sp, #28]
 8008d0c:	3219      	adds	r2, #25
 8008d0e:	47b0      	blx	r6
 8008d10:	3001      	adds	r0, #1
 8008d12:	d09d      	beq.n	8008c50 <_printf_i+0x140>
 8008d14:	3501      	adds	r5, #1
 8008d16:	68e3      	ldr	r3, [r4, #12]
 8008d18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d1a:	1a9b      	subs	r3, r3, r2
 8008d1c:	42ab      	cmp	r3, r5
 8008d1e:	dcf0      	bgt.n	8008d02 <_printf_i+0x1f2>
 8008d20:	e7e9      	b.n	8008cf6 <_printf_i+0x1e6>
 8008d22:	2500      	movs	r5, #0
 8008d24:	e7f7      	b.n	8008d16 <_printf_i+0x206>
 8008d26:	46c0      	nop			; (mov r8, r8)
 8008d28:	0800db42 	.word	0x0800db42
 8008d2c:	0800db53 	.word	0x0800db53

08008d30 <std>:
 8008d30:	2300      	movs	r3, #0
 8008d32:	b510      	push	{r4, lr}
 8008d34:	0004      	movs	r4, r0
 8008d36:	6003      	str	r3, [r0, #0]
 8008d38:	6043      	str	r3, [r0, #4]
 8008d3a:	6083      	str	r3, [r0, #8]
 8008d3c:	8181      	strh	r1, [r0, #12]
 8008d3e:	6643      	str	r3, [r0, #100]	; 0x64
 8008d40:	81c2      	strh	r2, [r0, #14]
 8008d42:	6103      	str	r3, [r0, #16]
 8008d44:	6143      	str	r3, [r0, #20]
 8008d46:	6183      	str	r3, [r0, #24]
 8008d48:	0019      	movs	r1, r3
 8008d4a:	2208      	movs	r2, #8
 8008d4c:	305c      	adds	r0, #92	; 0x5c
 8008d4e:	f000 f91f 	bl	8008f90 <memset>
 8008d52:	4b0b      	ldr	r3, [pc, #44]	; (8008d80 <std+0x50>)
 8008d54:	6224      	str	r4, [r4, #32]
 8008d56:	6263      	str	r3, [r4, #36]	; 0x24
 8008d58:	4b0a      	ldr	r3, [pc, #40]	; (8008d84 <std+0x54>)
 8008d5a:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d5c:	4b0a      	ldr	r3, [pc, #40]	; (8008d88 <std+0x58>)
 8008d5e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d60:	4b0a      	ldr	r3, [pc, #40]	; (8008d8c <std+0x5c>)
 8008d62:	6323      	str	r3, [r4, #48]	; 0x30
 8008d64:	4b0a      	ldr	r3, [pc, #40]	; (8008d90 <std+0x60>)
 8008d66:	429c      	cmp	r4, r3
 8008d68:	d005      	beq.n	8008d76 <std+0x46>
 8008d6a:	4b0a      	ldr	r3, [pc, #40]	; (8008d94 <std+0x64>)
 8008d6c:	429c      	cmp	r4, r3
 8008d6e:	d002      	beq.n	8008d76 <std+0x46>
 8008d70:	4b09      	ldr	r3, [pc, #36]	; (8008d98 <std+0x68>)
 8008d72:	429c      	cmp	r4, r3
 8008d74:	d103      	bne.n	8008d7e <std+0x4e>
 8008d76:	0020      	movs	r0, r4
 8008d78:	3058      	adds	r0, #88	; 0x58
 8008d7a:	f000 f99f 	bl	80090bc <__retarget_lock_init_recursive>
 8008d7e:	bd10      	pop	{r4, pc}
 8008d80:	08008ef9 	.word	0x08008ef9
 8008d84:	08008f21 	.word	0x08008f21
 8008d88:	08008f59 	.word	0x08008f59
 8008d8c:	08008f85 	.word	0x08008f85
 8008d90:	20000600 	.word	0x20000600
 8008d94:	20000668 	.word	0x20000668
 8008d98:	200006d0 	.word	0x200006d0

08008d9c <stdio_exit_handler>:
 8008d9c:	b510      	push	{r4, lr}
 8008d9e:	4a03      	ldr	r2, [pc, #12]	; (8008dac <stdio_exit_handler+0x10>)
 8008da0:	4903      	ldr	r1, [pc, #12]	; (8008db0 <stdio_exit_handler+0x14>)
 8008da2:	4804      	ldr	r0, [pc, #16]	; (8008db4 <stdio_exit_handler+0x18>)
 8008da4:	f000 f86c 	bl	8008e80 <_fwalk_sglue>
 8008da8:	bd10      	pop	{r4, pc}
 8008daa:	46c0      	nop			; (mov r8, r8)
 8008dac:	20000020 	.word	0x20000020
 8008db0:	0800ac5d 	.word	0x0800ac5d
 8008db4:	2000002c 	.word	0x2000002c

08008db8 <cleanup_stdio>:
 8008db8:	6841      	ldr	r1, [r0, #4]
 8008dba:	4b0b      	ldr	r3, [pc, #44]	; (8008de8 <cleanup_stdio+0x30>)
 8008dbc:	b510      	push	{r4, lr}
 8008dbe:	0004      	movs	r4, r0
 8008dc0:	4299      	cmp	r1, r3
 8008dc2:	d001      	beq.n	8008dc8 <cleanup_stdio+0x10>
 8008dc4:	f001 ff4a 	bl	800ac5c <_fflush_r>
 8008dc8:	68a1      	ldr	r1, [r4, #8]
 8008dca:	4b08      	ldr	r3, [pc, #32]	; (8008dec <cleanup_stdio+0x34>)
 8008dcc:	4299      	cmp	r1, r3
 8008dce:	d002      	beq.n	8008dd6 <cleanup_stdio+0x1e>
 8008dd0:	0020      	movs	r0, r4
 8008dd2:	f001 ff43 	bl	800ac5c <_fflush_r>
 8008dd6:	68e1      	ldr	r1, [r4, #12]
 8008dd8:	4b05      	ldr	r3, [pc, #20]	; (8008df0 <cleanup_stdio+0x38>)
 8008dda:	4299      	cmp	r1, r3
 8008ddc:	d002      	beq.n	8008de4 <cleanup_stdio+0x2c>
 8008dde:	0020      	movs	r0, r4
 8008de0:	f001 ff3c 	bl	800ac5c <_fflush_r>
 8008de4:	bd10      	pop	{r4, pc}
 8008de6:	46c0      	nop			; (mov r8, r8)
 8008de8:	20000600 	.word	0x20000600
 8008dec:	20000668 	.word	0x20000668
 8008df0:	200006d0 	.word	0x200006d0

08008df4 <global_stdio_init.part.0>:
 8008df4:	b510      	push	{r4, lr}
 8008df6:	4b09      	ldr	r3, [pc, #36]	; (8008e1c <global_stdio_init.part.0+0x28>)
 8008df8:	4a09      	ldr	r2, [pc, #36]	; (8008e20 <global_stdio_init.part.0+0x2c>)
 8008dfa:	2104      	movs	r1, #4
 8008dfc:	601a      	str	r2, [r3, #0]
 8008dfe:	4809      	ldr	r0, [pc, #36]	; (8008e24 <global_stdio_init.part.0+0x30>)
 8008e00:	2200      	movs	r2, #0
 8008e02:	f7ff ff95 	bl	8008d30 <std>
 8008e06:	2201      	movs	r2, #1
 8008e08:	2109      	movs	r1, #9
 8008e0a:	4807      	ldr	r0, [pc, #28]	; (8008e28 <global_stdio_init.part.0+0x34>)
 8008e0c:	f7ff ff90 	bl	8008d30 <std>
 8008e10:	2202      	movs	r2, #2
 8008e12:	2112      	movs	r1, #18
 8008e14:	4805      	ldr	r0, [pc, #20]	; (8008e2c <global_stdio_init.part.0+0x38>)
 8008e16:	f7ff ff8b 	bl	8008d30 <std>
 8008e1a:	bd10      	pop	{r4, pc}
 8008e1c:	20000738 	.word	0x20000738
 8008e20:	08008d9d 	.word	0x08008d9d
 8008e24:	20000600 	.word	0x20000600
 8008e28:	20000668 	.word	0x20000668
 8008e2c:	200006d0 	.word	0x200006d0

08008e30 <__sfp_lock_acquire>:
 8008e30:	b510      	push	{r4, lr}
 8008e32:	4802      	ldr	r0, [pc, #8]	; (8008e3c <__sfp_lock_acquire+0xc>)
 8008e34:	f000 f943 	bl	80090be <__retarget_lock_acquire_recursive>
 8008e38:	bd10      	pop	{r4, pc}
 8008e3a:	46c0      	nop			; (mov r8, r8)
 8008e3c:	20000741 	.word	0x20000741

08008e40 <__sfp_lock_release>:
 8008e40:	b510      	push	{r4, lr}
 8008e42:	4802      	ldr	r0, [pc, #8]	; (8008e4c <__sfp_lock_release+0xc>)
 8008e44:	f000 f93c 	bl	80090c0 <__retarget_lock_release_recursive>
 8008e48:	bd10      	pop	{r4, pc}
 8008e4a:	46c0      	nop			; (mov r8, r8)
 8008e4c:	20000741 	.word	0x20000741

08008e50 <__sinit>:
 8008e50:	b510      	push	{r4, lr}
 8008e52:	0004      	movs	r4, r0
 8008e54:	f7ff ffec 	bl	8008e30 <__sfp_lock_acquire>
 8008e58:	6a23      	ldr	r3, [r4, #32]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d002      	beq.n	8008e64 <__sinit+0x14>
 8008e5e:	f7ff ffef 	bl	8008e40 <__sfp_lock_release>
 8008e62:	bd10      	pop	{r4, pc}
 8008e64:	4b04      	ldr	r3, [pc, #16]	; (8008e78 <__sinit+0x28>)
 8008e66:	6223      	str	r3, [r4, #32]
 8008e68:	4b04      	ldr	r3, [pc, #16]	; (8008e7c <__sinit+0x2c>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d1f6      	bne.n	8008e5e <__sinit+0xe>
 8008e70:	f7ff ffc0 	bl	8008df4 <global_stdio_init.part.0>
 8008e74:	e7f3      	b.n	8008e5e <__sinit+0xe>
 8008e76:	46c0      	nop			; (mov r8, r8)
 8008e78:	08008db9 	.word	0x08008db9
 8008e7c:	20000738 	.word	0x20000738

08008e80 <_fwalk_sglue>:
 8008e80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e82:	0014      	movs	r4, r2
 8008e84:	2600      	movs	r6, #0
 8008e86:	9000      	str	r0, [sp, #0]
 8008e88:	9101      	str	r1, [sp, #4]
 8008e8a:	68a5      	ldr	r5, [r4, #8]
 8008e8c:	6867      	ldr	r7, [r4, #4]
 8008e8e:	3f01      	subs	r7, #1
 8008e90:	d504      	bpl.n	8008e9c <_fwalk_sglue+0x1c>
 8008e92:	6824      	ldr	r4, [r4, #0]
 8008e94:	2c00      	cmp	r4, #0
 8008e96:	d1f8      	bne.n	8008e8a <_fwalk_sglue+0xa>
 8008e98:	0030      	movs	r0, r6
 8008e9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008e9c:	89ab      	ldrh	r3, [r5, #12]
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d908      	bls.n	8008eb4 <_fwalk_sglue+0x34>
 8008ea2:	220e      	movs	r2, #14
 8008ea4:	5eab      	ldrsh	r3, [r5, r2]
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	d004      	beq.n	8008eb4 <_fwalk_sglue+0x34>
 8008eaa:	0029      	movs	r1, r5
 8008eac:	9800      	ldr	r0, [sp, #0]
 8008eae:	9b01      	ldr	r3, [sp, #4]
 8008eb0:	4798      	blx	r3
 8008eb2:	4306      	orrs	r6, r0
 8008eb4:	3568      	adds	r5, #104	; 0x68
 8008eb6:	e7ea      	b.n	8008e8e <_fwalk_sglue+0xe>

08008eb8 <siprintf>:
 8008eb8:	b40e      	push	{r1, r2, r3}
 8008eba:	b500      	push	{lr}
 8008ebc:	490b      	ldr	r1, [pc, #44]	; (8008eec <siprintf+0x34>)
 8008ebe:	b09c      	sub	sp, #112	; 0x70
 8008ec0:	ab1d      	add	r3, sp, #116	; 0x74
 8008ec2:	9002      	str	r0, [sp, #8]
 8008ec4:	9006      	str	r0, [sp, #24]
 8008ec6:	9107      	str	r1, [sp, #28]
 8008ec8:	9104      	str	r1, [sp, #16]
 8008eca:	4809      	ldr	r0, [pc, #36]	; (8008ef0 <siprintf+0x38>)
 8008ecc:	4909      	ldr	r1, [pc, #36]	; (8008ef4 <siprintf+0x3c>)
 8008ece:	cb04      	ldmia	r3!, {r2}
 8008ed0:	9105      	str	r1, [sp, #20]
 8008ed2:	6800      	ldr	r0, [r0, #0]
 8008ed4:	a902      	add	r1, sp, #8
 8008ed6:	9301      	str	r3, [sp, #4]
 8008ed8:	f001 fbf2 	bl	800a6c0 <_svfiprintf_r>
 8008edc:	2200      	movs	r2, #0
 8008ede:	9b02      	ldr	r3, [sp, #8]
 8008ee0:	701a      	strb	r2, [r3, #0]
 8008ee2:	b01c      	add	sp, #112	; 0x70
 8008ee4:	bc08      	pop	{r3}
 8008ee6:	b003      	add	sp, #12
 8008ee8:	4718      	bx	r3
 8008eea:	46c0      	nop			; (mov r8, r8)
 8008eec:	7fffffff 	.word	0x7fffffff
 8008ef0:	20000078 	.word	0x20000078
 8008ef4:	ffff0208 	.word	0xffff0208

08008ef8 <__sread>:
 8008ef8:	b570      	push	{r4, r5, r6, lr}
 8008efa:	000c      	movs	r4, r1
 8008efc:	250e      	movs	r5, #14
 8008efe:	5f49      	ldrsh	r1, [r1, r5]
 8008f00:	f000 f878 	bl	8008ff4 <_read_r>
 8008f04:	2800      	cmp	r0, #0
 8008f06:	db03      	blt.n	8008f10 <__sread+0x18>
 8008f08:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008f0a:	181b      	adds	r3, r3, r0
 8008f0c:	6563      	str	r3, [r4, #84]	; 0x54
 8008f0e:	bd70      	pop	{r4, r5, r6, pc}
 8008f10:	89a3      	ldrh	r3, [r4, #12]
 8008f12:	4a02      	ldr	r2, [pc, #8]	; (8008f1c <__sread+0x24>)
 8008f14:	4013      	ands	r3, r2
 8008f16:	81a3      	strh	r3, [r4, #12]
 8008f18:	e7f9      	b.n	8008f0e <__sread+0x16>
 8008f1a:	46c0      	nop			; (mov r8, r8)
 8008f1c:	ffffefff 	.word	0xffffefff

08008f20 <__swrite>:
 8008f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f22:	001f      	movs	r7, r3
 8008f24:	898b      	ldrh	r3, [r1, #12]
 8008f26:	0005      	movs	r5, r0
 8008f28:	000c      	movs	r4, r1
 8008f2a:	0016      	movs	r6, r2
 8008f2c:	05db      	lsls	r3, r3, #23
 8008f2e:	d505      	bpl.n	8008f3c <__swrite+0x1c>
 8008f30:	230e      	movs	r3, #14
 8008f32:	5ec9      	ldrsh	r1, [r1, r3]
 8008f34:	2200      	movs	r2, #0
 8008f36:	2302      	movs	r3, #2
 8008f38:	f000 f848 	bl	8008fcc <_lseek_r>
 8008f3c:	89a3      	ldrh	r3, [r4, #12]
 8008f3e:	4a05      	ldr	r2, [pc, #20]	; (8008f54 <__swrite+0x34>)
 8008f40:	0028      	movs	r0, r5
 8008f42:	4013      	ands	r3, r2
 8008f44:	81a3      	strh	r3, [r4, #12]
 8008f46:	0032      	movs	r2, r6
 8008f48:	230e      	movs	r3, #14
 8008f4a:	5ee1      	ldrsh	r1, [r4, r3]
 8008f4c:	003b      	movs	r3, r7
 8008f4e:	f000 f877 	bl	8009040 <_write_r>
 8008f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f54:	ffffefff 	.word	0xffffefff

08008f58 <__sseek>:
 8008f58:	b570      	push	{r4, r5, r6, lr}
 8008f5a:	000c      	movs	r4, r1
 8008f5c:	250e      	movs	r5, #14
 8008f5e:	5f49      	ldrsh	r1, [r1, r5]
 8008f60:	f000 f834 	bl	8008fcc <_lseek_r>
 8008f64:	89a3      	ldrh	r3, [r4, #12]
 8008f66:	1c42      	adds	r2, r0, #1
 8008f68:	d103      	bne.n	8008f72 <__sseek+0x1a>
 8008f6a:	4a05      	ldr	r2, [pc, #20]	; (8008f80 <__sseek+0x28>)
 8008f6c:	4013      	ands	r3, r2
 8008f6e:	81a3      	strh	r3, [r4, #12]
 8008f70:	bd70      	pop	{r4, r5, r6, pc}
 8008f72:	2280      	movs	r2, #128	; 0x80
 8008f74:	0152      	lsls	r2, r2, #5
 8008f76:	4313      	orrs	r3, r2
 8008f78:	81a3      	strh	r3, [r4, #12]
 8008f7a:	6560      	str	r0, [r4, #84]	; 0x54
 8008f7c:	e7f8      	b.n	8008f70 <__sseek+0x18>
 8008f7e:	46c0      	nop			; (mov r8, r8)
 8008f80:	ffffefff 	.word	0xffffefff

08008f84 <__sclose>:
 8008f84:	b510      	push	{r4, lr}
 8008f86:	230e      	movs	r3, #14
 8008f88:	5ec9      	ldrsh	r1, [r1, r3]
 8008f8a:	f000 f80d 	bl	8008fa8 <_close_r>
 8008f8e:	bd10      	pop	{r4, pc}

08008f90 <memset>:
 8008f90:	0003      	movs	r3, r0
 8008f92:	1882      	adds	r2, r0, r2
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d100      	bne.n	8008f9a <memset+0xa>
 8008f98:	4770      	bx	lr
 8008f9a:	7019      	strb	r1, [r3, #0]
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	e7f9      	b.n	8008f94 <memset+0x4>

08008fa0 <_localeconv_r>:
 8008fa0:	4800      	ldr	r0, [pc, #0]	; (8008fa4 <_localeconv_r+0x4>)
 8008fa2:	4770      	bx	lr
 8008fa4:	2000016c 	.word	0x2000016c

08008fa8 <_close_r>:
 8008fa8:	2300      	movs	r3, #0
 8008faa:	b570      	push	{r4, r5, r6, lr}
 8008fac:	4d06      	ldr	r5, [pc, #24]	; (8008fc8 <_close_r+0x20>)
 8008fae:	0004      	movs	r4, r0
 8008fb0:	0008      	movs	r0, r1
 8008fb2:	602b      	str	r3, [r5, #0]
 8008fb4:	f7fa f8c2 	bl	800313c <_close>
 8008fb8:	1c43      	adds	r3, r0, #1
 8008fba:	d103      	bne.n	8008fc4 <_close_r+0x1c>
 8008fbc:	682b      	ldr	r3, [r5, #0]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d000      	beq.n	8008fc4 <_close_r+0x1c>
 8008fc2:	6023      	str	r3, [r4, #0]
 8008fc4:	bd70      	pop	{r4, r5, r6, pc}
 8008fc6:	46c0      	nop			; (mov r8, r8)
 8008fc8:	2000073c 	.word	0x2000073c

08008fcc <_lseek_r>:
 8008fcc:	b570      	push	{r4, r5, r6, lr}
 8008fce:	0004      	movs	r4, r0
 8008fd0:	0008      	movs	r0, r1
 8008fd2:	0011      	movs	r1, r2
 8008fd4:	001a      	movs	r2, r3
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	4d05      	ldr	r5, [pc, #20]	; (8008ff0 <_lseek_r+0x24>)
 8008fda:	602b      	str	r3, [r5, #0]
 8008fdc:	f7fa f8b8 	bl	8003150 <_lseek>
 8008fe0:	1c43      	adds	r3, r0, #1
 8008fe2:	d103      	bne.n	8008fec <_lseek_r+0x20>
 8008fe4:	682b      	ldr	r3, [r5, #0]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d000      	beq.n	8008fec <_lseek_r+0x20>
 8008fea:	6023      	str	r3, [r4, #0]
 8008fec:	bd70      	pop	{r4, r5, r6, pc}
 8008fee:	46c0      	nop			; (mov r8, r8)
 8008ff0:	2000073c 	.word	0x2000073c

08008ff4 <_read_r>:
 8008ff4:	b570      	push	{r4, r5, r6, lr}
 8008ff6:	0004      	movs	r4, r0
 8008ff8:	0008      	movs	r0, r1
 8008ffa:	0011      	movs	r1, r2
 8008ffc:	001a      	movs	r2, r3
 8008ffe:	2300      	movs	r3, #0
 8009000:	4d05      	ldr	r5, [pc, #20]	; (8009018 <_read_r+0x24>)
 8009002:	602b      	str	r3, [r5, #0]
 8009004:	f7fa f880 	bl	8003108 <_read>
 8009008:	1c43      	adds	r3, r0, #1
 800900a:	d103      	bne.n	8009014 <_read_r+0x20>
 800900c:	682b      	ldr	r3, [r5, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d000      	beq.n	8009014 <_read_r+0x20>
 8009012:	6023      	str	r3, [r4, #0]
 8009014:	bd70      	pop	{r4, r5, r6, pc}
 8009016:	46c0      	nop			; (mov r8, r8)
 8009018:	2000073c 	.word	0x2000073c

0800901c <_sbrk_r>:
 800901c:	2300      	movs	r3, #0
 800901e:	b570      	push	{r4, r5, r6, lr}
 8009020:	4d06      	ldr	r5, [pc, #24]	; (800903c <_sbrk_r+0x20>)
 8009022:	0004      	movs	r4, r0
 8009024:	0008      	movs	r0, r1
 8009026:	602b      	str	r3, [r5, #0]
 8009028:	f7fa f894 	bl	8003154 <_sbrk>
 800902c:	1c43      	adds	r3, r0, #1
 800902e:	d103      	bne.n	8009038 <_sbrk_r+0x1c>
 8009030:	682b      	ldr	r3, [r5, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d000      	beq.n	8009038 <_sbrk_r+0x1c>
 8009036:	6023      	str	r3, [r4, #0]
 8009038:	bd70      	pop	{r4, r5, r6, pc}
 800903a:	46c0      	nop			; (mov r8, r8)
 800903c:	2000073c 	.word	0x2000073c

08009040 <_write_r>:
 8009040:	b570      	push	{r4, r5, r6, lr}
 8009042:	0004      	movs	r4, r0
 8009044:	0008      	movs	r0, r1
 8009046:	0011      	movs	r1, r2
 8009048:	001a      	movs	r2, r3
 800904a:	2300      	movs	r3, #0
 800904c:	4d05      	ldr	r5, [pc, #20]	; (8009064 <_write_r+0x24>)
 800904e:	602b      	str	r3, [r5, #0]
 8009050:	f7fa f867 	bl	8003122 <_write>
 8009054:	1c43      	adds	r3, r0, #1
 8009056:	d103      	bne.n	8009060 <_write_r+0x20>
 8009058:	682b      	ldr	r3, [r5, #0]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d000      	beq.n	8009060 <_write_r+0x20>
 800905e:	6023      	str	r3, [r4, #0]
 8009060:	bd70      	pop	{r4, r5, r6, pc}
 8009062:	46c0      	nop			; (mov r8, r8)
 8009064:	2000073c 	.word	0x2000073c

08009068 <__errno>:
 8009068:	4b01      	ldr	r3, [pc, #4]	; (8009070 <__errno+0x8>)
 800906a:	6818      	ldr	r0, [r3, #0]
 800906c:	4770      	bx	lr
 800906e:	46c0      	nop			; (mov r8, r8)
 8009070:	20000078 	.word	0x20000078

08009074 <__libc_init_array>:
 8009074:	b570      	push	{r4, r5, r6, lr}
 8009076:	2600      	movs	r6, #0
 8009078:	4c0c      	ldr	r4, [pc, #48]	; (80090ac <__libc_init_array+0x38>)
 800907a:	4d0d      	ldr	r5, [pc, #52]	; (80090b0 <__libc_init_array+0x3c>)
 800907c:	1b64      	subs	r4, r4, r5
 800907e:	10a4      	asrs	r4, r4, #2
 8009080:	42a6      	cmp	r6, r4
 8009082:	d109      	bne.n	8009098 <__libc_init_array+0x24>
 8009084:	2600      	movs	r6, #0
 8009086:	f002 f85d 	bl	800b144 <_init>
 800908a:	4c0a      	ldr	r4, [pc, #40]	; (80090b4 <__libc_init_array+0x40>)
 800908c:	4d0a      	ldr	r5, [pc, #40]	; (80090b8 <__libc_init_array+0x44>)
 800908e:	1b64      	subs	r4, r4, r5
 8009090:	10a4      	asrs	r4, r4, #2
 8009092:	42a6      	cmp	r6, r4
 8009094:	d105      	bne.n	80090a2 <__libc_init_array+0x2e>
 8009096:	bd70      	pop	{r4, r5, r6, pc}
 8009098:	00b3      	lsls	r3, r6, #2
 800909a:	58eb      	ldr	r3, [r5, r3]
 800909c:	4798      	blx	r3
 800909e:	3601      	adds	r6, #1
 80090a0:	e7ee      	b.n	8009080 <__libc_init_array+0xc>
 80090a2:	00b3      	lsls	r3, r6, #2
 80090a4:	58eb      	ldr	r3, [r5, r3]
 80090a6:	4798      	blx	r3
 80090a8:	3601      	adds	r6, #1
 80090aa:	e7f2      	b.n	8009092 <__libc_init_array+0x1e>
 80090ac:	0800dea4 	.word	0x0800dea4
 80090b0:	0800dea4 	.word	0x0800dea4
 80090b4:	0800dea8 	.word	0x0800dea8
 80090b8:	0800dea4 	.word	0x0800dea4

080090bc <__retarget_lock_init_recursive>:
 80090bc:	4770      	bx	lr

080090be <__retarget_lock_acquire_recursive>:
 80090be:	4770      	bx	lr

080090c0 <__retarget_lock_release_recursive>:
 80090c0:	4770      	bx	lr

080090c2 <strcpy>:
 80090c2:	0003      	movs	r3, r0
 80090c4:	780a      	ldrb	r2, [r1, #0]
 80090c6:	3101      	adds	r1, #1
 80090c8:	701a      	strb	r2, [r3, #0]
 80090ca:	3301      	adds	r3, #1
 80090cc:	2a00      	cmp	r2, #0
 80090ce:	d1f9      	bne.n	80090c4 <strcpy+0x2>
 80090d0:	4770      	bx	lr

080090d2 <memchr>:
 80090d2:	b2c9      	uxtb	r1, r1
 80090d4:	1882      	adds	r2, r0, r2
 80090d6:	4290      	cmp	r0, r2
 80090d8:	d101      	bne.n	80090de <memchr+0xc>
 80090da:	2000      	movs	r0, #0
 80090dc:	4770      	bx	lr
 80090de:	7803      	ldrb	r3, [r0, #0]
 80090e0:	428b      	cmp	r3, r1
 80090e2:	d0fb      	beq.n	80090dc <memchr+0xa>
 80090e4:	3001      	adds	r0, #1
 80090e6:	e7f6      	b.n	80090d6 <memchr+0x4>

080090e8 <memcpy>:
 80090e8:	2300      	movs	r3, #0
 80090ea:	b510      	push	{r4, lr}
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d100      	bne.n	80090f2 <memcpy+0xa>
 80090f0:	bd10      	pop	{r4, pc}
 80090f2:	5ccc      	ldrb	r4, [r1, r3]
 80090f4:	54c4      	strb	r4, [r0, r3]
 80090f6:	3301      	adds	r3, #1
 80090f8:	e7f8      	b.n	80090ec <memcpy+0x4>

080090fa <quorem>:
 80090fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090fc:	6902      	ldr	r2, [r0, #16]
 80090fe:	690b      	ldr	r3, [r1, #16]
 8009100:	b089      	sub	sp, #36	; 0x24
 8009102:	0007      	movs	r7, r0
 8009104:	9104      	str	r1, [sp, #16]
 8009106:	2000      	movs	r0, #0
 8009108:	429a      	cmp	r2, r3
 800910a:	db69      	blt.n	80091e0 <quorem+0xe6>
 800910c:	3b01      	subs	r3, #1
 800910e:	009c      	lsls	r4, r3, #2
 8009110:	9301      	str	r3, [sp, #4]
 8009112:	000b      	movs	r3, r1
 8009114:	3314      	adds	r3, #20
 8009116:	9306      	str	r3, [sp, #24]
 8009118:	191b      	adds	r3, r3, r4
 800911a:	9305      	str	r3, [sp, #20]
 800911c:	003b      	movs	r3, r7
 800911e:	3314      	adds	r3, #20
 8009120:	9303      	str	r3, [sp, #12]
 8009122:	191c      	adds	r4, r3, r4
 8009124:	9b05      	ldr	r3, [sp, #20]
 8009126:	6826      	ldr	r6, [r4, #0]
 8009128:	681d      	ldr	r5, [r3, #0]
 800912a:	0030      	movs	r0, r6
 800912c:	3501      	adds	r5, #1
 800912e:	0029      	movs	r1, r5
 8009130:	f7f7 f802 	bl	8000138 <__udivsi3>
 8009134:	9002      	str	r0, [sp, #8]
 8009136:	42ae      	cmp	r6, r5
 8009138:	d329      	bcc.n	800918e <quorem+0x94>
 800913a:	9b06      	ldr	r3, [sp, #24]
 800913c:	2600      	movs	r6, #0
 800913e:	469c      	mov	ip, r3
 8009140:	9d03      	ldr	r5, [sp, #12]
 8009142:	9606      	str	r6, [sp, #24]
 8009144:	4662      	mov	r2, ip
 8009146:	ca08      	ldmia	r2!, {r3}
 8009148:	6828      	ldr	r0, [r5, #0]
 800914a:	4694      	mov	ip, r2
 800914c:	9a02      	ldr	r2, [sp, #8]
 800914e:	b299      	uxth	r1, r3
 8009150:	4351      	muls	r1, r2
 8009152:	0c1b      	lsrs	r3, r3, #16
 8009154:	4353      	muls	r3, r2
 8009156:	1989      	adds	r1, r1, r6
 8009158:	0c0a      	lsrs	r2, r1, #16
 800915a:	189b      	adds	r3, r3, r2
 800915c:	9307      	str	r3, [sp, #28]
 800915e:	0c1e      	lsrs	r6, r3, #16
 8009160:	9b06      	ldr	r3, [sp, #24]
 8009162:	b282      	uxth	r2, r0
 8009164:	18d2      	adds	r2, r2, r3
 8009166:	466b      	mov	r3, sp
 8009168:	b289      	uxth	r1, r1
 800916a:	8b9b      	ldrh	r3, [r3, #28]
 800916c:	1a52      	subs	r2, r2, r1
 800916e:	0c01      	lsrs	r1, r0, #16
 8009170:	1ac9      	subs	r1, r1, r3
 8009172:	1413      	asrs	r3, r2, #16
 8009174:	18cb      	adds	r3, r1, r3
 8009176:	1419      	asrs	r1, r3, #16
 8009178:	b292      	uxth	r2, r2
 800917a:	041b      	lsls	r3, r3, #16
 800917c:	4313      	orrs	r3, r2
 800917e:	c508      	stmia	r5!, {r3}
 8009180:	9b05      	ldr	r3, [sp, #20]
 8009182:	9106      	str	r1, [sp, #24]
 8009184:	4563      	cmp	r3, ip
 8009186:	d2dd      	bcs.n	8009144 <quorem+0x4a>
 8009188:	6823      	ldr	r3, [r4, #0]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d030      	beq.n	80091f0 <quorem+0xf6>
 800918e:	0038      	movs	r0, r7
 8009190:	9904      	ldr	r1, [sp, #16]
 8009192:	f001 f91f 	bl	800a3d4 <__mcmp>
 8009196:	2800      	cmp	r0, #0
 8009198:	db21      	blt.n	80091de <quorem+0xe4>
 800919a:	0038      	movs	r0, r7
 800919c:	2600      	movs	r6, #0
 800919e:	9b02      	ldr	r3, [sp, #8]
 80091a0:	9c04      	ldr	r4, [sp, #16]
 80091a2:	3301      	adds	r3, #1
 80091a4:	9302      	str	r3, [sp, #8]
 80091a6:	3014      	adds	r0, #20
 80091a8:	3414      	adds	r4, #20
 80091aa:	6803      	ldr	r3, [r0, #0]
 80091ac:	cc02      	ldmia	r4!, {r1}
 80091ae:	b29d      	uxth	r5, r3
 80091b0:	19ad      	adds	r5, r5, r6
 80091b2:	b28a      	uxth	r2, r1
 80091b4:	1aaa      	subs	r2, r5, r2
 80091b6:	0c09      	lsrs	r1, r1, #16
 80091b8:	0c1b      	lsrs	r3, r3, #16
 80091ba:	1a5b      	subs	r3, r3, r1
 80091bc:	1411      	asrs	r1, r2, #16
 80091be:	185b      	adds	r3, r3, r1
 80091c0:	141e      	asrs	r6, r3, #16
 80091c2:	b292      	uxth	r2, r2
 80091c4:	041b      	lsls	r3, r3, #16
 80091c6:	4313      	orrs	r3, r2
 80091c8:	c008      	stmia	r0!, {r3}
 80091ca:	9b05      	ldr	r3, [sp, #20]
 80091cc:	42a3      	cmp	r3, r4
 80091ce:	d2ec      	bcs.n	80091aa <quorem+0xb0>
 80091d0:	9b01      	ldr	r3, [sp, #4]
 80091d2:	9a03      	ldr	r2, [sp, #12]
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	18d3      	adds	r3, r2, r3
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	2a00      	cmp	r2, #0
 80091dc:	d015      	beq.n	800920a <quorem+0x110>
 80091de:	9802      	ldr	r0, [sp, #8]
 80091e0:	b009      	add	sp, #36	; 0x24
 80091e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091e4:	6823      	ldr	r3, [r4, #0]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d106      	bne.n	80091f8 <quorem+0xfe>
 80091ea:	9b01      	ldr	r3, [sp, #4]
 80091ec:	3b01      	subs	r3, #1
 80091ee:	9301      	str	r3, [sp, #4]
 80091f0:	9b03      	ldr	r3, [sp, #12]
 80091f2:	3c04      	subs	r4, #4
 80091f4:	42a3      	cmp	r3, r4
 80091f6:	d3f5      	bcc.n	80091e4 <quorem+0xea>
 80091f8:	9b01      	ldr	r3, [sp, #4]
 80091fa:	613b      	str	r3, [r7, #16]
 80091fc:	e7c7      	b.n	800918e <quorem+0x94>
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	2a00      	cmp	r2, #0
 8009202:	d106      	bne.n	8009212 <quorem+0x118>
 8009204:	9a01      	ldr	r2, [sp, #4]
 8009206:	3a01      	subs	r2, #1
 8009208:	9201      	str	r2, [sp, #4]
 800920a:	9a03      	ldr	r2, [sp, #12]
 800920c:	3b04      	subs	r3, #4
 800920e:	429a      	cmp	r2, r3
 8009210:	d3f5      	bcc.n	80091fe <quorem+0x104>
 8009212:	9b01      	ldr	r3, [sp, #4]
 8009214:	613b      	str	r3, [r7, #16]
 8009216:	e7e2      	b.n	80091de <quorem+0xe4>

08009218 <_dtoa_r>:
 8009218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800921a:	0014      	movs	r4, r2
 800921c:	001d      	movs	r5, r3
 800921e:	69c6      	ldr	r6, [r0, #28]
 8009220:	b09d      	sub	sp, #116	; 0x74
 8009222:	9408      	str	r4, [sp, #32]
 8009224:	9509      	str	r5, [sp, #36]	; 0x24
 8009226:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8009228:	9004      	str	r0, [sp, #16]
 800922a:	2e00      	cmp	r6, #0
 800922c:	d10f      	bne.n	800924e <_dtoa_r+0x36>
 800922e:	2010      	movs	r0, #16
 8009230:	f7ff f842 	bl	80082b8 <malloc>
 8009234:	9b04      	ldr	r3, [sp, #16]
 8009236:	1e02      	subs	r2, r0, #0
 8009238:	61d8      	str	r0, [r3, #28]
 800923a:	d104      	bne.n	8009246 <_dtoa_r+0x2e>
 800923c:	21ef      	movs	r1, #239	; 0xef
 800923e:	4bc6      	ldr	r3, [pc, #792]	; (8009558 <_dtoa_r+0x340>)
 8009240:	48c6      	ldr	r0, [pc, #792]	; (800955c <_dtoa_r+0x344>)
 8009242:	f001 fdf1 	bl	800ae28 <__assert_func>
 8009246:	6046      	str	r6, [r0, #4]
 8009248:	6086      	str	r6, [r0, #8]
 800924a:	6006      	str	r6, [r0, #0]
 800924c:	60c6      	str	r6, [r0, #12]
 800924e:	9b04      	ldr	r3, [sp, #16]
 8009250:	69db      	ldr	r3, [r3, #28]
 8009252:	6819      	ldr	r1, [r3, #0]
 8009254:	2900      	cmp	r1, #0
 8009256:	d00b      	beq.n	8009270 <_dtoa_r+0x58>
 8009258:	685a      	ldr	r2, [r3, #4]
 800925a:	2301      	movs	r3, #1
 800925c:	4093      	lsls	r3, r2
 800925e:	604a      	str	r2, [r1, #4]
 8009260:	608b      	str	r3, [r1, #8]
 8009262:	9804      	ldr	r0, [sp, #16]
 8009264:	f000 fe74 	bl	8009f50 <_Bfree>
 8009268:	2200      	movs	r2, #0
 800926a:	9b04      	ldr	r3, [sp, #16]
 800926c:	69db      	ldr	r3, [r3, #28]
 800926e:	601a      	str	r2, [r3, #0]
 8009270:	2d00      	cmp	r5, #0
 8009272:	da1e      	bge.n	80092b2 <_dtoa_r+0x9a>
 8009274:	2301      	movs	r3, #1
 8009276:	603b      	str	r3, [r7, #0]
 8009278:	006b      	lsls	r3, r5, #1
 800927a:	085b      	lsrs	r3, r3, #1
 800927c:	9309      	str	r3, [sp, #36]	; 0x24
 800927e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009280:	4bb7      	ldr	r3, [pc, #732]	; (8009560 <_dtoa_r+0x348>)
 8009282:	4ab7      	ldr	r2, [pc, #732]	; (8009560 <_dtoa_r+0x348>)
 8009284:	403b      	ands	r3, r7
 8009286:	4293      	cmp	r3, r2
 8009288:	d116      	bne.n	80092b8 <_dtoa_r+0xa0>
 800928a:	4bb6      	ldr	r3, [pc, #728]	; (8009564 <_dtoa_r+0x34c>)
 800928c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800928e:	6013      	str	r3, [r2, #0]
 8009290:	033b      	lsls	r3, r7, #12
 8009292:	0b1b      	lsrs	r3, r3, #12
 8009294:	4323      	orrs	r3, r4
 8009296:	d101      	bne.n	800929c <_dtoa_r+0x84>
 8009298:	f000 fdb5 	bl	8009e06 <_dtoa_r+0xbee>
 800929c:	4bb2      	ldr	r3, [pc, #712]	; (8009568 <_dtoa_r+0x350>)
 800929e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80092a0:	9306      	str	r3, [sp, #24]
 80092a2:	2a00      	cmp	r2, #0
 80092a4:	d002      	beq.n	80092ac <_dtoa_r+0x94>
 80092a6:	4bb1      	ldr	r3, [pc, #708]	; (800956c <_dtoa_r+0x354>)
 80092a8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80092aa:	6013      	str	r3, [r2, #0]
 80092ac:	9806      	ldr	r0, [sp, #24]
 80092ae:	b01d      	add	sp, #116	; 0x74
 80092b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092b2:	2300      	movs	r3, #0
 80092b4:	603b      	str	r3, [r7, #0]
 80092b6:	e7e2      	b.n	800927e <_dtoa_r+0x66>
 80092b8:	9a08      	ldr	r2, [sp, #32]
 80092ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092bc:	9210      	str	r2, [sp, #64]	; 0x40
 80092be:	9311      	str	r3, [sp, #68]	; 0x44
 80092c0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80092c2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80092c4:	2200      	movs	r2, #0
 80092c6:	2300      	movs	r3, #0
 80092c8:	f7f7 f8bc 	bl	8000444 <__aeabi_dcmpeq>
 80092cc:	1e06      	subs	r6, r0, #0
 80092ce:	d009      	beq.n	80092e4 <_dtoa_r+0xcc>
 80092d0:	2301      	movs	r3, #1
 80092d2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80092d4:	6013      	str	r3, [r2, #0]
 80092d6:	4ba6      	ldr	r3, [pc, #664]	; (8009570 <_dtoa_r+0x358>)
 80092d8:	9306      	str	r3, [sp, #24]
 80092da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d0e5      	beq.n	80092ac <_dtoa_r+0x94>
 80092e0:	4ba4      	ldr	r3, [pc, #656]	; (8009574 <_dtoa_r+0x35c>)
 80092e2:	e7e1      	b.n	80092a8 <_dtoa_r+0x90>
 80092e4:	ab1a      	add	r3, sp, #104	; 0x68
 80092e6:	9301      	str	r3, [sp, #4]
 80092e8:	ab1b      	add	r3, sp, #108	; 0x6c
 80092ea:	9300      	str	r3, [sp, #0]
 80092ec:	9804      	ldr	r0, [sp, #16]
 80092ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80092f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80092f2:	f001 f923 	bl	800a53c <__d2b>
 80092f6:	007a      	lsls	r2, r7, #1
 80092f8:	9005      	str	r0, [sp, #20]
 80092fa:	0d52      	lsrs	r2, r2, #21
 80092fc:	d100      	bne.n	8009300 <_dtoa_r+0xe8>
 80092fe:	e07b      	b.n	80093f8 <_dtoa_r+0x1e0>
 8009300:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009302:	9617      	str	r6, [sp, #92]	; 0x5c
 8009304:	0319      	lsls	r1, r3, #12
 8009306:	4b9c      	ldr	r3, [pc, #624]	; (8009578 <_dtoa_r+0x360>)
 8009308:	0b09      	lsrs	r1, r1, #12
 800930a:	430b      	orrs	r3, r1
 800930c:	499b      	ldr	r1, [pc, #620]	; (800957c <_dtoa_r+0x364>)
 800930e:	1857      	adds	r7, r2, r1
 8009310:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009312:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009314:	0019      	movs	r1, r3
 8009316:	2200      	movs	r2, #0
 8009318:	4b99      	ldr	r3, [pc, #612]	; (8009580 <_dtoa_r+0x368>)
 800931a:	f7f8 fc91 	bl	8001c40 <__aeabi_dsub>
 800931e:	4a99      	ldr	r2, [pc, #612]	; (8009584 <_dtoa_r+0x36c>)
 8009320:	4b99      	ldr	r3, [pc, #612]	; (8009588 <_dtoa_r+0x370>)
 8009322:	f7f8 f9cb 	bl	80016bc <__aeabi_dmul>
 8009326:	4a99      	ldr	r2, [pc, #612]	; (800958c <_dtoa_r+0x374>)
 8009328:	4b99      	ldr	r3, [pc, #612]	; (8009590 <_dtoa_r+0x378>)
 800932a:	f7f7 fa6d 	bl	8000808 <__aeabi_dadd>
 800932e:	0004      	movs	r4, r0
 8009330:	0038      	movs	r0, r7
 8009332:	000d      	movs	r5, r1
 8009334:	f7f9 f85a 	bl	80023ec <__aeabi_i2d>
 8009338:	4a96      	ldr	r2, [pc, #600]	; (8009594 <_dtoa_r+0x37c>)
 800933a:	4b97      	ldr	r3, [pc, #604]	; (8009598 <_dtoa_r+0x380>)
 800933c:	f7f8 f9be 	bl	80016bc <__aeabi_dmul>
 8009340:	0002      	movs	r2, r0
 8009342:	000b      	movs	r3, r1
 8009344:	0020      	movs	r0, r4
 8009346:	0029      	movs	r1, r5
 8009348:	f7f7 fa5e 	bl	8000808 <__aeabi_dadd>
 800934c:	0004      	movs	r4, r0
 800934e:	000d      	movs	r5, r1
 8009350:	f7f9 f816 	bl	8002380 <__aeabi_d2iz>
 8009354:	2200      	movs	r2, #0
 8009356:	9003      	str	r0, [sp, #12]
 8009358:	2300      	movs	r3, #0
 800935a:	0020      	movs	r0, r4
 800935c:	0029      	movs	r1, r5
 800935e:	f7f7 f877 	bl	8000450 <__aeabi_dcmplt>
 8009362:	2800      	cmp	r0, #0
 8009364:	d00b      	beq.n	800937e <_dtoa_r+0x166>
 8009366:	9803      	ldr	r0, [sp, #12]
 8009368:	f7f9 f840 	bl	80023ec <__aeabi_i2d>
 800936c:	002b      	movs	r3, r5
 800936e:	0022      	movs	r2, r4
 8009370:	f7f7 f868 	bl	8000444 <__aeabi_dcmpeq>
 8009374:	4243      	negs	r3, r0
 8009376:	4158      	adcs	r0, r3
 8009378:	9b03      	ldr	r3, [sp, #12]
 800937a:	1a1b      	subs	r3, r3, r0
 800937c:	9303      	str	r3, [sp, #12]
 800937e:	2301      	movs	r3, #1
 8009380:	9316      	str	r3, [sp, #88]	; 0x58
 8009382:	9b03      	ldr	r3, [sp, #12]
 8009384:	2b16      	cmp	r3, #22
 8009386:	d810      	bhi.n	80093aa <_dtoa_r+0x192>
 8009388:	9810      	ldr	r0, [sp, #64]	; 0x40
 800938a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800938c:	9a03      	ldr	r2, [sp, #12]
 800938e:	4b83      	ldr	r3, [pc, #524]	; (800959c <_dtoa_r+0x384>)
 8009390:	00d2      	lsls	r2, r2, #3
 8009392:	189b      	adds	r3, r3, r2
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	f7f7 f85a 	bl	8000450 <__aeabi_dcmplt>
 800939c:	2800      	cmp	r0, #0
 800939e:	d047      	beq.n	8009430 <_dtoa_r+0x218>
 80093a0:	9b03      	ldr	r3, [sp, #12]
 80093a2:	3b01      	subs	r3, #1
 80093a4:	9303      	str	r3, [sp, #12]
 80093a6:	2300      	movs	r3, #0
 80093a8:	9316      	str	r3, [sp, #88]	; 0x58
 80093aa:	2200      	movs	r2, #0
 80093ac:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80093ae:	920a      	str	r2, [sp, #40]	; 0x28
 80093b0:	1bdb      	subs	r3, r3, r7
 80093b2:	1e5a      	subs	r2, r3, #1
 80093b4:	d53e      	bpl.n	8009434 <_dtoa_r+0x21c>
 80093b6:	2201      	movs	r2, #1
 80093b8:	1ad3      	subs	r3, r2, r3
 80093ba:	930a      	str	r3, [sp, #40]	; 0x28
 80093bc:	2300      	movs	r3, #0
 80093be:	930c      	str	r3, [sp, #48]	; 0x30
 80093c0:	9b03      	ldr	r3, [sp, #12]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	db38      	blt.n	8009438 <_dtoa_r+0x220>
 80093c6:	9a03      	ldr	r2, [sp, #12]
 80093c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093ca:	4694      	mov	ip, r2
 80093cc:	4463      	add	r3, ip
 80093ce:	930c      	str	r3, [sp, #48]	; 0x30
 80093d0:	2300      	movs	r3, #0
 80093d2:	9213      	str	r2, [sp, #76]	; 0x4c
 80093d4:	930d      	str	r3, [sp, #52]	; 0x34
 80093d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80093d8:	2401      	movs	r4, #1
 80093da:	2b09      	cmp	r3, #9
 80093dc:	d867      	bhi.n	80094ae <_dtoa_r+0x296>
 80093de:	2b05      	cmp	r3, #5
 80093e0:	dd02      	ble.n	80093e8 <_dtoa_r+0x1d0>
 80093e2:	2400      	movs	r4, #0
 80093e4:	3b04      	subs	r3, #4
 80093e6:	9322      	str	r3, [sp, #136]	; 0x88
 80093e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80093ea:	1e98      	subs	r0, r3, #2
 80093ec:	2803      	cmp	r0, #3
 80093ee:	d867      	bhi.n	80094c0 <_dtoa_r+0x2a8>
 80093f0:	f7f6 fe8e 	bl	8000110 <__gnu_thumb1_case_uqi>
 80093f4:	5b383a2b 	.word	0x5b383a2b
 80093f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80093fa:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80093fc:	18f6      	adds	r6, r6, r3
 80093fe:	4b68      	ldr	r3, [pc, #416]	; (80095a0 <_dtoa_r+0x388>)
 8009400:	18f2      	adds	r2, r6, r3
 8009402:	2a20      	cmp	r2, #32
 8009404:	dd0f      	ble.n	8009426 <_dtoa_r+0x20e>
 8009406:	2340      	movs	r3, #64	; 0x40
 8009408:	1a9b      	subs	r3, r3, r2
 800940a:	409f      	lsls	r7, r3
 800940c:	4b65      	ldr	r3, [pc, #404]	; (80095a4 <_dtoa_r+0x38c>)
 800940e:	0038      	movs	r0, r7
 8009410:	18f3      	adds	r3, r6, r3
 8009412:	40dc      	lsrs	r4, r3
 8009414:	4320      	orrs	r0, r4
 8009416:	f7f9 f819 	bl	800244c <__aeabi_ui2d>
 800941a:	2201      	movs	r2, #1
 800941c:	4b62      	ldr	r3, [pc, #392]	; (80095a8 <_dtoa_r+0x390>)
 800941e:	1e77      	subs	r7, r6, #1
 8009420:	18cb      	adds	r3, r1, r3
 8009422:	9217      	str	r2, [sp, #92]	; 0x5c
 8009424:	e776      	b.n	8009314 <_dtoa_r+0xfc>
 8009426:	2320      	movs	r3, #32
 8009428:	0020      	movs	r0, r4
 800942a:	1a9b      	subs	r3, r3, r2
 800942c:	4098      	lsls	r0, r3
 800942e:	e7f2      	b.n	8009416 <_dtoa_r+0x1fe>
 8009430:	9016      	str	r0, [sp, #88]	; 0x58
 8009432:	e7ba      	b.n	80093aa <_dtoa_r+0x192>
 8009434:	920c      	str	r2, [sp, #48]	; 0x30
 8009436:	e7c3      	b.n	80093c0 <_dtoa_r+0x1a8>
 8009438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800943a:	9a03      	ldr	r2, [sp, #12]
 800943c:	1a9b      	subs	r3, r3, r2
 800943e:	930a      	str	r3, [sp, #40]	; 0x28
 8009440:	4253      	negs	r3, r2
 8009442:	930d      	str	r3, [sp, #52]	; 0x34
 8009444:	2300      	movs	r3, #0
 8009446:	9313      	str	r3, [sp, #76]	; 0x4c
 8009448:	e7c5      	b.n	80093d6 <_dtoa_r+0x1be>
 800944a:	2300      	movs	r3, #0
 800944c:	930f      	str	r3, [sp, #60]	; 0x3c
 800944e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009450:	930b      	str	r3, [sp, #44]	; 0x2c
 8009452:	9307      	str	r3, [sp, #28]
 8009454:	2b00      	cmp	r3, #0
 8009456:	dc13      	bgt.n	8009480 <_dtoa_r+0x268>
 8009458:	2301      	movs	r3, #1
 800945a:	001a      	movs	r2, r3
 800945c:	930b      	str	r3, [sp, #44]	; 0x2c
 800945e:	9307      	str	r3, [sp, #28]
 8009460:	9223      	str	r2, [sp, #140]	; 0x8c
 8009462:	e00d      	b.n	8009480 <_dtoa_r+0x268>
 8009464:	2301      	movs	r3, #1
 8009466:	e7f1      	b.n	800944c <_dtoa_r+0x234>
 8009468:	2300      	movs	r3, #0
 800946a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800946c:	930f      	str	r3, [sp, #60]	; 0x3c
 800946e:	4694      	mov	ip, r2
 8009470:	9b03      	ldr	r3, [sp, #12]
 8009472:	4463      	add	r3, ip
 8009474:	930b      	str	r3, [sp, #44]	; 0x2c
 8009476:	3301      	adds	r3, #1
 8009478:	9307      	str	r3, [sp, #28]
 800947a:	2b00      	cmp	r3, #0
 800947c:	dc00      	bgt.n	8009480 <_dtoa_r+0x268>
 800947e:	2301      	movs	r3, #1
 8009480:	9a04      	ldr	r2, [sp, #16]
 8009482:	2100      	movs	r1, #0
 8009484:	69d0      	ldr	r0, [r2, #28]
 8009486:	2204      	movs	r2, #4
 8009488:	0015      	movs	r5, r2
 800948a:	3514      	adds	r5, #20
 800948c:	429d      	cmp	r5, r3
 800948e:	d91b      	bls.n	80094c8 <_dtoa_r+0x2b0>
 8009490:	6041      	str	r1, [r0, #4]
 8009492:	9804      	ldr	r0, [sp, #16]
 8009494:	f000 fd18 	bl	8009ec8 <_Balloc>
 8009498:	9006      	str	r0, [sp, #24]
 800949a:	2800      	cmp	r0, #0
 800949c:	d117      	bne.n	80094ce <_dtoa_r+0x2b6>
 800949e:	21b0      	movs	r1, #176	; 0xb0
 80094a0:	4b42      	ldr	r3, [pc, #264]	; (80095ac <_dtoa_r+0x394>)
 80094a2:	482e      	ldr	r0, [pc, #184]	; (800955c <_dtoa_r+0x344>)
 80094a4:	9a06      	ldr	r2, [sp, #24]
 80094a6:	31ff      	adds	r1, #255	; 0xff
 80094a8:	e6cb      	b.n	8009242 <_dtoa_r+0x2a>
 80094aa:	2301      	movs	r3, #1
 80094ac:	e7dd      	b.n	800946a <_dtoa_r+0x252>
 80094ae:	2300      	movs	r3, #0
 80094b0:	940f      	str	r4, [sp, #60]	; 0x3c
 80094b2:	9322      	str	r3, [sp, #136]	; 0x88
 80094b4:	3b01      	subs	r3, #1
 80094b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80094b8:	9307      	str	r3, [sp, #28]
 80094ba:	2200      	movs	r2, #0
 80094bc:	3313      	adds	r3, #19
 80094be:	e7cf      	b.n	8009460 <_dtoa_r+0x248>
 80094c0:	2301      	movs	r3, #1
 80094c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80094c4:	3b02      	subs	r3, #2
 80094c6:	e7f6      	b.n	80094b6 <_dtoa_r+0x29e>
 80094c8:	3101      	adds	r1, #1
 80094ca:	0052      	lsls	r2, r2, #1
 80094cc:	e7dc      	b.n	8009488 <_dtoa_r+0x270>
 80094ce:	9b04      	ldr	r3, [sp, #16]
 80094d0:	9a06      	ldr	r2, [sp, #24]
 80094d2:	69db      	ldr	r3, [r3, #28]
 80094d4:	601a      	str	r2, [r3, #0]
 80094d6:	9b07      	ldr	r3, [sp, #28]
 80094d8:	2b0e      	cmp	r3, #14
 80094da:	d900      	bls.n	80094de <_dtoa_r+0x2c6>
 80094dc:	e0e5      	b.n	80096aa <_dtoa_r+0x492>
 80094de:	2c00      	cmp	r4, #0
 80094e0:	d100      	bne.n	80094e4 <_dtoa_r+0x2cc>
 80094e2:	e0e2      	b.n	80096aa <_dtoa_r+0x492>
 80094e4:	9b03      	ldr	r3, [sp, #12]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	dd64      	ble.n	80095b4 <_dtoa_r+0x39c>
 80094ea:	210f      	movs	r1, #15
 80094ec:	9a03      	ldr	r2, [sp, #12]
 80094ee:	4b2b      	ldr	r3, [pc, #172]	; (800959c <_dtoa_r+0x384>)
 80094f0:	400a      	ands	r2, r1
 80094f2:	00d2      	lsls	r2, r2, #3
 80094f4:	189b      	adds	r3, r3, r2
 80094f6:	681e      	ldr	r6, [r3, #0]
 80094f8:	685f      	ldr	r7, [r3, #4]
 80094fa:	9b03      	ldr	r3, [sp, #12]
 80094fc:	2402      	movs	r4, #2
 80094fe:	111d      	asrs	r5, r3, #4
 8009500:	05db      	lsls	r3, r3, #23
 8009502:	d50a      	bpl.n	800951a <_dtoa_r+0x302>
 8009504:	4b2a      	ldr	r3, [pc, #168]	; (80095b0 <_dtoa_r+0x398>)
 8009506:	400d      	ands	r5, r1
 8009508:	6a1a      	ldr	r2, [r3, #32]
 800950a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800950c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800950e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009510:	f7f7 fcda 	bl	8000ec8 <__aeabi_ddiv>
 8009514:	9008      	str	r0, [sp, #32]
 8009516:	9109      	str	r1, [sp, #36]	; 0x24
 8009518:	3401      	adds	r4, #1
 800951a:	4b25      	ldr	r3, [pc, #148]	; (80095b0 <_dtoa_r+0x398>)
 800951c:	930e      	str	r3, [sp, #56]	; 0x38
 800951e:	2d00      	cmp	r5, #0
 8009520:	d108      	bne.n	8009534 <_dtoa_r+0x31c>
 8009522:	9808      	ldr	r0, [sp, #32]
 8009524:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009526:	0032      	movs	r2, r6
 8009528:	003b      	movs	r3, r7
 800952a:	f7f7 fccd 	bl	8000ec8 <__aeabi_ddiv>
 800952e:	9008      	str	r0, [sp, #32]
 8009530:	9109      	str	r1, [sp, #36]	; 0x24
 8009532:	e05a      	b.n	80095ea <_dtoa_r+0x3d2>
 8009534:	2301      	movs	r3, #1
 8009536:	421d      	tst	r5, r3
 8009538:	d009      	beq.n	800954e <_dtoa_r+0x336>
 800953a:	18e4      	adds	r4, r4, r3
 800953c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800953e:	0030      	movs	r0, r6
 8009540:	681a      	ldr	r2, [r3, #0]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	0039      	movs	r1, r7
 8009546:	f7f8 f8b9 	bl	80016bc <__aeabi_dmul>
 800954a:	0006      	movs	r6, r0
 800954c:	000f      	movs	r7, r1
 800954e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009550:	106d      	asrs	r5, r5, #1
 8009552:	3308      	adds	r3, #8
 8009554:	e7e2      	b.n	800951c <_dtoa_r+0x304>
 8009556:	46c0      	nop			; (mov r8, r8)
 8009558:	0800db71 	.word	0x0800db71
 800955c:	0800db88 	.word	0x0800db88
 8009560:	7ff00000 	.word	0x7ff00000
 8009564:	0000270f 	.word	0x0000270f
 8009568:	0800db6d 	.word	0x0800db6d
 800956c:	0800db70 	.word	0x0800db70
 8009570:	0800db40 	.word	0x0800db40
 8009574:	0800db41 	.word	0x0800db41
 8009578:	3ff00000 	.word	0x3ff00000
 800957c:	fffffc01 	.word	0xfffffc01
 8009580:	3ff80000 	.word	0x3ff80000
 8009584:	636f4361 	.word	0x636f4361
 8009588:	3fd287a7 	.word	0x3fd287a7
 800958c:	8b60c8b3 	.word	0x8b60c8b3
 8009590:	3fc68a28 	.word	0x3fc68a28
 8009594:	509f79fb 	.word	0x509f79fb
 8009598:	3fd34413 	.word	0x3fd34413
 800959c:	0800dc78 	.word	0x0800dc78
 80095a0:	00000432 	.word	0x00000432
 80095a4:	00000412 	.word	0x00000412
 80095a8:	fe100000 	.word	0xfe100000
 80095ac:	0800dbe0 	.word	0x0800dbe0
 80095b0:	0800dc50 	.word	0x0800dc50
 80095b4:	9b03      	ldr	r3, [sp, #12]
 80095b6:	2402      	movs	r4, #2
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d016      	beq.n	80095ea <_dtoa_r+0x3d2>
 80095bc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80095be:	9911      	ldr	r1, [sp, #68]	; 0x44
 80095c0:	220f      	movs	r2, #15
 80095c2:	425d      	negs	r5, r3
 80095c4:	402a      	ands	r2, r5
 80095c6:	4bdd      	ldr	r3, [pc, #884]	; (800993c <_dtoa_r+0x724>)
 80095c8:	00d2      	lsls	r2, r2, #3
 80095ca:	189b      	adds	r3, r3, r2
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	f7f8 f874 	bl	80016bc <__aeabi_dmul>
 80095d4:	2701      	movs	r7, #1
 80095d6:	2300      	movs	r3, #0
 80095d8:	9008      	str	r0, [sp, #32]
 80095da:	9109      	str	r1, [sp, #36]	; 0x24
 80095dc:	4ed8      	ldr	r6, [pc, #864]	; (8009940 <_dtoa_r+0x728>)
 80095de:	112d      	asrs	r5, r5, #4
 80095e0:	2d00      	cmp	r5, #0
 80095e2:	d000      	beq.n	80095e6 <_dtoa_r+0x3ce>
 80095e4:	e091      	b.n	800970a <_dtoa_r+0x4f2>
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d1a1      	bne.n	800952e <_dtoa_r+0x316>
 80095ea:	9e08      	ldr	r6, [sp, #32]
 80095ec:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80095ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d100      	bne.n	80095f6 <_dtoa_r+0x3de>
 80095f4:	e094      	b.n	8009720 <_dtoa_r+0x508>
 80095f6:	2200      	movs	r2, #0
 80095f8:	0030      	movs	r0, r6
 80095fa:	0039      	movs	r1, r7
 80095fc:	4bd1      	ldr	r3, [pc, #836]	; (8009944 <_dtoa_r+0x72c>)
 80095fe:	f7f6 ff27 	bl	8000450 <__aeabi_dcmplt>
 8009602:	2800      	cmp	r0, #0
 8009604:	d100      	bne.n	8009608 <_dtoa_r+0x3f0>
 8009606:	e08b      	b.n	8009720 <_dtoa_r+0x508>
 8009608:	9b07      	ldr	r3, [sp, #28]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d100      	bne.n	8009610 <_dtoa_r+0x3f8>
 800960e:	e087      	b.n	8009720 <_dtoa_r+0x508>
 8009610:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009612:	2b00      	cmp	r3, #0
 8009614:	dd45      	ble.n	80096a2 <_dtoa_r+0x48a>
 8009616:	9b03      	ldr	r3, [sp, #12]
 8009618:	2200      	movs	r2, #0
 800961a:	3b01      	subs	r3, #1
 800961c:	930e      	str	r3, [sp, #56]	; 0x38
 800961e:	0030      	movs	r0, r6
 8009620:	4bc9      	ldr	r3, [pc, #804]	; (8009948 <_dtoa_r+0x730>)
 8009622:	0039      	movs	r1, r7
 8009624:	f7f8 f84a 	bl	80016bc <__aeabi_dmul>
 8009628:	9008      	str	r0, [sp, #32]
 800962a:	9109      	str	r1, [sp, #36]	; 0x24
 800962c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800962e:	3401      	adds	r4, #1
 8009630:	0020      	movs	r0, r4
 8009632:	9e08      	ldr	r6, [sp, #32]
 8009634:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009636:	9312      	str	r3, [sp, #72]	; 0x48
 8009638:	f7f8 fed8 	bl	80023ec <__aeabi_i2d>
 800963c:	0032      	movs	r2, r6
 800963e:	003b      	movs	r3, r7
 8009640:	f7f8 f83c 	bl	80016bc <__aeabi_dmul>
 8009644:	2200      	movs	r2, #0
 8009646:	4bc1      	ldr	r3, [pc, #772]	; (800994c <_dtoa_r+0x734>)
 8009648:	f7f7 f8de 	bl	8000808 <__aeabi_dadd>
 800964c:	4ac0      	ldr	r2, [pc, #768]	; (8009950 <_dtoa_r+0x738>)
 800964e:	9014      	str	r0, [sp, #80]	; 0x50
 8009650:	9115      	str	r1, [sp, #84]	; 0x54
 8009652:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009654:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8009656:	4694      	mov	ip, r2
 8009658:	9308      	str	r3, [sp, #32]
 800965a:	9409      	str	r4, [sp, #36]	; 0x24
 800965c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800965e:	4463      	add	r3, ip
 8009660:	9318      	str	r3, [sp, #96]	; 0x60
 8009662:	9309      	str	r3, [sp, #36]	; 0x24
 8009664:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009666:	2b00      	cmp	r3, #0
 8009668:	d15e      	bne.n	8009728 <_dtoa_r+0x510>
 800966a:	2200      	movs	r2, #0
 800966c:	4bb9      	ldr	r3, [pc, #740]	; (8009954 <_dtoa_r+0x73c>)
 800966e:	0030      	movs	r0, r6
 8009670:	0039      	movs	r1, r7
 8009672:	f7f8 fae5 	bl	8001c40 <__aeabi_dsub>
 8009676:	9a08      	ldr	r2, [sp, #32]
 8009678:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800967a:	0004      	movs	r4, r0
 800967c:	000d      	movs	r5, r1
 800967e:	f7f6 fefb 	bl	8000478 <__aeabi_dcmpgt>
 8009682:	2800      	cmp	r0, #0
 8009684:	d000      	beq.n	8009688 <_dtoa_r+0x470>
 8009686:	e2b3      	b.n	8009bf0 <_dtoa_r+0x9d8>
 8009688:	48b3      	ldr	r0, [pc, #716]	; (8009958 <_dtoa_r+0x740>)
 800968a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800968c:	4684      	mov	ip, r0
 800968e:	4461      	add	r1, ip
 8009690:	000b      	movs	r3, r1
 8009692:	0020      	movs	r0, r4
 8009694:	0029      	movs	r1, r5
 8009696:	9a08      	ldr	r2, [sp, #32]
 8009698:	f7f6 feda 	bl	8000450 <__aeabi_dcmplt>
 800969c:	2800      	cmp	r0, #0
 800969e:	d000      	beq.n	80096a2 <_dtoa_r+0x48a>
 80096a0:	e2a3      	b.n	8009bea <_dtoa_r+0x9d2>
 80096a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80096a4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80096a6:	9308      	str	r3, [sp, #32]
 80096a8:	9409      	str	r4, [sp, #36]	; 0x24
 80096aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	da00      	bge.n	80096b2 <_dtoa_r+0x49a>
 80096b0:	e179      	b.n	80099a6 <_dtoa_r+0x78e>
 80096b2:	9a03      	ldr	r2, [sp, #12]
 80096b4:	2a0e      	cmp	r2, #14
 80096b6:	dd00      	ble.n	80096ba <_dtoa_r+0x4a2>
 80096b8:	e175      	b.n	80099a6 <_dtoa_r+0x78e>
 80096ba:	4ba0      	ldr	r3, [pc, #640]	; (800993c <_dtoa_r+0x724>)
 80096bc:	00d2      	lsls	r2, r2, #3
 80096be:	189b      	adds	r3, r3, r2
 80096c0:	681e      	ldr	r6, [r3, #0]
 80096c2:	685f      	ldr	r7, [r3, #4]
 80096c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	db00      	blt.n	80096cc <_dtoa_r+0x4b4>
 80096ca:	e0e5      	b.n	8009898 <_dtoa_r+0x680>
 80096cc:	9b07      	ldr	r3, [sp, #28]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	dd00      	ble.n	80096d4 <_dtoa_r+0x4bc>
 80096d2:	e0e1      	b.n	8009898 <_dtoa_r+0x680>
 80096d4:	d000      	beq.n	80096d8 <_dtoa_r+0x4c0>
 80096d6:	e288      	b.n	8009bea <_dtoa_r+0x9d2>
 80096d8:	2200      	movs	r2, #0
 80096da:	0030      	movs	r0, r6
 80096dc:	0039      	movs	r1, r7
 80096de:	4b9d      	ldr	r3, [pc, #628]	; (8009954 <_dtoa_r+0x73c>)
 80096e0:	f7f7 ffec 	bl	80016bc <__aeabi_dmul>
 80096e4:	9a08      	ldr	r2, [sp, #32]
 80096e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096e8:	f7f6 fed0 	bl	800048c <__aeabi_dcmpge>
 80096ec:	9e07      	ldr	r6, [sp, #28]
 80096ee:	0037      	movs	r7, r6
 80096f0:	2800      	cmp	r0, #0
 80096f2:	d000      	beq.n	80096f6 <_dtoa_r+0x4de>
 80096f4:	e25f      	b.n	8009bb6 <_dtoa_r+0x99e>
 80096f6:	9b06      	ldr	r3, [sp, #24]
 80096f8:	9a06      	ldr	r2, [sp, #24]
 80096fa:	3301      	adds	r3, #1
 80096fc:	9308      	str	r3, [sp, #32]
 80096fe:	2331      	movs	r3, #49	; 0x31
 8009700:	7013      	strb	r3, [r2, #0]
 8009702:	9b03      	ldr	r3, [sp, #12]
 8009704:	3301      	adds	r3, #1
 8009706:	9303      	str	r3, [sp, #12]
 8009708:	e25a      	b.n	8009bc0 <_dtoa_r+0x9a8>
 800970a:	423d      	tst	r5, r7
 800970c:	d005      	beq.n	800971a <_dtoa_r+0x502>
 800970e:	6832      	ldr	r2, [r6, #0]
 8009710:	6873      	ldr	r3, [r6, #4]
 8009712:	f7f7 ffd3 	bl	80016bc <__aeabi_dmul>
 8009716:	003b      	movs	r3, r7
 8009718:	3401      	adds	r4, #1
 800971a:	106d      	asrs	r5, r5, #1
 800971c:	3608      	adds	r6, #8
 800971e:	e75f      	b.n	80095e0 <_dtoa_r+0x3c8>
 8009720:	9b03      	ldr	r3, [sp, #12]
 8009722:	930e      	str	r3, [sp, #56]	; 0x38
 8009724:	9b07      	ldr	r3, [sp, #28]
 8009726:	e783      	b.n	8009630 <_dtoa_r+0x418>
 8009728:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800972a:	4b84      	ldr	r3, [pc, #528]	; (800993c <_dtoa_r+0x724>)
 800972c:	3a01      	subs	r2, #1
 800972e:	00d2      	lsls	r2, r2, #3
 8009730:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009732:	189b      	adds	r3, r3, r2
 8009734:	9c08      	ldr	r4, [sp, #32]
 8009736:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	2900      	cmp	r1, #0
 800973e:	d051      	beq.n	80097e4 <_dtoa_r+0x5cc>
 8009740:	2000      	movs	r0, #0
 8009742:	4986      	ldr	r1, [pc, #536]	; (800995c <_dtoa_r+0x744>)
 8009744:	f7f7 fbc0 	bl	8000ec8 <__aeabi_ddiv>
 8009748:	0022      	movs	r2, r4
 800974a:	002b      	movs	r3, r5
 800974c:	f7f8 fa78 	bl	8001c40 <__aeabi_dsub>
 8009750:	9a06      	ldr	r2, [sp, #24]
 8009752:	0004      	movs	r4, r0
 8009754:	4694      	mov	ip, r2
 8009756:	000d      	movs	r5, r1
 8009758:	9b06      	ldr	r3, [sp, #24]
 800975a:	9314      	str	r3, [sp, #80]	; 0x50
 800975c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800975e:	4463      	add	r3, ip
 8009760:	9318      	str	r3, [sp, #96]	; 0x60
 8009762:	0039      	movs	r1, r7
 8009764:	0030      	movs	r0, r6
 8009766:	f7f8 fe0b 	bl	8002380 <__aeabi_d2iz>
 800976a:	9012      	str	r0, [sp, #72]	; 0x48
 800976c:	f7f8 fe3e 	bl	80023ec <__aeabi_i2d>
 8009770:	0002      	movs	r2, r0
 8009772:	000b      	movs	r3, r1
 8009774:	0030      	movs	r0, r6
 8009776:	0039      	movs	r1, r7
 8009778:	f7f8 fa62 	bl	8001c40 <__aeabi_dsub>
 800977c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800977e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009780:	3301      	adds	r3, #1
 8009782:	9308      	str	r3, [sp, #32]
 8009784:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009786:	0006      	movs	r6, r0
 8009788:	3330      	adds	r3, #48	; 0x30
 800978a:	7013      	strb	r3, [r2, #0]
 800978c:	0022      	movs	r2, r4
 800978e:	002b      	movs	r3, r5
 8009790:	000f      	movs	r7, r1
 8009792:	f7f6 fe5d 	bl	8000450 <__aeabi_dcmplt>
 8009796:	2800      	cmp	r0, #0
 8009798:	d174      	bne.n	8009884 <_dtoa_r+0x66c>
 800979a:	0032      	movs	r2, r6
 800979c:	003b      	movs	r3, r7
 800979e:	2000      	movs	r0, #0
 80097a0:	4968      	ldr	r1, [pc, #416]	; (8009944 <_dtoa_r+0x72c>)
 80097a2:	f7f8 fa4d 	bl	8001c40 <__aeabi_dsub>
 80097a6:	0022      	movs	r2, r4
 80097a8:	002b      	movs	r3, r5
 80097aa:	f7f6 fe51 	bl	8000450 <__aeabi_dcmplt>
 80097ae:	2800      	cmp	r0, #0
 80097b0:	d000      	beq.n	80097b4 <_dtoa_r+0x59c>
 80097b2:	e0d7      	b.n	8009964 <_dtoa_r+0x74c>
 80097b4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80097b6:	9a08      	ldr	r2, [sp, #32]
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d100      	bne.n	80097be <_dtoa_r+0x5a6>
 80097bc:	e771      	b.n	80096a2 <_dtoa_r+0x48a>
 80097be:	2200      	movs	r2, #0
 80097c0:	0020      	movs	r0, r4
 80097c2:	0029      	movs	r1, r5
 80097c4:	4b60      	ldr	r3, [pc, #384]	; (8009948 <_dtoa_r+0x730>)
 80097c6:	f7f7 ff79 	bl	80016bc <__aeabi_dmul>
 80097ca:	4b5f      	ldr	r3, [pc, #380]	; (8009948 <_dtoa_r+0x730>)
 80097cc:	0004      	movs	r4, r0
 80097ce:	000d      	movs	r5, r1
 80097d0:	0030      	movs	r0, r6
 80097d2:	0039      	movs	r1, r7
 80097d4:	2200      	movs	r2, #0
 80097d6:	f7f7 ff71 	bl	80016bc <__aeabi_dmul>
 80097da:	9b08      	ldr	r3, [sp, #32]
 80097dc:	0006      	movs	r6, r0
 80097de:	000f      	movs	r7, r1
 80097e0:	9314      	str	r3, [sp, #80]	; 0x50
 80097e2:	e7be      	b.n	8009762 <_dtoa_r+0x54a>
 80097e4:	0020      	movs	r0, r4
 80097e6:	0029      	movs	r1, r5
 80097e8:	f7f7 ff68 	bl	80016bc <__aeabi_dmul>
 80097ec:	9a06      	ldr	r2, [sp, #24]
 80097ee:	9b06      	ldr	r3, [sp, #24]
 80097f0:	4694      	mov	ip, r2
 80097f2:	9308      	str	r3, [sp, #32]
 80097f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80097f6:	9014      	str	r0, [sp, #80]	; 0x50
 80097f8:	9115      	str	r1, [sp, #84]	; 0x54
 80097fa:	4463      	add	r3, ip
 80097fc:	9319      	str	r3, [sp, #100]	; 0x64
 80097fe:	0030      	movs	r0, r6
 8009800:	0039      	movs	r1, r7
 8009802:	f7f8 fdbd 	bl	8002380 <__aeabi_d2iz>
 8009806:	9018      	str	r0, [sp, #96]	; 0x60
 8009808:	f7f8 fdf0 	bl	80023ec <__aeabi_i2d>
 800980c:	0002      	movs	r2, r0
 800980e:	000b      	movs	r3, r1
 8009810:	0030      	movs	r0, r6
 8009812:	0039      	movs	r1, r7
 8009814:	f7f8 fa14 	bl	8001c40 <__aeabi_dsub>
 8009818:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800981a:	9b08      	ldr	r3, [sp, #32]
 800981c:	3630      	adds	r6, #48	; 0x30
 800981e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009820:	701e      	strb	r6, [r3, #0]
 8009822:	3301      	adds	r3, #1
 8009824:	0004      	movs	r4, r0
 8009826:	000d      	movs	r5, r1
 8009828:	9308      	str	r3, [sp, #32]
 800982a:	4293      	cmp	r3, r2
 800982c:	d12d      	bne.n	800988a <_dtoa_r+0x672>
 800982e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009830:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009832:	9a06      	ldr	r2, [sp, #24]
 8009834:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009836:	4694      	mov	ip, r2
 8009838:	4463      	add	r3, ip
 800983a:	2200      	movs	r2, #0
 800983c:	9308      	str	r3, [sp, #32]
 800983e:	4b47      	ldr	r3, [pc, #284]	; (800995c <_dtoa_r+0x744>)
 8009840:	f7f6 ffe2 	bl	8000808 <__aeabi_dadd>
 8009844:	0002      	movs	r2, r0
 8009846:	000b      	movs	r3, r1
 8009848:	0020      	movs	r0, r4
 800984a:	0029      	movs	r1, r5
 800984c:	f7f6 fe14 	bl	8000478 <__aeabi_dcmpgt>
 8009850:	2800      	cmp	r0, #0
 8009852:	d000      	beq.n	8009856 <_dtoa_r+0x63e>
 8009854:	e086      	b.n	8009964 <_dtoa_r+0x74c>
 8009856:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009858:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800985a:	2000      	movs	r0, #0
 800985c:	493f      	ldr	r1, [pc, #252]	; (800995c <_dtoa_r+0x744>)
 800985e:	f7f8 f9ef 	bl	8001c40 <__aeabi_dsub>
 8009862:	0002      	movs	r2, r0
 8009864:	000b      	movs	r3, r1
 8009866:	0020      	movs	r0, r4
 8009868:	0029      	movs	r1, r5
 800986a:	f7f6 fdf1 	bl	8000450 <__aeabi_dcmplt>
 800986e:	2800      	cmp	r0, #0
 8009870:	d100      	bne.n	8009874 <_dtoa_r+0x65c>
 8009872:	e716      	b.n	80096a2 <_dtoa_r+0x48a>
 8009874:	9b08      	ldr	r3, [sp, #32]
 8009876:	001a      	movs	r2, r3
 8009878:	3a01      	subs	r2, #1
 800987a:	9208      	str	r2, [sp, #32]
 800987c:	7812      	ldrb	r2, [r2, #0]
 800987e:	2a30      	cmp	r2, #48	; 0x30
 8009880:	d0f8      	beq.n	8009874 <_dtoa_r+0x65c>
 8009882:	9308      	str	r3, [sp, #32]
 8009884:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009886:	9303      	str	r3, [sp, #12]
 8009888:	e046      	b.n	8009918 <_dtoa_r+0x700>
 800988a:	2200      	movs	r2, #0
 800988c:	4b2e      	ldr	r3, [pc, #184]	; (8009948 <_dtoa_r+0x730>)
 800988e:	f7f7 ff15 	bl	80016bc <__aeabi_dmul>
 8009892:	0006      	movs	r6, r0
 8009894:	000f      	movs	r7, r1
 8009896:	e7b2      	b.n	80097fe <_dtoa_r+0x5e6>
 8009898:	9b06      	ldr	r3, [sp, #24]
 800989a:	9a06      	ldr	r2, [sp, #24]
 800989c:	930a      	str	r3, [sp, #40]	; 0x28
 800989e:	9b07      	ldr	r3, [sp, #28]
 80098a0:	9c08      	ldr	r4, [sp, #32]
 80098a2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80098a4:	3b01      	subs	r3, #1
 80098a6:	189b      	adds	r3, r3, r2
 80098a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80098aa:	0032      	movs	r2, r6
 80098ac:	003b      	movs	r3, r7
 80098ae:	0020      	movs	r0, r4
 80098b0:	0029      	movs	r1, r5
 80098b2:	f7f7 fb09 	bl	8000ec8 <__aeabi_ddiv>
 80098b6:	f7f8 fd63 	bl	8002380 <__aeabi_d2iz>
 80098ba:	9007      	str	r0, [sp, #28]
 80098bc:	f7f8 fd96 	bl	80023ec <__aeabi_i2d>
 80098c0:	0032      	movs	r2, r6
 80098c2:	003b      	movs	r3, r7
 80098c4:	f7f7 fefa 	bl	80016bc <__aeabi_dmul>
 80098c8:	0002      	movs	r2, r0
 80098ca:	000b      	movs	r3, r1
 80098cc:	0020      	movs	r0, r4
 80098ce:	0029      	movs	r1, r5
 80098d0:	f7f8 f9b6 	bl	8001c40 <__aeabi_dsub>
 80098d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098d6:	001a      	movs	r2, r3
 80098d8:	3201      	adds	r2, #1
 80098da:	920a      	str	r2, [sp, #40]	; 0x28
 80098dc:	9208      	str	r2, [sp, #32]
 80098de:	9a07      	ldr	r2, [sp, #28]
 80098e0:	3230      	adds	r2, #48	; 0x30
 80098e2:	701a      	strb	r2, [r3, #0]
 80098e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d14f      	bne.n	800998a <_dtoa_r+0x772>
 80098ea:	0002      	movs	r2, r0
 80098ec:	000b      	movs	r3, r1
 80098ee:	f7f6 ff8b 	bl	8000808 <__aeabi_dadd>
 80098f2:	0032      	movs	r2, r6
 80098f4:	003b      	movs	r3, r7
 80098f6:	0004      	movs	r4, r0
 80098f8:	000d      	movs	r5, r1
 80098fa:	f7f6 fdbd 	bl	8000478 <__aeabi_dcmpgt>
 80098fe:	2800      	cmp	r0, #0
 8009900:	d12e      	bne.n	8009960 <_dtoa_r+0x748>
 8009902:	0032      	movs	r2, r6
 8009904:	003b      	movs	r3, r7
 8009906:	0020      	movs	r0, r4
 8009908:	0029      	movs	r1, r5
 800990a:	f7f6 fd9b 	bl	8000444 <__aeabi_dcmpeq>
 800990e:	2800      	cmp	r0, #0
 8009910:	d002      	beq.n	8009918 <_dtoa_r+0x700>
 8009912:	9b07      	ldr	r3, [sp, #28]
 8009914:	07de      	lsls	r6, r3, #31
 8009916:	d423      	bmi.n	8009960 <_dtoa_r+0x748>
 8009918:	9905      	ldr	r1, [sp, #20]
 800991a:	9804      	ldr	r0, [sp, #16]
 800991c:	f000 fb18 	bl	8009f50 <_Bfree>
 8009920:	2300      	movs	r3, #0
 8009922:	9a08      	ldr	r2, [sp, #32]
 8009924:	7013      	strb	r3, [r2, #0]
 8009926:	9b03      	ldr	r3, [sp, #12]
 8009928:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800992a:	3301      	adds	r3, #1
 800992c:	6013      	str	r3, [r2, #0]
 800992e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009930:	2b00      	cmp	r3, #0
 8009932:	d100      	bne.n	8009936 <_dtoa_r+0x71e>
 8009934:	e4ba      	b.n	80092ac <_dtoa_r+0x94>
 8009936:	9a08      	ldr	r2, [sp, #32]
 8009938:	601a      	str	r2, [r3, #0]
 800993a:	e4b7      	b.n	80092ac <_dtoa_r+0x94>
 800993c:	0800dc78 	.word	0x0800dc78
 8009940:	0800dc50 	.word	0x0800dc50
 8009944:	3ff00000 	.word	0x3ff00000
 8009948:	40240000 	.word	0x40240000
 800994c:	401c0000 	.word	0x401c0000
 8009950:	fcc00000 	.word	0xfcc00000
 8009954:	40140000 	.word	0x40140000
 8009958:	7cc00000 	.word	0x7cc00000
 800995c:	3fe00000 	.word	0x3fe00000
 8009960:	9b03      	ldr	r3, [sp, #12]
 8009962:	930e      	str	r3, [sp, #56]	; 0x38
 8009964:	9b08      	ldr	r3, [sp, #32]
 8009966:	9308      	str	r3, [sp, #32]
 8009968:	3b01      	subs	r3, #1
 800996a:	781a      	ldrb	r2, [r3, #0]
 800996c:	2a39      	cmp	r2, #57	; 0x39
 800996e:	d108      	bne.n	8009982 <_dtoa_r+0x76a>
 8009970:	9a06      	ldr	r2, [sp, #24]
 8009972:	429a      	cmp	r2, r3
 8009974:	d1f7      	bne.n	8009966 <_dtoa_r+0x74e>
 8009976:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009978:	9906      	ldr	r1, [sp, #24]
 800997a:	3201      	adds	r2, #1
 800997c:	920e      	str	r2, [sp, #56]	; 0x38
 800997e:	2230      	movs	r2, #48	; 0x30
 8009980:	700a      	strb	r2, [r1, #0]
 8009982:	781a      	ldrb	r2, [r3, #0]
 8009984:	3201      	adds	r2, #1
 8009986:	701a      	strb	r2, [r3, #0]
 8009988:	e77c      	b.n	8009884 <_dtoa_r+0x66c>
 800998a:	2200      	movs	r2, #0
 800998c:	4ba9      	ldr	r3, [pc, #676]	; (8009c34 <_dtoa_r+0xa1c>)
 800998e:	f7f7 fe95 	bl	80016bc <__aeabi_dmul>
 8009992:	2200      	movs	r2, #0
 8009994:	2300      	movs	r3, #0
 8009996:	0004      	movs	r4, r0
 8009998:	000d      	movs	r5, r1
 800999a:	f7f6 fd53 	bl	8000444 <__aeabi_dcmpeq>
 800999e:	2800      	cmp	r0, #0
 80099a0:	d100      	bne.n	80099a4 <_dtoa_r+0x78c>
 80099a2:	e782      	b.n	80098aa <_dtoa_r+0x692>
 80099a4:	e7b8      	b.n	8009918 <_dtoa_r+0x700>
 80099a6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80099a8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80099aa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80099ac:	2f00      	cmp	r7, #0
 80099ae:	d012      	beq.n	80099d6 <_dtoa_r+0x7be>
 80099b0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80099b2:	2a01      	cmp	r2, #1
 80099b4:	dc6e      	bgt.n	8009a94 <_dtoa_r+0x87c>
 80099b6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80099b8:	2a00      	cmp	r2, #0
 80099ba:	d065      	beq.n	8009a88 <_dtoa_r+0x870>
 80099bc:	4a9e      	ldr	r2, [pc, #632]	; (8009c38 <_dtoa_r+0xa20>)
 80099be:	189b      	adds	r3, r3, r2
 80099c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099c2:	2101      	movs	r1, #1
 80099c4:	18d2      	adds	r2, r2, r3
 80099c6:	920a      	str	r2, [sp, #40]	; 0x28
 80099c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80099ca:	9804      	ldr	r0, [sp, #16]
 80099cc:	18d3      	adds	r3, r2, r3
 80099ce:	930c      	str	r3, [sp, #48]	; 0x30
 80099d0:	f000 fb6e 	bl	800a0b0 <__i2b>
 80099d4:	0007      	movs	r7, r0
 80099d6:	2c00      	cmp	r4, #0
 80099d8:	d00e      	beq.n	80099f8 <_dtoa_r+0x7e0>
 80099da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099dc:	2b00      	cmp	r3, #0
 80099de:	dd0b      	ble.n	80099f8 <_dtoa_r+0x7e0>
 80099e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80099e2:	0023      	movs	r3, r4
 80099e4:	4294      	cmp	r4, r2
 80099e6:	dd00      	ble.n	80099ea <_dtoa_r+0x7d2>
 80099e8:	0013      	movs	r3, r2
 80099ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099ec:	1ae4      	subs	r4, r4, r3
 80099ee:	1ad2      	subs	r2, r2, r3
 80099f0:	920a      	str	r2, [sp, #40]	; 0x28
 80099f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80099f4:	1ad3      	subs	r3, r2, r3
 80099f6:	930c      	str	r3, [sp, #48]	; 0x30
 80099f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d01e      	beq.n	8009a3c <_dtoa_r+0x824>
 80099fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d05c      	beq.n	8009abe <_dtoa_r+0x8a6>
 8009a04:	2d00      	cmp	r5, #0
 8009a06:	dd10      	ble.n	8009a2a <_dtoa_r+0x812>
 8009a08:	0039      	movs	r1, r7
 8009a0a:	002a      	movs	r2, r5
 8009a0c:	9804      	ldr	r0, [sp, #16]
 8009a0e:	f000 fc17 	bl	800a240 <__pow5mult>
 8009a12:	9a05      	ldr	r2, [sp, #20]
 8009a14:	0001      	movs	r1, r0
 8009a16:	0007      	movs	r7, r0
 8009a18:	9804      	ldr	r0, [sp, #16]
 8009a1a:	f000 fb61 	bl	800a0e0 <__multiply>
 8009a1e:	0006      	movs	r6, r0
 8009a20:	9905      	ldr	r1, [sp, #20]
 8009a22:	9804      	ldr	r0, [sp, #16]
 8009a24:	f000 fa94 	bl	8009f50 <_Bfree>
 8009a28:	9605      	str	r6, [sp, #20]
 8009a2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a2c:	1b5a      	subs	r2, r3, r5
 8009a2e:	42ab      	cmp	r3, r5
 8009a30:	d004      	beq.n	8009a3c <_dtoa_r+0x824>
 8009a32:	9905      	ldr	r1, [sp, #20]
 8009a34:	9804      	ldr	r0, [sp, #16]
 8009a36:	f000 fc03 	bl	800a240 <__pow5mult>
 8009a3a:	9005      	str	r0, [sp, #20]
 8009a3c:	2101      	movs	r1, #1
 8009a3e:	9804      	ldr	r0, [sp, #16]
 8009a40:	f000 fb36 	bl	800a0b0 <__i2b>
 8009a44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009a46:	0006      	movs	r6, r0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	dd3a      	ble.n	8009ac2 <_dtoa_r+0x8aa>
 8009a4c:	001a      	movs	r2, r3
 8009a4e:	0001      	movs	r1, r0
 8009a50:	9804      	ldr	r0, [sp, #16]
 8009a52:	f000 fbf5 	bl	800a240 <__pow5mult>
 8009a56:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009a58:	0006      	movs	r6, r0
 8009a5a:	2500      	movs	r5, #0
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	dc38      	bgt.n	8009ad2 <_dtoa_r+0x8ba>
 8009a60:	2500      	movs	r5, #0
 8009a62:	9b08      	ldr	r3, [sp, #32]
 8009a64:	42ab      	cmp	r3, r5
 8009a66:	d130      	bne.n	8009aca <_dtoa_r+0x8b2>
 8009a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a6a:	031b      	lsls	r3, r3, #12
 8009a6c:	42ab      	cmp	r3, r5
 8009a6e:	d12c      	bne.n	8009aca <_dtoa_r+0x8b2>
 8009a70:	4b72      	ldr	r3, [pc, #456]	; (8009c3c <_dtoa_r+0xa24>)
 8009a72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a74:	4213      	tst	r3, r2
 8009a76:	d028      	beq.n	8009aca <_dtoa_r+0x8b2>
 8009a78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a7a:	3501      	adds	r5, #1
 8009a7c:	3301      	adds	r3, #1
 8009a7e:	930a      	str	r3, [sp, #40]	; 0x28
 8009a80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a82:	3301      	adds	r3, #1
 8009a84:	930c      	str	r3, [sp, #48]	; 0x30
 8009a86:	e020      	b.n	8009aca <_dtoa_r+0x8b2>
 8009a88:	2336      	movs	r3, #54	; 0x36
 8009a8a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009a8c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009a8e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009a90:	1a9b      	subs	r3, r3, r2
 8009a92:	e795      	b.n	80099c0 <_dtoa_r+0x7a8>
 8009a94:	9b07      	ldr	r3, [sp, #28]
 8009a96:	1e5d      	subs	r5, r3, #1
 8009a98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a9a:	42ab      	cmp	r3, r5
 8009a9c:	db07      	blt.n	8009aae <_dtoa_r+0x896>
 8009a9e:	1b5d      	subs	r5, r3, r5
 8009aa0:	9b07      	ldr	r3, [sp, #28]
 8009aa2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	da8b      	bge.n	80099c0 <_dtoa_r+0x7a8>
 8009aa8:	1ae4      	subs	r4, r4, r3
 8009aaa:	2300      	movs	r3, #0
 8009aac:	e788      	b.n	80099c0 <_dtoa_r+0x7a8>
 8009aae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ab0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009ab2:	1aeb      	subs	r3, r5, r3
 8009ab4:	18d3      	adds	r3, r2, r3
 8009ab6:	950d      	str	r5, [sp, #52]	; 0x34
 8009ab8:	9313      	str	r3, [sp, #76]	; 0x4c
 8009aba:	2500      	movs	r5, #0
 8009abc:	e7f0      	b.n	8009aa0 <_dtoa_r+0x888>
 8009abe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ac0:	e7b7      	b.n	8009a32 <_dtoa_r+0x81a>
 8009ac2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009ac4:	2500      	movs	r5, #0
 8009ac6:	2b01      	cmp	r3, #1
 8009ac8:	ddca      	ble.n	8009a60 <_dtoa_r+0x848>
 8009aca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009acc:	2001      	movs	r0, #1
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d008      	beq.n	8009ae4 <_dtoa_r+0x8cc>
 8009ad2:	6933      	ldr	r3, [r6, #16]
 8009ad4:	3303      	adds	r3, #3
 8009ad6:	009b      	lsls	r3, r3, #2
 8009ad8:	18f3      	adds	r3, r6, r3
 8009ada:	6858      	ldr	r0, [r3, #4]
 8009adc:	f000 faa0 	bl	800a020 <__hi0bits>
 8009ae0:	2320      	movs	r3, #32
 8009ae2:	1a18      	subs	r0, r3, r0
 8009ae4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ae6:	1818      	adds	r0, r3, r0
 8009ae8:	0002      	movs	r2, r0
 8009aea:	231f      	movs	r3, #31
 8009aec:	401a      	ands	r2, r3
 8009aee:	4218      	tst	r0, r3
 8009af0:	d047      	beq.n	8009b82 <_dtoa_r+0x96a>
 8009af2:	3301      	adds	r3, #1
 8009af4:	1a9b      	subs	r3, r3, r2
 8009af6:	2b04      	cmp	r3, #4
 8009af8:	dd3f      	ble.n	8009b7a <_dtoa_r+0x962>
 8009afa:	231c      	movs	r3, #28
 8009afc:	1a9b      	subs	r3, r3, r2
 8009afe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b00:	18e4      	adds	r4, r4, r3
 8009b02:	18d2      	adds	r2, r2, r3
 8009b04:	920a      	str	r2, [sp, #40]	; 0x28
 8009b06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b08:	18d3      	adds	r3, r2, r3
 8009b0a:	930c      	str	r3, [sp, #48]	; 0x30
 8009b0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	dd05      	ble.n	8009b1e <_dtoa_r+0x906>
 8009b12:	001a      	movs	r2, r3
 8009b14:	9905      	ldr	r1, [sp, #20]
 8009b16:	9804      	ldr	r0, [sp, #16]
 8009b18:	f000 fbee 	bl	800a2f8 <__lshift>
 8009b1c:	9005      	str	r0, [sp, #20]
 8009b1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	dd05      	ble.n	8009b30 <_dtoa_r+0x918>
 8009b24:	0031      	movs	r1, r6
 8009b26:	001a      	movs	r2, r3
 8009b28:	9804      	ldr	r0, [sp, #16]
 8009b2a:	f000 fbe5 	bl	800a2f8 <__lshift>
 8009b2e:	0006      	movs	r6, r0
 8009b30:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d027      	beq.n	8009b86 <_dtoa_r+0x96e>
 8009b36:	0031      	movs	r1, r6
 8009b38:	9805      	ldr	r0, [sp, #20]
 8009b3a:	f000 fc4b 	bl	800a3d4 <__mcmp>
 8009b3e:	2800      	cmp	r0, #0
 8009b40:	da21      	bge.n	8009b86 <_dtoa_r+0x96e>
 8009b42:	9b03      	ldr	r3, [sp, #12]
 8009b44:	220a      	movs	r2, #10
 8009b46:	3b01      	subs	r3, #1
 8009b48:	9303      	str	r3, [sp, #12]
 8009b4a:	9905      	ldr	r1, [sp, #20]
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	9804      	ldr	r0, [sp, #16]
 8009b50:	f000 fa22 	bl	8009f98 <__multadd>
 8009b54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b56:	9005      	str	r0, [sp, #20]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d100      	bne.n	8009b5e <_dtoa_r+0x946>
 8009b5c:	e15d      	b.n	8009e1a <_dtoa_r+0xc02>
 8009b5e:	2300      	movs	r3, #0
 8009b60:	0039      	movs	r1, r7
 8009b62:	220a      	movs	r2, #10
 8009b64:	9804      	ldr	r0, [sp, #16]
 8009b66:	f000 fa17 	bl	8009f98 <__multadd>
 8009b6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b6c:	0007      	movs	r7, r0
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	dc49      	bgt.n	8009c06 <_dtoa_r+0x9ee>
 8009b72:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b74:	2b02      	cmp	r3, #2
 8009b76:	dc0e      	bgt.n	8009b96 <_dtoa_r+0x97e>
 8009b78:	e045      	b.n	8009c06 <_dtoa_r+0x9ee>
 8009b7a:	2b04      	cmp	r3, #4
 8009b7c:	d0c6      	beq.n	8009b0c <_dtoa_r+0x8f4>
 8009b7e:	331c      	adds	r3, #28
 8009b80:	e7bd      	b.n	8009afe <_dtoa_r+0x8e6>
 8009b82:	0013      	movs	r3, r2
 8009b84:	e7fb      	b.n	8009b7e <_dtoa_r+0x966>
 8009b86:	9b07      	ldr	r3, [sp, #28]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	dc36      	bgt.n	8009bfa <_dtoa_r+0x9e2>
 8009b8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b8e:	2b02      	cmp	r3, #2
 8009b90:	dd33      	ble.n	8009bfa <_dtoa_r+0x9e2>
 8009b92:	9b07      	ldr	r3, [sp, #28]
 8009b94:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d10c      	bne.n	8009bb6 <_dtoa_r+0x99e>
 8009b9c:	0031      	movs	r1, r6
 8009b9e:	2205      	movs	r2, #5
 8009ba0:	9804      	ldr	r0, [sp, #16]
 8009ba2:	f000 f9f9 	bl	8009f98 <__multadd>
 8009ba6:	0006      	movs	r6, r0
 8009ba8:	0001      	movs	r1, r0
 8009baa:	9805      	ldr	r0, [sp, #20]
 8009bac:	f000 fc12 	bl	800a3d4 <__mcmp>
 8009bb0:	2800      	cmp	r0, #0
 8009bb2:	dd00      	ble.n	8009bb6 <_dtoa_r+0x99e>
 8009bb4:	e59f      	b.n	80096f6 <_dtoa_r+0x4de>
 8009bb6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009bb8:	43db      	mvns	r3, r3
 8009bba:	9303      	str	r3, [sp, #12]
 8009bbc:	9b06      	ldr	r3, [sp, #24]
 8009bbe:	9308      	str	r3, [sp, #32]
 8009bc0:	2500      	movs	r5, #0
 8009bc2:	0031      	movs	r1, r6
 8009bc4:	9804      	ldr	r0, [sp, #16]
 8009bc6:	f000 f9c3 	bl	8009f50 <_Bfree>
 8009bca:	2f00      	cmp	r7, #0
 8009bcc:	d100      	bne.n	8009bd0 <_dtoa_r+0x9b8>
 8009bce:	e6a3      	b.n	8009918 <_dtoa_r+0x700>
 8009bd0:	2d00      	cmp	r5, #0
 8009bd2:	d005      	beq.n	8009be0 <_dtoa_r+0x9c8>
 8009bd4:	42bd      	cmp	r5, r7
 8009bd6:	d003      	beq.n	8009be0 <_dtoa_r+0x9c8>
 8009bd8:	0029      	movs	r1, r5
 8009bda:	9804      	ldr	r0, [sp, #16]
 8009bdc:	f000 f9b8 	bl	8009f50 <_Bfree>
 8009be0:	0039      	movs	r1, r7
 8009be2:	9804      	ldr	r0, [sp, #16]
 8009be4:	f000 f9b4 	bl	8009f50 <_Bfree>
 8009be8:	e696      	b.n	8009918 <_dtoa_r+0x700>
 8009bea:	2600      	movs	r6, #0
 8009bec:	0037      	movs	r7, r6
 8009bee:	e7e2      	b.n	8009bb6 <_dtoa_r+0x99e>
 8009bf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bf2:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8009bf4:	9303      	str	r3, [sp, #12]
 8009bf6:	0037      	movs	r7, r6
 8009bf8:	e57d      	b.n	80096f6 <_dtoa_r+0x4de>
 8009bfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d100      	bne.n	8009c02 <_dtoa_r+0x9ea>
 8009c00:	e0c3      	b.n	8009d8a <_dtoa_r+0xb72>
 8009c02:	9b07      	ldr	r3, [sp, #28]
 8009c04:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c06:	2c00      	cmp	r4, #0
 8009c08:	dd05      	ble.n	8009c16 <_dtoa_r+0x9fe>
 8009c0a:	0039      	movs	r1, r7
 8009c0c:	0022      	movs	r2, r4
 8009c0e:	9804      	ldr	r0, [sp, #16]
 8009c10:	f000 fb72 	bl	800a2f8 <__lshift>
 8009c14:	0007      	movs	r7, r0
 8009c16:	0038      	movs	r0, r7
 8009c18:	2d00      	cmp	r5, #0
 8009c1a:	d024      	beq.n	8009c66 <_dtoa_r+0xa4e>
 8009c1c:	6879      	ldr	r1, [r7, #4]
 8009c1e:	9804      	ldr	r0, [sp, #16]
 8009c20:	f000 f952 	bl	8009ec8 <_Balloc>
 8009c24:	1e04      	subs	r4, r0, #0
 8009c26:	d111      	bne.n	8009c4c <_dtoa_r+0xa34>
 8009c28:	0022      	movs	r2, r4
 8009c2a:	4b05      	ldr	r3, [pc, #20]	; (8009c40 <_dtoa_r+0xa28>)
 8009c2c:	4805      	ldr	r0, [pc, #20]	; (8009c44 <_dtoa_r+0xa2c>)
 8009c2e:	4906      	ldr	r1, [pc, #24]	; (8009c48 <_dtoa_r+0xa30>)
 8009c30:	f7ff fb07 	bl	8009242 <_dtoa_r+0x2a>
 8009c34:	40240000 	.word	0x40240000
 8009c38:	00000433 	.word	0x00000433
 8009c3c:	7ff00000 	.word	0x7ff00000
 8009c40:	0800dbe0 	.word	0x0800dbe0
 8009c44:	0800db88 	.word	0x0800db88
 8009c48:	000002ef 	.word	0x000002ef
 8009c4c:	0039      	movs	r1, r7
 8009c4e:	693a      	ldr	r2, [r7, #16]
 8009c50:	310c      	adds	r1, #12
 8009c52:	3202      	adds	r2, #2
 8009c54:	0092      	lsls	r2, r2, #2
 8009c56:	300c      	adds	r0, #12
 8009c58:	f7ff fa46 	bl	80090e8 <memcpy>
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	0021      	movs	r1, r4
 8009c60:	9804      	ldr	r0, [sp, #16]
 8009c62:	f000 fb49 	bl	800a2f8 <__lshift>
 8009c66:	9b06      	ldr	r3, [sp, #24]
 8009c68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c6a:	9307      	str	r3, [sp, #28]
 8009c6c:	3b01      	subs	r3, #1
 8009c6e:	189b      	adds	r3, r3, r2
 8009c70:	2201      	movs	r2, #1
 8009c72:	003d      	movs	r5, r7
 8009c74:	0007      	movs	r7, r0
 8009c76:	930e      	str	r3, [sp, #56]	; 0x38
 8009c78:	9b08      	ldr	r3, [sp, #32]
 8009c7a:	4013      	ands	r3, r2
 8009c7c:	930d      	str	r3, [sp, #52]	; 0x34
 8009c7e:	0031      	movs	r1, r6
 8009c80:	9805      	ldr	r0, [sp, #20]
 8009c82:	f7ff fa3a 	bl	80090fa <quorem>
 8009c86:	0029      	movs	r1, r5
 8009c88:	0004      	movs	r4, r0
 8009c8a:	900b      	str	r0, [sp, #44]	; 0x2c
 8009c8c:	9805      	ldr	r0, [sp, #20]
 8009c8e:	f000 fba1 	bl	800a3d4 <__mcmp>
 8009c92:	003a      	movs	r2, r7
 8009c94:	900c      	str	r0, [sp, #48]	; 0x30
 8009c96:	0031      	movs	r1, r6
 8009c98:	9804      	ldr	r0, [sp, #16]
 8009c9a:	f000 fbb7 	bl	800a40c <__mdiff>
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	68c3      	ldr	r3, [r0, #12]
 8009ca2:	3430      	adds	r4, #48	; 0x30
 8009ca4:	9008      	str	r0, [sp, #32]
 8009ca6:	920a      	str	r2, [sp, #40]	; 0x28
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d104      	bne.n	8009cb6 <_dtoa_r+0xa9e>
 8009cac:	0001      	movs	r1, r0
 8009cae:	9805      	ldr	r0, [sp, #20]
 8009cb0:	f000 fb90 	bl	800a3d4 <__mcmp>
 8009cb4:	900a      	str	r0, [sp, #40]	; 0x28
 8009cb6:	9908      	ldr	r1, [sp, #32]
 8009cb8:	9804      	ldr	r0, [sp, #16]
 8009cba:	f000 f949 	bl	8009f50 <_Bfree>
 8009cbe:	9b07      	ldr	r3, [sp, #28]
 8009cc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	9308      	str	r3, [sp, #32]
 8009cc6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	d109      	bne.n	8009ce4 <_dtoa_r+0xacc>
 8009cd0:	2c39      	cmp	r4, #57	; 0x39
 8009cd2:	d022      	beq.n	8009d1a <_dtoa_r+0xb02>
 8009cd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	dd01      	ble.n	8009cde <_dtoa_r+0xac6>
 8009cda:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009cdc:	3431      	adds	r4, #49	; 0x31
 8009cde:	9b07      	ldr	r3, [sp, #28]
 8009ce0:	701c      	strb	r4, [r3, #0]
 8009ce2:	e76e      	b.n	8009bc2 <_dtoa_r+0x9aa>
 8009ce4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	db04      	blt.n	8009cf4 <_dtoa_r+0xadc>
 8009cea:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009cec:	4313      	orrs	r3, r2
 8009cee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	d11e      	bne.n	8009d32 <_dtoa_r+0xb1a>
 8009cf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	ddf1      	ble.n	8009cde <_dtoa_r+0xac6>
 8009cfa:	9905      	ldr	r1, [sp, #20]
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	9804      	ldr	r0, [sp, #16]
 8009d00:	f000 fafa 	bl	800a2f8 <__lshift>
 8009d04:	0031      	movs	r1, r6
 8009d06:	9005      	str	r0, [sp, #20]
 8009d08:	f000 fb64 	bl	800a3d4 <__mcmp>
 8009d0c:	2800      	cmp	r0, #0
 8009d0e:	dc02      	bgt.n	8009d16 <_dtoa_r+0xafe>
 8009d10:	d1e5      	bne.n	8009cde <_dtoa_r+0xac6>
 8009d12:	07e3      	lsls	r3, r4, #31
 8009d14:	d5e3      	bpl.n	8009cde <_dtoa_r+0xac6>
 8009d16:	2c39      	cmp	r4, #57	; 0x39
 8009d18:	d1df      	bne.n	8009cda <_dtoa_r+0xac2>
 8009d1a:	2339      	movs	r3, #57	; 0x39
 8009d1c:	9a07      	ldr	r2, [sp, #28]
 8009d1e:	7013      	strb	r3, [r2, #0]
 8009d20:	9b08      	ldr	r3, [sp, #32]
 8009d22:	9308      	str	r3, [sp, #32]
 8009d24:	3b01      	subs	r3, #1
 8009d26:	781a      	ldrb	r2, [r3, #0]
 8009d28:	2a39      	cmp	r2, #57	; 0x39
 8009d2a:	d063      	beq.n	8009df4 <_dtoa_r+0xbdc>
 8009d2c:	3201      	adds	r2, #1
 8009d2e:	701a      	strb	r2, [r3, #0]
 8009d30:	e747      	b.n	8009bc2 <_dtoa_r+0x9aa>
 8009d32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	dd03      	ble.n	8009d40 <_dtoa_r+0xb28>
 8009d38:	2c39      	cmp	r4, #57	; 0x39
 8009d3a:	d0ee      	beq.n	8009d1a <_dtoa_r+0xb02>
 8009d3c:	3401      	adds	r4, #1
 8009d3e:	e7ce      	b.n	8009cde <_dtoa_r+0xac6>
 8009d40:	9b07      	ldr	r3, [sp, #28]
 8009d42:	9a07      	ldr	r2, [sp, #28]
 8009d44:	701c      	strb	r4, [r3, #0]
 8009d46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d03e      	beq.n	8009dca <_dtoa_r+0xbb2>
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	220a      	movs	r2, #10
 8009d50:	9905      	ldr	r1, [sp, #20]
 8009d52:	9804      	ldr	r0, [sp, #16]
 8009d54:	f000 f920 	bl	8009f98 <__multadd>
 8009d58:	2300      	movs	r3, #0
 8009d5a:	9005      	str	r0, [sp, #20]
 8009d5c:	220a      	movs	r2, #10
 8009d5e:	0029      	movs	r1, r5
 8009d60:	9804      	ldr	r0, [sp, #16]
 8009d62:	42bd      	cmp	r5, r7
 8009d64:	d106      	bne.n	8009d74 <_dtoa_r+0xb5c>
 8009d66:	f000 f917 	bl	8009f98 <__multadd>
 8009d6a:	0005      	movs	r5, r0
 8009d6c:	0007      	movs	r7, r0
 8009d6e:	9b08      	ldr	r3, [sp, #32]
 8009d70:	9307      	str	r3, [sp, #28]
 8009d72:	e784      	b.n	8009c7e <_dtoa_r+0xa66>
 8009d74:	f000 f910 	bl	8009f98 <__multadd>
 8009d78:	0039      	movs	r1, r7
 8009d7a:	0005      	movs	r5, r0
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	220a      	movs	r2, #10
 8009d80:	9804      	ldr	r0, [sp, #16]
 8009d82:	f000 f909 	bl	8009f98 <__multadd>
 8009d86:	0007      	movs	r7, r0
 8009d88:	e7f1      	b.n	8009d6e <_dtoa_r+0xb56>
 8009d8a:	9b07      	ldr	r3, [sp, #28]
 8009d8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d8e:	2500      	movs	r5, #0
 8009d90:	0031      	movs	r1, r6
 8009d92:	9805      	ldr	r0, [sp, #20]
 8009d94:	f7ff f9b1 	bl	80090fa <quorem>
 8009d98:	9b06      	ldr	r3, [sp, #24]
 8009d9a:	3030      	adds	r0, #48	; 0x30
 8009d9c:	5558      	strb	r0, [r3, r5]
 8009d9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009da0:	3501      	adds	r5, #1
 8009da2:	0004      	movs	r4, r0
 8009da4:	42ab      	cmp	r3, r5
 8009da6:	dd07      	ble.n	8009db8 <_dtoa_r+0xba0>
 8009da8:	2300      	movs	r3, #0
 8009daa:	220a      	movs	r2, #10
 8009dac:	9905      	ldr	r1, [sp, #20]
 8009dae:	9804      	ldr	r0, [sp, #16]
 8009db0:	f000 f8f2 	bl	8009f98 <__multadd>
 8009db4:	9005      	str	r0, [sp, #20]
 8009db6:	e7eb      	b.n	8009d90 <_dtoa_r+0xb78>
 8009db8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009dba:	2301      	movs	r3, #1
 8009dbc:	2a00      	cmp	r2, #0
 8009dbe:	dd00      	ble.n	8009dc2 <_dtoa_r+0xbaa>
 8009dc0:	0013      	movs	r3, r2
 8009dc2:	2500      	movs	r5, #0
 8009dc4:	9a06      	ldr	r2, [sp, #24]
 8009dc6:	18d3      	adds	r3, r2, r3
 8009dc8:	9308      	str	r3, [sp, #32]
 8009dca:	9905      	ldr	r1, [sp, #20]
 8009dcc:	2201      	movs	r2, #1
 8009dce:	9804      	ldr	r0, [sp, #16]
 8009dd0:	f000 fa92 	bl	800a2f8 <__lshift>
 8009dd4:	0031      	movs	r1, r6
 8009dd6:	9005      	str	r0, [sp, #20]
 8009dd8:	f000 fafc 	bl	800a3d4 <__mcmp>
 8009ddc:	2800      	cmp	r0, #0
 8009dde:	dc9f      	bgt.n	8009d20 <_dtoa_r+0xb08>
 8009de0:	d101      	bne.n	8009de6 <_dtoa_r+0xbce>
 8009de2:	07e4      	lsls	r4, r4, #31
 8009de4:	d49c      	bmi.n	8009d20 <_dtoa_r+0xb08>
 8009de6:	9b08      	ldr	r3, [sp, #32]
 8009de8:	9308      	str	r3, [sp, #32]
 8009dea:	3b01      	subs	r3, #1
 8009dec:	781a      	ldrb	r2, [r3, #0]
 8009dee:	2a30      	cmp	r2, #48	; 0x30
 8009df0:	d0fa      	beq.n	8009de8 <_dtoa_r+0xbd0>
 8009df2:	e6e6      	b.n	8009bc2 <_dtoa_r+0x9aa>
 8009df4:	9a06      	ldr	r2, [sp, #24]
 8009df6:	429a      	cmp	r2, r3
 8009df8:	d193      	bne.n	8009d22 <_dtoa_r+0xb0a>
 8009dfa:	9b03      	ldr	r3, [sp, #12]
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	9303      	str	r3, [sp, #12]
 8009e00:	2331      	movs	r3, #49	; 0x31
 8009e02:	7013      	strb	r3, [r2, #0]
 8009e04:	e6dd      	b.n	8009bc2 <_dtoa_r+0x9aa>
 8009e06:	4b09      	ldr	r3, [pc, #36]	; (8009e2c <_dtoa_r+0xc14>)
 8009e08:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009e0a:	9306      	str	r3, [sp, #24]
 8009e0c:	4b08      	ldr	r3, [pc, #32]	; (8009e30 <_dtoa_r+0xc18>)
 8009e0e:	2a00      	cmp	r2, #0
 8009e10:	d001      	beq.n	8009e16 <_dtoa_r+0xbfe>
 8009e12:	f7ff fa49 	bl	80092a8 <_dtoa_r+0x90>
 8009e16:	f7ff fa49 	bl	80092ac <_dtoa_r+0x94>
 8009e1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	dcb6      	bgt.n	8009d8e <_dtoa_r+0xb76>
 8009e20:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009e22:	2b02      	cmp	r3, #2
 8009e24:	dd00      	ble.n	8009e28 <_dtoa_r+0xc10>
 8009e26:	e6b6      	b.n	8009b96 <_dtoa_r+0x97e>
 8009e28:	e7b1      	b.n	8009d8e <_dtoa_r+0xb76>
 8009e2a:	46c0      	nop			; (mov r8, r8)
 8009e2c:	0800db64 	.word	0x0800db64
 8009e30:	0800db6c 	.word	0x0800db6c

08009e34 <_free_r>:
 8009e34:	b570      	push	{r4, r5, r6, lr}
 8009e36:	0005      	movs	r5, r0
 8009e38:	2900      	cmp	r1, #0
 8009e3a:	d010      	beq.n	8009e5e <_free_r+0x2a>
 8009e3c:	1f0c      	subs	r4, r1, #4
 8009e3e:	6823      	ldr	r3, [r4, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	da00      	bge.n	8009e46 <_free_r+0x12>
 8009e44:	18e4      	adds	r4, r4, r3
 8009e46:	0028      	movs	r0, r5
 8009e48:	f7fe fae4 	bl	8008414 <__malloc_lock>
 8009e4c:	4a1d      	ldr	r2, [pc, #116]	; (8009ec4 <_free_r+0x90>)
 8009e4e:	6813      	ldr	r3, [r2, #0]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d105      	bne.n	8009e60 <_free_r+0x2c>
 8009e54:	6063      	str	r3, [r4, #4]
 8009e56:	6014      	str	r4, [r2, #0]
 8009e58:	0028      	movs	r0, r5
 8009e5a:	f7fe fae3 	bl	8008424 <__malloc_unlock>
 8009e5e:	bd70      	pop	{r4, r5, r6, pc}
 8009e60:	42a3      	cmp	r3, r4
 8009e62:	d908      	bls.n	8009e76 <_free_r+0x42>
 8009e64:	6820      	ldr	r0, [r4, #0]
 8009e66:	1821      	adds	r1, r4, r0
 8009e68:	428b      	cmp	r3, r1
 8009e6a:	d1f3      	bne.n	8009e54 <_free_r+0x20>
 8009e6c:	6819      	ldr	r1, [r3, #0]
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	1809      	adds	r1, r1, r0
 8009e72:	6021      	str	r1, [r4, #0]
 8009e74:	e7ee      	b.n	8009e54 <_free_r+0x20>
 8009e76:	001a      	movs	r2, r3
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d001      	beq.n	8009e82 <_free_r+0x4e>
 8009e7e:	42a3      	cmp	r3, r4
 8009e80:	d9f9      	bls.n	8009e76 <_free_r+0x42>
 8009e82:	6811      	ldr	r1, [r2, #0]
 8009e84:	1850      	adds	r0, r2, r1
 8009e86:	42a0      	cmp	r0, r4
 8009e88:	d10b      	bne.n	8009ea2 <_free_r+0x6e>
 8009e8a:	6820      	ldr	r0, [r4, #0]
 8009e8c:	1809      	adds	r1, r1, r0
 8009e8e:	1850      	adds	r0, r2, r1
 8009e90:	6011      	str	r1, [r2, #0]
 8009e92:	4283      	cmp	r3, r0
 8009e94:	d1e0      	bne.n	8009e58 <_free_r+0x24>
 8009e96:	6818      	ldr	r0, [r3, #0]
 8009e98:	685b      	ldr	r3, [r3, #4]
 8009e9a:	1841      	adds	r1, r0, r1
 8009e9c:	6011      	str	r1, [r2, #0]
 8009e9e:	6053      	str	r3, [r2, #4]
 8009ea0:	e7da      	b.n	8009e58 <_free_r+0x24>
 8009ea2:	42a0      	cmp	r0, r4
 8009ea4:	d902      	bls.n	8009eac <_free_r+0x78>
 8009ea6:	230c      	movs	r3, #12
 8009ea8:	602b      	str	r3, [r5, #0]
 8009eaa:	e7d5      	b.n	8009e58 <_free_r+0x24>
 8009eac:	6820      	ldr	r0, [r4, #0]
 8009eae:	1821      	adds	r1, r4, r0
 8009eb0:	428b      	cmp	r3, r1
 8009eb2:	d103      	bne.n	8009ebc <_free_r+0x88>
 8009eb4:	6819      	ldr	r1, [r3, #0]
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	1809      	adds	r1, r1, r0
 8009eba:	6021      	str	r1, [r4, #0]
 8009ebc:	6063      	str	r3, [r4, #4]
 8009ebe:	6054      	str	r4, [r2, #4]
 8009ec0:	e7ca      	b.n	8009e58 <_free_r+0x24>
 8009ec2:	46c0      	nop			; (mov r8, r8)
 8009ec4:	200005f8 	.word	0x200005f8

08009ec8 <_Balloc>:
 8009ec8:	b570      	push	{r4, r5, r6, lr}
 8009eca:	69c5      	ldr	r5, [r0, #28]
 8009ecc:	0006      	movs	r6, r0
 8009ece:	000c      	movs	r4, r1
 8009ed0:	2d00      	cmp	r5, #0
 8009ed2:	d10e      	bne.n	8009ef2 <_Balloc+0x2a>
 8009ed4:	2010      	movs	r0, #16
 8009ed6:	f7fe f9ef 	bl	80082b8 <malloc>
 8009eda:	1e02      	subs	r2, r0, #0
 8009edc:	61f0      	str	r0, [r6, #28]
 8009ede:	d104      	bne.n	8009eea <_Balloc+0x22>
 8009ee0:	216b      	movs	r1, #107	; 0x6b
 8009ee2:	4b19      	ldr	r3, [pc, #100]	; (8009f48 <_Balloc+0x80>)
 8009ee4:	4819      	ldr	r0, [pc, #100]	; (8009f4c <_Balloc+0x84>)
 8009ee6:	f000 ff9f 	bl	800ae28 <__assert_func>
 8009eea:	6045      	str	r5, [r0, #4]
 8009eec:	6085      	str	r5, [r0, #8]
 8009eee:	6005      	str	r5, [r0, #0]
 8009ef0:	60c5      	str	r5, [r0, #12]
 8009ef2:	69f5      	ldr	r5, [r6, #28]
 8009ef4:	68eb      	ldr	r3, [r5, #12]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d013      	beq.n	8009f22 <_Balloc+0x5a>
 8009efa:	69f3      	ldr	r3, [r6, #28]
 8009efc:	00a2      	lsls	r2, r4, #2
 8009efe:	68db      	ldr	r3, [r3, #12]
 8009f00:	189b      	adds	r3, r3, r2
 8009f02:	6818      	ldr	r0, [r3, #0]
 8009f04:	2800      	cmp	r0, #0
 8009f06:	d118      	bne.n	8009f3a <_Balloc+0x72>
 8009f08:	2101      	movs	r1, #1
 8009f0a:	000d      	movs	r5, r1
 8009f0c:	40a5      	lsls	r5, r4
 8009f0e:	1d6a      	adds	r2, r5, #5
 8009f10:	0030      	movs	r0, r6
 8009f12:	0092      	lsls	r2, r2, #2
 8009f14:	f000 ffa6 	bl	800ae64 <_calloc_r>
 8009f18:	2800      	cmp	r0, #0
 8009f1a:	d00c      	beq.n	8009f36 <_Balloc+0x6e>
 8009f1c:	6044      	str	r4, [r0, #4]
 8009f1e:	6085      	str	r5, [r0, #8]
 8009f20:	e00d      	b.n	8009f3e <_Balloc+0x76>
 8009f22:	2221      	movs	r2, #33	; 0x21
 8009f24:	2104      	movs	r1, #4
 8009f26:	0030      	movs	r0, r6
 8009f28:	f000 ff9c 	bl	800ae64 <_calloc_r>
 8009f2c:	69f3      	ldr	r3, [r6, #28]
 8009f2e:	60e8      	str	r0, [r5, #12]
 8009f30:	68db      	ldr	r3, [r3, #12]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d1e1      	bne.n	8009efa <_Balloc+0x32>
 8009f36:	2000      	movs	r0, #0
 8009f38:	bd70      	pop	{r4, r5, r6, pc}
 8009f3a:	6802      	ldr	r2, [r0, #0]
 8009f3c:	601a      	str	r2, [r3, #0]
 8009f3e:	2300      	movs	r3, #0
 8009f40:	6103      	str	r3, [r0, #16]
 8009f42:	60c3      	str	r3, [r0, #12]
 8009f44:	e7f8      	b.n	8009f38 <_Balloc+0x70>
 8009f46:	46c0      	nop			; (mov r8, r8)
 8009f48:	0800db71 	.word	0x0800db71
 8009f4c:	0800dbf1 	.word	0x0800dbf1

08009f50 <_Bfree>:
 8009f50:	b570      	push	{r4, r5, r6, lr}
 8009f52:	69c6      	ldr	r6, [r0, #28]
 8009f54:	0005      	movs	r5, r0
 8009f56:	000c      	movs	r4, r1
 8009f58:	2e00      	cmp	r6, #0
 8009f5a:	d10e      	bne.n	8009f7a <_Bfree+0x2a>
 8009f5c:	2010      	movs	r0, #16
 8009f5e:	f7fe f9ab 	bl	80082b8 <malloc>
 8009f62:	1e02      	subs	r2, r0, #0
 8009f64:	61e8      	str	r0, [r5, #28]
 8009f66:	d104      	bne.n	8009f72 <_Bfree+0x22>
 8009f68:	218f      	movs	r1, #143	; 0x8f
 8009f6a:	4b09      	ldr	r3, [pc, #36]	; (8009f90 <_Bfree+0x40>)
 8009f6c:	4809      	ldr	r0, [pc, #36]	; (8009f94 <_Bfree+0x44>)
 8009f6e:	f000 ff5b 	bl	800ae28 <__assert_func>
 8009f72:	6046      	str	r6, [r0, #4]
 8009f74:	6086      	str	r6, [r0, #8]
 8009f76:	6006      	str	r6, [r0, #0]
 8009f78:	60c6      	str	r6, [r0, #12]
 8009f7a:	2c00      	cmp	r4, #0
 8009f7c:	d007      	beq.n	8009f8e <_Bfree+0x3e>
 8009f7e:	69eb      	ldr	r3, [r5, #28]
 8009f80:	6862      	ldr	r2, [r4, #4]
 8009f82:	68db      	ldr	r3, [r3, #12]
 8009f84:	0092      	lsls	r2, r2, #2
 8009f86:	189b      	adds	r3, r3, r2
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	6022      	str	r2, [r4, #0]
 8009f8c:	601c      	str	r4, [r3, #0]
 8009f8e:	bd70      	pop	{r4, r5, r6, pc}
 8009f90:	0800db71 	.word	0x0800db71
 8009f94:	0800dbf1 	.word	0x0800dbf1

08009f98 <__multadd>:
 8009f98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f9a:	000e      	movs	r6, r1
 8009f9c:	9001      	str	r0, [sp, #4]
 8009f9e:	000c      	movs	r4, r1
 8009fa0:	001d      	movs	r5, r3
 8009fa2:	2000      	movs	r0, #0
 8009fa4:	690f      	ldr	r7, [r1, #16]
 8009fa6:	3614      	adds	r6, #20
 8009fa8:	6833      	ldr	r3, [r6, #0]
 8009faa:	3001      	adds	r0, #1
 8009fac:	b299      	uxth	r1, r3
 8009fae:	4351      	muls	r1, r2
 8009fb0:	0c1b      	lsrs	r3, r3, #16
 8009fb2:	4353      	muls	r3, r2
 8009fb4:	1949      	adds	r1, r1, r5
 8009fb6:	0c0d      	lsrs	r5, r1, #16
 8009fb8:	195b      	adds	r3, r3, r5
 8009fba:	0c1d      	lsrs	r5, r3, #16
 8009fbc:	b289      	uxth	r1, r1
 8009fbe:	041b      	lsls	r3, r3, #16
 8009fc0:	185b      	adds	r3, r3, r1
 8009fc2:	c608      	stmia	r6!, {r3}
 8009fc4:	4287      	cmp	r7, r0
 8009fc6:	dcef      	bgt.n	8009fa8 <__multadd+0x10>
 8009fc8:	2d00      	cmp	r5, #0
 8009fca:	d022      	beq.n	800a012 <__multadd+0x7a>
 8009fcc:	68a3      	ldr	r3, [r4, #8]
 8009fce:	42bb      	cmp	r3, r7
 8009fd0:	dc19      	bgt.n	800a006 <__multadd+0x6e>
 8009fd2:	6861      	ldr	r1, [r4, #4]
 8009fd4:	9801      	ldr	r0, [sp, #4]
 8009fd6:	3101      	adds	r1, #1
 8009fd8:	f7ff ff76 	bl	8009ec8 <_Balloc>
 8009fdc:	1e06      	subs	r6, r0, #0
 8009fde:	d105      	bne.n	8009fec <__multadd+0x54>
 8009fe0:	0032      	movs	r2, r6
 8009fe2:	21ba      	movs	r1, #186	; 0xba
 8009fe4:	4b0c      	ldr	r3, [pc, #48]	; (800a018 <__multadd+0x80>)
 8009fe6:	480d      	ldr	r0, [pc, #52]	; (800a01c <__multadd+0x84>)
 8009fe8:	f000 ff1e 	bl	800ae28 <__assert_func>
 8009fec:	0021      	movs	r1, r4
 8009fee:	6922      	ldr	r2, [r4, #16]
 8009ff0:	310c      	adds	r1, #12
 8009ff2:	3202      	adds	r2, #2
 8009ff4:	0092      	lsls	r2, r2, #2
 8009ff6:	300c      	adds	r0, #12
 8009ff8:	f7ff f876 	bl	80090e8 <memcpy>
 8009ffc:	0021      	movs	r1, r4
 8009ffe:	9801      	ldr	r0, [sp, #4]
 800a000:	f7ff ffa6 	bl	8009f50 <_Bfree>
 800a004:	0034      	movs	r4, r6
 800a006:	1d3b      	adds	r3, r7, #4
 800a008:	009b      	lsls	r3, r3, #2
 800a00a:	18e3      	adds	r3, r4, r3
 800a00c:	605d      	str	r5, [r3, #4]
 800a00e:	1c7b      	adds	r3, r7, #1
 800a010:	6123      	str	r3, [r4, #16]
 800a012:	0020      	movs	r0, r4
 800a014:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a016:	46c0      	nop			; (mov r8, r8)
 800a018:	0800dbe0 	.word	0x0800dbe0
 800a01c:	0800dbf1 	.word	0x0800dbf1

0800a020 <__hi0bits>:
 800a020:	0003      	movs	r3, r0
 800a022:	0c02      	lsrs	r2, r0, #16
 800a024:	2000      	movs	r0, #0
 800a026:	4282      	cmp	r2, r0
 800a028:	d101      	bne.n	800a02e <__hi0bits+0xe>
 800a02a:	041b      	lsls	r3, r3, #16
 800a02c:	3010      	adds	r0, #16
 800a02e:	0e1a      	lsrs	r2, r3, #24
 800a030:	d101      	bne.n	800a036 <__hi0bits+0x16>
 800a032:	3008      	adds	r0, #8
 800a034:	021b      	lsls	r3, r3, #8
 800a036:	0f1a      	lsrs	r2, r3, #28
 800a038:	d101      	bne.n	800a03e <__hi0bits+0x1e>
 800a03a:	3004      	adds	r0, #4
 800a03c:	011b      	lsls	r3, r3, #4
 800a03e:	0f9a      	lsrs	r2, r3, #30
 800a040:	d101      	bne.n	800a046 <__hi0bits+0x26>
 800a042:	3002      	adds	r0, #2
 800a044:	009b      	lsls	r3, r3, #2
 800a046:	2b00      	cmp	r3, #0
 800a048:	db03      	blt.n	800a052 <__hi0bits+0x32>
 800a04a:	3001      	adds	r0, #1
 800a04c:	005b      	lsls	r3, r3, #1
 800a04e:	d400      	bmi.n	800a052 <__hi0bits+0x32>
 800a050:	2020      	movs	r0, #32
 800a052:	4770      	bx	lr

0800a054 <__lo0bits>:
 800a054:	6803      	ldr	r3, [r0, #0]
 800a056:	0001      	movs	r1, r0
 800a058:	2207      	movs	r2, #7
 800a05a:	0018      	movs	r0, r3
 800a05c:	4010      	ands	r0, r2
 800a05e:	4213      	tst	r3, r2
 800a060:	d00d      	beq.n	800a07e <__lo0bits+0x2a>
 800a062:	3a06      	subs	r2, #6
 800a064:	2000      	movs	r0, #0
 800a066:	4213      	tst	r3, r2
 800a068:	d105      	bne.n	800a076 <__lo0bits+0x22>
 800a06a:	3002      	adds	r0, #2
 800a06c:	4203      	tst	r3, r0
 800a06e:	d003      	beq.n	800a078 <__lo0bits+0x24>
 800a070:	40d3      	lsrs	r3, r2
 800a072:	0010      	movs	r0, r2
 800a074:	600b      	str	r3, [r1, #0]
 800a076:	4770      	bx	lr
 800a078:	089b      	lsrs	r3, r3, #2
 800a07a:	600b      	str	r3, [r1, #0]
 800a07c:	e7fb      	b.n	800a076 <__lo0bits+0x22>
 800a07e:	b29a      	uxth	r2, r3
 800a080:	2a00      	cmp	r2, #0
 800a082:	d101      	bne.n	800a088 <__lo0bits+0x34>
 800a084:	2010      	movs	r0, #16
 800a086:	0c1b      	lsrs	r3, r3, #16
 800a088:	b2da      	uxtb	r2, r3
 800a08a:	2a00      	cmp	r2, #0
 800a08c:	d101      	bne.n	800a092 <__lo0bits+0x3e>
 800a08e:	3008      	adds	r0, #8
 800a090:	0a1b      	lsrs	r3, r3, #8
 800a092:	071a      	lsls	r2, r3, #28
 800a094:	d101      	bne.n	800a09a <__lo0bits+0x46>
 800a096:	3004      	adds	r0, #4
 800a098:	091b      	lsrs	r3, r3, #4
 800a09a:	079a      	lsls	r2, r3, #30
 800a09c:	d101      	bne.n	800a0a2 <__lo0bits+0x4e>
 800a09e:	3002      	adds	r0, #2
 800a0a0:	089b      	lsrs	r3, r3, #2
 800a0a2:	07da      	lsls	r2, r3, #31
 800a0a4:	d4e9      	bmi.n	800a07a <__lo0bits+0x26>
 800a0a6:	3001      	adds	r0, #1
 800a0a8:	085b      	lsrs	r3, r3, #1
 800a0aa:	d1e6      	bne.n	800a07a <__lo0bits+0x26>
 800a0ac:	2020      	movs	r0, #32
 800a0ae:	e7e2      	b.n	800a076 <__lo0bits+0x22>

0800a0b0 <__i2b>:
 800a0b0:	b510      	push	{r4, lr}
 800a0b2:	000c      	movs	r4, r1
 800a0b4:	2101      	movs	r1, #1
 800a0b6:	f7ff ff07 	bl	8009ec8 <_Balloc>
 800a0ba:	2800      	cmp	r0, #0
 800a0bc:	d107      	bne.n	800a0ce <__i2b+0x1e>
 800a0be:	2146      	movs	r1, #70	; 0x46
 800a0c0:	4c05      	ldr	r4, [pc, #20]	; (800a0d8 <__i2b+0x28>)
 800a0c2:	0002      	movs	r2, r0
 800a0c4:	4b05      	ldr	r3, [pc, #20]	; (800a0dc <__i2b+0x2c>)
 800a0c6:	0020      	movs	r0, r4
 800a0c8:	31ff      	adds	r1, #255	; 0xff
 800a0ca:	f000 fead 	bl	800ae28 <__assert_func>
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	6144      	str	r4, [r0, #20]
 800a0d2:	6103      	str	r3, [r0, #16]
 800a0d4:	bd10      	pop	{r4, pc}
 800a0d6:	46c0      	nop			; (mov r8, r8)
 800a0d8:	0800dbf1 	.word	0x0800dbf1
 800a0dc:	0800dbe0 	.word	0x0800dbe0

0800a0e0 <__multiply>:
 800a0e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0e2:	0015      	movs	r5, r2
 800a0e4:	690a      	ldr	r2, [r1, #16]
 800a0e6:	692b      	ldr	r3, [r5, #16]
 800a0e8:	000c      	movs	r4, r1
 800a0ea:	b08b      	sub	sp, #44	; 0x2c
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	da01      	bge.n	800a0f4 <__multiply+0x14>
 800a0f0:	002c      	movs	r4, r5
 800a0f2:	000d      	movs	r5, r1
 800a0f4:	6927      	ldr	r7, [r4, #16]
 800a0f6:	692e      	ldr	r6, [r5, #16]
 800a0f8:	6861      	ldr	r1, [r4, #4]
 800a0fa:	19bb      	adds	r3, r7, r6
 800a0fc:	9303      	str	r3, [sp, #12]
 800a0fe:	68a3      	ldr	r3, [r4, #8]
 800a100:	19ba      	adds	r2, r7, r6
 800a102:	4293      	cmp	r3, r2
 800a104:	da00      	bge.n	800a108 <__multiply+0x28>
 800a106:	3101      	adds	r1, #1
 800a108:	f7ff fede 	bl	8009ec8 <_Balloc>
 800a10c:	9002      	str	r0, [sp, #8]
 800a10e:	2800      	cmp	r0, #0
 800a110:	d106      	bne.n	800a120 <__multiply+0x40>
 800a112:	21b1      	movs	r1, #177	; 0xb1
 800a114:	4b48      	ldr	r3, [pc, #288]	; (800a238 <__multiply+0x158>)
 800a116:	4849      	ldr	r0, [pc, #292]	; (800a23c <__multiply+0x15c>)
 800a118:	9a02      	ldr	r2, [sp, #8]
 800a11a:	0049      	lsls	r1, r1, #1
 800a11c:	f000 fe84 	bl	800ae28 <__assert_func>
 800a120:	9b02      	ldr	r3, [sp, #8]
 800a122:	2200      	movs	r2, #0
 800a124:	3314      	adds	r3, #20
 800a126:	469c      	mov	ip, r3
 800a128:	19bb      	adds	r3, r7, r6
 800a12a:	009b      	lsls	r3, r3, #2
 800a12c:	4463      	add	r3, ip
 800a12e:	9304      	str	r3, [sp, #16]
 800a130:	4663      	mov	r3, ip
 800a132:	9904      	ldr	r1, [sp, #16]
 800a134:	428b      	cmp	r3, r1
 800a136:	d32a      	bcc.n	800a18e <__multiply+0xae>
 800a138:	0023      	movs	r3, r4
 800a13a:	00bf      	lsls	r7, r7, #2
 800a13c:	3314      	adds	r3, #20
 800a13e:	3514      	adds	r5, #20
 800a140:	9308      	str	r3, [sp, #32]
 800a142:	00b6      	lsls	r6, r6, #2
 800a144:	19db      	adds	r3, r3, r7
 800a146:	9305      	str	r3, [sp, #20]
 800a148:	19ab      	adds	r3, r5, r6
 800a14a:	9309      	str	r3, [sp, #36]	; 0x24
 800a14c:	2304      	movs	r3, #4
 800a14e:	9306      	str	r3, [sp, #24]
 800a150:	0023      	movs	r3, r4
 800a152:	9a05      	ldr	r2, [sp, #20]
 800a154:	3315      	adds	r3, #21
 800a156:	9501      	str	r5, [sp, #4]
 800a158:	429a      	cmp	r2, r3
 800a15a:	d305      	bcc.n	800a168 <__multiply+0x88>
 800a15c:	1b13      	subs	r3, r2, r4
 800a15e:	3b15      	subs	r3, #21
 800a160:	089b      	lsrs	r3, r3, #2
 800a162:	3301      	adds	r3, #1
 800a164:	009b      	lsls	r3, r3, #2
 800a166:	9306      	str	r3, [sp, #24]
 800a168:	9b01      	ldr	r3, [sp, #4]
 800a16a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d310      	bcc.n	800a192 <__multiply+0xb2>
 800a170:	9b03      	ldr	r3, [sp, #12]
 800a172:	2b00      	cmp	r3, #0
 800a174:	dd05      	ble.n	800a182 <__multiply+0xa2>
 800a176:	9b04      	ldr	r3, [sp, #16]
 800a178:	3b04      	subs	r3, #4
 800a17a:	9304      	str	r3, [sp, #16]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d056      	beq.n	800a230 <__multiply+0x150>
 800a182:	9b02      	ldr	r3, [sp, #8]
 800a184:	9a03      	ldr	r2, [sp, #12]
 800a186:	0018      	movs	r0, r3
 800a188:	611a      	str	r2, [r3, #16]
 800a18a:	b00b      	add	sp, #44	; 0x2c
 800a18c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a18e:	c304      	stmia	r3!, {r2}
 800a190:	e7cf      	b.n	800a132 <__multiply+0x52>
 800a192:	9b01      	ldr	r3, [sp, #4]
 800a194:	6818      	ldr	r0, [r3, #0]
 800a196:	b280      	uxth	r0, r0
 800a198:	2800      	cmp	r0, #0
 800a19a:	d01e      	beq.n	800a1da <__multiply+0xfa>
 800a19c:	4667      	mov	r7, ip
 800a19e:	2500      	movs	r5, #0
 800a1a0:	9e08      	ldr	r6, [sp, #32]
 800a1a2:	ce02      	ldmia	r6!, {r1}
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	9307      	str	r3, [sp, #28]
 800a1a8:	b28b      	uxth	r3, r1
 800a1aa:	4343      	muls	r3, r0
 800a1ac:	001a      	movs	r2, r3
 800a1ae:	466b      	mov	r3, sp
 800a1b0:	8b9b      	ldrh	r3, [r3, #28]
 800a1b2:	18d3      	adds	r3, r2, r3
 800a1b4:	195b      	adds	r3, r3, r5
 800a1b6:	0c0d      	lsrs	r5, r1, #16
 800a1b8:	4345      	muls	r5, r0
 800a1ba:	9a07      	ldr	r2, [sp, #28]
 800a1bc:	0c11      	lsrs	r1, r2, #16
 800a1be:	1869      	adds	r1, r5, r1
 800a1c0:	0c1a      	lsrs	r2, r3, #16
 800a1c2:	188a      	adds	r2, r1, r2
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	0c15      	lsrs	r5, r2, #16
 800a1c8:	0412      	lsls	r2, r2, #16
 800a1ca:	431a      	orrs	r2, r3
 800a1cc:	9b05      	ldr	r3, [sp, #20]
 800a1ce:	c704      	stmia	r7!, {r2}
 800a1d0:	42b3      	cmp	r3, r6
 800a1d2:	d8e6      	bhi.n	800a1a2 <__multiply+0xc2>
 800a1d4:	4663      	mov	r3, ip
 800a1d6:	9a06      	ldr	r2, [sp, #24]
 800a1d8:	509d      	str	r5, [r3, r2]
 800a1da:	9b01      	ldr	r3, [sp, #4]
 800a1dc:	6818      	ldr	r0, [r3, #0]
 800a1de:	0c00      	lsrs	r0, r0, #16
 800a1e0:	d020      	beq.n	800a224 <__multiply+0x144>
 800a1e2:	4663      	mov	r3, ip
 800a1e4:	0025      	movs	r5, r4
 800a1e6:	4661      	mov	r1, ip
 800a1e8:	2700      	movs	r7, #0
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	3514      	adds	r5, #20
 800a1ee:	682a      	ldr	r2, [r5, #0]
 800a1f0:	680e      	ldr	r6, [r1, #0]
 800a1f2:	b292      	uxth	r2, r2
 800a1f4:	4342      	muls	r2, r0
 800a1f6:	0c36      	lsrs	r6, r6, #16
 800a1f8:	1992      	adds	r2, r2, r6
 800a1fa:	19d2      	adds	r2, r2, r7
 800a1fc:	0416      	lsls	r6, r2, #16
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	431e      	orrs	r6, r3
 800a202:	600e      	str	r6, [r1, #0]
 800a204:	cd40      	ldmia	r5!, {r6}
 800a206:	684b      	ldr	r3, [r1, #4]
 800a208:	0c36      	lsrs	r6, r6, #16
 800a20a:	4346      	muls	r6, r0
 800a20c:	b29b      	uxth	r3, r3
 800a20e:	0c12      	lsrs	r2, r2, #16
 800a210:	18f3      	adds	r3, r6, r3
 800a212:	189b      	adds	r3, r3, r2
 800a214:	9a05      	ldr	r2, [sp, #20]
 800a216:	0c1f      	lsrs	r7, r3, #16
 800a218:	3104      	adds	r1, #4
 800a21a:	42aa      	cmp	r2, r5
 800a21c:	d8e7      	bhi.n	800a1ee <__multiply+0x10e>
 800a21e:	4662      	mov	r2, ip
 800a220:	9906      	ldr	r1, [sp, #24]
 800a222:	5053      	str	r3, [r2, r1]
 800a224:	9b01      	ldr	r3, [sp, #4]
 800a226:	3304      	adds	r3, #4
 800a228:	9301      	str	r3, [sp, #4]
 800a22a:	2304      	movs	r3, #4
 800a22c:	449c      	add	ip, r3
 800a22e:	e79b      	b.n	800a168 <__multiply+0x88>
 800a230:	9b03      	ldr	r3, [sp, #12]
 800a232:	3b01      	subs	r3, #1
 800a234:	9303      	str	r3, [sp, #12]
 800a236:	e79b      	b.n	800a170 <__multiply+0x90>
 800a238:	0800dbe0 	.word	0x0800dbe0
 800a23c:	0800dbf1 	.word	0x0800dbf1

0800a240 <__pow5mult>:
 800a240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a242:	2303      	movs	r3, #3
 800a244:	0015      	movs	r5, r2
 800a246:	0007      	movs	r7, r0
 800a248:	000e      	movs	r6, r1
 800a24a:	401a      	ands	r2, r3
 800a24c:	421d      	tst	r5, r3
 800a24e:	d008      	beq.n	800a262 <__pow5mult+0x22>
 800a250:	4925      	ldr	r1, [pc, #148]	; (800a2e8 <__pow5mult+0xa8>)
 800a252:	3a01      	subs	r2, #1
 800a254:	0092      	lsls	r2, r2, #2
 800a256:	5852      	ldr	r2, [r2, r1]
 800a258:	2300      	movs	r3, #0
 800a25a:	0031      	movs	r1, r6
 800a25c:	f7ff fe9c 	bl	8009f98 <__multadd>
 800a260:	0006      	movs	r6, r0
 800a262:	10ad      	asrs	r5, r5, #2
 800a264:	d03d      	beq.n	800a2e2 <__pow5mult+0xa2>
 800a266:	69fc      	ldr	r4, [r7, #28]
 800a268:	2c00      	cmp	r4, #0
 800a26a:	d10f      	bne.n	800a28c <__pow5mult+0x4c>
 800a26c:	2010      	movs	r0, #16
 800a26e:	f7fe f823 	bl	80082b8 <malloc>
 800a272:	1e02      	subs	r2, r0, #0
 800a274:	61f8      	str	r0, [r7, #28]
 800a276:	d105      	bne.n	800a284 <__pow5mult+0x44>
 800a278:	21b4      	movs	r1, #180	; 0xb4
 800a27a:	4b1c      	ldr	r3, [pc, #112]	; (800a2ec <__pow5mult+0xac>)
 800a27c:	481c      	ldr	r0, [pc, #112]	; (800a2f0 <__pow5mult+0xb0>)
 800a27e:	31ff      	adds	r1, #255	; 0xff
 800a280:	f000 fdd2 	bl	800ae28 <__assert_func>
 800a284:	6044      	str	r4, [r0, #4]
 800a286:	6084      	str	r4, [r0, #8]
 800a288:	6004      	str	r4, [r0, #0]
 800a28a:	60c4      	str	r4, [r0, #12]
 800a28c:	69fb      	ldr	r3, [r7, #28]
 800a28e:	689c      	ldr	r4, [r3, #8]
 800a290:	9301      	str	r3, [sp, #4]
 800a292:	2c00      	cmp	r4, #0
 800a294:	d108      	bne.n	800a2a8 <__pow5mult+0x68>
 800a296:	0038      	movs	r0, r7
 800a298:	4916      	ldr	r1, [pc, #88]	; (800a2f4 <__pow5mult+0xb4>)
 800a29a:	f7ff ff09 	bl	800a0b0 <__i2b>
 800a29e:	9b01      	ldr	r3, [sp, #4]
 800a2a0:	0004      	movs	r4, r0
 800a2a2:	6098      	str	r0, [r3, #8]
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	6003      	str	r3, [r0, #0]
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	421d      	tst	r5, r3
 800a2ac:	d00a      	beq.n	800a2c4 <__pow5mult+0x84>
 800a2ae:	0031      	movs	r1, r6
 800a2b0:	0022      	movs	r2, r4
 800a2b2:	0038      	movs	r0, r7
 800a2b4:	f7ff ff14 	bl	800a0e0 <__multiply>
 800a2b8:	0031      	movs	r1, r6
 800a2ba:	9001      	str	r0, [sp, #4]
 800a2bc:	0038      	movs	r0, r7
 800a2be:	f7ff fe47 	bl	8009f50 <_Bfree>
 800a2c2:	9e01      	ldr	r6, [sp, #4]
 800a2c4:	106d      	asrs	r5, r5, #1
 800a2c6:	d00c      	beq.n	800a2e2 <__pow5mult+0xa2>
 800a2c8:	6820      	ldr	r0, [r4, #0]
 800a2ca:	2800      	cmp	r0, #0
 800a2cc:	d107      	bne.n	800a2de <__pow5mult+0x9e>
 800a2ce:	0022      	movs	r2, r4
 800a2d0:	0021      	movs	r1, r4
 800a2d2:	0038      	movs	r0, r7
 800a2d4:	f7ff ff04 	bl	800a0e0 <__multiply>
 800a2d8:	2300      	movs	r3, #0
 800a2da:	6020      	str	r0, [r4, #0]
 800a2dc:	6003      	str	r3, [r0, #0]
 800a2de:	0004      	movs	r4, r0
 800a2e0:	e7e2      	b.n	800a2a8 <__pow5mult+0x68>
 800a2e2:	0030      	movs	r0, r6
 800a2e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a2e6:	46c0      	nop			; (mov r8, r8)
 800a2e8:	0800dd40 	.word	0x0800dd40
 800a2ec:	0800db71 	.word	0x0800db71
 800a2f0:	0800dbf1 	.word	0x0800dbf1
 800a2f4:	00000271 	.word	0x00000271

0800a2f8 <__lshift>:
 800a2f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2fa:	000c      	movs	r4, r1
 800a2fc:	0017      	movs	r7, r2
 800a2fe:	6923      	ldr	r3, [r4, #16]
 800a300:	1155      	asrs	r5, r2, #5
 800a302:	b087      	sub	sp, #28
 800a304:	18eb      	adds	r3, r5, r3
 800a306:	9302      	str	r3, [sp, #8]
 800a308:	3301      	adds	r3, #1
 800a30a:	9301      	str	r3, [sp, #4]
 800a30c:	6849      	ldr	r1, [r1, #4]
 800a30e:	68a3      	ldr	r3, [r4, #8]
 800a310:	9004      	str	r0, [sp, #16]
 800a312:	9a01      	ldr	r2, [sp, #4]
 800a314:	4293      	cmp	r3, r2
 800a316:	db10      	blt.n	800a33a <__lshift+0x42>
 800a318:	9804      	ldr	r0, [sp, #16]
 800a31a:	f7ff fdd5 	bl	8009ec8 <_Balloc>
 800a31e:	2300      	movs	r3, #0
 800a320:	0002      	movs	r2, r0
 800a322:	0006      	movs	r6, r0
 800a324:	0019      	movs	r1, r3
 800a326:	3214      	adds	r2, #20
 800a328:	4298      	cmp	r0, r3
 800a32a:	d10c      	bne.n	800a346 <__lshift+0x4e>
 800a32c:	31df      	adds	r1, #223	; 0xdf
 800a32e:	0032      	movs	r2, r6
 800a330:	4b26      	ldr	r3, [pc, #152]	; (800a3cc <__lshift+0xd4>)
 800a332:	4827      	ldr	r0, [pc, #156]	; (800a3d0 <__lshift+0xd8>)
 800a334:	31ff      	adds	r1, #255	; 0xff
 800a336:	f000 fd77 	bl	800ae28 <__assert_func>
 800a33a:	3101      	adds	r1, #1
 800a33c:	005b      	lsls	r3, r3, #1
 800a33e:	e7e8      	b.n	800a312 <__lshift+0x1a>
 800a340:	0098      	lsls	r0, r3, #2
 800a342:	5011      	str	r1, [r2, r0]
 800a344:	3301      	adds	r3, #1
 800a346:	42ab      	cmp	r3, r5
 800a348:	dbfa      	blt.n	800a340 <__lshift+0x48>
 800a34a:	43eb      	mvns	r3, r5
 800a34c:	17db      	asrs	r3, r3, #31
 800a34e:	401d      	ands	r5, r3
 800a350:	211f      	movs	r1, #31
 800a352:	0023      	movs	r3, r4
 800a354:	0038      	movs	r0, r7
 800a356:	00ad      	lsls	r5, r5, #2
 800a358:	1955      	adds	r5, r2, r5
 800a35a:	6922      	ldr	r2, [r4, #16]
 800a35c:	3314      	adds	r3, #20
 800a35e:	0092      	lsls	r2, r2, #2
 800a360:	4008      	ands	r0, r1
 800a362:	4684      	mov	ip, r0
 800a364:	189a      	adds	r2, r3, r2
 800a366:	420f      	tst	r7, r1
 800a368:	d02a      	beq.n	800a3c0 <__lshift+0xc8>
 800a36a:	3101      	adds	r1, #1
 800a36c:	1a09      	subs	r1, r1, r0
 800a36e:	9105      	str	r1, [sp, #20]
 800a370:	2100      	movs	r1, #0
 800a372:	9503      	str	r5, [sp, #12]
 800a374:	4667      	mov	r7, ip
 800a376:	6818      	ldr	r0, [r3, #0]
 800a378:	40b8      	lsls	r0, r7
 800a37a:	4308      	orrs	r0, r1
 800a37c:	9903      	ldr	r1, [sp, #12]
 800a37e:	c101      	stmia	r1!, {r0}
 800a380:	9103      	str	r1, [sp, #12]
 800a382:	9805      	ldr	r0, [sp, #20]
 800a384:	cb02      	ldmia	r3!, {r1}
 800a386:	40c1      	lsrs	r1, r0
 800a388:	429a      	cmp	r2, r3
 800a38a:	d8f3      	bhi.n	800a374 <__lshift+0x7c>
 800a38c:	0020      	movs	r0, r4
 800a38e:	3015      	adds	r0, #21
 800a390:	2304      	movs	r3, #4
 800a392:	4282      	cmp	r2, r0
 800a394:	d304      	bcc.n	800a3a0 <__lshift+0xa8>
 800a396:	1b13      	subs	r3, r2, r4
 800a398:	3b15      	subs	r3, #21
 800a39a:	089b      	lsrs	r3, r3, #2
 800a39c:	3301      	adds	r3, #1
 800a39e:	009b      	lsls	r3, r3, #2
 800a3a0:	50e9      	str	r1, [r5, r3]
 800a3a2:	2900      	cmp	r1, #0
 800a3a4:	d002      	beq.n	800a3ac <__lshift+0xb4>
 800a3a6:	9b02      	ldr	r3, [sp, #8]
 800a3a8:	3302      	adds	r3, #2
 800a3aa:	9301      	str	r3, [sp, #4]
 800a3ac:	9b01      	ldr	r3, [sp, #4]
 800a3ae:	9804      	ldr	r0, [sp, #16]
 800a3b0:	3b01      	subs	r3, #1
 800a3b2:	0021      	movs	r1, r4
 800a3b4:	6133      	str	r3, [r6, #16]
 800a3b6:	f7ff fdcb 	bl	8009f50 <_Bfree>
 800a3ba:	0030      	movs	r0, r6
 800a3bc:	b007      	add	sp, #28
 800a3be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3c0:	cb02      	ldmia	r3!, {r1}
 800a3c2:	c502      	stmia	r5!, {r1}
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d8fb      	bhi.n	800a3c0 <__lshift+0xc8>
 800a3c8:	e7f0      	b.n	800a3ac <__lshift+0xb4>
 800a3ca:	46c0      	nop			; (mov r8, r8)
 800a3cc:	0800dbe0 	.word	0x0800dbe0
 800a3d0:	0800dbf1 	.word	0x0800dbf1

0800a3d4 <__mcmp>:
 800a3d4:	b530      	push	{r4, r5, lr}
 800a3d6:	690b      	ldr	r3, [r1, #16]
 800a3d8:	6904      	ldr	r4, [r0, #16]
 800a3da:	0002      	movs	r2, r0
 800a3dc:	1ae0      	subs	r0, r4, r3
 800a3de:	429c      	cmp	r4, r3
 800a3e0:	d10e      	bne.n	800a400 <__mcmp+0x2c>
 800a3e2:	3214      	adds	r2, #20
 800a3e4:	009b      	lsls	r3, r3, #2
 800a3e6:	3114      	adds	r1, #20
 800a3e8:	0014      	movs	r4, r2
 800a3ea:	18c9      	adds	r1, r1, r3
 800a3ec:	18d2      	adds	r2, r2, r3
 800a3ee:	3a04      	subs	r2, #4
 800a3f0:	3904      	subs	r1, #4
 800a3f2:	6815      	ldr	r5, [r2, #0]
 800a3f4:	680b      	ldr	r3, [r1, #0]
 800a3f6:	429d      	cmp	r5, r3
 800a3f8:	d003      	beq.n	800a402 <__mcmp+0x2e>
 800a3fa:	2001      	movs	r0, #1
 800a3fc:	429d      	cmp	r5, r3
 800a3fe:	d303      	bcc.n	800a408 <__mcmp+0x34>
 800a400:	bd30      	pop	{r4, r5, pc}
 800a402:	4294      	cmp	r4, r2
 800a404:	d3f3      	bcc.n	800a3ee <__mcmp+0x1a>
 800a406:	e7fb      	b.n	800a400 <__mcmp+0x2c>
 800a408:	4240      	negs	r0, r0
 800a40a:	e7f9      	b.n	800a400 <__mcmp+0x2c>

0800a40c <__mdiff>:
 800a40c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a40e:	000e      	movs	r6, r1
 800a410:	0007      	movs	r7, r0
 800a412:	0011      	movs	r1, r2
 800a414:	0030      	movs	r0, r6
 800a416:	b087      	sub	sp, #28
 800a418:	0014      	movs	r4, r2
 800a41a:	f7ff ffdb 	bl	800a3d4 <__mcmp>
 800a41e:	1e05      	subs	r5, r0, #0
 800a420:	d110      	bne.n	800a444 <__mdiff+0x38>
 800a422:	0001      	movs	r1, r0
 800a424:	0038      	movs	r0, r7
 800a426:	f7ff fd4f 	bl	8009ec8 <_Balloc>
 800a42a:	1e02      	subs	r2, r0, #0
 800a42c:	d104      	bne.n	800a438 <__mdiff+0x2c>
 800a42e:	4b3f      	ldr	r3, [pc, #252]	; (800a52c <__mdiff+0x120>)
 800a430:	483f      	ldr	r0, [pc, #252]	; (800a530 <__mdiff+0x124>)
 800a432:	4940      	ldr	r1, [pc, #256]	; (800a534 <__mdiff+0x128>)
 800a434:	f000 fcf8 	bl	800ae28 <__assert_func>
 800a438:	2301      	movs	r3, #1
 800a43a:	6145      	str	r5, [r0, #20]
 800a43c:	6103      	str	r3, [r0, #16]
 800a43e:	0010      	movs	r0, r2
 800a440:	b007      	add	sp, #28
 800a442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a444:	2301      	movs	r3, #1
 800a446:	9301      	str	r3, [sp, #4]
 800a448:	2800      	cmp	r0, #0
 800a44a:	db04      	blt.n	800a456 <__mdiff+0x4a>
 800a44c:	0023      	movs	r3, r4
 800a44e:	0034      	movs	r4, r6
 800a450:	001e      	movs	r6, r3
 800a452:	2300      	movs	r3, #0
 800a454:	9301      	str	r3, [sp, #4]
 800a456:	0038      	movs	r0, r7
 800a458:	6861      	ldr	r1, [r4, #4]
 800a45a:	f7ff fd35 	bl	8009ec8 <_Balloc>
 800a45e:	1e02      	subs	r2, r0, #0
 800a460:	d103      	bne.n	800a46a <__mdiff+0x5e>
 800a462:	4b32      	ldr	r3, [pc, #200]	; (800a52c <__mdiff+0x120>)
 800a464:	4832      	ldr	r0, [pc, #200]	; (800a530 <__mdiff+0x124>)
 800a466:	4934      	ldr	r1, [pc, #208]	; (800a538 <__mdiff+0x12c>)
 800a468:	e7e4      	b.n	800a434 <__mdiff+0x28>
 800a46a:	9b01      	ldr	r3, [sp, #4]
 800a46c:	2700      	movs	r7, #0
 800a46e:	60c3      	str	r3, [r0, #12]
 800a470:	6920      	ldr	r0, [r4, #16]
 800a472:	3414      	adds	r4, #20
 800a474:	0083      	lsls	r3, r0, #2
 800a476:	18e3      	adds	r3, r4, r3
 800a478:	0021      	movs	r1, r4
 800a47a:	9401      	str	r4, [sp, #4]
 800a47c:	0034      	movs	r4, r6
 800a47e:	9302      	str	r3, [sp, #8]
 800a480:	6933      	ldr	r3, [r6, #16]
 800a482:	3414      	adds	r4, #20
 800a484:	009b      	lsls	r3, r3, #2
 800a486:	18e3      	adds	r3, r4, r3
 800a488:	9303      	str	r3, [sp, #12]
 800a48a:	0013      	movs	r3, r2
 800a48c:	3314      	adds	r3, #20
 800a48e:	469c      	mov	ip, r3
 800a490:	9305      	str	r3, [sp, #20]
 800a492:	9104      	str	r1, [sp, #16]
 800a494:	9b04      	ldr	r3, [sp, #16]
 800a496:	cc02      	ldmia	r4!, {r1}
 800a498:	cb20      	ldmia	r3!, {r5}
 800a49a:	9304      	str	r3, [sp, #16]
 800a49c:	b2ab      	uxth	r3, r5
 800a49e:	19df      	adds	r7, r3, r7
 800a4a0:	b28b      	uxth	r3, r1
 800a4a2:	1afb      	subs	r3, r7, r3
 800a4a4:	0c09      	lsrs	r1, r1, #16
 800a4a6:	0c2d      	lsrs	r5, r5, #16
 800a4a8:	1a6d      	subs	r5, r5, r1
 800a4aa:	1419      	asrs	r1, r3, #16
 800a4ac:	1869      	adds	r1, r5, r1
 800a4ae:	b29b      	uxth	r3, r3
 800a4b0:	140f      	asrs	r7, r1, #16
 800a4b2:	0409      	lsls	r1, r1, #16
 800a4b4:	4319      	orrs	r1, r3
 800a4b6:	4663      	mov	r3, ip
 800a4b8:	c302      	stmia	r3!, {r1}
 800a4ba:	469c      	mov	ip, r3
 800a4bc:	9b03      	ldr	r3, [sp, #12]
 800a4be:	42a3      	cmp	r3, r4
 800a4c0:	d8e8      	bhi.n	800a494 <__mdiff+0x88>
 800a4c2:	0031      	movs	r1, r6
 800a4c4:	9c03      	ldr	r4, [sp, #12]
 800a4c6:	3115      	adds	r1, #21
 800a4c8:	2304      	movs	r3, #4
 800a4ca:	428c      	cmp	r4, r1
 800a4cc:	d304      	bcc.n	800a4d8 <__mdiff+0xcc>
 800a4ce:	1ba3      	subs	r3, r4, r6
 800a4d0:	3b15      	subs	r3, #21
 800a4d2:	089b      	lsrs	r3, r3, #2
 800a4d4:	3301      	adds	r3, #1
 800a4d6:	009b      	lsls	r3, r3, #2
 800a4d8:	9901      	ldr	r1, [sp, #4]
 800a4da:	18cd      	adds	r5, r1, r3
 800a4dc:	9905      	ldr	r1, [sp, #20]
 800a4de:	002e      	movs	r6, r5
 800a4e0:	18cb      	adds	r3, r1, r3
 800a4e2:	469c      	mov	ip, r3
 800a4e4:	9902      	ldr	r1, [sp, #8]
 800a4e6:	428e      	cmp	r6, r1
 800a4e8:	d310      	bcc.n	800a50c <__mdiff+0x100>
 800a4ea:	9e02      	ldr	r6, [sp, #8]
 800a4ec:	1ee9      	subs	r1, r5, #3
 800a4ee:	2400      	movs	r4, #0
 800a4f0:	428e      	cmp	r6, r1
 800a4f2:	d304      	bcc.n	800a4fe <__mdiff+0xf2>
 800a4f4:	0031      	movs	r1, r6
 800a4f6:	3103      	adds	r1, #3
 800a4f8:	1b49      	subs	r1, r1, r5
 800a4fa:	0889      	lsrs	r1, r1, #2
 800a4fc:	008c      	lsls	r4, r1, #2
 800a4fe:	191b      	adds	r3, r3, r4
 800a500:	3b04      	subs	r3, #4
 800a502:	6819      	ldr	r1, [r3, #0]
 800a504:	2900      	cmp	r1, #0
 800a506:	d00f      	beq.n	800a528 <__mdiff+0x11c>
 800a508:	6110      	str	r0, [r2, #16]
 800a50a:	e798      	b.n	800a43e <__mdiff+0x32>
 800a50c:	ce02      	ldmia	r6!, {r1}
 800a50e:	b28c      	uxth	r4, r1
 800a510:	19e4      	adds	r4, r4, r7
 800a512:	0c0f      	lsrs	r7, r1, #16
 800a514:	1421      	asrs	r1, r4, #16
 800a516:	1879      	adds	r1, r7, r1
 800a518:	b2a4      	uxth	r4, r4
 800a51a:	140f      	asrs	r7, r1, #16
 800a51c:	0409      	lsls	r1, r1, #16
 800a51e:	4321      	orrs	r1, r4
 800a520:	4664      	mov	r4, ip
 800a522:	c402      	stmia	r4!, {r1}
 800a524:	46a4      	mov	ip, r4
 800a526:	e7dd      	b.n	800a4e4 <__mdiff+0xd8>
 800a528:	3801      	subs	r0, #1
 800a52a:	e7e9      	b.n	800a500 <__mdiff+0xf4>
 800a52c:	0800dbe0 	.word	0x0800dbe0
 800a530:	0800dbf1 	.word	0x0800dbf1
 800a534:	00000237 	.word	0x00000237
 800a538:	00000245 	.word	0x00000245

0800a53c <__d2b>:
 800a53c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a53e:	2101      	movs	r1, #1
 800a540:	0014      	movs	r4, r2
 800a542:	001d      	movs	r5, r3
 800a544:	9f08      	ldr	r7, [sp, #32]
 800a546:	f7ff fcbf 	bl	8009ec8 <_Balloc>
 800a54a:	1e06      	subs	r6, r0, #0
 800a54c:	d105      	bne.n	800a55a <__d2b+0x1e>
 800a54e:	0032      	movs	r2, r6
 800a550:	4b24      	ldr	r3, [pc, #144]	; (800a5e4 <__d2b+0xa8>)
 800a552:	4825      	ldr	r0, [pc, #148]	; (800a5e8 <__d2b+0xac>)
 800a554:	4925      	ldr	r1, [pc, #148]	; (800a5ec <__d2b+0xb0>)
 800a556:	f000 fc67 	bl	800ae28 <__assert_func>
 800a55a:	032b      	lsls	r3, r5, #12
 800a55c:	006d      	lsls	r5, r5, #1
 800a55e:	0b1b      	lsrs	r3, r3, #12
 800a560:	0d6d      	lsrs	r5, r5, #21
 800a562:	d125      	bne.n	800a5b0 <__d2b+0x74>
 800a564:	9301      	str	r3, [sp, #4]
 800a566:	2c00      	cmp	r4, #0
 800a568:	d028      	beq.n	800a5bc <__d2b+0x80>
 800a56a:	4668      	mov	r0, sp
 800a56c:	9400      	str	r4, [sp, #0]
 800a56e:	f7ff fd71 	bl	800a054 <__lo0bits>
 800a572:	9b01      	ldr	r3, [sp, #4]
 800a574:	9900      	ldr	r1, [sp, #0]
 800a576:	2800      	cmp	r0, #0
 800a578:	d01e      	beq.n	800a5b8 <__d2b+0x7c>
 800a57a:	2220      	movs	r2, #32
 800a57c:	001c      	movs	r4, r3
 800a57e:	1a12      	subs	r2, r2, r0
 800a580:	4094      	lsls	r4, r2
 800a582:	0022      	movs	r2, r4
 800a584:	40c3      	lsrs	r3, r0
 800a586:	430a      	orrs	r2, r1
 800a588:	6172      	str	r2, [r6, #20]
 800a58a:	9301      	str	r3, [sp, #4]
 800a58c:	9c01      	ldr	r4, [sp, #4]
 800a58e:	61b4      	str	r4, [r6, #24]
 800a590:	1e63      	subs	r3, r4, #1
 800a592:	419c      	sbcs	r4, r3
 800a594:	3401      	adds	r4, #1
 800a596:	6134      	str	r4, [r6, #16]
 800a598:	2d00      	cmp	r5, #0
 800a59a:	d017      	beq.n	800a5cc <__d2b+0x90>
 800a59c:	2435      	movs	r4, #53	; 0x35
 800a59e:	4b14      	ldr	r3, [pc, #80]	; (800a5f0 <__d2b+0xb4>)
 800a5a0:	18ed      	adds	r5, r5, r3
 800a5a2:	182d      	adds	r5, r5, r0
 800a5a4:	603d      	str	r5, [r7, #0]
 800a5a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5a8:	1a24      	subs	r4, r4, r0
 800a5aa:	601c      	str	r4, [r3, #0]
 800a5ac:	0030      	movs	r0, r6
 800a5ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a5b0:	2280      	movs	r2, #128	; 0x80
 800a5b2:	0352      	lsls	r2, r2, #13
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	e7d5      	b.n	800a564 <__d2b+0x28>
 800a5b8:	6171      	str	r1, [r6, #20]
 800a5ba:	e7e7      	b.n	800a58c <__d2b+0x50>
 800a5bc:	a801      	add	r0, sp, #4
 800a5be:	f7ff fd49 	bl	800a054 <__lo0bits>
 800a5c2:	9b01      	ldr	r3, [sp, #4]
 800a5c4:	2401      	movs	r4, #1
 800a5c6:	6173      	str	r3, [r6, #20]
 800a5c8:	3020      	adds	r0, #32
 800a5ca:	e7e4      	b.n	800a596 <__d2b+0x5a>
 800a5cc:	4b09      	ldr	r3, [pc, #36]	; (800a5f4 <__d2b+0xb8>)
 800a5ce:	18c0      	adds	r0, r0, r3
 800a5d0:	4b09      	ldr	r3, [pc, #36]	; (800a5f8 <__d2b+0xbc>)
 800a5d2:	6038      	str	r0, [r7, #0]
 800a5d4:	18e3      	adds	r3, r4, r3
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	18f3      	adds	r3, r6, r3
 800a5da:	6958      	ldr	r0, [r3, #20]
 800a5dc:	f7ff fd20 	bl	800a020 <__hi0bits>
 800a5e0:	0164      	lsls	r4, r4, #5
 800a5e2:	e7e0      	b.n	800a5a6 <__d2b+0x6a>
 800a5e4:	0800dbe0 	.word	0x0800dbe0
 800a5e8:	0800dbf1 	.word	0x0800dbf1
 800a5ec:	0000030f 	.word	0x0000030f
 800a5f0:	fffffbcd 	.word	0xfffffbcd
 800a5f4:	fffffbce 	.word	0xfffffbce
 800a5f8:	3fffffff 	.word	0x3fffffff

0800a5fc <__ssputs_r>:
 800a5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5fe:	b085      	sub	sp, #20
 800a600:	9301      	str	r3, [sp, #4]
 800a602:	9203      	str	r2, [sp, #12]
 800a604:	688e      	ldr	r6, [r1, #8]
 800a606:	9a01      	ldr	r2, [sp, #4]
 800a608:	0007      	movs	r7, r0
 800a60a:	000c      	movs	r4, r1
 800a60c:	680b      	ldr	r3, [r1, #0]
 800a60e:	4296      	cmp	r6, r2
 800a610:	d831      	bhi.n	800a676 <__ssputs_r+0x7a>
 800a612:	898a      	ldrh	r2, [r1, #12]
 800a614:	2190      	movs	r1, #144	; 0x90
 800a616:	00c9      	lsls	r1, r1, #3
 800a618:	420a      	tst	r2, r1
 800a61a:	d029      	beq.n	800a670 <__ssputs_r+0x74>
 800a61c:	2003      	movs	r0, #3
 800a61e:	6921      	ldr	r1, [r4, #16]
 800a620:	1a5b      	subs	r3, r3, r1
 800a622:	9302      	str	r3, [sp, #8]
 800a624:	6963      	ldr	r3, [r4, #20]
 800a626:	4343      	muls	r3, r0
 800a628:	0fdd      	lsrs	r5, r3, #31
 800a62a:	18ed      	adds	r5, r5, r3
 800a62c:	9b01      	ldr	r3, [sp, #4]
 800a62e:	9802      	ldr	r0, [sp, #8]
 800a630:	3301      	adds	r3, #1
 800a632:	181b      	adds	r3, r3, r0
 800a634:	106d      	asrs	r5, r5, #1
 800a636:	42ab      	cmp	r3, r5
 800a638:	d900      	bls.n	800a63c <__ssputs_r+0x40>
 800a63a:	001d      	movs	r5, r3
 800a63c:	0552      	lsls	r2, r2, #21
 800a63e:	d529      	bpl.n	800a694 <__ssputs_r+0x98>
 800a640:	0029      	movs	r1, r5
 800a642:	0038      	movs	r0, r7
 800a644:	f7fd fe64 	bl	8008310 <_malloc_r>
 800a648:	1e06      	subs	r6, r0, #0
 800a64a:	d02d      	beq.n	800a6a8 <__ssputs_r+0xac>
 800a64c:	9a02      	ldr	r2, [sp, #8]
 800a64e:	6921      	ldr	r1, [r4, #16]
 800a650:	f7fe fd4a 	bl	80090e8 <memcpy>
 800a654:	89a2      	ldrh	r2, [r4, #12]
 800a656:	4b19      	ldr	r3, [pc, #100]	; (800a6bc <__ssputs_r+0xc0>)
 800a658:	401a      	ands	r2, r3
 800a65a:	2380      	movs	r3, #128	; 0x80
 800a65c:	4313      	orrs	r3, r2
 800a65e:	81a3      	strh	r3, [r4, #12]
 800a660:	9b02      	ldr	r3, [sp, #8]
 800a662:	6126      	str	r6, [r4, #16]
 800a664:	18f6      	adds	r6, r6, r3
 800a666:	6026      	str	r6, [r4, #0]
 800a668:	6165      	str	r5, [r4, #20]
 800a66a:	9e01      	ldr	r6, [sp, #4]
 800a66c:	1aed      	subs	r5, r5, r3
 800a66e:	60a5      	str	r5, [r4, #8]
 800a670:	9b01      	ldr	r3, [sp, #4]
 800a672:	429e      	cmp	r6, r3
 800a674:	d900      	bls.n	800a678 <__ssputs_r+0x7c>
 800a676:	9e01      	ldr	r6, [sp, #4]
 800a678:	0032      	movs	r2, r6
 800a67a:	9903      	ldr	r1, [sp, #12]
 800a67c:	6820      	ldr	r0, [r4, #0]
 800a67e:	f000 fbbf 	bl	800ae00 <memmove>
 800a682:	2000      	movs	r0, #0
 800a684:	68a3      	ldr	r3, [r4, #8]
 800a686:	1b9b      	subs	r3, r3, r6
 800a688:	60a3      	str	r3, [r4, #8]
 800a68a:	6823      	ldr	r3, [r4, #0]
 800a68c:	199b      	adds	r3, r3, r6
 800a68e:	6023      	str	r3, [r4, #0]
 800a690:	b005      	add	sp, #20
 800a692:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a694:	002a      	movs	r2, r5
 800a696:	0038      	movs	r0, r7
 800a698:	f000 fc23 	bl	800aee2 <_realloc_r>
 800a69c:	1e06      	subs	r6, r0, #0
 800a69e:	d1df      	bne.n	800a660 <__ssputs_r+0x64>
 800a6a0:	0038      	movs	r0, r7
 800a6a2:	6921      	ldr	r1, [r4, #16]
 800a6a4:	f7ff fbc6 	bl	8009e34 <_free_r>
 800a6a8:	230c      	movs	r3, #12
 800a6aa:	2001      	movs	r0, #1
 800a6ac:	603b      	str	r3, [r7, #0]
 800a6ae:	89a2      	ldrh	r2, [r4, #12]
 800a6b0:	3334      	adds	r3, #52	; 0x34
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	81a3      	strh	r3, [r4, #12]
 800a6b6:	4240      	negs	r0, r0
 800a6b8:	e7ea      	b.n	800a690 <__ssputs_r+0x94>
 800a6ba:	46c0      	nop			; (mov r8, r8)
 800a6bc:	fffffb7f 	.word	0xfffffb7f

0800a6c0 <_svfiprintf_r>:
 800a6c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6c2:	b0a1      	sub	sp, #132	; 0x84
 800a6c4:	9003      	str	r0, [sp, #12]
 800a6c6:	001d      	movs	r5, r3
 800a6c8:	898b      	ldrh	r3, [r1, #12]
 800a6ca:	000f      	movs	r7, r1
 800a6cc:	0016      	movs	r6, r2
 800a6ce:	061b      	lsls	r3, r3, #24
 800a6d0:	d511      	bpl.n	800a6f6 <_svfiprintf_r+0x36>
 800a6d2:	690b      	ldr	r3, [r1, #16]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d10e      	bne.n	800a6f6 <_svfiprintf_r+0x36>
 800a6d8:	2140      	movs	r1, #64	; 0x40
 800a6da:	f7fd fe19 	bl	8008310 <_malloc_r>
 800a6de:	6038      	str	r0, [r7, #0]
 800a6e0:	6138      	str	r0, [r7, #16]
 800a6e2:	2800      	cmp	r0, #0
 800a6e4:	d105      	bne.n	800a6f2 <_svfiprintf_r+0x32>
 800a6e6:	230c      	movs	r3, #12
 800a6e8:	9a03      	ldr	r2, [sp, #12]
 800a6ea:	3801      	subs	r0, #1
 800a6ec:	6013      	str	r3, [r2, #0]
 800a6ee:	b021      	add	sp, #132	; 0x84
 800a6f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6f2:	2340      	movs	r3, #64	; 0x40
 800a6f4:	617b      	str	r3, [r7, #20]
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	ac08      	add	r4, sp, #32
 800a6fa:	6163      	str	r3, [r4, #20]
 800a6fc:	3320      	adds	r3, #32
 800a6fe:	7663      	strb	r3, [r4, #25]
 800a700:	3310      	adds	r3, #16
 800a702:	76a3      	strb	r3, [r4, #26]
 800a704:	9507      	str	r5, [sp, #28]
 800a706:	0035      	movs	r5, r6
 800a708:	782b      	ldrb	r3, [r5, #0]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d001      	beq.n	800a712 <_svfiprintf_r+0x52>
 800a70e:	2b25      	cmp	r3, #37	; 0x25
 800a710:	d148      	bne.n	800a7a4 <_svfiprintf_r+0xe4>
 800a712:	1bab      	subs	r3, r5, r6
 800a714:	9305      	str	r3, [sp, #20]
 800a716:	42b5      	cmp	r5, r6
 800a718:	d00b      	beq.n	800a732 <_svfiprintf_r+0x72>
 800a71a:	0032      	movs	r2, r6
 800a71c:	0039      	movs	r1, r7
 800a71e:	9803      	ldr	r0, [sp, #12]
 800a720:	f7ff ff6c 	bl	800a5fc <__ssputs_r>
 800a724:	3001      	adds	r0, #1
 800a726:	d100      	bne.n	800a72a <_svfiprintf_r+0x6a>
 800a728:	e0af      	b.n	800a88a <_svfiprintf_r+0x1ca>
 800a72a:	6963      	ldr	r3, [r4, #20]
 800a72c:	9a05      	ldr	r2, [sp, #20]
 800a72e:	189b      	adds	r3, r3, r2
 800a730:	6163      	str	r3, [r4, #20]
 800a732:	782b      	ldrb	r3, [r5, #0]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d100      	bne.n	800a73a <_svfiprintf_r+0x7a>
 800a738:	e0a7      	b.n	800a88a <_svfiprintf_r+0x1ca>
 800a73a:	2201      	movs	r2, #1
 800a73c:	2300      	movs	r3, #0
 800a73e:	4252      	negs	r2, r2
 800a740:	6062      	str	r2, [r4, #4]
 800a742:	a904      	add	r1, sp, #16
 800a744:	3254      	adds	r2, #84	; 0x54
 800a746:	1852      	adds	r2, r2, r1
 800a748:	1c6e      	adds	r6, r5, #1
 800a74a:	6023      	str	r3, [r4, #0]
 800a74c:	60e3      	str	r3, [r4, #12]
 800a74e:	60a3      	str	r3, [r4, #8]
 800a750:	7013      	strb	r3, [r2, #0]
 800a752:	65a3      	str	r3, [r4, #88]	; 0x58
 800a754:	4b55      	ldr	r3, [pc, #340]	; (800a8ac <_svfiprintf_r+0x1ec>)
 800a756:	2205      	movs	r2, #5
 800a758:	0018      	movs	r0, r3
 800a75a:	7831      	ldrb	r1, [r6, #0]
 800a75c:	9305      	str	r3, [sp, #20]
 800a75e:	f7fe fcb8 	bl	80090d2 <memchr>
 800a762:	1c75      	adds	r5, r6, #1
 800a764:	2800      	cmp	r0, #0
 800a766:	d11f      	bne.n	800a7a8 <_svfiprintf_r+0xe8>
 800a768:	6822      	ldr	r2, [r4, #0]
 800a76a:	06d3      	lsls	r3, r2, #27
 800a76c:	d504      	bpl.n	800a778 <_svfiprintf_r+0xb8>
 800a76e:	2353      	movs	r3, #83	; 0x53
 800a770:	a904      	add	r1, sp, #16
 800a772:	185b      	adds	r3, r3, r1
 800a774:	2120      	movs	r1, #32
 800a776:	7019      	strb	r1, [r3, #0]
 800a778:	0713      	lsls	r3, r2, #28
 800a77a:	d504      	bpl.n	800a786 <_svfiprintf_r+0xc6>
 800a77c:	2353      	movs	r3, #83	; 0x53
 800a77e:	a904      	add	r1, sp, #16
 800a780:	185b      	adds	r3, r3, r1
 800a782:	212b      	movs	r1, #43	; 0x2b
 800a784:	7019      	strb	r1, [r3, #0]
 800a786:	7833      	ldrb	r3, [r6, #0]
 800a788:	2b2a      	cmp	r3, #42	; 0x2a
 800a78a:	d016      	beq.n	800a7ba <_svfiprintf_r+0xfa>
 800a78c:	0035      	movs	r5, r6
 800a78e:	2100      	movs	r1, #0
 800a790:	200a      	movs	r0, #10
 800a792:	68e3      	ldr	r3, [r4, #12]
 800a794:	782a      	ldrb	r2, [r5, #0]
 800a796:	1c6e      	adds	r6, r5, #1
 800a798:	3a30      	subs	r2, #48	; 0x30
 800a79a:	2a09      	cmp	r2, #9
 800a79c:	d94e      	bls.n	800a83c <_svfiprintf_r+0x17c>
 800a79e:	2900      	cmp	r1, #0
 800a7a0:	d111      	bne.n	800a7c6 <_svfiprintf_r+0x106>
 800a7a2:	e017      	b.n	800a7d4 <_svfiprintf_r+0x114>
 800a7a4:	3501      	adds	r5, #1
 800a7a6:	e7af      	b.n	800a708 <_svfiprintf_r+0x48>
 800a7a8:	9b05      	ldr	r3, [sp, #20]
 800a7aa:	6822      	ldr	r2, [r4, #0]
 800a7ac:	1ac0      	subs	r0, r0, r3
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	4083      	lsls	r3, r0
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	002e      	movs	r6, r5
 800a7b6:	6023      	str	r3, [r4, #0]
 800a7b8:	e7cc      	b.n	800a754 <_svfiprintf_r+0x94>
 800a7ba:	9b07      	ldr	r3, [sp, #28]
 800a7bc:	1d19      	adds	r1, r3, #4
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	9107      	str	r1, [sp, #28]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	db01      	blt.n	800a7ca <_svfiprintf_r+0x10a>
 800a7c6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a7c8:	e004      	b.n	800a7d4 <_svfiprintf_r+0x114>
 800a7ca:	425b      	negs	r3, r3
 800a7cc:	60e3      	str	r3, [r4, #12]
 800a7ce:	2302      	movs	r3, #2
 800a7d0:	4313      	orrs	r3, r2
 800a7d2:	6023      	str	r3, [r4, #0]
 800a7d4:	782b      	ldrb	r3, [r5, #0]
 800a7d6:	2b2e      	cmp	r3, #46	; 0x2e
 800a7d8:	d10a      	bne.n	800a7f0 <_svfiprintf_r+0x130>
 800a7da:	786b      	ldrb	r3, [r5, #1]
 800a7dc:	2b2a      	cmp	r3, #42	; 0x2a
 800a7de:	d135      	bne.n	800a84c <_svfiprintf_r+0x18c>
 800a7e0:	9b07      	ldr	r3, [sp, #28]
 800a7e2:	3502      	adds	r5, #2
 800a7e4:	1d1a      	adds	r2, r3, #4
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	9207      	str	r2, [sp, #28]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	db2b      	blt.n	800a846 <_svfiprintf_r+0x186>
 800a7ee:	9309      	str	r3, [sp, #36]	; 0x24
 800a7f0:	4e2f      	ldr	r6, [pc, #188]	; (800a8b0 <_svfiprintf_r+0x1f0>)
 800a7f2:	2203      	movs	r2, #3
 800a7f4:	0030      	movs	r0, r6
 800a7f6:	7829      	ldrb	r1, [r5, #0]
 800a7f8:	f7fe fc6b 	bl	80090d2 <memchr>
 800a7fc:	2800      	cmp	r0, #0
 800a7fe:	d006      	beq.n	800a80e <_svfiprintf_r+0x14e>
 800a800:	2340      	movs	r3, #64	; 0x40
 800a802:	1b80      	subs	r0, r0, r6
 800a804:	4083      	lsls	r3, r0
 800a806:	6822      	ldr	r2, [r4, #0]
 800a808:	3501      	adds	r5, #1
 800a80a:	4313      	orrs	r3, r2
 800a80c:	6023      	str	r3, [r4, #0]
 800a80e:	7829      	ldrb	r1, [r5, #0]
 800a810:	2206      	movs	r2, #6
 800a812:	4828      	ldr	r0, [pc, #160]	; (800a8b4 <_svfiprintf_r+0x1f4>)
 800a814:	1c6e      	adds	r6, r5, #1
 800a816:	7621      	strb	r1, [r4, #24]
 800a818:	f7fe fc5b 	bl	80090d2 <memchr>
 800a81c:	2800      	cmp	r0, #0
 800a81e:	d03c      	beq.n	800a89a <_svfiprintf_r+0x1da>
 800a820:	4b25      	ldr	r3, [pc, #148]	; (800a8b8 <_svfiprintf_r+0x1f8>)
 800a822:	2b00      	cmp	r3, #0
 800a824:	d125      	bne.n	800a872 <_svfiprintf_r+0x1b2>
 800a826:	2207      	movs	r2, #7
 800a828:	9b07      	ldr	r3, [sp, #28]
 800a82a:	3307      	adds	r3, #7
 800a82c:	4393      	bics	r3, r2
 800a82e:	3308      	adds	r3, #8
 800a830:	9307      	str	r3, [sp, #28]
 800a832:	6963      	ldr	r3, [r4, #20]
 800a834:	9a04      	ldr	r2, [sp, #16]
 800a836:	189b      	adds	r3, r3, r2
 800a838:	6163      	str	r3, [r4, #20]
 800a83a:	e764      	b.n	800a706 <_svfiprintf_r+0x46>
 800a83c:	4343      	muls	r3, r0
 800a83e:	0035      	movs	r5, r6
 800a840:	2101      	movs	r1, #1
 800a842:	189b      	adds	r3, r3, r2
 800a844:	e7a6      	b.n	800a794 <_svfiprintf_r+0xd4>
 800a846:	2301      	movs	r3, #1
 800a848:	425b      	negs	r3, r3
 800a84a:	e7d0      	b.n	800a7ee <_svfiprintf_r+0x12e>
 800a84c:	2300      	movs	r3, #0
 800a84e:	200a      	movs	r0, #10
 800a850:	001a      	movs	r2, r3
 800a852:	3501      	adds	r5, #1
 800a854:	6063      	str	r3, [r4, #4]
 800a856:	7829      	ldrb	r1, [r5, #0]
 800a858:	1c6e      	adds	r6, r5, #1
 800a85a:	3930      	subs	r1, #48	; 0x30
 800a85c:	2909      	cmp	r1, #9
 800a85e:	d903      	bls.n	800a868 <_svfiprintf_r+0x1a8>
 800a860:	2b00      	cmp	r3, #0
 800a862:	d0c5      	beq.n	800a7f0 <_svfiprintf_r+0x130>
 800a864:	9209      	str	r2, [sp, #36]	; 0x24
 800a866:	e7c3      	b.n	800a7f0 <_svfiprintf_r+0x130>
 800a868:	4342      	muls	r2, r0
 800a86a:	0035      	movs	r5, r6
 800a86c:	2301      	movs	r3, #1
 800a86e:	1852      	adds	r2, r2, r1
 800a870:	e7f1      	b.n	800a856 <_svfiprintf_r+0x196>
 800a872:	aa07      	add	r2, sp, #28
 800a874:	9200      	str	r2, [sp, #0]
 800a876:	0021      	movs	r1, r4
 800a878:	003a      	movs	r2, r7
 800a87a:	4b10      	ldr	r3, [pc, #64]	; (800a8bc <_svfiprintf_r+0x1fc>)
 800a87c:	9803      	ldr	r0, [sp, #12]
 800a87e:	f7fd fe81 	bl	8008584 <_printf_float>
 800a882:	9004      	str	r0, [sp, #16]
 800a884:	9b04      	ldr	r3, [sp, #16]
 800a886:	3301      	adds	r3, #1
 800a888:	d1d3      	bne.n	800a832 <_svfiprintf_r+0x172>
 800a88a:	89bb      	ldrh	r3, [r7, #12]
 800a88c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a88e:	065b      	lsls	r3, r3, #25
 800a890:	d400      	bmi.n	800a894 <_svfiprintf_r+0x1d4>
 800a892:	e72c      	b.n	800a6ee <_svfiprintf_r+0x2e>
 800a894:	2001      	movs	r0, #1
 800a896:	4240      	negs	r0, r0
 800a898:	e729      	b.n	800a6ee <_svfiprintf_r+0x2e>
 800a89a:	aa07      	add	r2, sp, #28
 800a89c:	9200      	str	r2, [sp, #0]
 800a89e:	0021      	movs	r1, r4
 800a8a0:	003a      	movs	r2, r7
 800a8a2:	4b06      	ldr	r3, [pc, #24]	; (800a8bc <_svfiprintf_r+0x1fc>)
 800a8a4:	9803      	ldr	r0, [sp, #12]
 800a8a6:	f7fe f933 	bl	8008b10 <_printf_i>
 800a8aa:	e7ea      	b.n	800a882 <_svfiprintf_r+0x1c2>
 800a8ac:	0800dd4c 	.word	0x0800dd4c
 800a8b0:	0800dd52 	.word	0x0800dd52
 800a8b4:	0800dd56 	.word	0x0800dd56
 800a8b8:	08008585 	.word	0x08008585
 800a8bc:	0800a5fd 	.word	0x0800a5fd

0800a8c0 <__sfputc_r>:
 800a8c0:	6893      	ldr	r3, [r2, #8]
 800a8c2:	b510      	push	{r4, lr}
 800a8c4:	3b01      	subs	r3, #1
 800a8c6:	6093      	str	r3, [r2, #8]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	da04      	bge.n	800a8d6 <__sfputc_r+0x16>
 800a8cc:	6994      	ldr	r4, [r2, #24]
 800a8ce:	42a3      	cmp	r3, r4
 800a8d0:	db07      	blt.n	800a8e2 <__sfputc_r+0x22>
 800a8d2:	290a      	cmp	r1, #10
 800a8d4:	d005      	beq.n	800a8e2 <__sfputc_r+0x22>
 800a8d6:	6813      	ldr	r3, [r2, #0]
 800a8d8:	1c58      	adds	r0, r3, #1
 800a8da:	6010      	str	r0, [r2, #0]
 800a8dc:	7019      	strb	r1, [r3, #0]
 800a8de:	0008      	movs	r0, r1
 800a8e0:	bd10      	pop	{r4, pc}
 800a8e2:	f000 f9e6 	bl	800acb2 <__swbuf_r>
 800a8e6:	0001      	movs	r1, r0
 800a8e8:	e7f9      	b.n	800a8de <__sfputc_r+0x1e>

0800a8ea <__sfputs_r>:
 800a8ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ec:	0006      	movs	r6, r0
 800a8ee:	000f      	movs	r7, r1
 800a8f0:	0014      	movs	r4, r2
 800a8f2:	18d5      	adds	r5, r2, r3
 800a8f4:	42ac      	cmp	r4, r5
 800a8f6:	d101      	bne.n	800a8fc <__sfputs_r+0x12>
 800a8f8:	2000      	movs	r0, #0
 800a8fa:	e007      	b.n	800a90c <__sfputs_r+0x22>
 800a8fc:	7821      	ldrb	r1, [r4, #0]
 800a8fe:	003a      	movs	r2, r7
 800a900:	0030      	movs	r0, r6
 800a902:	f7ff ffdd 	bl	800a8c0 <__sfputc_r>
 800a906:	3401      	adds	r4, #1
 800a908:	1c43      	adds	r3, r0, #1
 800a90a:	d1f3      	bne.n	800a8f4 <__sfputs_r+0xa>
 800a90c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a910 <_vfiprintf_r>:
 800a910:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a912:	b0a1      	sub	sp, #132	; 0x84
 800a914:	000f      	movs	r7, r1
 800a916:	0015      	movs	r5, r2
 800a918:	001e      	movs	r6, r3
 800a91a:	9003      	str	r0, [sp, #12]
 800a91c:	2800      	cmp	r0, #0
 800a91e:	d004      	beq.n	800a92a <_vfiprintf_r+0x1a>
 800a920:	6a03      	ldr	r3, [r0, #32]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d101      	bne.n	800a92a <_vfiprintf_r+0x1a>
 800a926:	f7fe fa93 	bl	8008e50 <__sinit>
 800a92a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a92c:	07db      	lsls	r3, r3, #31
 800a92e:	d405      	bmi.n	800a93c <_vfiprintf_r+0x2c>
 800a930:	89bb      	ldrh	r3, [r7, #12]
 800a932:	059b      	lsls	r3, r3, #22
 800a934:	d402      	bmi.n	800a93c <_vfiprintf_r+0x2c>
 800a936:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a938:	f7fe fbc1 	bl	80090be <__retarget_lock_acquire_recursive>
 800a93c:	89bb      	ldrh	r3, [r7, #12]
 800a93e:	071b      	lsls	r3, r3, #28
 800a940:	d502      	bpl.n	800a948 <_vfiprintf_r+0x38>
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d113      	bne.n	800a970 <_vfiprintf_r+0x60>
 800a948:	0039      	movs	r1, r7
 800a94a:	9803      	ldr	r0, [sp, #12]
 800a94c:	f000 f9f4 	bl	800ad38 <__swsetup_r>
 800a950:	2800      	cmp	r0, #0
 800a952:	d00d      	beq.n	800a970 <_vfiprintf_r+0x60>
 800a954:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a956:	07db      	lsls	r3, r3, #31
 800a958:	d503      	bpl.n	800a962 <_vfiprintf_r+0x52>
 800a95a:	2001      	movs	r0, #1
 800a95c:	4240      	negs	r0, r0
 800a95e:	b021      	add	sp, #132	; 0x84
 800a960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a962:	89bb      	ldrh	r3, [r7, #12]
 800a964:	059b      	lsls	r3, r3, #22
 800a966:	d4f8      	bmi.n	800a95a <_vfiprintf_r+0x4a>
 800a968:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a96a:	f7fe fba9 	bl	80090c0 <__retarget_lock_release_recursive>
 800a96e:	e7f4      	b.n	800a95a <_vfiprintf_r+0x4a>
 800a970:	2300      	movs	r3, #0
 800a972:	ac08      	add	r4, sp, #32
 800a974:	6163      	str	r3, [r4, #20]
 800a976:	3320      	adds	r3, #32
 800a978:	7663      	strb	r3, [r4, #25]
 800a97a:	3310      	adds	r3, #16
 800a97c:	76a3      	strb	r3, [r4, #26]
 800a97e:	9607      	str	r6, [sp, #28]
 800a980:	002e      	movs	r6, r5
 800a982:	7833      	ldrb	r3, [r6, #0]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d001      	beq.n	800a98c <_vfiprintf_r+0x7c>
 800a988:	2b25      	cmp	r3, #37	; 0x25
 800a98a:	d148      	bne.n	800aa1e <_vfiprintf_r+0x10e>
 800a98c:	1b73      	subs	r3, r6, r5
 800a98e:	9305      	str	r3, [sp, #20]
 800a990:	42ae      	cmp	r6, r5
 800a992:	d00b      	beq.n	800a9ac <_vfiprintf_r+0x9c>
 800a994:	002a      	movs	r2, r5
 800a996:	0039      	movs	r1, r7
 800a998:	9803      	ldr	r0, [sp, #12]
 800a99a:	f7ff ffa6 	bl	800a8ea <__sfputs_r>
 800a99e:	3001      	adds	r0, #1
 800a9a0:	d100      	bne.n	800a9a4 <_vfiprintf_r+0x94>
 800a9a2:	e0af      	b.n	800ab04 <_vfiprintf_r+0x1f4>
 800a9a4:	6963      	ldr	r3, [r4, #20]
 800a9a6:	9a05      	ldr	r2, [sp, #20]
 800a9a8:	189b      	adds	r3, r3, r2
 800a9aa:	6163      	str	r3, [r4, #20]
 800a9ac:	7833      	ldrb	r3, [r6, #0]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d100      	bne.n	800a9b4 <_vfiprintf_r+0xa4>
 800a9b2:	e0a7      	b.n	800ab04 <_vfiprintf_r+0x1f4>
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	4252      	negs	r2, r2
 800a9ba:	6062      	str	r2, [r4, #4]
 800a9bc:	a904      	add	r1, sp, #16
 800a9be:	3254      	adds	r2, #84	; 0x54
 800a9c0:	1852      	adds	r2, r2, r1
 800a9c2:	1c75      	adds	r5, r6, #1
 800a9c4:	6023      	str	r3, [r4, #0]
 800a9c6:	60e3      	str	r3, [r4, #12]
 800a9c8:	60a3      	str	r3, [r4, #8]
 800a9ca:	7013      	strb	r3, [r2, #0]
 800a9cc:	65a3      	str	r3, [r4, #88]	; 0x58
 800a9ce:	4b59      	ldr	r3, [pc, #356]	; (800ab34 <_vfiprintf_r+0x224>)
 800a9d0:	2205      	movs	r2, #5
 800a9d2:	0018      	movs	r0, r3
 800a9d4:	7829      	ldrb	r1, [r5, #0]
 800a9d6:	9305      	str	r3, [sp, #20]
 800a9d8:	f7fe fb7b 	bl	80090d2 <memchr>
 800a9dc:	1c6e      	adds	r6, r5, #1
 800a9de:	2800      	cmp	r0, #0
 800a9e0:	d11f      	bne.n	800aa22 <_vfiprintf_r+0x112>
 800a9e2:	6822      	ldr	r2, [r4, #0]
 800a9e4:	06d3      	lsls	r3, r2, #27
 800a9e6:	d504      	bpl.n	800a9f2 <_vfiprintf_r+0xe2>
 800a9e8:	2353      	movs	r3, #83	; 0x53
 800a9ea:	a904      	add	r1, sp, #16
 800a9ec:	185b      	adds	r3, r3, r1
 800a9ee:	2120      	movs	r1, #32
 800a9f0:	7019      	strb	r1, [r3, #0]
 800a9f2:	0713      	lsls	r3, r2, #28
 800a9f4:	d504      	bpl.n	800aa00 <_vfiprintf_r+0xf0>
 800a9f6:	2353      	movs	r3, #83	; 0x53
 800a9f8:	a904      	add	r1, sp, #16
 800a9fa:	185b      	adds	r3, r3, r1
 800a9fc:	212b      	movs	r1, #43	; 0x2b
 800a9fe:	7019      	strb	r1, [r3, #0]
 800aa00:	782b      	ldrb	r3, [r5, #0]
 800aa02:	2b2a      	cmp	r3, #42	; 0x2a
 800aa04:	d016      	beq.n	800aa34 <_vfiprintf_r+0x124>
 800aa06:	002e      	movs	r6, r5
 800aa08:	2100      	movs	r1, #0
 800aa0a:	200a      	movs	r0, #10
 800aa0c:	68e3      	ldr	r3, [r4, #12]
 800aa0e:	7832      	ldrb	r2, [r6, #0]
 800aa10:	1c75      	adds	r5, r6, #1
 800aa12:	3a30      	subs	r2, #48	; 0x30
 800aa14:	2a09      	cmp	r2, #9
 800aa16:	d94e      	bls.n	800aab6 <_vfiprintf_r+0x1a6>
 800aa18:	2900      	cmp	r1, #0
 800aa1a:	d111      	bne.n	800aa40 <_vfiprintf_r+0x130>
 800aa1c:	e017      	b.n	800aa4e <_vfiprintf_r+0x13e>
 800aa1e:	3601      	adds	r6, #1
 800aa20:	e7af      	b.n	800a982 <_vfiprintf_r+0x72>
 800aa22:	9b05      	ldr	r3, [sp, #20]
 800aa24:	6822      	ldr	r2, [r4, #0]
 800aa26:	1ac0      	subs	r0, r0, r3
 800aa28:	2301      	movs	r3, #1
 800aa2a:	4083      	lsls	r3, r0
 800aa2c:	4313      	orrs	r3, r2
 800aa2e:	0035      	movs	r5, r6
 800aa30:	6023      	str	r3, [r4, #0]
 800aa32:	e7cc      	b.n	800a9ce <_vfiprintf_r+0xbe>
 800aa34:	9b07      	ldr	r3, [sp, #28]
 800aa36:	1d19      	adds	r1, r3, #4
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	9107      	str	r1, [sp, #28]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	db01      	blt.n	800aa44 <_vfiprintf_r+0x134>
 800aa40:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa42:	e004      	b.n	800aa4e <_vfiprintf_r+0x13e>
 800aa44:	425b      	negs	r3, r3
 800aa46:	60e3      	str	r3, [r4, #12]
 800aa48:	2302      	movs	r3, #2
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	6023      	str	r3, [r4, #0]
 800aa4e:	7833      	ldrb	r3, [r6, #0]
 800aa50:	2b2e      	cmp	r3, #46	; 0x2e
 800aa52:	d10a      	bne.n	800aa6a <_vfiprintf_r+0x15a>
 800aa54:	7873      	ldrb	r3, [r6, #1]
 800aa56:	2b2a      	cmp	r3, #42	; 0x2a
 800aa58:	d135      	bne.n	800aac6 <_vfiprintf_r+0x1b6>
 800aa5a:	9b07      	ldr	r3, [sp, #28]
 800aa5c:	3602      	adds	r6, #2
 800aa5e:	1d1a      	adds	r2, r3, #4
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	9207      	str	r2, [sp, #28]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	db2b      	blt.n	800aac0 <_vfiprintf_r+0x1b0>
 800aa68:	9309      	str	r3, [sp, #36]	; 0x24
 800aa6a:	4d33      	ldr	r5, [pc, #204]	; (800ab38 <_vfiprintf_r+0x228>)
 800aa6c:	2203      	movs	r2, #3
 800aa6e:	0028      	movs	r0, r5
 800aa70:	7831      	ldrb	r1, [r6, #0]
 800aa72:	f7fe fb2e 	bl	80090d2 <memchr>
 800aa76:	2800      	cmp	r0, #0
 800aa78:	d006      	beq.n	800aa88 <_vfiprintf_r+0x178>
 800aa7a:	2340      	movs	r3, #64	; 0x40
 800aa7c:	1b40      	subs	r0, r0, r5
 800aa7e:	4083      	lsls	r3, r0
 800aa80:	6822      	ldr	r2, [r4, #0]
 800aa82:	3601      	adds	r6, #1
 800aa84:	4313      	orrs	r3, r2
 800aa86:	6023      	str	r3, [r4, #0]
 800aa88:	7831      	ldrb	r1, [r6, #0]
 800aa8a:	2206      	movs	r2, #6
 800aa8c:	482b      	ldr	r0, [pc, #172]	; (800ab3c <_vfiprintf_r+0x22c>)
 800aa8e:	1c75      	adds	r5, r6, #1
 800aa90:	7621      	strb	r1, [r4, #24]
 800aa92:	f7fe fb1e 	bl	80090d2 <memchr>
 800aa96:	2800      	cmp	r0, #0
 800aa98:	d043      	beq.n	800ab22 <_vfiprintf_r+0x212>
 800aa9a:	4b29      	ldr	r3, [pc, #164]	; (800ab40 <_vfiprintf_r+0x230>)
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d125      	bne.n	800aaec <_vfiprintf_r+0x1dc>
 800aaa0:	2207      	movs	r2, #7
 800aaa2:	9b07      	ldr	r3, [sp, #28]
 800aaa4:	3307      	adds	r3, #7
 800aaa6:	4393      	bics	r3, r2
 800aaa8:	3308      	adds	r3, #8
 800aaaa:	9307      	str	r3, [sp, #28]
 800aaac:	6963      	ldr	r3, [r4, #20]
 800aaae:	9a04      	ldr	r2, [sp, #16]
 800aab0:	189b      	adds	r3, r3, r2
 800aab2:	6163      	str	r3, [r4, #20]
 800aab4:	e764      	b.n	800a980 <_vfiprintf_r+0x70>
 800aab6:	4343      	muls	r3, r0
 800aab8:	002e      	movs	r6, r5
 800aaba:	2101      	movs	r1, #1
 800aabc:	189b      	adds	r3, r3, r2
 800aabe:	e7a6      	b.n	800aa0e <_vfiprintf_r+0xfe>
 800aac0:	2301      	movs	r3, #1
 800aac2:	425b      	negs	r3, r3
 800aac4:	e7d0      	b.n	800aa68 <_vfiprintf_r+0x158>
 800aac6:	2300      	movs	r3, #0
 800aac8:	200a      	movs	r0, #10
 800aaca:	001a      	movs	r2, r3
 800aacc:	3601      	adds	r6, #1
 800aace:	6063      	str	r3, [r4, #4]
 800aad0:	7831      	ldrb	r1, [r6, #0]
 800aad2:	1c75      	adds	r5, r6, #1
 800aad4:	3930      	subs	r1, #48	; 0x30
 800aad6:	2909      	cmp	r1, #9
 800aad8:	d903      	bls.n	800aae2 <_vfiprintf_r+0x1d2>
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d0c5      	beq.n	800aa6a <_vfiprintf_r+0x15a>
 800aade:	9209      	str	r2, [sp, #36]	; 0x24
 800aae0:	e7c3      	b.n	800aa6a <_vfiprintf_r+0x15a>
 800aae2:	4342      	muls	r2, r0
 800aae4:	002e      	movs	r6, r5
 800aae6:	2301      	movs	r3, #1
 800aae8:	1852      	adds	r2, r2, r1
 800aaea:	e7f1      	b.n	800aad0 <_vfiprintf_r+0x1c0>
 800aaec:	aa07      	add	r2, sp, #28
 800aaee:	9200      	str	r2, [sp, #0]
 800aaf0:	0021      	movs	r1, r4
 800aaf2:	003a      	movs	r2, r7
 800aaf4:	4b13      	ldr	r3, [pc, #76]	; (800ab44 <_vfiprintf_r+0x234>)
 800aaf6:	9803      	ldr	r0, [sp, #12]
 800aaf8:	f7fd fd44 	bl	8008584 <_printf_float>
 800aafc:	9004      	str	r0, [sp, #16]
 800aafe:	9b04      	ldr	r3, [sp, #16]
 800ab00:	3301      	adds	r3, #1
 800ab02:	d1d3      	bne.n	800aaac <_vfiprintf_r+0x19c>
 800ab04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab06:	07db      	lsls	r3, r3, #31
 800ab08:	d405      	bmi.n	800ab16 <_vfiprintf_r+0x206>
 800ab0a:	89bb      	ldrh	r3, [r7, #12]
 800ab0c:	059b      	lsls	r3, r3, #22
 800ab0e:	d402      	bmi.n	800ab16 <_vfiprintf_r+0x206>
 800ab10:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ab12:	f7fe fad5 	bl	80090c0 <__retarget_lock_release_recursive>
 800ab16:	89bb      	ldrh	r3, [r7, #12]
 800ab18:	065b      	lsls	r3, r3, #25
 800ab1a:	d500      	bpl.n	800ab1e <_vfiprintf_r+0x20e>
 800ab1c:	e71d      	b.n	800a95a <_vfiprintf_r+0x4a>
 800ab1e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ab20:	e71d      	b.n	800a95e <_vfiprintf_r+0x4e>
 800ab22:	aa07      	add	r2, sp, #28
 800ab24:	9200      	str	r2, [sp, #0]
 800ab26:	0021      	movs	r1, r4
 800ab28:	003a      	movs	r2, r7
 800ab2a:	4b06      	ldr	r3, [pc, #24]	; (800ab44 <_vfiprintf_r+0x234>)
 800ab2c:	9803      	ldr	r0, [sp, #12]
 800ab2e:	f7fd ffef 	bl	8008b10 <_printf_i>
 800ab32:	e7e3      	b.n	800aafc <_vfiprintf_r+0x1ec>
 800ab34:	0800dd4c 	.word	0x0800dd4c
 800ab38:	0800dd52 	.word	0x0800dd52
 800ab3c:	0800dd56 	.word	0x0800dd56
 800ab40:	08008585 	.word	0x08008585
 800ab44:	0800a8eb 	.word	0x0800a8eb

0800ab48 <__sflush_r>:
 800ab48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab4a:	898b      	ldrh	r3, [r1, #12]
 800ab4c:	0005      	movs	r5, r0
 800ab4e:	000c      	movs	r4, r1
 800ab50:	071a      	lsls	r2, r3, #28
 800ab52:	d45c      	bmi.n	800ac0e <__sflush_r+0xc6>
 800ab54:	684a      	ldr	r2, [r1, #4]
 800ab56:	2a00      	cmp	r2, #0
 800ab58:	dc04      	bgt.n	800ab64 <__sflush_r+0x1c>
 800ab5a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800ab5c:	2a00      	cmp	r2, #0
 800ab5e:	dc01      	bgt.n	800ab64 <__sflush_r+0x1c>
 800ab60:	2000      	movs	r0, #0
 800ab62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ab64:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800ab66:	2f00      	cmp	r7, #0
 800ab68:	d0fa      	beq.n	800ab60 <__sflush_r+0x18>
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	2080      	movs	r0, #128	; 0x80
 800ab6e:	682e      	ldr	r6, [r5, #0]
 800ab70:	602a      	str	r2, [r5, #0]
 800ab72:	001a      	movs	r2, r3
 800ab74:	0140      	lsls	r0, r0, #5
 800ab76:	6a21      	ldr	r1, [r4, #32]
 800ab78:	4002      	ands	r2, r0
 800ab7a:	4203      	tst	r3, r0
 800ab7c:	d034      	beq.n	800abe8 <__sflush_r+0xa0>
 800ab7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ab80:	89a3      	ldrh	r3, [r4, #12]
 800ab82:	075b      	lsls	r3, r3, #29
 800ab84:	d506      	bpl.n	800ab94 <__sflush_r+0x4c>
 800ab86:	6863      	ldr	r3, [r4, #4]
 800ab88:	1ac0      	subs	r0, r0, r3
 800ab8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d001      	beq.n	800ab94 <__sflush_r+0x4c>
 800ab90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab92:	1ac0      	subs	r0, r0, r3
 800ab94:	0002      	movs	r2, r0
 800ab96:	2300      	movs	r3, #0
 800ab98:	0028      	movs	r0, r5
 800ab9a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800ab9c:	6a21      	ldr	r1, [r4, #32]
 800ab9e:	47b8      	blx	r7
 800aba0:	89a2      	ldrh	r2, [r4, #12]
 800aba2:	1c43      	adds	r3, r0, #1
 800aba4:	d106      	bne.n	800abb4 <__sflush_r+0x6c>
 800aba6:	6829      	ldr	r1, [r5, #0]
 800aba8:	291d      	cmp	r1, #29
 800abaa:	d82c      	bhi.n	800ac06 <__sflush_r+0xbe>
 800abac:	4b2a      	ldr	r3, [pc, #168]	; (800ac58 <__sflush_r+0x110>)
 800abae:	410b      	asrs	r3, r1
 800abb0:	07db      	lsls	r3, r3, #31
 800abb2:	d428      	bmi.n	800ac06 <__sflush_r+0xbe>
 800abb4:	2300      	movs	r3, #0
 800abb6:	6063      	str	r3, [r4, #4]
 800abb8:	6923      	ldr	r3, [r4, #16]
 800abba:	6023      	str	r3, [r4, #0]
 800abbc:	04d2      	lsls	r2, r2, #19
 800abbe:	d505      	bpl.n	800abcc <__sflush_r+0x84>
 800abc0:	1c43      	adds	r3, r0, #1
 800abc2:	d102      	bne.n	800abca <__sflush_r+0x82>
 800abc4:	682b      	ldr	r3, [r5, #0]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d100      	bne.n	800abcc <__sflush_r+0x84>
 800abca:	6560      	str	r0, [r4, #84]	; 0x54
 800abcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abce:	602e      	str	r6, [r5, #0]
 800abd0:	2900      	cmp	r1, #0
 800abd2:	d0c5      	beq.n	800ab60 <__sflush_r+0x18>
 800abd4:	0023      	movs	r3, r4
 800abd6:	3344      	adds	r3, #68	; 0x44
 800abd8:	4299      	cmp	r1, r3
 800abda:	d002      	beq.n	800abe2 <__sflush_r+0x9a>
 800abdc:	0028      	movs	r0, r5
 800abde:	f7ff f929 	bl	8009e34 <_free_r>
 800abe2:	2000      	movs	r0, #0
 800abe4:	6360      	str	r0, [r4, #52]	; 0x34
 800abe6:	e7bc      	b.n	800ab62 <__sflush_r+0x1a>
 800abe8:	2301      	movs	r3, #1
 800abea:	0028      	movs	r0, r5
 800abec:	47b8      	blx	r7
 800abee:	1c43      	adds	r3, r0, #1
 800abf0:	d1c6      	bne.n	800ab80 <__sflush_r+0x38>
 800abf2:	682b      	ldr	r3, [r5, #0]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d0c3      	beq.n	800ab80 <__sflush_r+0x38>
 800abf8:	2b1d      	cmp	r3, #29
 800abfa:	d001      	beq.n	800ac00 <__sflush_r+0xb8>
 800abfc:	2b16      	cmp	r3, #22
 800abfe:	d101      	bne.n	800ac04 <__sflush_r+0xbc>
 800ac00:	602e      	str	r6, [r5, #0]
 800ac02:	e7ad      	b.n	800ab60 <__sflush_r+0x18>
 800ac04:	89a2      	ldrh	r2, [r4, #12]
 800ac06:	2340      	movs	r3, #64	; 0x40
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	81a3      	strh	r3, [r4, #12]
 800ac0c:	e7a9      	b.n	800ab62 <__sflush_r+0x1a>
 800ac0e:	690e      	ldr	r6, [r1, #16]
 800ac10:	2e00      	cmp	r6, #0
 800ac12:	d0a5      	beq.n	800ab60 <__sflush_r+0x18>
 800ac14:	680f      	ldr	r7, [r1, #0]
 800ac16:	600e      	str	r6, [r1, #0]
 800ac18:	1bba      	subs	r2, r7, r6
 800ac1a:	9201      	str	r2, [sp, #4]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	079b      	lsls	r3, r3, #30
 800ac20:	d100      	bne.n	800ac24 <__sflush_r+0xdc>
 800ac22:	694a      	ldr	r2, [r1, #20]
 800ac24:	60a2      	str	r2, [r4, #8]
 800ac26:	9b01      	ldr	r3, [sp, #4]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	dd99      	ble.n	800ab60 <__sflush_r+0x18>
 800ac2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ac2e:	0032      	movs	r2, r6
 800ac30:	001f      	movs	r7, r3
 800ac32:	0028      	movs	r0, r5
 800ac34:	9b01      	ldr	r3, [sp, #4]
 800ac36:	6a21      	ldr	r1, [r4, #32]
 800ac38:	47b8      	blx	r7
 800ac3a:	2800      	cmp	r0, #0
 800ac3c:	dc06      	bgt.n	800ac4c <__sflush_r+0x104>
 800ac3e:	2340      	movs	r3, #64	; 0x40
 800ac40:	2001      	movs	r0, #1
 800ac42:	89a2      	ldrh	r2, [r4, #12]
 800ac44:	4240      	negs	r0, r0
 800ac46:	4313      	orrs	r3, r2
 800ac48:	81a3      	strh	r3, [r4, #12]
 800ac4a:	e78a      	b.n	800ab62 <__sflush_r+0x1a>
 800ac4c:	9b01      	ldr	r3, [sp, #4]
 800ac4e:	1836      	adds	r6, r6, r0
 800ac50:	1a1b      	subs	r3, r3, r0
 800ac52:	9301      	str	r3, [sp, #4]
 800ac54:	e7e7      	b.n	800ac26 <__sflush_r+0xde>
 800ac56:	46c0      	nop			; (mov r8, r8)
 800ac58:	dfbffffe 	.word	0xdfbffffe

0800ac5c <_fflush_r>:
 800ac5c:	690b      	ldr	r3, [r1, #16]
 800ac5e:	b570      	push	{r4, r5, r6, lr}
 800ac60:	0005      	movs	r5, r0
 800ac62:	000c      	movs	r4, r1
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d102      	bne.n	800ac6e <_fflush_r+0x12>
 800ac68:	2500      	movs	r5, #0
 800ac6a:	0028      	movs	r0, r5
 800ac6c:	bd70      	pop	{r4, r5, r6, pc}
 800ac6e:	2800      	cmp	r0, #0
 800ac70:	d004      	beq.n	800ac7c <_fflush_r+0x20>
 800ac72:	6a03      	ldr	r3, [r0, #32]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d101      	bne.n	800ac7c <_fflush_r+0x20>
 800ac78:	f7fe f8ea 	bl	8008e50 <__sinit>
 800ac7c:	220c      	movs	r2, #12
 800ac7e:	5ea3      	ldrsh	r3, [r4, r2]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d0f1      	beq.n	800ac68 <_fflush_r+0xc>
 800ac84:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac86:	07d2      	lsls	r2, r2, #31
 800ac88:	d404      	bmi.n	800ac94 <_fflush_r+0x38>
 800ac8a:	059b      	lsls	r3, r3, #22
 800ac8c:	d402      	bmi.n	800ac94 <_fflush_r+0x38>
 800ac8e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac90:	f7fe fa15 	bl	80090be <__retarget_lock_acquire_recursive>
 800ac94:	0028      	movs	r0, r5
 800ac96:	0021      	movs	r1, r4
 800ac98:	f7ff ff56 	bl	800ab48 <__sflush_r>
 800ac9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac9e:	0005      	movs	r5, r0
 800aca0:	07db      	lsls	r3, r3, #31
 800aca2:	d4e2      	bmi.n	800ac6a <_fflush_r+0xe>
 800aca4:	89a3      	ldrh	r3, [r4, #12]
 800aca6:	059b      	lsls	r3, r3, #22
 800aca8:	d4df      	bmi.n	800ac6a <_fflush_r+0xe>
 800acaa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800acac:	f7fe fa08 	bl	80090c0 <__retarget_lock_release_recursive>
 800acb0:	e7db      	b.n	800ac6a <_fflush_r+0xe>

0800acb2 <__swbuf_r>:
 800acb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acb4:	0006      	movs	r6, r0
 800acb6:	000d      	movs	r5, r1
 800acb8:	0014      	movs	r4, r2
 800acba:	2800      	cmp	r0, #0
 800acbc:	d004      	beq.n	800acc8 <__swbuf_r+0x16>
 800acbe:	6a03      	ldr	r3, [r0, #32]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d101      	bne.n	800acc8 <__swbuf_r+0x16>
 800acc4:	f7fe f8c4 	bl	8008e50 <__sinit>
 800acc8:	69a3      	ldr	r3, [r4, #24]
 800acca:	60a3      	str	r3, [r4, #8]
 800accc:	89a3      	ldrh	r3, [r4, #12]
 800acce:	071b      	lsls	r3, r3, #28
 800acd0:	d528      	bpl.n	800ad24 <__swbuf_r+0x72>
 800acd2:	6923      	ldr	r3, [r4, #16]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d025      	beq.n	800ad24 <__swbuf_r+0x72>
 800acd8:	6923      	ldr	r3, [r4, #16]
 800acda:	6820      	ldr	r0, [r4, #0]
 800acdc:	b2ef      	uxtb	r7, r5
 800acde:	1ac0      	subs	r0, r0, r3
 800ace0:	6963      	ldr	r3, [r4, #20]
 800ace2:	b2ed      	uxtb	r5, r5
 800ace4:	4283      	cmp	r3, r0
 800ace6:	dc05      	bgt.n	800acf4 <__swbuf_r+0x42>
 800ace8:	0021      	movs	r1, r4
 800acea:	0030      	movs	r0, r6
 800acec:	f7ff ffb6 	bl	800ac5c <_fflush_r>
 800acf0:	2800      	cmp	r0, #0
 800acf2:	d11d      	bne.n	800ad30 <__swbuf_r+0x7e>
 800acf4:	68a3      	ldr	r3, [r4, #8]
 800acf6:	3001      	adds	r0, #1
 800acf8:	3b01      	subs	r3, #1
 800acfa:	60a3      	str	r3, [r4, #8]
 800acfc:	6823      	ldr	r3, [r4, #0]
 800acfe:	1c5a      	adds	r2, r3, #1
 800ad00:	6022      	str	r2, [r4, #0]
 800ad02:	701f      	strb	r7, [r3, #0]
 800ad04:	6963      	ldr	r3, [r4, #20]
 800ad06:	4283      	cmp	r3, r0
 800ad08:	d004      	beq.n	800ad14 <__swbuf_r+0x62>
 800ad0a:	89a3      	ldrh	r3, [r4, #12]
 800ad0c:	07db      	lsls	r3, r3, #31
 800ad0e:	d507      	bpl.n	800ad20 <__swbuf_r+0x6e>
 800ad10:	2d0a      	cmp	r5, #10
 800ad12:	d105      	bne.n	800ad20 <__swbuf_r+0x6e>
 800ad14:	0021      	movs	r1, r4
 800ad16:	0030      	movs	r0, r6
 800ad18:	f7ff ffa0 	bl	800ac5c <_fflush_r>
 800ad1c:	2800      	cmp	r0, #0
 800ad1e:	d107      	bne.n	800ad30 <__swbuf_r+0x7e>
 800ad20:	0028      	movs	r0, r5
 800ad22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad24:	0021      	movs	r1, r4
 800ad26:	0030      	movs	r0, r6
 800ad28:	f000 f806 	bl	800ad38 <__swsetup_r>
 800ad2c:	2800      	cmp	r0, #0
 800ad2e:	d0d3      	beq.n	800acd8 <__swbuf_r+0x26>
 800ad30:	2501      	movs	r5, #1
 800ad32:	426d      	negs	r5, r5
 800ad34:	e7f4      	b.n	800ad20 <__swbuf_r+0x6e>
	...

0800ad38 <__swsetup_r>:
 800ad38:	4b30      	ldr	r3, [pc, #192]	; (800adfc <__swsetup_r+0xc4>)
 800ad3a:	b570      	push	{r4, r5, r6, lr}
 800ad3c:	0005      	movs	r5, r0
 800ad3e:	6818      	ldr	r0, [r3, #0]
 800ad40:	000c      	movs	r4, r1
 800ad42:	2800      	cmp	r0, #0
 800ad44:	d004      	beq.n	800ad50 <__swsetup_r+0x18>
 800ad46:	6a03      	ldr	r3, [r0, #32]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d101      	bne.n	800ad50 <__swsetup_r+0x18>
 800ad4c:	f7fe f880 	bl	8008e50 <__sinit>
 800ad50:	230c      	movs	r3, #12
 800ad52:	5ee2      	ldrsh	r2, [r4, r3]
 800ad54:	b293      	uxth	r3, r2
 800ad56:	0711      	lsls	r1, r2, #28
 800ad58:	d423      	bmi.n	800ada2 <__swsetup_r+0x6a>
 800ad5a:	06d9      	lsls	r1, r3, #27
 800ad5c:	d407      	bmi.n	800ad6e <__swsetup_r+0x36>
 800ad5e:	2309      	movs	r3, #9
 800ad60:	2001      	movs	r0, #1
 800ad62:	602b      	str	r3, [r5, #0]
 800ad64:	3337      	adds	r3, #55	; 0x37
 800ad66:	4313      	orrs	r3, r2
 800ad68:	81a3      	strh	r3, [r4, #12]
 800ad6a:	4240      	negs	r0, r0
 800ad6c:	bd70      	pop	{r4, r5, r6, pc}
 800ad6e:	075b      	lsls	r3, r3, #29
 800ad70:	d513      	bpl.n	800ad9a <__swsetup_r+0x62>
 800ad72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad74:	2900      	cmp	r1, #0
 800ad76:	d008      	beq.n	800ad8a <__swsetup_r+0x52>
 800ad78:	0023      	movs	r3, r4
 800ad7a:	3344      	adds	r3, #68	; 0x44
 800ad7c:	4299      	cmp	r1, r3
 800ad7e:	d002      	beq.n	800ad86 <__swsetup_r+0x4e>
 800ad80:	0028      	movs	r0, r5
 800ad82:	f7ff f857 	bl	8009e34 <_free_r>
 800ad86:	2300      	movs	r3, #0
 800ad88:	6363      	str	r3, [r4, #52]	; 0x34
 800ad8a:	2224      	movs	r2, #36	; 0x24
 800ad8c:	89a3      	ldrh	r3, [r4, #12]
 800ad8e:	4393      	bics	r3, r2
 800ad90:	81a3      	strh	r3, [r4, #12]
 800ad92:	2300      	movs	r3, #0
 800ad94:	6063      	str	r3, [r4, #4]
 800ad96:	6923      	ldr	r3, [r4, #16]
 800ad98:	6023      	str	r3, [r4, #0]
 800ad9a:	2308      	movs	r3, #8
 800ad9c:	89a2      	ldrh	r2, [r4, #12]
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	81a3      	strh	r3, [r4, #12]
 800ada2:	6923      	ldr	r3, [r4, #16]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d10b      	bne.n	800adc0 <__swsetup_r+0x88>
 800ada8:	21a0      	movs	r1, #160	; 0xa0
 800adaa:	2280      	movs	r2, #128	; 0x80
 800adac:	89a3      	ldrh	r3, [r4, #12]
 800adae:	0089      	lsls	r1, r1, #2
 800adb0:	0092      	lsls	r2, r2, #2
 800adb2:	400b      	ands	r3, r1
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d003      	beq.n	800adc0 <__swsetup_r+0x88>
 800adb8:	0021      	movs	r1, r4
 800adba:	0028      	movs	r0, r5
 800adbc:	f000 f906 	bl	800afcc <__smakebuf_r>
 800adc0:	220c      	movs	r2, #12
 800adc2:	5ea3      	ldrsh	r3, [r4, r2]
 800adc4:	2001      	movs	r0, #1
 800adc6:	001a      	movs	r2, r3
 800adc8:	b299      	uxth	r1, r3
 800adca:	4002      	ands	r2, r0
 800adcc:	4203      	tst	r3, r0
 800adce:	d00f      	beq.n	800adf0 <__swsetup_r+0xb8>
 800add0:	2200      	movs	r2, #0
 800add2:	60a2      	str	r2, [r4, #8]
 800add4:	6962      	ldr	r2, [r4, #20]
 800add6:	4252      	negs	r2, r2
 800add8:	61a2      	str	r2, [r4, #24]
 800adda:	2000      	movs	r0, #0
 800addc:	6922      	ldr	r2, [r4, #16]
 800adde:	4282      	cmp	r2, r0
 800ade0:	d1c4      	bne.n	800ad6c <__swsetup_r+0x34>
 800ade2:	0609      	lsls	r1, r1, #24
 800ade4:	d5c2      	bpl.n	800ad6c <__swsetup_r+0x34>
 800ade6:	2240      	movs	r2, #64	; 0x40
 800ade8:	4313      	orrs	r3, r2
 800adea:	81a3      	strh	r3, [r4, #12]
 800adec:	3801      	subs	r0, #1
 800adee:	e7bd      	b.n	800ad6c <__swsetup_r+0x34>
 800adf0:	0788      	lsls	r0, r1, #30
 800adf2:	d400      	bmi.n	800adf6 <__swsetup_r+0xbe>
 800adf4:	6962      	ldr	r2, [r4, #20]
 800adf6:	60a2      	str	r2, [r4, #8]
 800adf8:	e7ef      	b.n	800adda <__swsetup_r+0xa2>
 800adfa:	46c0      	nop			; (mov r8, r8)
 800adfc:	20000078 	.word	0x20000078

0800ae00 <memmove>:
 800ae00:	b510      	push	{r4, lr}
 800ae02:	4288      	cmp	r0, r1
 800ae04:	d902      	bls.n	800ae0c <memmove+0xc>
 800ae06:	188b      	adds	r3, r1, r2
 800ae08:	4298      	cmp	r0, r3
 800ae0a:	d303      	bcc.n	800ae14 <memmove+0x14>
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	e007      	b.n	800ae20 <memmove+0x20>
 800ae10:	5c8b      	ldrb	r3, [r1, r2]
 800ae12:	5483      	strb	r3, [r0, r2]
 800ae14:	3a01      	subs	r2, #1
 800ae16:	d2fb      	bcs.n	800ae10 <memmove+0x10>
 800ae18:	bd10      	pop	{r4, pc}
 800ae1a:	5ccc      	ldrb	r4, [r1, r3]
 800ae1c:	54c4      	strb	r4, [r0, r3]
 800ae1e:	3301      	adds	r3, #1
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d1fa      	bne.n	800ae1a <memmove+0x1a>
 800ae24:	e7f8      	b.n	800ae18 <memmove+0x18>
	...

0800ae28 <__assert_func>:
 800ae28:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ae2a:	0014      	movs	r4, r2
 800ae2c:	001a      	movs	r2, r3
 800ae2e:	4b09      	ldr	r3, [pc, #36]	; (800ae54 <__assert_func+0x2c>)
 800ae30:	0005      	movs	r5, r0
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	000e      	movs	r6, r1
 800ae36:	68d8      	ldr	r0, [r3, #12]
 800ae38:	4b07      	ldr	r3, [pc, #28]	; (800ae58 <__assert_func+0x30>)
 800ae3a:	2c00      	cmp	r4, #0
 800ae3c:	d101      	bne.n	800ae42 <__assert_func+0x1a>
 800ae3e:	4b07      	ldr	r3, [pc, #28]	; (800ae5c <__assert_func+0x34>)
 800ae40:	001c      	movs	r4, r3
 800ae42:	4907      	ldr	r1, [pc, #28]	; (800ae60 <__assert_func+0x38>)
 800ae44:	9301      	str	r3, [sp, #4]
 800ae46:	9402      	str	r4, [sp, #8]
 800ae48:	002b      	movs	r3, r5
 800ae4a:	9600      	str	r6, [sp, #0]
 800ae4c:	f000 f886 	bl	800af5c <fiprintf>
 800ae50:	f000 f91e 	bl	800b090 <abort>
 800ae54:	20000078 	.word	0x20000078
 800ae58:	0800dd67 	.word	0x0800dd67
 800ae5c:	0800b2bb 	.word	0x0800b2bb
 800ae60:	0800dd74 	.word	0x0800dd74

0800ae64 <_calloc_r>:
 800ae64:	b570      	push	{r4, r5, r6, lr}
 800ae66:	0c0b      	lsrs	r3, r1, #16
 800ae68:	0c15      	lsrs	r5, r2, #16
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d11e      	bne.n	800aeac <_calloc_r+0x48>
 800ae6e:	2d00      	cmp	r5, #0
 800ae70:	d10c      	bne.n	800ae8c <_calloc_r+0x28>
 800ae72:	b289      	uxth	r1, r1
 800ae74:	b294      	uxth	r4, r2
 800ae76:	434c      	muls	r4, r1
 800ae78:	0021      	movs	r1, r4
 800ae7a:	f7fd fa49 	bl	8008310 <_malloc_r>
 800ae7e:	1e05      	subs	r5, r0, #0
 800ae80:	d01b      	beq.n	800aeba <_calloc_r+0x56>
 800ae82:	0022      	movs	r2, r4
 800ae84:	2100      	movs	r1, #0
 800ae86:	f7fe f883 	bl	8008f90 <memset>
 800ae8a:	e016      	b.n	800aeba <_calloc_r+0x56>
 800ae8c:	1c2b      	adds	r3, r5, #0
 800ae8e:	1c0c      	adds	r4, r1, #0
 800ae90:	b289      	uxth	r1, r1
 800ae92:	b292      	uxth	r2, r2
 800ae94:	434a      	muls	r2, r1
 800ae96:	b2a1      	uxth	r1, r4
 800ae98:	b29c      	uxth	r4, r3
 800ae9a:	434c      	muls	r4, r1
 800ae9c:	0c13      	lsrs	r3, r2, #16
 800ae9e:	18e4      	adds	r4, r4, r3
 800aea0:	0c23      	lsrs	r3, r4, #16
 800aea2:	d107      	bne.n	800aeb4 <_calloc_r+0x50>
 800aea4:	0424      	lsls	r4, r4, #16
 800aea6:	b292      	uxth	r2, r2
 800aea8:	4314      	orrs	r4, r2
 800aeaa:	e7e5      	b.n	800ae78 <_calloc_r+0x14>
 800aeac:	2d00      	cmp	r5, #0
 800aeae:	d101      	bne.n	800aeb4 <_calloc_r+0x50>
 800aeb0:	1c14      	adds	r4, r2, #0
 800aeb2:	e7ed      	b.n	800ae90 <_calloc_r+0x2c>
 800aeb4:	230c      	movs	r3, #12
 800aeb6:	2500      	movs	r5, #0
 800aeb8:	6003      	str	r3, [r0, #0]
 800aeba:	0028      	movs	r0, r5
 800aebc:	bd70      	pop	{r4, r5, r6, pc}

0800aebe <__ascii_mbtowc>:
 800aebe:	b082      	sub	sp, #8
 800aec0:	2900      	cmp	r1, #0
 800aec2:	d100      	bne.n	800aec6 <__ascii_mbtowc+0x8>
 800aec4:	a901      	add	r1, sp, #4
 800aec6:	1e10      	subs	r0, r2, #0
 800aec8:	d006      	beq.n	800aed8 <__ascii_mbtowc+0x1a>
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d006      	beq.n	800aedc <__ascii_mbtowc+0x1e>
 800aece:	7813      	ldrb	r3, [r2, #0]
 800aed0:	600b      	str	r3, [r1, #0]
 800aed2:	7810      	ldrb	r0, [r2, #0]
 800aed4:	1e43      	subs	r3, r0, #1
 800aed6:	4198      	sbcs	r0, r3
 800aed8:	b002      	add	sp, #8
 800aeda:	4770      	bx	lr
 800aedc:	2002      	movs	r0, #2
 800aede:	4240      	negs	r0, r0
 800aee0:	e7fa      	b.n	800aed8 <__ascii_mbtowc+0x1a>

0800aee2 <_realloc_r>:
 800aee2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aee4:	0007      	movs	r7, r0
 800aee6:	000e      	movs	r6, r1
 800aee8:	0014      	movs	r4, r2
 800aeea:	2900      	cmp	r1, #0
 800aeec:	d105      	bne.n	800aefa <_realloc_r+0x18>
 800aeee:	0011      	movs	r1, r2
 800aef0:	f7fd fa0e 	bl	8008310 <_malloc_r>
 800aef4:	0005      	movs	r5, r0
 800aef6:	0028      	movs	r0, r5
 800aef8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aefa:	2a00      	cmp	r2, #0
 800aefc:	d103      	bne.n	800af06 <_realloc_r+0x24>
 800aefe:	f7fe ff99 	bl	8009e34 <_free_r>
 800af02:	0025      	movs	r5, r4
 800af04:	e7f7      	b.n	800aef6 <_realloc_r+0x14>
 800af06:	f000 f8ca 	bl	800b09e <_malloc_usable_size_r>
 800af0a:	9001      	str	r0, [sp, #4]
 800af0c:	4284      	cmp	r4, r0
 800af0e:	d803      	bhi.n	800af18 <_realloc_r+0x36>
 800af10:	0035      	movs	r5, r6
 800af12:	0843      	lsrs	r3, r0, #1
 800af14:	42a3      	cmp	r3, r4
 800af16:	d3ee      	bcc.n	800aef6 <_realloc_r+0x14>
 800af18:	0021      	movs	r1, r4
 800af1a:	0038      	movs	r0, r7
 800af1c:	f7fd f9f8 	bl	8008310 <_malloc_r>
 800af20:	1e05      	subs	r5, r0, #0
 800af22:	d0e8      	beq.n	800aef6 <_realloc_r+0x14>
 800af24:	9b01      	ldr	r3, [sp, #4]
 800af26:	0022      	movs	r2, r4
 800af28:	429c      	cmp	r4, r3
 800af2a:	d900      	bls.n	800af2e <_realloc_r+0x4c>
 800af2c:	001a      	movs	r2, r3
 800af2e:	0031      	movs	r1, r6
 800af30:	0028      	movs	r0, r5
 800af32:	f7fe f8d9 	bl	80090e8 <memcpy>
 800af36:	0031      	movs	r1, r6
 800af38:	0038      	movs	r0, r7
 800af3a:	f7fe ff7b 	bl	8009e34 <_free_r>
 800af3e:	e7da      	b.n	800aef6 <_realloc_r+0x14>

0800af40 <__ascii_wctomb>:
 800af40:	0003      	movs	r3, r0
 800af42:	1e08      	subs	r0, r1, #0
 800af44:	d005      	beq.n	800af52 <__ascii_wctomb+0x12>
 800af46:	2aff      	cmp	r2, #255	; 0xff
 800af48:	d904      	bls.n	800af54 <__ascii_wctomb+0x14>
 800af4a:	228a      	movs	r2, #138	; 0x8a
 800af4c:	2001      	movs	r0, #1
 800af4e:	601a      	str	r2, [r3, #0]
 800af50:	4240      	negs	r0, r0
 800af52:	4770      	bx	lr
 800af54:	2001      	movs	r0, #1
 800af56:	700a      	strb	r2, [r1, #0]
 800af58:	e7fb      	b.n	800af52 <__ascii_wctomb+0x12>
	...

0800af5c <fiprintf>:
 800af5c:	b40e      	push	{r1, r2, r3}
 800af5e:	b517      	push	{r0, r1, r2, r4, lr}
 800af60:	4c05      	ldr	r4, [pc, #20]	; (800af78 <fiprintf+0x1c>)
 800af62:	ab05      	add	r3, sp, #20
 800af64:	cb04      	ldmia	r3!, {r2}
 800af66:	0001      	movs	r1, r0
 800af68:	6820      	ldr	r0, [r4, #0]
 800af6a:	9301      	str	r3, [sp, #4]
 800af6c:	f7ff fcd0 	bl	800a910 <_vfiprintf_r>
 800af70:	bc1e      	pop	{r1, r2, r3, r4}
 800af72:	bc08      	pop	{r3}
 800af74:	b003      	add	sp, #12
 800af76:	4718      	bx	r3
 800af78:	20000078 	.word	0x20000078

0800af7c <__swhatbuf_r>:
 800af7c:	b570      	push	{r4, r5, r6, lr}
 800af7e:	000e      	movs	r6, r1
 800af80:	001d      	movs	r5, r3
 800af82:	230e      	movs	r3, #14
 800af84:	5ec9      	ldrsh	r1, [r1, r3]
 800af86:	0014      	movs	r4, r2
 800af88:	b096      	sub	sp, #88	; 0x58
 800af8a:	2900      	cmp	r1, #0
 800af8c:	da0c      	bge.n	800afa8 <__swhatbuf_r+0x2c>
 800af8e:	89b2      	ldrh	r2, [r6, #12]
 800af90:	2380      	movs	r3, #128	; 0x80
 800af92:	0011      	movs	r1, r2
 800af94:	4019      	ands	r1, r3
 800af96:	421a      	tst	r2, r3
 800af98:	d013      	beq.n	800afc2 <__swhatbuf_r+0x46>
 800af9a:	2100      	movs	r1, #0
 800af9c:	3b40      	subs	r3, #64	; 0x40
 800af9e:	2000      	movs	r0, #0
 800afa0:	6029      	str	r1, [r5, #0]
 800afa2:	6023      	str	r3, [r4, #0]
 800afa4:	b016      	add	sp, #88	; 0x58
 800afa6:	bd70      	pop	{r4, r5, r6, pc}
 800afa8:	466a      	mov	r2, sp
 800afaa:	f000 f84d 	bl	800b048 <_fstat_r>
 800afae:	2800      	cmp	r0, #0
 800afb0:	dbed      	blt.n	800af8e <__swhatbuf_r+0x12>
 800afb2:	23f0      	movs	r3, #240	; 0xf0
 800afb4:	9901      	ldr	r1, [sp, #4]
 800afb6:	021b      	lsls	r3, r3, #8
 800afb8:	4019      	ands	r1, r3
 800afba:	4b03      	ldr	r3, [pc, #12]	; (800afc8 <__swhatbuf_r+0x4c>)
 800afbc:	18c9      	adds	r1, r1, r3
 800afbe:	424b      	negs	r3, r1
 800afc0:	4159      	adcs	r1, r3
 800afc2:	2380      	movs	r3, #128	; 0x80
 800afc4:	00db      	lsls	r3, r3, #3
 800afc6:	e7ea      	b.n	800af9e <__swhatbuf_r+0x22>
 800afc8:	ffffe000 	.word	0xffffe000

0800afcc <__smakebuf_r>:
 800afcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afce:	2602      	movs	r6, #2
 800afd0:	898b      	ldrh	r3, [r1, #12]
 800afd2:	0005      	movs	r5, r0
 800afd4:	000c      	movs	r4, r1
 800afd6:	4233      	tst	r3, r6
 800afd8:	d006      	beq.n	800afe8 <__smakebuf_r+0x1c>
 800afda:	0023      	movs	r3, r4
 800afdc:	3347      	adds	r3, #71	; 0x47
 800afde:	6023      	str	r3, [r4, #0]
 800afe0:	6123      	str	r3, [r4, #16]
 800afe2:	2301      	movs	r3, #1
 800afe4:	6163      	str	r3, [r4, #20]
 800afe6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800afe8:	466a      	mov	r2, sp
 800afea:	ab01      	add	r3, sp, #4
 800afec:	f7ff ffc6 	bl	800af7c <__swhatbuf_r>
 800aff0:	9900      	ldr	r1, [sp, #0]
 800aff2:	0007      	movs	r7, r0
 800aff4:	0028      	movs	r0, r5
 800aff6:	f7fd f98b 	bl	8008310 <_malloc_r>
 800affa:	2800      	cmp	r0, #0
 800affc:	d108      	bne.n	800b010 <__smakebuf_r+0x44>
 800affe:	220c      	movs	r2, #12
 800b000:	5ea3      	ldrsh	r3, [r4, r2]
 800b002:	059a      	lsls	r2, r3, #22
 800b004:	d4ef      	bmi.n	800afe6 <__smakebuf_r+0x1a>
 800b006:	2203      	movs	r2, #3
 800b008:	4393      	bics	r3, r2
 800b00a:	431e      	orrs	r6, r3
 800b00c:	81a6      	strh	r6, [r4, #12]
 800b00e:	e7e4      	b.n	800afda <__smakebuf_r+0xe>
 800b010:	2380      	movs	r3, #128	; 0x80
 800b012:	89a2      	ldrh	r2, [r4, #12]
 800b014:	6020      	str	r0, [r4, #0]
 800b016:	4313      	orrs	r3, r2
 800b018:	81a3      	strh	r3, [r4, #12]
 800b01a:	9b00      	ldr	r3, [sp, #0]
 800b01c:	6120      	str	r0, [r4, #16]
 800b01e:	6163      	str	r3, [r4, #20]
 800b020:	9b01      	ldr	r3, [sp, #4]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d00c      	beq.n	800b040 <__smakebuf_r+0x74>
 800b026:	0028      	movs	r0, r5
 800b028:	230e      	movs	r3, #14
 800b02a:	5ee1      	ldrsh	r1, [r4, r3]
 800b02c:	f000 f81e 	bl	800b06c <_isatty_r>
 800b030:	2800      	cmp	r0, #0
 800b032:	d005      	beq.n	800b040 <__smakebuf_r+0x74>
 800b034:	2303      	movs	r3, #3
 800b036:	89a2      	ldrh	r2, [r4, #12]
 800b038:	439a      	bics	r2, r3
 800b03a:	3b02      	subs	r3, #2
 800b03c:	4313      	orrs	r3, r2
 800b03e:	81a3      	strh	r3, [r4, #12]
 800b040:	89a3      	ldrh	r3, [r4, #12]
 800b042:	433b      	orrs	r3, r7
 800b044:	81a3      	strh	r3, [r4, #12]
 800b046:	e7ce      	b.n	800afe6 <__smakebuf_r+0x1a>

0800b048 <_fstat_r>:
 800b048:	2300      	movs	r3, #0
 800b04a:	b570      	push	{r4, r5, r6, lr}
 800b04c:	4d06      	ldr	r5, [pc, #24]	; (800b068 <_fstat_r+0x20>)
 800b04e:	0004      	movs	r4, r0
 800b050:	0008      	movs	r0, r1
 800b052:	0011      	movs	r1, r2
 800b054:	602b      	str	r3, [r5, #0]
 800b056:	f7f8 f874 	bl	8003142 <_fstat>
 800b05a:	1c43      	adds	r3, r0, #1
 800b05c:	d103      	bne.n	800b066 <_fstat_r+0x1e>
 800b05e:	682b      	ldr	r3, [r5, #0]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d000      	beq.n	800b066 <_fstat_r+0x1e>
 800b064:	6023      	str	r3, [r4, #0]
 800b066:	bd70      	pop	{r4, r5, r6, pc}
 800b068:	2000073c 	.word	0x2000073c

0800b06c <_isatty_r>:
 800b06c:	2300      	movs	r3, #0
 800b06e:	b570      	push	{r4, r5, r6, lr}
 800b070:	4d06      	ldr	r5, [pc, #24]	; (800b08c <_isatty_r+0x20>)
 800b072:	0004      	movs	r4, r0
 800b074:	0008      	movs	r0, r1
 800b076:	602b      	str	r3, [r5, #0]
 800b078:	f7f8 f868 	bl	800314c <_isatty>
 800b07c:	1c43      	adds	r3, r0, #1
 800b07e:	d103      	bne.n	800b088 <_isatty_r+0x1c>
 800b080:	682b      	ldr	r3, [r5, #0]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d000      	beq.n	800b088 <_isatty_r+0x1c>
 800b086:	6023      	str	r3, [r4, #0]
 800b088:	bd70      	pop	{r4, r5, r6, pc}
 800b08a:	46c0      	nop			; (mov r8, r8)
 800b08c:	2000073c 	.word	0x2000073c

0800b090 <abort>:
 800b090:	2006      	movs	r0, #6
 800b092:	b510      	push	{r4, lr}
 800b094:	f000 f836 	bl	800b104 <raise>
 800b098:	2001      	movs	r0, #1
 800b09a:	f7f8 f82f 	bl	80030fc <_exit>

0800b09e <_malloc_usable_size_r>:
 800b09e:	1f0b      	subs	r3, r1, #4
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	1f18      	subs	r0, r3, #4
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	da01      	bge.n	800b0ac <_malloc_usable_size_r+0xe>
 800b0a8:	580b      	ldr	r3, [r1, r0]
 800b0aa:	18c0      	adds	r0, r0, r3
 800b0ac:	4770      	bx	lr

0800b0ae <_raise_r>:
 800b0ae:	b570      	push	{r4, r5, r6, lr}
 800b0b0:	0004      	movs	r4, r0
 800b0b2:	000d      	movs	r5, r1
 800b0b4:	291f      	cmp	r1, #31
 800b0b6:	d904      	bls.n	800b0c2 <_raise_r+0x14>
 800b0b8:	2316      	movs	r3, #22
 800b0ba:	6003      	str	r3, [r0, #0]
 800b0bc:	2001      	movs	r0, #1
 800b0be:	4240      	negs	r0, r0
 800b0c0:	bd70      	pop	{r4, r5, r6, pc}
 800b0c2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d004      	beq.n	800b0d2 <_raise_r+0x24>
 800b0c8:	008a      	lsls	r2, r1, #2
 800b0ca:	189b      	adds	r3, r3, r2
 800b0cc:	681a      	ldr	r2, [r3, #0]
 800b0ce:	2a00      	cmp	r2, #0
 800b0d0:	d108      	bne.n	800b0e4 <_raise_r+0x36>
 800b0d2:	0020      	movs	r0, r4
 800b0d4:	f000 f832 	bl	800b13c <_getpid_r>
 800b0d8:	002a      	movs	r2, r5
 800b0da:	0001      	movs	r1, r0
 800b0dc:	0020      	movs	r0, r4
 800b0de:	f000 f81b 	bl	800b118 <_kill_r>
 800b0e2:	e7ed      	b.n	800b0c0 <_raise_r+0x12>
 800b0e4:	2000      	movs	r0, #0
 800b0e6:	2a01      	cmp	r2, #1
 800b0e8:	d0ea      	beq.n	800b0c0 <_raise_r+0x12>
 800b0ea:	1c51      	adds	r1, r2, #1
 800b0ec:	d103      	bne.n	800b0f6 <_raise_r+0x48>
 800b0ee:	2316      	movs	r3, #22
 800b0f0:	3001      	adds	r0, #1
 800b0f2:	6023      	str	r3, [r4, #0]
 800b0f4:	e7e4      	b.n	800b0c0 <_raise_r+0x12>
 800b0f6:	2400      	movs	r4, #0
 800b0f8:	0028      	movs	r0, r5
 800b0fa:	601c      	str	r4, [r3, #0]
 800b0fc:	4790      	blx	r2
 800b0fe:	0020      	movs	r0, r4
 800b100:	e7de      	b.n	800b0c0 <_raise_r+0x12>
	...

0800b104 <raise>:
 800b104:	b510      	push	{r4, lr}
 800b106:	4b03      	ldr	r3, [pc, #12]	; (800b114 <raise+0x10>)
 800b108:	0001      	movs	r1, r0
 800b10a:	6818      	ldr	r0, [r3, #0]
 800b10c:	f7ff ffcf 	bl	800b0ae <_raise_r>
 800b110:	bd10      	pop	{r4, pc}
 800b112:	46c0      	nop			; (mov r8, r8)
 800b114:	20000078 	.word	0x20000078

0800b118 <_kill_r>:
 800b118:	2300      	movs	r3, #0
 800b11a:	b570      	push	{r4, r5, r6, lr}
 800b11c:	4d06      	ldr	r5, [pc, #24]	; (800b138 <_kill_r+0x20>)
 800b11e:	0004      	movs	r4, r0
 800b120:	0008      	movs	r0, r1
 800b122:	0011      	movs	r1, r2
 800b124:	602b      	str	r3, [r5, #0]
 800b126:	f7f7 ffe1 	bl	80030ec <_kill>
 800b12a:	1c43      	adds	r3, r0, #1
 800b12c:	d103      	bne.n	800b136 <_kill_r+0x1e>
 800b12e:	682b      	ldr	r3, [r5, #0]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d000      	beq.n	800b136 <_kill_r+0x1e>
 800b134:	6023      	str	r3, [r4, #0]
 800b136:	bd70      	pop	{r4, r5, r6, pc}
 800b138:	2000073c 	.word	0x2000073c

0800b13c <_getpid_r>:
 800b13c:	b510      	push	{r4, lr}
 800b13e:	f7f7 ffd3 	bl	80030e8 <_getpid>
 800b142:	bd10      	pop	{r4, pc}

0800b144 <_init>:
 800b144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b146:	46c0      	nop			; (mov r8, r8)
 800b148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b14a:	bc08      	pop	{r3}
 800b14c:	469e      	mov	lr, r3
 800b14e:	4770      	bx	lr

0800b150 <_fini>:
 800b150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b152:	46c0      	nop			; (mov r8, r8)
 800b154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b156:	bc08      	pop	{r3}
 800b158:	469e      	mov	lr, r3
 800b15a:	4770      	bx	lr
